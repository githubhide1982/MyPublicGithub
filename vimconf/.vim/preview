Received cookie: LAST_LANG=ja
Received cookie: COUNTRY=JPN%2C1.112.127.59
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

strftime> <microtime
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 11 May 2012

view this page in

[English             ] Change language
mktime

(PHP 4, PHP 5)

mktime — 日付を Unix のタイムスタンプとして取得する

説明

int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second =
date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date
("Y") [, int $is_dst = -1 ]]]]]]] )

与えられた引数に従って UNIX のタイムスタンプを返します。このタイムスタンプは、
Unix epoch(1970年1月1日00:00:00 GMT)から指定された時刻までの通算秒を表す長整数
です。

引数は右から順に省略することができます。省略された引数は、ローカルの日付と時刻
に従って、現在の値にセットされます。

注意

    注意:

    PHP 5.1 以降、引数なしでコールすると mktime() は E_STRICT notice を発行する
    ようになりました。かわりに time() 関数を使用しましょう。

パラメータ

hour

    month、day と year で決まる日付の 0 時から数えた「時」。負の値は、その日の
    0 時から前にさかのぼった時間を表します。 23 より大きい値は、その翌日以降の
    該当する時間を表します。

minute

    hour 時 0 分から数えた「分」。負の値は、その前の時刻を表します。 59 より大
    きい値は、その次の時間以降の該当する時間を表します。

second

    minute 分 0 秒から数えた「秒」。負の値は、その前の時刻を表します。 59 より
    大きい値は、その次の分以降の該当する時間を表します。

month

    前年末から数えた月数。1 から 12 までの場合は、カレンダーどおりのその年の「
    月」を表します。 (負の値を含めた) 1 より小さい値は、前年の月を逆順でたどり
    ます。つまり 0 なら 12 月、-1 なら 11 月になるということです。 12 より大き
    い値は、その翌年以降の該当する月を表します。

day

    前月末から数えた日数。1 から 28、29、30、31 (月によって異なる) までの場合は
    、その月の「日」を表します。 (負の値を含めた) 1 より小さい値は、前月の日を
    逆順でたどります。つまり 0 なら前月の末日、-1 ならそのさらに前日になるとい
    うことです。その月の日数より大きい値は、翌月以降の該当する日を表します。

year

    年。2 桁または 4 桁の値を指定可能で、 0-69 の間の値は 2000-2069 に、70-100
    は 1970-2000 にマップされます。今日最も一般的なシステム、すなわち time_t が
    32 ビットの符号付き整数であるシステムでは year として有効な範囲は 1901 から
    2038 の間です。しかし、PHP 5.1.0 より前のバージョンではこの範囲が 1970 から
    2038 に制限されているシステム (たとえば Windows) もありました。

is_dst

    このパラメータはサマータイム (DST) の時に1にセットされ、そうでない時に0、サ
    マータイムであるかどうかが不明である場合に-1 にセットされます。不明な場合、
    PHP はサマータイムかどうか推測しようとします。 PHP を実行しているシステムで
    DST が有効になっている、もしくは is_dst が 1 にセットされている場合、一部の
    時刻は有効になりません。もし DST が有効で例えば 2:00 の場合、2:00 から 3:00
    までの全ての時刻は無効になり、mktime() は不確定な値 (通常は負数) を返します
    。いくつかのシステム (例えば Solaris 8) は真夜中に DST を有効にしますので、
    DST が有効なときの 0:30 は前日の 23:30 と評価されます。

        注意:

        PHP 5.1.0 以降、このパラメータは廃止されました。その結果、新しいタイム
        ゾーン処理機能がかわりに使用されます。

返り値

mktime() は与えられた引数の Unix タイムスタンプを返します。引数が不正な場合、こ
の関数は FALSE を返します（PHP 5.1 より前のバージョンでは -1 を返していました）
。

エラー / 例外

すべての日付/時刻関数は、有効なタイムゾーンが設定されていない場合に E_NOTICE を
発生させます。また、システム設定のタイムゾーンあるいは環境変数 TZ を使用した場
合には E_STRICT あるいは E_WARNING を発生させます。 date_default_timezone_set()
も参照ください。

変更履歴

バージ                                   説明
 ョン
5.3.0  mktime() は、 is_dst パラメータを使用した場合に E_DEPRECATED をスローす
       るようになりました。
5.1.0  is_dst パラメータは廃止されました。エラー時には -1 ではなく FALSE を返す
       ようになりました。年月日がすべてゼロとすることが可能になりました。
5.1.0  引数なしでコールすると、mktime() は E_STRICT notice を発行するようになり
       ました。かわりに time() 関数を使用しましょう。
5.1.0  タイムゾーンがおかしい場合に E_STRICT や E_NOTICE が発生するようになりま
       した。

例

例1 mktime() の基本的な例

<?php
// デフォルトのタイムゾーンを設定します。PHP 5.1 以降で使用可能です
date_default_timezone_set('UTC');

// 出力: July 1, 2000 is on a Saturday
echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));

// 出力例: 2006-04-05T01:02:03+00:00
echo date('c', mktime(1, 2, 3, 4, 5, 2006));
?>

例2 mktime() の例

mktime() は入力日付の有効性を確認しており、範囲外の入力を自動的に修正して計算し
てくれるので便利です。例えば、以下の各行はいずれも文字列 "Jan-01-1998"を出力し
ます。

<?php
echo date("M-d-Y", mktime(0, 0, 0, 12, 32, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 13, 1, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 1998));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 98));
?>

例3 月の末日

指定した月の最後の日は次の月の -1 番目の日ではなく、"0" 番目の日として表すこと
が可能です。以下の例はともに文字列"The last day in Feb 2000 is: 29" を出力しま
す。

<?php
$lastday = mktime(0, 0, 0, 3, 0, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
$lastday = mktime(0, 0, 0, 4, -31, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
?>

注意

警告

PHP 5.1.0 より前のバージョンでは、負の値のタイムスタンプは Windows のどのバージ
ョンにおいてもサポートされていませんでした。したがって、年の有効範囲は 1970 年
から 2038 年の間のみに限定されていました。

参考

  • checkdate() - グレゴリオ暦の日付/時刻の妥当性を確認します
  • gmmktime() - GMT 日付から Unix タイムスタンプを取得する
  • date() - ローカルの日付/時刻を書式化する
  • time() - 現在の Unix タイムスタンプを返す



strftime> <microtime
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 11 May 2012
 
add a note add a note User Contributed Notes mktime
tothpeter at fbi dot hu 20-Mar-2012 01:52
using on mac with MAMP

$a=mktime(0,0,0,07,01,2012);
echo date('Y-m-d',$a); // 2012-07-01

$a=mktime(0,0,0,08,01,2012);
echo date('Y-m-d',$a); // 2011-12-01 WTF

$a=mktime(0,0,0,09,01,2012);
echo date('Y-m-d',$a); // 2011-12-01 WTF

$a=mktime(0,0,0,10,01,2012);
echo date('Y-m-d',$a); // 2012-10-01

$a=mktime(0,0,0,07,31,2012);
echo date('Y-m-d',$a); // 2012-07-31

WTF?
gustavo at ci dot eel dot usp dot br 24-Feb-2012 12:23
Number of the weeks in a determined month

<?php

$lastDay = date("d",mktime (0,0,0,9+1,0,$year));
 $firstWeekDay = @date("w", @mktime(0,0,0,9,1,2012));
 $weekNumber = ($lastDay == 30 && $firstWeekDay == 6 || $lastDay == 31 &&
$firstWeekDay >= 5) ? 6 : (($lastDay == "28" && $firstWeekDay == "0") ? 4 : 5);

?>
info at microweb dot lt 03-Nov-2010 07:42
Function to generate array of dates between two dates (date range array)

<?php
function dates_range($date1, $date2)
{
   if ($date1<$date2)
   {
       $dates_range[]=$date1;
       $date1=strtotime($date1);
       $date2=strtotime($date2);
       while ($date1!=$date2)
       {
           $date1=mktime(0, 0, 0, date("m", $date1), date("d", $date1)+1, date
("Y", $date1));
           $dates_range[]=date('Y-m-d', $date1);
       }
   }
   return $dates_range;
}

echo '<pre>';
print_r(dates_range('2009-12-25', '2010-01-05'));
echo '</pre>';
?>

[EDIT BY danbrown AT php DOT net: Contains a bugfix submitted by (carlosbuz2 AT
gmail DOT com) on 04-MAR-2011, with the following note: The first date in array
is incorrect.]
php at wirnhier dot de 02-Nov-2010 09:17
warning: mktime expects parameter 1 to be long

It could be a string that is given to mktime, so it has to be converted into an
int.

mktime((int)$h, (int)$m, (int)$s, (int)$m, (int)$d, (int)$y);
xr714 at yahoo dot com 07-Oct-2010 08:58
One of the many problems with Daylight Saving Time / Summer Time is the
ambiguity when a specified local time value can refer to two different actual
times!  This happens when the local time value is within the relapse range
caused by the clocks being set back to proper time.  (eg. if the DST/ST bias is
+1 hour, and DST/ST terminates at 02:00 local time, a local time value of 01:30
occurs twice in the same day!)

Because the mktime() function only returns one value, it silently chooses
whether to return the time-stamp for the first iteration or the second
iteration of a specified local time within this critical range.

To get both possible time-stamps for a local time, compatible with any system
locale, time zone, and applicable DST/ST rules, the following function can be
used:

<?php /*><!--*/
function LocalToUT($LocalYear, $LocalMonth, $LocalMonthDay, $LocalHour24,
$LocalMinute, $LocalSecond) {
/* Converts local date/time to Universal Time values.  Returns both
possible UT values when local time value is within relapse range
(due to Daylight Saving Time / Summer Time termination).
Notes:
    Conversion based on TZ and DST/ST rules used by mktime() function.
    UT time-stamps are number of UT seconds since midnight Jan 1, 1970 UTC.
    UT does not have leap seconds; a UT second is "stretched" by 2x duration
to maintain synchronization with UTC when a UTC leap second elapses.
Inputs:    All inputs are numeric; $LocalHour24 is in 24-hour format.
Returns: Array:
    'initial' = UT time-stamp of first occurrence of specified local date/time
    'relapse' = UT time-stamp of second occurrence, when local time relapses
upon DST/ST termination
*/
    $UTValue = mktime($LocalHour24, $LocalMinute, $LocalSecond, $LocalMonth,
$LocalMonthDay, $LocalYear);
    $ReturnData = array('initial' => $UTValue, 'relapse' => $UTValue);
    //Test for DST/ST transition since prev day
    $Bias = $UTValue - mktime($LocalHour24, $LocalMinute, $LocalSecond,
$LocalMonth, $LocalMonthDay - 1, $LocalYear) - 86400;    //(-) = DST/ST
commence, (+) = DST/ST terminate
    if ($Bias == 0) {    //No DST/ST transition detected since prev day
        //Test for DST/ST transition up to next day
        $Bias = mktime($LocalHour24, $LocalMinute, $LocalSecond, $LocalMonth,
$LocalMonthDay + 1, $LocalYear) - $UTValue - 86400;    //(-) = DST/ST commence,
(+) = DST/ST terminate
    }
    if ($Bias > 0) {    //DST/ST termination detected
        if (date('Z', $UTValue) !== date('Z', $UTValue + $Bias)) {    //Local
time occurred in relapse range; System assumed 1st iteration
            $ReturnData['relapse'] = $UTValue + $Bias;
        }
        if (date('Z', $UTValue - $Bias) !== date('Z', $UTValue)) {    //Local
time occurred in relapse range; System assumed 2nd iteration
            $ReturnData['initial'] = $UTValue - $Bias;
        }
        //Else local time is outside of relapse range
    }    //Else no DST/ST transition, or transition is commencement
    return $ReturnData;
}
/*--></?php */?>

Do not be confused by the start and end tags; The interleaved PHP-comment and
HTML-comment delimiters prevent PHP code containing ">" from appearing as
literal text when viewing or editing an HTML file with embedded PHP code.
enVide neFelibata 26-Sep-2010 06:34
I've had this query for an event organizer.

<?php
   $query = "SELECT MAX(dt_atfrom) FROM tb_date LIMIT 1";
   $raw_data = mysql_query($query);
   $maxdate = mysql_result($raw_data,0,0);
?>
It would fetch the 'bigger' date of all of those events.
The problem started when having events in the future.

I'll start to explain.
Imagine you're in '2010' and the biggest event date is '2011-06-05'.
$maxdate will return me the correct data '2011-06-05', yet since I was only
needing the year i passed this date through the following function:

<?php
   maxyear = date("Y", mktime($maxdate));
?>

mktime was returning me the actual year for every future event instead of the
future year.

I ended up doing the following:

<?php
   $maxyear = substr($maxdate,0,4);
?>

Probably there's a better solution...
tom at chegg dot com 31-Aug-2010 02:01
I was using the following to get a list of month names.

for ($i=1; $i<13; $i++) {
  echo date('F', mktime(0,0,0,$i) . ",";
}

Normally this outputs -
January,February,March,April,May,June,July,August,
September,October,November,December

However if today's date is the 31st you get instead:
January,March,March,May,May,July,July,August,October,
October,December,December

Why? Because Feb,Apr,June,Sept, and Nov don't have 31 days!

The fix, add the 5th parameter, don't let the day of month default to today's
date:

  echo date('F', mktime(0,0,0,$i,1) . ",";
zfowler at unomaha dot edu 16-Mar-2010 02:18
Proper way to convert Excel dates into PHP-friendly timestamps using mktime():

<?php
// The date 6/30/2009 is stored as 39994 in Excel
$days = 39994;

// But you must subtract 1 to get the correct timestamp
$ts = mktime(0,0,0,1,$days-1,1900);

// So, this would then match Excel's representation:
echo date("m/d/Y",$ts);
?>

Excel uses "number of days since Jan. 1, 1900" to store its dates.  It also
treats 1900 as a leap year when it wasn't, thus there is an extra day which
must be accounted for in PHP (and the rest of the world).  Subtracting 1 from
Excel's number will fix this problem.
contact at phpmember dot com 19-Jan-2010 04:45
How many days have  passed since the beginning of the year.... regardless of
what year it is...

<?php
//Carlos Galindo
//phpmember.com

$days = floor((time()-mktime(null,null,null,1,0,date("Y")))/86400);
           
echo "$days days have passed";

//Good Luck
?>
davix 06-Oct-2009 12:39
I couldn't find any correct date differentiate function anywhere so I wrote
this one which works correctly. It's fully resistant to all troubles with
different day count of the month or leap year.
Input must be two timestamps and output is associative array with year, month,
day, hour, minute, second items.
It can be used for exact age or similar issues.

<?php
function date_diff($d1, $d2){
/* compares two timestamps and returns array with differencies (year, month,
day, hour, minute, second)
*/
  //check higher timestamp and switch if neccessary
  if ($d1 < $d2){
    $temp = $d2;
    $d2 = $d1;
    $d1 = $temp;
  }
  else {
    $temp = $d1; //temp can be used for day count if required
  }
  $d1 = date_parse(date("Y-m-d H:i:s",$d1));
  $d2 = date_parse(date("Y-m-d H:i:s",$d2));
  //seconds
  if ($d1['second'] >= $d2['second']){
    $diff['second'] = $d1['second'] - $d2['second'];
  }
  else {
    $d1['minute']--;
    $diff['second'] = 60-$d2['second']+$d1['second'];
  }
  //minutes
  if ($d1['minute'] >= $d2['minute']){
    $diff['minute'] = $d1['minute'] - $d2['minute'];
  }
  else {
    $d1['hour']--;
    $diff['minute'] = 60-$d2['minute']+$d1['minute'];
  }
  //hours
  if ($d1['hour'] >= $d2['hour']){
    $diff['hour'] = $d1['hour'] - $d2['hour'];
  }
  else {
    $d1['day']--;
    $diff['hour'] = 24-$d2['hour']+$d1['hour'];
  }
  //days
  if ($d1['day'] >= $d2['day']){
    $diff['day'] = $d1['day'] - $d2['day'];
  }
  else {
    $d1['month']--;
    $diff['day'] = date("t",$temp)-$d2['day']+$d1['day'];
  }
  //months
  if ($d1['month'] >= $d2['month']){
    $diff['month'] = $d1['month'] - $d2['month'];
  }
  else {
    $d1['year']--;
    $diff['month'] = 12-$d2['month']+$d1['month'];
  }
  //years
  $diff['year'] = $d1['year'] - $d2['year'];
  return $diff;   
}

$born_date = mktime(6,30,0,7,24,2008);
$date_diff_array = date_diff($born_date, time());
print_r($date_diff_array);
?>
cebleo at n-trance dot net 08-Sep-2009 11:36
to ADD or SUBSTRACT times NOTE that if you dont specify the UTC zone your
result is the difference +- your server UTC delay.

if you are ina utc/GMT +1

<?php
$hours_diff = strtotime("20:00:00")-strtotime("19:00:00");
echo  date('h:i', $hours_diff)." Hours";
?>

it shows: 02:00 Hours

but if you use a default UTC time:

<?php
date_default_timezone_set('UTC');
$hours_diff = strtotime("20:00:00")-strtotime("19:00:00");
echo "<br>". date('h:i', $hours_diff);
?>

it shows: 01:00 Hours.
p2409 at hotmail dot com 02-Aug-2009 08:49
How to get the first and last dates of the last quarter - useful for things
like tax return dates etc.  by Justin

<?php
function getLastQuarter() {
    // Returns an array with a start and end date for the last quarter from
todays date
    // eg. If today is 23 Feb 2009, returns $x['start'] = 1 Oct 2008, $x[end] =
31 Dec 2008
    $year = date("Y",mktime());
    $month = date("m",mktime());
    // Formula to get a quarter in the year from a month
    $startmth = $month - 3 - (($month-1) % 3 );
    // Fix up Jan - Feb to get LAST year's quarter dates (Oct - Dec)
    if ($startmth == -2) {
        $startmth+=12;
        $year-=1;
    }
    $endmth = $startmth+2;
    $last_quarter['start'] = mktime(0,0,0,$startmth,1,$year);
    $last_quarter['end'] = mktime(0,0,0,$endmth,date("t",mktime
(0,0,0,$endmth,1,$year)),$year);
    return $last_quarter;   
}

// Example - print first and last dates of last quarter.
echo "First day of last quarter was : " . date("d-M-Y",$lastquarter['start']) .
"\n";
echo "Last day of last quarter was : " . date("d-M-Y",$lastquarter['end']) . "\
n";

// For 2 August 2009, returns:
//    First day of last quarter was : 01-Apr-2009
//    Last day of last quarter was : 30-Jun-2009
//
?>
lucianoiw at hotmail dot com 13-Mar-2009 05:48
Convert timestamp to time();

<?php
function wp_mktime($_timestamp = ''){
    if($_timestamp){
        $_split_datehour = explode(' ',$_timestamp);
        $_split_data = explode("-", $_split_datehour[0]);
        $_split_hour = explode(":", $_split_datehour[1]);

        return mktime ($_split_hour[0], $_split_hour[1], $_split_hour[2],
$_split_data[1], $_split_data[2], $_split_data[0]);
    }
}
?>

[NOTE BY danbrown AT php DOT net: See also (http://php.net/strtotime)]
admin at stipe dot info 16-Feb-2009 02:12
With combination of mktime and getDate and date() you can add hours / seconds /
days / months / years to ANY timestamp. Use strtotime() function to convert any
type of dates to timestamp

<?php
    public function addMonthToDate($timeStamp, $totalMonths=1){
        // You can add as many months as you want. mktime will accumulate to
the next year.
        $thePHPDate = getdate($timeStamp); // Covert to Array   
        $thePHPDate['mon'] = $thePHPDate['mon']+$totalMonths; // Add to Month 
 
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']); // Convert back to timestamp
        return $timeStamp;
    }
   
    public function addDayToDate($timeStamp, $totalDays=1){
        // You can add as many days as you want. mktime will accumulate to the
next month / year.
        $thePHPDate = getdate($timeStamp);
        $thePHPDate['mday'] = $thePHPDate['mday']+$totalDays;
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']);
        return $timeStamp;
    }

    public function addYearToDate($timeStamp, $totalYears=1){
        $thePHPDate = getdate($timeStamp);
        $thePHPDate['year'] = $thePHPDate['year']+$totalYears;
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']);
        return $timeStamp;
    }
?>
ronnie dot kurniawan at gmail dot com 16-Jan-2009 09:49
Add (and subtract) unixtime:

<?php
function utime_add($unixtime, $hr=0, $min=0, $sec=0, $mon=0, $day=0, $yr=0) {
  $dt = localtime($unixtime, true);
  $unixnewtime = mktime(
      $dt['tm_hour']+$hr, $dt['tm_min']+$min, $dt['tm_sec']+$sec,
      $dt['tm_mon']+1+$mon, $dt['tm_mday']+$day, $dt['tm_year']+1900+$yr);
  return $unixnewtime;
}
?>
electriic ink 17-Dec-2008 11:30
Days until Christmas:

<?php
     $time = mktime(0, 0, 0, 12, 25, 2008, 1) - time();

     $days = floor($time/86400);
     $hours = floor(($time-($days*86400))/3600);
     $mins = floor (($time-($days*86400)-($hours*3600))/60);
     $secs = floor ($time-($days*86400)-($hours*3600)-($mins*60));

     $tsecs = $time;
     $thours = round($time/3600);

    
     if ($tsecs <= 600) {

      echo '<html> <head> <title> ' . $tsecs . ' seconds left until 12am
Christmas Day </title> <meta http-equiv="refresh" content="1;url=""></head>
<body><span

style="font-size:10pt">Christmas day in ' . $days . ' days ' . $hours . ' hours
' .  $mins . ' mins ' . $secs . ' seconds!<br><br>(There are ' . $tsecs . '
seconds in

total)</span></body></html>';
   
     } else {

      echo '<html> <head> <title> ' . $thours . ' hours left until 12am
Christmas Day </title> <meta http-equiv="refresh" content="10;url=""></head>
<body><span

style="font-size:10pt">Christmas day in ' . $days . ' days ' . $hours . ' hours
' .  $mins . ' mins ' . $secs . ' seconds!<br><br>(There are ' . number_format
($thours)

. ' hours in total and ' . number_format($tsecs) . ' seconds in total)</span></
body></html>';

     }

?>
Alan 18-Nov-2008 07:52
Do remember that, counter-intuitively enough, the arguments for month and day
are inversed (or middle-endian). A common mistake for Europeans seems to be to
feed the date arguments in the expected order (big endian or little endian).

It's clear to see where this weird order comes from (even with the date being
big endian the order for all arguments would still be mixed - it's obviously
based on the American date format with the time "prefixed" to allow an easier
shorthand) and why this wasn't changed (passing the values in the wrong order
produces a valid, though unexpected, result in most cases), but it continues to
be a source of confusion for me whenever I come back to PHP from other
languages or libraries.
Anonymous 14-Nov-2008 08:34
<?php
//example of functions to know if a date/time value is in summer hour or in
winter hour

//====================
function getChgWinDate($dt){
 $y=substr($dt,0,4);
 for($i=31;$i>20;$i--){
  $ts=mktime(3,0,0,10,$i,$y);
  $dy=date('D',$ts);
  if($dy=='Sun') return($y.'/10/'.$i.' 03:00:00');
 }
}
//====================
function getChgSumDate($dt){
 $y=substr($dt,0,4);
 for($i=31;$i>20;$i--){
  $ts=mktime(2,0,0,10,$i,$y);
  $dy=date('D',$ts);
  if($dy=='Sun') return($y.'/03/'.$i.' 02:00:00');
 }
}
//====================
function isSummerDate($dt){
 $b1=getChgWinDate($dt);
 $b2=getChgSumDate($dt);
 if($dt>=$b2&&$dt<$b1) return(true);
 return(false);
}
//====================
function isWinterDate($dt){
 return(!isSummerDate($dt));
}

//====================
$dt = '2008/10/26 03:15:16';
if( isSummerDate($dt) ){
 echo $dt . " is summer hour in france";
}else{
 echo $dt . " is winter hour in france";
}
?>
thebloodyharry at gmail dot com 10-Nov-2008 06:04
here simple sample for timestamps.(using malaysia GMT 8)

$mkendtimep=mktime(date("H")+8, date("i"), date("s"), date("m"), date("d"),
date("Y"));

$todaydate=date("(d/m/y) H:i:s", $mkendtimep);
if (date("l")=="Monday") { $mday=Monday; } else
    if (date("l")=="Tuesday") { $mday=Tuesday; } else
    if (date("l")=="Wednesday") { $mday=Wednesday; } else
    if (date("l")=="Thursday") { $mday=Thursday; } else
    if (date("l")=="Friday") { $mday=Friday; } else
    if (date("l")=="Saturday") { $mday=Saturday; } else
    if (date("l")=="Sunday"){  $mday=Sunday; }

$realtime="$mday$todaydate (GMT +8)";

..hope it will help you out....
yan 10-Nov-2008 05:50
caculate days between two date

<?php
  // end date is 2008 Oct. 11 00:00:00
  $_endDate = mktime(0,0,0,11,10,2008);
  // begin date is 2007 May 31 13:26:26
  $_beginDate = mktime(13,26,26,05,31,2007);

  $timestamp_diff= $_endDate-$_beginDate +1 ;
  // how many days between those two date
  $days_diff = $timestamp_diff/86400;

?>
Maffu 29-Oct-2008 03:05
When calling mktime(), be sure that you use values without leading zeros.  The
date comes out wrong in the following example:

$endts = mktime(12, 00, 00, 12, 08, 2008, 0);

(note the 08 instead of just 8)

C's scanf() has a format specification where leading 0's can indicate an octal
value - perhaps this is related?
mark at markfiend dot com 15-Oct-2008 04:52
zola at zolaweb:

Your expression date('U', strtotime($mydate)) evaluates to strtotime($mydate).
Converting to a UNIX timestamp is what strtotime() does.
ionut dot bodea at eydos dot ro 02-Oct-2008 08:29
Here is what I use to calculate age. It took me 30 minutes to write and it's
quite accurate. What it has special is that it's calculating the number of days
a year has (float number), by testing if a year is a leap one or not. This
number is used to compute the age.

<?php
function get_age($date_start, $date_end) {
    $t_lived = get_timestamp($date_end) - get_timestamp($date_start);
    $seconds_one_year = get_days_per_year($date_start, $date_end) * 24 * 60 *
60;
    $age = array();
    $age['years_exact'] = $t_lived / $seconds_one_year;
    $age['years'] = floor($t_lived / $seconds_one_year);
    $seconds_remaining = $t_lived % $seconds_one_year;
    $age['days'] = round($seconds_remaining / (24 * 60 * 60));
    return $age;
}
function get_timestamp($date) {
    list($y, $m, $d) = explode('-', $date);
    return mktime(0, 0, 0, $m, $d, $y);
}
function get_days_per_year($date_start, $date_end) {
    list($y1) = explode('-', $date_start);
    list($y2) = explode('-', $date_end);
    $years_days = array();
    for($y = $y1; $y <= $y2; $y++) {
        $years_days[] = date('L', mktime(0, 0, 0, 1, 1, $y)) ? 366 : 365;
    }
    return round(array_sum($years_days) / count($years_days), 2);
}

$date_birth = '1979-10-12';
$date_now = date('Y-m-d');

$age = get_age($date_birth, $date_now);
echo '<pre>';
print_r($age);
echo '</pre>';
?>


It will display something like this:
Array
(
    [years_exact] => 28.972974329491
    [years] => 28
    [days] => 355
)
ooogla at hotmail dot com 01-Sep-2008 03:56
If you want to increment the day based on a variable when using a loop you can
use this when you submit a form

1. Establish a start date and end date in two different variables

2. Get the number of days between a date

$ndays = (strtotime($_POST['edate']) - strtotime($_POST['sdate'])) / (60 * 60 *
24);

Then here is the string you slip in your loop

$nextday  = date('Y-m-d', mktime(0, 0, 0, date("m", strtotime($_POST['sdate']))
  , date("d", strtotime($_POST['sdate']))+ $count, date("Y", strtotime($_POST
['sdate']))));

$count is incremented by the loop.
thomas_corthals at hotmail dot com 13-May-2008 07:34
It seems mktime() doesn't return negative timestamps on Linux systems with a
version of glibc <= 2.3.3.
joseph dot andrew dot hughes at gmail dot com 30-Jan-2008 12:58
Just a small thing to think about if you are only trying to pull the month out
using mktime and date.  Make sure you place a 1 into day field.  Otherwise you
will get incorrect dates when a month is followed by a month with less days
when the day of the current month is higher then the max day of the month you
are trying to find.. (Such as today being Jan 30th and trying to find the month
Feb.)
PHPcoder at freemail dot ig3 dot net 06-Sep-2007 10:58
The maximum possible date accepted by mktime() and gmmktime() is dependent on
the current location time zone.

For example, the 32-bit timestamp overflow occurs at
2038-01-19T03:14:08+0000Z.  But if you're in a UTC -0500 time zone (such as EST
in North America), the maximum accepted time before overflow (for older PHP
versions on Windows) is 2038-01-18T22:14:07-0500Z, regardless of whether you're
passing it to mktime() or gmmktime().
Jonathan Woodard 31-Aug-2007 07:31
NB: one 'gotcha' with the implementation of mktime()'s parameters:

<?php
for( $i = 1 ;  $i <= 12 ; $i++ )
{
    echo "Month '$i' is: " . date( "F" , mktime( 0 , 0 , 0 , $i ) ) . "\n";
}
?>
Will output:
Month '1' is: January
Month '2' is: March
Month '3' is: March
Month '4' is: May
Month '5' is: May
Month '6' is: July
Month '7' is: July
Month '8' is: August
Month '9' is: October
Month '10' is: October
Month '11' is: December
Month '12' is: December
on the 31st day of every month.

Why? Because the 5th parameter "day" defaults to "right now," which will not
work reliably for days after the 28th.

To make sure this doesn't happen, specify the first day of the month:
<?php
mktime( 0 , 0 , 0 , $i , 1 )
?>
rlz 16-Jul-2007 09:52
Finding out the number of days in a given month and year, accounting for leap
years when February has more than 28 days.

<?php
function days_in_month($year, $month) {
    return( date( "t", mktime( 0, 0, 0, $month, 1, $year) ) );
}
?>

Hope it helps a soul out there.
mike at mike-griffiths dot co dot uk 11-Jul-2007 06:04
It may be useful to note that no E_WARNINGS or E_NOTICES are give if you
specify a date <1901 or >2038 on systems where time_t is a 32bit signed
integer.

If a date is specified outside of the allowed range you may get some unexpected
results as no timestamp will be returned.
rga at merchantpal dot com 31-Mar-2007 08:46
You cannot simply subtract or add month VARs using mktime to obtain previous or
next months as suggested in previous user comments (at least not with a DD > 28
anyway).

If the date is 03-31-2007, the following yeilds March as a previous month. Not
what you wanted.

<?php
$dateMinusOneMonth = mktime(0, 0, 0, (3-1), 31,  2007 );
$lastmonth = date("n | F", $dateMinusOneMonth);
echo $lastmonth;    //---> 3 | March
?>

mktime correctly gives you back the 3rd of March if you subtract 1 month from
March 31 (there are only 28 days in Feb 07).

If you are just looking to do month and year arithmetic using mktime, you can
use general days like 1 or 28 to do stuff like this:

<?php
$d_daysinmonth = date('t', mktime(0,0,0,$myMonth,1,$myYear));     // how many
days in month
$d_year = date('Y', mktime(0,0,0,$myMonth,1,$myYear));        // year
$d_isleapyear = date('L', mktime(0,0,0,$myMonth,1,$myYear));    // is YYYY a
leapyear?

$d_firstdow = date('w', mktime(0,0,0,$myMonth,'1',$myYear));     // FIRST falls
on what day of week (0-6)
$d_firstname = date('l', mktime(0,0,0,$myMonth,'1',$myYear));     // FIRST
falls on what day of week Full Name

$d_month = date('n', mktime(0,0,0,$myMonth,28,$myYear));         // month of
year (1-12)
$d_monthname = date('F', mktime(0,0,0,$myMonth,28,$myYear));         // Month
Long name (July)
$d_month_previous = date('n', mktime(0,0,0,($myMonth-1),28,$myYear));         /
/ PREVIOUS month of year (1-12)
$d_monthname_previous = date('F', mktime(0,0,0,($myMonth-1),28,$myYear));     /
/ PREVIOUS Month Long name (July)
$d_month_next = date('n', mktime(0,0,0,($myMonth+1),28,$myYear));         //
NEXT month of year (1-12)
$d_monthname_next = date('F', mktime(0,0,0,($myMonth+1),28,$myYear));         /
/ NEXT Month Long name (July)
$d_year_previous = date('Y', mktime(0,0,0,$myMonth,28,($myYear-1)));        //
PREVIOUS year
$d_year_next = date('Y', mktime(0,0,0,$myMonth,28,($myYear+1)));        // NEXT
year

$d_weeksleft = (52 - $d_weekofyear);                     // how many weeks left
in year
$d_daysinyear = $d_isleapyear ? 366 : 365;                // set correct days
in year for leap years
$d_daysleft = ($d_daysinyear - $d_dayofyear);                // how many days
left in year
?>
Stephen 08-Jan-2007 02:43
There are several warnings here about using mktime() to determine a date
difference because of daylight savings time. However, nobody seems to have
mentioned the other obvious problem, which is leap years.

Leap years mean that any effort to use mktime() and time() to determine the age
(positive or negative) of some timestamp in years will be flawed. There are
some years that are 366 days long, therefore you cannot say that there is a set
number of seconds per year.

Timestamps are good for determining *real* time, which is not the same thing as
*human calendar* time. The Gregorian calendar is only an approximation of real
time, which is tweaked with daylight savings time and leap years to make it
conform more to humans' expectations of how time should or ought to work.
Timestamps are not tweaked and therefore are the only authoritative way of
recording in computers a proper order of succession of events, but they cannot
be integrated with a Gregorian system unless you take both leap years and DST
into account. Otherwise, you may get the wrong number of years when you are
approaching a value of exactly X years.

As for PHP, you could still use timestamps as a way of determining age if you
took into account not only DST but also whether or not each year is a leap year
and adjusted your calculations accordingly. However, this could become messy
and inefficient.

There is an alternative approach to calculating days given the day, month and
year of the dates to be compared. Compare the years first, and then compare the
month and day - if the month and day have already passed (or, if you like, if
they match the current month and day), then add 1 to the total for the years.

This solution works because it stays within the Gregorian system and doesn't
venture into the world of timestamps.

There is also the issue of leap seconds, but this will only arise if you
literally need to get the *exact* age in seconds. In that case, of course, you
would also need to verify that your timestamps are exactly correct and are not
delayed by script processing time, plus you would need to determine whether
your system conforms to UTC, etc. I expect this will hardly be an issue for
anybody using PHP, however if you are interested there is an article on this
issue on Wikipedia:

http://en.wikipedia.org/wiki/Leap_second
jsebfranck 07-Nov-2006 04:42
There are several notes for mktime which use the number 86400 to differentiate
two days. However this technique may pose a problem in case there is a day
where the hour change between the two dates to compare.

Consequently, if you want the timestamp difference between the day where the
hour change and the next day, it will not be equals to 86400 but either 82800
in case its the winter change of hour day or 90000 for the summer change of
hour day.

For example in 2006 :

<?php
echo mktime(0,0,0,10,29,2006) - mktime(0,0,0,10,30,2006); // -90 000
?>
carlo dot tafuro at poste dot it 08-May-2006 04:40
Negative timestamps give problem also using linux as guest operating system
inside WMvare with Windows host operating system.
colin dot horne at gmail dot com 30-Mar-2005 10:48
If the month is greater than 12, it goes into the next year. If it is less than
1, it goes into the previous year. Generally, it behaves as you'd expect it to
:-)

Examples:

<?php

// January 1, 2005
print date ("F j, Y", mktime (0,0,0,13,1,2004));

// December 1, 2003
print date ("F j, Y", mktime (0,0,0,0,1,2004));

// February 1, 2005
print date ("F j, Y", mktime (0,0,0,14,1,2004));

// November 1, 2003
print date ("F j, Y", mktime (0,0,0,-1,1,2004));

?>
Romain Sam 25-Mar-2005 07:50
Under Windows, mktime goes until 2038-01-19 (03:14:07 ...)
praas at NOSPAM dot ision dot nl 01-Feb-2004 12:44
Consider skipping months with mktime().

$nextmonth = date("M",mktime(0,0,0,date("n")+1,date("j"),date("Y")));

On any day in Januari you expect to get Feb, right?
But on January 30th you'll get Mar. It will try Feb 30th, which doesn't exist,
and skips another month. Therefore in this case present a day value that will
certainly be legal in any month, like day "1".

This will give you next month on any day of the year:
$nextmonth = date("M",mktime(0,0,0,date("n")+1,1,date("Y")));
iain at seatofthepants dot net 08-Dec-2003 07:49
In the above example it should ne boted that if you try to calculate the
command at midnight on the 28/04/2004 you will get an erroneous response. This
has been driving me to distraction.

$myTime = mktime( 0, 0, 0, 3, 28, 2004);

Solution I found was to create the time at 3am well after the 2am daylight
savings problem, viz:

$myTime = mktime( 3, 0, 0, 3, 28, 2004);

Not sure if this is documented anywhere.
trahma 20-Nov-2003 12:06
I think it is important to note that the timestamp returned is based upon the
number of seconds from the epoch GMT, and then modified by the time zone
settings on the server.

Thus...

mktime(0,0,0,1,1,1970) will not always return 0.  For example with the US
eastern time zone (GMT-5) will return 18000 (5 hours past the epoch) and the
same function with the time zone set to the US pacific time zone (GMT-8) will
return 28800 (8 hours past the epoch).

In an instance where you want time zone independence, you should use the
function gmmktime()
laurie at oneuponedown dot com 18-Nov-2003 08:42
With regard to Example 1 and using mktime to correct out-of-range input.

It should be noted that mktime will implement day light saving amends. Consider
the following:

<?php
print(date("d/m/Y H:i:s",mktime(0,0,0,3,(27 + 1),2004)));
?>
OUTPUT "28/03/2004 02:00:00"

<?php
print(date("d/m/Y H:i:s",(mktime(0,0,0,3,27,2004) + (((1 * 24) * 60) * 60))));
?>
OUTPUT "28/03/2004 00:00:00"

Dependent on your requirements this may or may be desirable
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun May 13 19:21:06 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列内の部分文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れる位置を探します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    指定すると、文字列内での検索開始位置がその位置になります。 strrpos() や
    strripos() と異なり、負の数は指定できません。

返り値

needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) から
の相対位置で返します。文字列の開始位置は 0 であり、1 ではないことに注意しましょ
う。

needle が見つからない場合は FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strstr() - 文字列が最初に現れる位置を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • substr() - 文字列の一部分を返す
  • preg_match() - 正規表現によるマッチングを行う



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012
 
add a note add a note User Contributed Notes strpos
mtroy dot student at gmail dot com 25-Apr-2012 04:46
when you want to know how much of substring occurrences, you'll use
"substr_count".
But, retrieve their positions, will be harder.
So, you can do it by starting with the last occurrence :

function strpos_r($haystack, $needle)
{
    if(strlen($needle) > strlen($haystack))
        trigger_error(sprintf("%s: length of argument 2 must be <= argument 1",
__FUNCTION__), E_USER_WARNING);

    $seeks = array();
    while($seek = strrpos($haystack, $needle))
    {
        array_push($seeks, $seek);
        $haystack = substr($haystack, 0, $seek);
    }
    return $seeks;
}

it will return an array of all occurrences a the substring in the string

Example :

$test = "this is a test for testing a test function... blah blah";
var_dump(strpos_r($test, "test"));

// output

array(3) {
  [0]=>
  int(29)
  [1]=>
  int(19)
  [2]=>
  int(10)
}

Paul-antoine
Malézieux.
martijn at martijnfrazer dot nl 25-Feb-2012 03:58
This is a function I wrote to find all occurrences of a string, using strpos
recursively.

<?php
function strpos_recursive($haystack, $needle, $offset = 0, &$results = array())
{               
    $offset = strpos($haystack, $needle, $offset);
    if($offset === false) {
        return $results;           
    } else {
        $results[] = $offset;
        return strpos_recursive($haystack, $needle, ($offset + 1), $results);
    }
}
?>

This is how you use it:

<?php
$string = 'This is some string';
$search = 'a';
$found = strpos_recursive($string, $search);

if($found) {
    foreach($found as $pos) {
        echo 'Found "'.$search.'" in string "'.$string.'" at position <b>
'.$pos.'</b><br />';
    }   
} else {
    echo '"'.$search.'" not found in "'.$string.'"';
}
?>
Logan Baron 02-Feb-2012 02:31
After looking at the strposa function posted earlier, I noticed that if one of
the needles tested false when being checked in its own strpos, the function
would always return false. So, I re-wrote it to return the lowest index of the
first occurring match.

private function strposa($haystack, $needles=array(), $offset=0)
{
        $chr = array();
        foreach($needles as $needle)
        {
                $res = strpos($haystack, $needle, $offset);
                if ($res !== false) $chr[$needle] = $res;
        }
        if(empty($chr)) return false;
        return min($chr);
}

Now, it simply doesn't add that needle's strpos value if it's false. The check
that already existed will be useful here, if nothing got added to the array
there were no matches, so return false. However this time, it will return
something other than 0 (false) if there was a match but also a non-match in the
array of needles.
rjeggens at ijskoud dot org 24-Jan-2012 07:38
I lost an hour before I noticed that strpos only returns FALSE as a boolean,
never TRUE.. This means that

strpos() !== false

is a different beast then:

strpos() === true

since the latter will never be true. After I found out, The warning in the
documentation made a lot more sense.
gjh42 - simonokewode at hotmail dot com 07-Nov-2011 07:59
A pair of functions to replace every nth occurrence of a string with another
string, starting at any position in the haystack. The first works on a string
and the second works on a single-level array of strings, treating it as a
single string for replacement purposes (any needles split over two array
elements are ignored).

Can be used for formatting dynamically-generated HTML output without touching
the original generator: e.g. add a newLine class tag to every third item in a
floated list, starting with the fourth item.
 
<?php
/* String Replace at Intervals   by Glenn Herbert (gjh42)    2010-12-17
 */
 
//(basic locator by someone else - name unknown)
//strnposr() - Find the position of nth needle in haystack.
function strnposr($haystack, $needle, $occurrence, $pos = 0) {
    return ($occurrence<2)?strpos($haystack, $needle, $pos):strnposr
($haystack,$needle,$occurrence-1,strpos($haystack, $needle, $pos) + 1);
}

//gjh42
//replace every nth occurrence of $needle with $repl, starting from any
position
function str_replace_int($needle, $repl, $haystack, $interval, $first=1, $pos=
0) {
  if ($pos >= strlen($haystack) or substr_count($haystack, $needle, $pos) <
$first) return $haystack;
  $firstpos = strnposr($haystack, $needle, $first, $pos);
  $nl = strlen($needle);
  $qty = floor(substr_count($haystack, $needle, $firstpos + 1)/$interval);
  do { //in reverse order
    $nextpos = strnposr($haystack, $needle, ($qty * $interval) + 1, $firstpos);
    $qty--;
    $haystack = substr_replace($haystack, $repl, $nextpos, $nl);
  } while ($nextpos > $firstpos);
  return $haystack;
}
  //$needle = string to find
  //$repl = string to replace needle
  //$haystack = string to do replacing in
  //$interval = number of needles in loop
  //$first=1 = first occurrence of needle to replace (defaults to first)
  //$pos=0 = position in haystack string to start from (defaults to first)
 
//replace every nth occurrence of $needle with $repl, starting from any
position, in a single-level array
function arr_replace_int($needle, $repl, $arr, $interval, $first=1, $pos=0,
$glue='|+|') {
  if (!is_array($arr))  return $arr;
  foreach($arr as $key=>$value){
    if (is_array($arr[$key])) return $arr;
  }
  $haystack = implode($glue, $arr);
  $haystack = str_replace_int($needle, $repl, $haystack, $interval, $first,
$pos);
  $tarr = explode($glue, $haystack);
  $i = 0;
  foreach($arr as $key=>$value){
    $arr[$key] = $tarr[$i];
    $i++;
  }
  return $arr;
}
?>
If $arr is not an array, or a multilevel array, it is returned unchanged.
Mark Oates 25-Oct-2011 08:36
When using GLOB_BRACE to find files on a local computer, note that including
the drive lettername within the braces may cause the behavior to not work as
expected:

<?php

$location = "{c:/foo/*.txt,c:/foo/bar/*.txt}"; // < will NOT work

$location = "c:{/foo/*.txt,/foo/bar/*.txt}"; // < works

$location = "c:/{foo/*.txt,foo/bar/*.txt}"; // < works

$location = "{/foo/*.txt,/foo/bar/*.txt}"; // < works

print_r(glob($location, GLOB_BRACE));

?>
jim at terrys dot net 29-Sep-2011 11:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 08:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 04:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 02:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 02:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 03:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 05:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 04:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 07:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 02:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 02:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 09:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 30-Sep-2009 08:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 01:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 09:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 01:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 11:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 06:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 12:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 09:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 11:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 27-Dec-2008 04:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 17-Nov-2008 05:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 22-Oct-2008 06:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 27-Sep-2008 11:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 11:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 12:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 03:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 06:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 01-Apr-2008 04:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 03:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 04:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 01:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 02:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 08:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 05:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 09:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 12:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 02:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 10:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 26-Sep-2006 07:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 07:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 06:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 02:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 05:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 06:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 20-Jan-2005 06:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 09:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 03:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 10:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 03:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 09:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 09-Mar-2004 05:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 10:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 09:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Apr 28 06:22:37 2012 UTC
Received cookie: COUNTRY=JPN%2C111.191.164.247
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列内の部分文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れる位置を探します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    指定すると、文字列内での検索開始位置がその位置になります。 strrpos() や
    strripos() と異なり、負の数は指定できません。

返り値

needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) から
の相対位置で返します。文字列の開始位置は 0 であり、1 ではないことに注意しましょ
う。

needle が見つからない場合は FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strstr() - 文字列が最初に現れる位置を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • substr() - 文字列の一部分を返す
  • preg_match() - 正規表現によるマッチングを行う



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012
 
add a note add a note User Contributed Notes strpos
mtroy dot student at gmail dot com 25-Apr-2012 04:46
when you want to know how much of substring occurrences, you'll use
"substr_count".
But, retrieve their positions, will be harder.
So, you can do it by starting with the last occurrence :

function strpos_r($haystack, $needle)
{
    if(strlen($needle) > strlen($haystack))
        trigger_error(sprintf("%s: length of argument 2 must be <= argument 1",
__FUNCTION__), E_USER_WARNING);

    $seeks = array();
    while($seek = strrpos($haystack, $needle))
    {
        array_push($seeks, $seek);
        $haystack = substr($haystack, 0, $seek);
    }
    return $seeks;
}

it will return an array of all occurrences a the substring in the string

Example :

$test = "this is a test for testing a test function... blah blah";
var_dump(strpos_r($test, "test"));

// output

array(3) {
  [0]=>
  int(29)
  [1]=>
  int(19)
  [2]=>
  int(10)
}

Paul-antoine
Malézieux.
martijn at martijnfrazer dot nl 25-Feb-2012 03:58
This is a function I wrote to find all occurrences of a string, using strpos
recursively.

<?php
function strpos_recursive($haystack, $needle, $offset = 0, &$results = array())
{               
    $offset = strpos($haystack, $needle, $offset);
    if($offset === false) {
        return $results;           
    } else {
        $results[] = $offset;
        return strpos_recursive($haystack, $needle, ($offset + 1), $results);
    }
}
?>

This is how you use it:

<?php
$string = 'This is some string';
$search = 'a';
$found = strpos_recursive($string, $search);

if($found) {
    foreach($found as $pos) {
        echo 'Found "'.$search.'" in string "'.$string.'" at position <b>
'.$pos.'</b><br />';
    }   
} else {
    echo '"'.$search.'" not found in "'.$string.'"';
}
?>
Logan Baron 02-Feb-2012 02:31
After looking at the strposa function posted earlier, I noticed that if one of
the needles tested false when being checked in its own strpos, the function
would always return false. So, I re-wrote it to return the lowest index of the
first occurring match.

private function strposa($haystack, $needles=array(), $offset=0)
{
        $chr = array();
        foreach($needles as $needle)
        {
                $res = strpos($haystack, $needle, $offset);
                if ($res !== false) $chr[$needle] = $res;
        }
        if(empty($chr)) return false;
        return min($chr);
}

Now, it simply doesn't add that needle's strpos value if it's false. The check
that already existed will be useful here, if nothing got added to the array
there were no matches, so return false. However this time, it will return
something other than 0 (false) if there was a match but also a non-match in the
array of needles.
rjeggens at ijskoud dot org 24-Jan-2012 07:38
I lost an hour before I noticed that strpos only returns FALSE as a boolean,
never TRUE.. This means that

strpos() !== false

is a different beast then:

strpos() === true

since the latter will never be true. After I found out, The warning in the
documentation made a lot more sense.
gjh42 - simonokewode at hotmail dot com 07-Nov-2011 07:59
A pair of functions to replace every nth occurrence of a string with another
string, starting at any position in the haystack. The first works on a string
and the second works on a single-level array of strings, treating it as a
single string for replacement purposes (any needles split over two array
elements are ignored).

Can be used for formatting dynamically-generated HTML output without touching
the original generator: e.g. add a newLine class tag to every third item in a
floated list, starting with the fourth item.
 
<?php
/* String Replace at Intervals   by Glenn Herbert (gjh42)    2010-12-17
 */
 
//(basic locator by someone else - name unknown)
//strnposr() - Find the position of nth needle in haystack.
function strnposr($haystack, $needle, $occurrence, $pos = 0) {
    return ($occurrence<2)?strpos($haystack, $needle, $pos):strnposr
($haystack,$needle,$occurrence-1,strpos($haystack, $needle, $pos) + 1);
}

//gjh42
//replace every nth occurrence of $needle with $repl, starting from any
position
function str_replace_int($needle, $repl, $haystack, $interval, $first=1, $pos=
0) {
  if ($pos >= strlen($haystack) or substr_count($haystack, $needle, $pos) <
$first) return $haystack;
  $firstpos = strnposr($haystack, $needle, $first, $pos);
  $nl = strlen($needle);
  $qty = floor(substr_count($haystack, $needle, $firstpos + 1)/$interval);
  do { //in reverse order
    $nextpos = strnposr($haystack, $needle, ($qty * $interval) + 1, $firstpos);
    $qty--;
    $haystack = substr_replace($haystack, $repl, $nextpos, $nl);
  } while ($nextpos > $firstpos);
  return $haystack;
}
  //$needle = string to find
  //$repl = string to replace needle
  //$haystack = string to do replacing in
  //$interval = number of needles in loop
  //$first=1 = first occurrence of needle to replace (defaults to first)
  //$pos=0 = position in haystack string to start from (defaults to first)
 
//replace every nth occurrence of $needle with $repl, starting from any
position, in a single-level array
function arr_replace_int($needle, $repl, $arr, $interval, $first=1, $pos=0,
$glue='|+|') {
  if (!is_array($arr))  return $arr;
  foreach($arr as $key=>$value){
    if (is_array($arr[$key])) return $arr;
  }
  $haystack = implode($glue, $arr);
  $haystack = str_replace_int($needle, $repl, $haystack, $interval, $first,
$pos);
  $tarr = explode($glue, $haystack);
  $i = 0;
  foreach($arr as $key=>$value){
    $arr[$key] = $tarr[$i];
    $i++;
  }
  return $arr;
}
?>
If $arr is not an array, or a multilevel array, it is returned unchanged.
Mark Oates 25-Oct-2011 08:36
When using GLOB_BRACE to find files on a local computer, note that including
the drive lettername within the braces may cause the behavior to not work as
expected:

<?php

$location = "{c:/foo/*.txt,c:/foo/bar/*.txt}"; // < will NOT work

$location = "c:{/foo/*.txt,/foo/bar/*.txt}"; // < works

$location = "c:/{foo/*.txt,foo/bar/*.txt}"; // < works

$location = "{/foo/*.txt,/foo/bar/*.txt}"; // < works

print_r(glob($location, GLOB_BRACE));

?>
jim at terrys dot net 29-Sep-2011 11:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 08:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 04:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 02:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 02:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 03:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 05:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 04:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 07:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 02:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 02:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 09:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 30-Sep-2009 08:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 01:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 09:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 01:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 11:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 06:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 12:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 09:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 11:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 27-Dec-2008 04:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 17-Nov-2008 05:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 22-Oct-2008 06:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 27-Sep-2008 11:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 11:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 12:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 03:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 06:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 01-Apr-2008 04:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 03:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 04:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 01:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 02:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 08:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 05:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 09:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 12:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 02:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 10:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 26-Sep-2006 07:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 07:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 06:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 02:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 05:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 06:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 20-Jan-2005 06:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 09:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 03:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 10:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 03:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 09:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 09-Mar-2004 05:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 10:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 09:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Apr 28 06:22:37 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_unshift> <array_uintersect
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012

view this page in

[English             ] Change language
array_unique

(PHP 4 >= 4.0.1, PHP 5)

array_unique — 配列から重複した値を削除する

説明

array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )

array を入力とし、値に重複のない新規配列を返します。

キーは保持されることに注意してください。 array_unique() はまず文字列として値を
ソートし、各値の最初のキーを保持し、2回目以降の全てのキーを無視します。これは、
ソート前の array で最初の関連する値のキーが保持されるという意味ではありません。

    注意: (string) $elem1 === (string) $elem2 の場合のみ二つの要素は等しいとみ
    なされます。言い換えると、文字列表現が同じ場合となります。最初の要素が使用
    されます。

パラメータ

array

    入力の配列。

sort_flags

    オプションの 2 番目のパラメータ sort_flags にこれらの値を使用して、ソートの
    挙動を変更します。

    ソート形式のフラグは次のとおりです。
      □ SORT_REGULAR - 通常の比較 (型変換をしない) を行います
      □ SORT_NUMERIC - 数値として比較します
      □ SORT_STRING - 文字列として比較します
      □ SORT_LOCALE_STRING - 現在のロケールにもとづいて文字列として比較します。

返り値

処理済の配列を返します。

変更履歴

バージ                                   説明
 ョン
5.2.10 sort_flags のデフォルト値を SORT_STRING に戻しました。
       オプションの sort_flags が追加され、デフォルトは SORT_REGULAR となりまし
5.2.9  た。5.2.9 より前のバージョンでは、この関数は内部的に SORT_STRING による
       ソートを行っていました。

例

例1 array_unique() の例

<?php
$input = array("a" => "green", "red", "b" => "green", "blue", "red");
$result = array_unique($input);
print_r($result);
?>

上の例の出力は以下となります。

Array
(
    [a] => green
    [0] => red
    [1] => blue
)

例2 array_unique() と型

<?php
$input = array(4, "4", "3", 4, 3, "3");
$result = array_unique($input);
var_dump($result);
?>

上の例の出力は以下となります。

array(2) {
  [0] => int(4)
  [2] => string(1) "3"
}

参考

  • array_count_values() - 配列の値の数を数える

注意

    注意: array_unique() は、多次元配列での使用を想定したものではないことに注意
    しましょう。



array_unshift> <array_uintersect
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012
 
add a note add a note User Contributed Notes array_unique
sashasimkin at gmail dot com 25-Apr-2012 01:26
My object unique function:

<?php
function object_unique( $obj ){
    $objArray = (array) $obj;

    $objArray = array_intersect_assoc( array_unique( $objArray ), $objArray );

    foreach( $obj as $n => $f ) {
        if( !array_key_exists( $n, $objArray ) ) unset( $obj->$n );
    }

    return $obj;
}
?>

And these code:

<?php
class Test{
    public $pr0 = 'string';
    public $pr1 = 'string1';
    public $pr2 = 'string';
    public $pr3 = 'string2';
}

$obj = new Test;

var_dump( object_unique( $obj ) );
?>

returns:
object(Test)[1]
  public 'pr0' => string 'string' (length=6)
  public 'pr1' => string 'string1' (length=7)
  public 'pr3' => string 'string2' (length=7)
a dot goergens at web dot de 01-Mar-2012 05:49
Hi Guys
I got a multidimensional array coming from a database and automatically wanted
to push that into a mysql database with all the data and also if possible with
realations if the array gets nested. I get the data by a Game via API
(ReferenceOutput:
http://wiki.eve-id.net/APIv2_Char_KillLog_XML)
. I am using the Pheal lib which can be found here to access the api and which
works fine. https://github.com/ppetermann/pheal

What i want to have is a complete Array2MYSQL  insert and create so the data
when it comes from the api is always stored in correct manner 

Anybody can help me?

here are my two functions I tried to use

Rawdata : from the Lib ->http://www.sendspace.com/file/r2cekj
Rawdata  from my Array -> http://www.sendspace.com/file/zg1a32

$table= "corpkills";
$tcounter = "1"  -> in my example
  function array2mysql($array,$table,$tcounter)
 {
  $values = array();
  $fields = array();
  $wert = array();
  $tcounter = $tcounter+1;
      foreach($array as $field =>$value)
      {
              if(is_array($value))
              {
              $fields[] = "`" . $field . "`";
              $values[] = "'" . $value . "'";
              $wert = array2mysql($value,$table,$tcounter);

              }

      $fields[] = "`" . $field . "`";
      $values[] = "'" . $value . "'";
      }

      $field_list = join(',', $fields);
      $value_list = join(', ', $values);
      $query = $wert . "INSERT INTO `" . $table . $tcounter. "` (" .
$field_list . ") VALUES (" . $value_list . ");";
      return $query ;
 }

  function array2mysql_create($array,$table,$tcounter)
 {
  $values = array();
  $fields = array();
  $wert = array();
  $tcounter= $tcounter+ 1;
      foreach($array as $field =>$value)
      {
              if(is_array($value))
              {
              $fields[] = "`" . $field . "`varchar (255) NOT NULL";
              $wert = array2mysql_create($value,$table,$tcounter);
              }
              else
              {
              $fields[] = "`" . $field . "`varchar (255) NOT NULL";

              }

      }
      $field_list = join(',', $fields);
      $value_list = join(', ', $values);

      $query = $wert .    "CREATE TABLE `" . $table . $tcounter. "` (id INT NOT
NULL AUTO_INCREMENT,
PRIMARY KEY(id)," . $field_list . ");";

      return $query ;
 }
gma (at) qoob (dot) gr 12-Nov-2011 10:07
Lets say that you want to capture unique values from multidimensional arrays
and flatten them in 0 depth.

i.e.
<?php
$tmp = array( 'a' => array( 1,2,3,4 ), 'b' => array( 'c' => array( 4,5,6,7 ) )
);
?>

will return with array_flat( $tmp ) --> array( 1,2,3,4,5,6,7 );

I hope that the function will help someone

<?php
/**
 * @params      : $a            array           the recursion array
 *              : $s            array           storage array
 *              : $l            integer         the depth level
 *
 */
if( !function_exists( 'array_flat' ) )
{
    function array_flat( $a, $s = array( ), $l = 0 )
    {
        # check if this is an array
        if( !is_array( $a ) )                           return $s;
       
        # go through the array values
        foreach( $a as $k => $v )
        {
            # check if the contained values are arrays
            if( !is_array( $v ) )
            {
                # store the value
                $s[ ]       = $v;
               
                # move to the next node
                continue;
               
            }
           
            # increment depth level
            $l++;
           
            # replace the content of stored values
            $s              = array_flat( $v, $s, $l );
           
            # decrement depth level
            $l--;
           
        }
       
        # get only unique values
        if( $l == 0 ) $s = array_values( array_unique( $s ) );
       
        # return stored values
        return $s;
       
    } # end of function array_flat( ...
   
}
?>
Friendly Code 01-Aug-2011 03:48
I required a function that removed a specific duplicate entry from an array and
ignoring all others so came up with this:

<?php
function specified_array_unique($array, $value)
{
    $count = 0;
   
    foreach($array as $array_key => $array_value)
    {
        if ( ($count > 0) && ($array_value == $value) )
        {
            unset($array[$array_key]);
        }
       
        if ($array_value == $value) $count++;
    }
   
    return array_filter($array);
}
?>
0cool.f 23-May-2011 03:54
Hope this can help...

<?php
function array_unique_key_group($array) {
    if(!is_array($array))
        return false;

    $temp = array_unique($array);
    foreach($array as $key => $val) {
        $i = array_search($val,$temp);
        if(!empty($i) && $key != $i) {
            $temp[$i.','.$key] = $temp[$i];
            unset($temp[$i]);
        }
    }
    return $temp;
}
?>

this function return an array that is unique, but preserve every key for the
element...
sorry for bad english I'm italian...

$array['asd'] = 'value';
$array['lol'] = 'value';
$array['foo'] = 'val';
$array['bar'] = 'val';

var_dump(array_unique_key_group($array));
// will be output
array(2) { ["asd,lol"]=> string(5) "value" ["foo,bar"]=> string(3) "val" }
mykelscappin at gmail dot com 30-Mar-2011 05:18
I made an array_unique function to handle deep arrays:

<?php
    function array_unique_deep($array) {
        $values=array();
        //ideally there would be some is_array() testing for $array here...
        foreach ($array as $part) {
            if (is_array($part)) $values=array_merge($values,array_unique_deep
($part));
            else $values[]=$part;
        }
        return array_unique($values);
    }
   
    $test=array(123,456,array(789,123,array(456),789),array(123));
    print_r(array_unique_deep($test));
   
?>

outputs

Array
(
    [0] => 123
    [1] => 456
    [2] => 789
)
simon 11-Oct-2010 05:01
if you want to close the gaps into the keys after using array_unique() you can
use array_values() afterwards. Example:

<?php
a = array("one", "two", "two", "three")
a = array_unique(a);
/* will lead to:
a[0] = "one"
a[1] = "two"
a[3] = "three"
*/
a = array_values(a);
/* Now we've got:
a[0] = "one"
a[1] = "two"
a[2] = "three"
*/
?>
michiel ed thalent nl 18-Jun-2010 05:04
If you use SORT_NUMERIC on this kind of filtering it will be significantly
faster.
However the array_flip method still is twice as fast.
Anonymous 16-Jun-2010 05:46
It's often faster to use a foreache and array_keys than array_unique:

    <?php

    $max = 1000000;
    $arr = range(1,$max,3);
    $arr2 = range(1,$max,2);
    $arr = array_merge($arr,$arr2);

    $time = -microtime(true);
    $res1 = array_unique($arr);
    $time += microtime(true);
    echo "deduped to ".count($res1)." in ".$time;
    // deduped to 666667 in 32.300781965256

    $time = -microtime(true);
    $res2 = array();
    foreach($arr as $key=>$val) {   
        $res2[$val] = true;
    }
    $res2 = array_keys($res2);
    $time += microtime(true);
    echo "<br />deduped to ".count($res2)." in ".$time;
    // deduped to 666667 in 0.84372591972351

    ?>
regeda at inbox dot ru 12-Apr-2010 08:11
recursive array unique for multiarrays

<?php
function super_unique($array)
{
  $result = array_map("unserialize", array_unique(array_map("serialize",
$array)));

  foreach ($result as $key => $value)
  {
    if ( is_array($value) )
    {
      $result[$key] = super_unique($value);
    }
  }

  return $result;
}
?>
brendel at krumedia dot de 24-Feb-2010 11:47
Prior to 5.2.9 you may create a list of unique objects this way:

<?php
for (; ; ) {
  // ...
  $uniqueObjectList[spl_object_hash($myObject)] = $myObject;
}
?>
amri [ at t] dhstudio dot eu 18-Dec-2009 02:36
I searched how to show only the duplicate elements from array, but failed.
Here is my solution:

<?php
function arrayDuplicate($array)
{
return array_unique(array_diff_assoc($array1,array_unique($array1)));
};
?>

Example:
<?php
$arr1 = array('foo', 'bar', 'xyzzy', '&', 'xyzzy',
'baz', 'bat', '|', 'xyzzy', 'plugh',
'xyzzy', 'foobar', '|', 'plonk', 'xyzzy',
'apples', '&', 'xyzzy', 'oranges', 'xyzzy',
'pears','foobar');

$result=arrayDuplicate($arr1);
print_r($result);exit;
?>

Output:

Array
(
[4] => xyzzy
[12] => |
[16] => &
[21] => foobar
)
Youssef Omar 16-Dec-2009 11:09
This is how to merge 2 comma separated lists with unique value only.

<?php
  $list1 = "4444, 5555, 6666";
  $list2 = "4444, 5555, 7777";

  // combine both lists with unique values only
  $list3 = implode("," , array_unique(array_merge(explode(",",$list1),explode
(",", $list2))));

  echo $list3;
?>

The result is: 4444,5555,6666,7777
macnimble at gmail dot com 08-Sep-2009 08:24
I'm not sure why you'd use any kind of loop to get the duplicates in an array.
Here's a handy little function which does exactly that using some of PHP's
other array_* functions.

<?php
function array_not_unique( $a = array() )
{
  return array_diff_key( $a , array_unique( $a ) );
}
?>

Some arrays for testing:

<?php
$person = array();
$person[1] = "person_1";
$person[2] = "person_2";
$person[3] = "person_3";
$person[4] = "person_4";
$person[5] = "person_5";
$person[6] = "person_2"; # DUPE
$person[7] = "person_4"; # DUPE
$person[8] = "person_4"; # DUPE
echo '<pre>',print_r(array_not_unique($person),1),'</pre>';
$person = array();
$person[] = 1;
$person[] = 2;
$person[] = 3;
$person[] = 4;
$person[] = 5;
$person[] = 2; # DUPE
$person[] = 4; # DUPE
$person[] = 4; # DUPE
echo '<pre>',print_r(array_not_unique($person),1),'</pre>';
?>

Output:
Array
(
    [6] => person_2
    [7] => person_4
    [8] => person_4
)

Array
(
    [5] => 2
    [6] => 4
    [7] => 4
)

Hope it helps.
--Bill
steve at visual77 dot com 26-May-2009 04:41
One way to use array_unique() to handle the multidimensional array issue is to
use an md5 hash of the serialized array as the key. I've seen some solutions
listed here that stored the serialized string, but that requires
unserialization, and moving data back and forth between two states for little
reason is just a bad idea. Instead, you could try this method:

<?php
$values = array();

foreach($data as $d) {
    $values[md5(serialize($d))] = $d;
}

sort($values);
?>

This will serialize and hash the value, and store the value with the hash as
they key. This will ensure that each piece is only stored once, as the second
attempt to store will just overwrite the first attempt with identical data.

The sort() at the end is a bit unnecessary, but I had to use it on my project,
because the function I was passing the array to couldn't handle keys that
weren't valid XML node names (and some md5 hash strings will start with
numbers, which is invalid for XML).
dirk dot avery a t gmail 30-Apr-2009 08:45
Although array_unique is not intended to work with multi-dimensional arrays, it
does on 5.2.9.  However, it does not for 5.2.5.  Beware.
Ultimater at gmail dot com 20-Apr-2009 06:26
Let's say you have
<?php
$v=array("blue","blue","blue","blue");
if($v[0]==$v[1] && $v[1]==$v[2] && $v[2]==$v[3])
echo "Y"; else echo "N";//Y
?>

It works but the if-statement gets a bit messy if the number of array elements
gets massive.
I find it is easier to use array_unique like so:
<?php
$v=array("blue","blue","blue","blue");
echo sizeof(array_unique($v))==1?"Y":"N";//Y
?>
inithello at gmail dot com 11-Mar-2009 11:47
I noticed there was no way to tell array_unique() to ignore certain duplicated
keys, so I wrote the following. I imagine there's half a dozen more efficient
ways to do this, but here goes:

<?php
$array = array('foo', 'bar', 'xyzzy', '&', 'xyzzy',
               'baz', 'bat', '|', 'xyzzy', 'plugh',
               'xyzzy', 'foobar', '|', 'plonk', 'xyzzy',
               'apples', '&', 'xyzzy', 'oranges', 'xyzzy',
               'pears');

$ignore_values = array('|', '&');

print_r(make_unique($array, $ignore_values));

function make_unique($array, $ignore)
{
    while($values = each($array))
    {
        if(!in_array($values[1], $ignore))
        {
            $dupes = array_keys($array, $values[1]);
            unset($dupes[0]);
            foreach($dupes as $rmv)
            {
                unset($array[$rmv]);
            }           
        }
    }
    return $array;
}
?>
OUTPUT:
Array
(
    [0] => foo
    [1] => bar
    [2] => xyzzy
    [3] => &
    [5] => baz
    [6] => bat
    [7] => |
    [9] => plugh
    [11] => foobar
    [12] => |
    [13] => plonk
    [15] => apples
    [16] => &
    [18] => oranges
    [20] => pears
)
serg dot podtynnyi at gmail dot com 06-Feb-2009 11:21
//Remove duplicates from a text files and dump result in one file for example:
emails list, links list etc

<?php

$data1 = file("data1.txt");
$data2 = file("data2.txt");

file_put_contents('unique.txt', implode('', array_unique(array_merge
($data1,$data2))));
?>
jusvalceanu - SPAM at SPAM - yahoo dot com 06-Nov-2008 02:23
so .... my problem was multidimensional sort.

<?php
      $new = array();
      $exclude = array("");
      for ($i = 0; $i<=count($attribs)-1; $i++) {
         if (!in_array(trim($attribs[$i]["price"]) ,$exclude)) { $new[] =
$attribs[$i]; $exclude[] = trim($attribs[$i]["price"]); }
      }

?>

Array $attribs is an array contaning arrays. Each array in the $attrib array
consists in multiple fields (ex: name, lenght, price, etc.) to be more simpler
in speech think that $attrib is the array resulted by a search sql query done
by a visitator on your online shoopping website ... (so ... each array in the
$attrib is a product :P) if you want to sort only the uniq results use the
above or use this:

<?php
 
   /* Our Array of products */
   $attribs[] = array(
                           "name"         => "Test Product 1",
                           "length"     => "42 cm",
                           "weight"     => "0,5 kg",
                           "price"     => "10 $",
                           "stock"     => "100",
                        );

   $attribs[] = array(
                           "name"         => "Test Product 2",
                           "length"     => "42 cm",
                           "weight"     => "1,5 kg",
                           "price"     => "10 $",
                           "stock"     => "200",
                        );

    /* The nice stuff */

      $new = array();
      $exclude = array("");
      for ($i = 0; $i<=count($attribs)-1; $i++) {
         if (!in_array(trim($attribs[$i]["price"]) ,$exclude)) { $new[] =
$attribs[$i]; $exclude[] = trim($attribs[$i]["price"]); }
      }
     
      print_r($new); // $new is our sorted array

?>

Have fun tweaking this ;)) i know you will ;))

From Romania With Love
florian at box dot net 08-Oct-2008 01:29
I came across one limitation of array_unique: it doesn't work properly if you
have arrays inside your main array.

The reason is that to compare two values, the function tests if (string)
$value1 == (string) $value2. So if $value1 and $value2 are both arrays, the
function will evaluate the test to 'Array' == 'Array', and decide that the
$values are repeated even if the arrays are different.

So a work around is to find a better conversion of an array to a string, which
can be done with json:

<?php
print "define an array with repeated scalar '1' and repeated 'array(1)':";
$a_not_unique = array(
    'a' => 1,
    'b' => 1,
    'c' => 2,
    'd' => array(1),
    'e' => array(1),
    'f' => array(2),
);
print_r($a_not_unique);

print "try to use simply array_unique, which will not work since it exludes
'array(2)':";
$a_unique_wrong = array_unique($a_not_unique);
print_r($a_unique_wrong);

print "convert to json before applying array_unique, and convert back to array,
which will successfully keep 'array(2)':";
$a_unique_right = $a_not_unique;
array_walk($a_unique_right, create_function('&$value,$key', '$value =
json_encode($value);'));
$a_unique_right = array_unique($a_unique_right);
array_walk($a_unique_right, create_function('&$value,$key', '$value =
json_decode($value, true);'));
print_r($a_unique_right);
?>

Results:
define an array with repeated scalar '1' and repeated 'array(1)':
Array
(
    [a] => 1
    [b] => 1
    [c] => 2
    [d] => Array
        (
            [0] => 1
        )

    [e] => Array
        (
            [0] => 1
        )

    [f] => Array
        (
            [0] => 2
        )
)

try to use simply array_unique, which will not work since it exludes 'array(2)
':
Array
(
    [a] => 1
    [c] => 2
    [d] => Array
        (
            [0] => 1
        )
)

convert to json before applying array_unique, and convert back to array, which
will successfully keep 'array(2)':
Array
(
    [a] => 1
    [c] => 2
    [d] => Array
        (
            [0] => 1
        )

    [f] => Array
        (
            [0] => 2
        )
)
quecoder at gmail 25-Aug-2008 10:30
another method to get unique values is :

<?php
$alpha=array('a','b','c','a','b','d','e','f','f');

$alpha= array_keys(array_count_values($alpha));

print_r($alpha);
?>

Output:
Array ( [0] => a [1] => b [2] => c [3] => d [4] => e [5] => f )
soapergem at gmail dot com 14-Aug-2008 02:39
Here's another solution for returning an array that only includes repeated
values. There is one given below but it only works on numerically indexed
arrays; this one is more comprehensive since I used the foreach iterator. Also,
this one preserves keys--in that the returned result contains a distinct list
of repeats (storing only the first instance it encounters of each duplicate
value).

<?php

function array_repeated($array)
{
    if ( !is_array($array) ) {
        return false;
    }
   
    $duplicates = array();
    foreach ( $array as $key => $val ) {
        end($array);
        $k = key($array);
        $v = current($array);
       
        while ( $k !== $key ) {
            if ( $v === $val ) {
                $duplicates[$key] = $v;
                                break;
            }
           
            $v = prev($array);
            $k = key($array);
        }
    }
   
    return $duplicates;
}

?>
Dorphalsig 28-Jul-2008 09:47
I had a problem with array_unique and multidimensional arrays ... Maybe there's
a better way to do this, but this will work for any dimensional arrays.

<?php
function arrayUnique($myArray)
{
    if(!is_array($myArray))
           return $myArray;

    foreach ($myArray as &$myvalue){
        $myvalue=serialize($myvalue);
    }

    $myArray=array_unique($myArray);

    foreach ($myArray as &$myvalue){
        $myvalue=unserialize($myvalue);
    }

    return $myArray;

}
?>
ali at zkurd dot org 19-Jun-2008 01:41
a lot of people create functions just to fix a notice error about an undefined
index and removes blank array value.

why not using foreach instead of the for loop?

example:
<?php
foreach ($arrayname as $key => $value) {
    //do what you want with $value withaout index stress
}
?>
PHP Expert 14-Apr-2008 05:34
case insensitive for PHP v4.x and up.

<?php

function in_iarray($str, $a){
foreach($a as $v){
if(strcasecmp($str, $v)==0){return true;}
}
return false;
}

function array_iunique($a){
$n = array();
foreach($a as $k=>$v){
if(!in_iarray($v, $n)){$n[$k]=$v;}
}
return $n;
}

$input = array("aAa","bBb","cCc","AaA","ccC","ccc","CCC","bBB","AAA","XXX");
$result = array_iunique($input);
print_r($result);

/*
Array
(
    [0] => aAa
    [1] => bBb
    [2] => cCc
    [9] => XXX
)
*/
?>
Ray dot Paseur at SometimesUsesGmail dot com 01-Mar-2008 07:46
I needed to identify email addresses in a data table that were replicated, so I
wrote the array_not_unique() function:

<?php

function array_not_unique($raw_array) {
    $dupes = array();
    natcasesort($raw_array);
    reset ($raw_array);

    $old_key    = NULL;
    $old_value    = NULL;
    foreach ($raw_array as $key => $value) {
        if ($value === NULL) { continue; }
        if ($old_value == $value) {
            $dupes[$old_key]    = $old_value;
            $dupes[$key]        = $value;
        }
        $old_value    = $value;
        $old_key    = $key;
    }
return $dupes;
}

$raw_array     = array();
$raw_array[1]    = 'abc@xyz.com';
$raw_array[2]    = 'def@xyz.com';
$raw_array[3]    = 'ghi@xyz.com';
$raw_array[4]    = 'abc@xyz.com'; // Duplicate

$common_stuff    = array_not_unique($raw_array);
var_dump($common_stuff);
?>
php_array_unique [at] peterwarnock.com 19-Dec-2007 11:20
To clarify the note above Example #1, the function appears to cast the elements
to strings for comparison and then return the type of the first unique element
encountered. 

<?php
$input = array(0, 2, "2", 3, "9", 9);
$result = array_unique($input);
var_dump($result);
?>

array(4) {
  [0]=>
  int(0)
  [1]=>
  int(2)
  [3]=>
  int(3)
  [4]=>
  string(1) "9"
}
mnbayazit 28-Oct-2007 02:18
case insensitive

<?php
function array_iunique($array) {
    return array_intersect_key($array,array_unique(
                 array_map(strtolower,$array)));
}
?>
xjazey at hotmail dot com 11-Sep-2007 11:50
This is a solution to remove duplicate values from an array

<?php

$array[0] = "Yellow";
$array[1] = "Green";
$array[2] = "Yellow";
$array[3] = "Blue";
$array[4] = "Yellow";

$array = array_keys(array_flip($array));

//$array will output Yellow Green Blue

?>
tsikano at attglobal dot net 21-Aug-2007 04:20
Suggestion for being able to use array_unique on array of arrays/objects:

<?php
foreach ($arrayOfArrays as $key=>$value) {
  $arrayOfArrays[$key] = "'" . serialize($value) . "'";
}
$arrayOfArrays = array_unique($arrayOfArrays);
foreach ($arrayOfArrays as $key=>$value) {
  $arrayOfArrays[$key] = unserialize(trim($value, "'"));
}
?>
webmaster at jukkis dot net 30-Jul-2007 04:08
Another way to 'unique column' an array, in this case an array of objects:
Keep the desired unique column values in a static array inside the callback
function for array_filter.

Example:
<?php
/* example object */
class myObj {
  public $id;
  public $value;
  function __construct( $id, $value ) {
    $this->id = $id;
    $this->value = $value;
  }
}

/* callback function */
function uniquecol( $obj ) {
  static $idlist = array();

  if ( in_array( $obj->id, $idlist ) )
    return false;

  $idlist[] = $obj->id;
  return true;   
}

/* a couple of arrays with second array having an element with same id as the
first */
$list  = array( new myObj( 1, 1  ), new myObj( 2, 100 ) );
$list2 = array( new myObj( 1, 10 ), new myObj( 3, 100 ) );
$list3 = array_merge( $list, $list2 );

$unique = array_filter( $list3, 'uniquecol' );
print_r( $list3 );
print_r( $unique );

?>

In addition, use array_merge( $unique ) to reindex.
arr1 01-Nov-2006 08:59
Just to note that array_unique, treats null values as none unique values. So if
your using array_unique to detect duplicate values it will also detect multiple
null values.
Ome_Henk 27-Oct-2006 12:16
For people looking at the flip flip method for getting unique values in a
simple array. This is the absolute fastest method:

<?php
$unique = array_keys(array_flip($array));
?>

It's marginally faster as:
<?php
$unique = array_merge(array_flip(array_flip($array)));
?>

And it's marginally slower as:
<?php
$unique array_flip(array_flip($array)); // leaves gaps
?>

It's still about twice as fast or fast as array_unique.

This tested on several different machines with 100000 random arrays. All
machines used a version of PHP5.
geuis dot teses at gmail dot com 09-Oct-2006 10:27
Here's the shortest line of code I could find/create to remove all duplicate
entries from an array and then reindex the keys.

<?php

// Fruits, vegetables, and other food:
$var = array('apple','banana','carrot','cat','dog','egg','eggplant','fish');

$var = array_values(array_unique($var));
?>
keneks at gmail dot com 30-Sep-2006 07:01
Taking the advantage of array_unique, here is a simple function to check if an
array has duplicate values.

It simply compares the number of elements between the original array and the
array_uniqued array.

<?php
function array_search_dups($array)
{
    $dup_array = $array;
    $dup_array = array_unique($dup_array);
    if(count($dup_array) != count($array))
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}
?>
pulsarkowy at NOSPAM dot gmail dot com 13-Sep-2006 04:30
This function below will remove multiple values from array, remove 'empty'
fields an also count how many times the given value occured.

it's rather slow and not 'elegant' but works.

usage:
<?php
$myarray = my_array_unique($myarray);
?>

in return it produces an 3 fields array:
1st is index number, 2nd is the value, 3rd is counter.

<?php
function my_array_unique($tablica)
{

$tnum=count($tablica);
$i=1;
$k=1;
$t[1]['product']="";
$t[1]['count']=1;
while($i<=$tnum) {
  if (!array_multi_search($tablica[$i], $t)) {
    $t[$k]['product']=$tablica[$i];
    $t[$k]['count']=1;
    $k++;
  }
  else {
    $y=1;
    while ($y<=count($t)) {
      if ($t[$y]['product']==$tablica[$i])
        $t[$y]['count']++;
      $y++;
    }

  }
 
$i++;
} 

$tablica=$t;
return $tablica;
}
?>

the function uses another function that i've found on the php.net site (i'm
posting it only for informational reasons - i can't remember who wrote it):

<?php
function array_multi_search( $p_needle, $p_haystack )
   {
       if( !is_array( $p_haystack ) )
       {
           return false;
       }

       if( in_array( $p_needle, $p_haystack ) )
       {
           return true;
       }

       foreach( $p_haystack as $row )
       {
           if( array_multi_search( $p_needle, $row ) )
           {
               return true;
           }
       }

       return false;
   }
?>

[EDIT BY danbrown AT php DOT net: The array_multi_search() function was
originally written by 'czeslaw' and posted to the in_array() function manual
entry on 18 February, 2006.]
uditsawhney at yahoo dot com 15-Jul-2006 12:14
<?php

//Fn for array_unique column-wise for multi-dimensioanl array without losing
keys | Start
function array_uniquecolumn($arr)
{
    $rows   = sizeof($arr);
    $columns = sizeof($arr[0]);
   
    $columnkeys = array_keys($arr[0]);
   

    for($i=0; $i<$columns; $i++)
    {
        for($j=0;$j<$rows;$j++)
        {
            for($k = $j+1; $k<$rows; $k++)
            {
                if($arr[$j][$columnkeys[$i]] == $arr[$k][$columnkeys[$i]])
                    $arr[$k][$columnkeys[$i]] = "";       
            }
        }
   
    }

return ($arr);

}
//Fn for array_unique column-wise for multi-dimensioanl array without losing
keys | Stop

$arrUGCourse[]= array(  "CTR" => "1",

                        "UGCOURSE"=>"ABC",

                        "TSINITIATE"=>"540",

                        "COUNT"=>"34",

                        "ENTRY_DT"=>"2006-05-01",

                        "CUMULATIVE"=> 44);

 

$arrUGCourse[]= array(  "CTR" => "2",

                        "UGCOURSE"=>"ABC",

                        "TSINITIATE"=>"5401",

                        "COUNT"=>"341",

                        "ENTRY_DT"=>"2006-05-11",

                        "CUMULATIVE"=> 44);

print_r(array_uniquecolumn($arrUGCourse));

?>
MoD 14-Apr-2006 09:02
The shortest way i found to remove duplicate array from a column,
For example if you parse Multiple XML sources, you can remove duplicate items
that contain the same link.

<?PHP
function        remove_duplicate($array, $field)
{
  foreach ($array as $sub)
    $cmp[] = $sub[$field];
  $unique = array_unique($cmp);
  foreach ($unique as $k => $rien)
    $new[] = $array[$k];
  return $new;
}
?>
agarcia at rsn dot com dot co 31-Mar-2006 12:41
This is a script for multi_dimensional arrays

<?php
function remove_dup($matriz) {
    $aux_ini=array();
    $entrega=array();
    for($n=0;$n<count($matriz);$n++)
    {
        $aux_ini[]=serialize($matriz[$n]);
    }
    $mat=array_unique($aux_ini);
    for($n=0;$n<count($matriz);$n++)
    {
       
            $entrega[]=unserialize($mat[$n]);
       
    }
    return $entrega;
}
?>
mcmeijer at yahoo dot com 27-Jan-2006 05:18
This is a recursive arrayUnique function for arrays of any dimension. (tested
with 4-dimensional array)
The line '$newArray=deleteEmpty($newArray);' is optional and removes empty keys
and values
<?php
function arrayUnique($myArray)
    {
    $newArray = Array();
    if (is_array($myArray))
        {
        foreach($myArray as $key=>$val)
            {
            if (is_array($val))
                {
                $val2 = arrayUnique($val);
                }
            else
                {
                $val2 = $val;
                $newArray=array_unique($myArray);
                $newArray=deleteEmpty($newArray);
                break;
                }
            if (!empty($val2))
                {
                $newArray[$key] = $val2;
                }
            }
        }
    return ($newArray);
    }

function deleteEmpty($myArray)
    {
    $retArray= Array();
    foreach($myArray as $key=>$val)
        {
        if (($key<>"") && ($val<>""))
            {
            $retArray[$key] = $val;
            }
        }
    return $retArray;
    }
?>
memandeemail at gmail dot com 03-Jan-2006 10:47
Problem:
I have loaded an array with the results of a database
query.  The Fields are 'FirstName' and 'LastName'.

I would like to find a way to contactenate the two
fields, and then return only unique values for the
array.  For example, if the database query returns
three instances of a record with the FirstName John
and the LastName Smith in two distinct fields, I would
like to build a new array that would contain all the
original fields, but with John Smith in it only once.
Thanks for: Colin Campbell

Solution:

<?php
/**
 * The same thing than implode function, but return the keys so
 *
 * <code>
 * $_GET = array('id' => '4587','with' => 'key');
 * ...
 * echo shared::implode_with_key('&',$_GET,'='); // Resultado: id=4587&with=key
 * ...
 * </code>
 *
 * @param string $glue Oque colocar entre as chave => valor
 * @param array $pieces Valores
 * @param string $hifen Separar chave da array do valor
 * @return string
 * @author memandeemail at gmail dot com
 */
function implode_with_key($glue = null, $pieces, $hifen = ',') {
  $return = null;
  foreach ($pieces as $tk => $tv) $return .= $glue.$tk.$hifen.$tv;
  return substr($return,1);
}

/**
 * Return unique values from a tree of values
 *
 * @param array $array_tree
 * @return array
 * @author memandeemail at gmail dot com
 */
function array_unique_tree($array_tree) {
  $will_return = array(); $vtemp = array();
  foreach ($array_tree as $tkey => $tvalue) $vtemp[$tkey] = implode_with_key('&
',$tvalue,'=');
  foreach (array_keys(array_unique($vtemp)) as $tvalue) $will_return[$tvalue] =
$array_tree[$tvalue];
  return $will_return;
}

$problem = array_fill(0,3,
array('FirstName' => 'John', 'LastName' => 'Smith')
);

$problem[] = array('FirstName' => 'Davi', 'LastName' => 'S. Mesquita');
$problem[] = array('FirstName' => 'John', 'LastName' => 'Tom');

print_r($problem);

print_r(array_unique_tree($problem));
?>
webcreator at centrum dot cz 28-Oct-2005 04:25
array_unique function starts its comparation from beginning and pop the key off
if there is more values inside array. The last one remains. But i needed to
hold priority of the order of values and let the first one in.

Here is my easy solution:

<?php
function my_array_unique($from)
{
for ($i=count($from);$i>1;$i--)
    {
    $last = $from[$i];
    $from[$i] = "";
    if (!in_array($last,$from))
        $from[$i]=$last;   
    }
return array_unique($from);
}

# One empty value remains in array.
# But its very easy to separate it while using output array.
?>
passtschu AT freenet DOT de 21-Sep-2005 07:20
array_unique for multidimensional arrays. similar to the DISTINCT in SQL
function.
the function can group, sum and count keys

<?PHP
/*
$array - nothing to say
$group_keys - columns which have to be grouped - can be STRING or ARRAY
(STRING, STRING[, ...])
$sum_keys - columns which have to be summed - can be STRING or ARRAY (STRING,
STRING[, ...])
$count_key - must be STRING - count the grouped keys
*/
function array_distinct ($array, $group_keys, $sum_keys = NULL, $count_key =
NULL){
  if (!is_array ($group_keys)) $group_keys = array ($group_keys);
  if (!is_array ($sum_keys)) $sum_keys = array ($sum_keys);

  $existing_sub_keys = array ();
  $output = array ();

  foreach ($array as $key => $sub_array){
    $puffer = NULL;
    #group keys
    foreach ($group_keys as $group_key){
      $puffer .= $sub_array[$group_key];
    }
    $puffer = serialize ($puffer);
    if (!in_array ($puffer, $existing_sub_keys)){
      $existing_sub_keys[$key] = $puffer;
      $output[$key] = $sub_array;
    }
    else{
      $puffer = array_search ($puffer, $existing_sub_keys);
      #sum keys
      foreach ($sum_keys as $sum_key){
        if (is_string ($sum_key)) $output[$puffer][$sum_key] += $sub_array
[$sum_key];
      }
      #count grouped keys
      if (!array_key_exists ($count_key, $output[$puffer])) $output[$puffer]
[$count_key] = 1;
      if (is_string ($count_key)) $output[$puffer][$count_key]++;
    }
  }
  return $output;
}
?>
muddmonkey@harveyMcoldotedu 17-Aug-2005 01:44
If you're doing numeric arrays etc. I found flip-flip to work much better than
array_unique:

<?PHP
    function microtime_float(){ //timing
       list($usec, $sec) = explode(" ", microtime());
       return ((float)$usec + (float)$sec);
    }

    //make an arry and fill it up
    $final=array();
    for($i=0;$i<50000;$i++){
        $final[]=$i%13; //make sure there are some dupes
    }
    //try array unique
    $start1 = microtime_float();
    array_unique($final);
    $stop1=microtime_float();
    echo($stop1-$start1.'<br>');
    //try my flip-flip
    $start2=microtime_float();
    array_flip(array_flip($final));
    $stop2=microtime_float();
    echo($stop2-$start2);
?>

Running this with only ints in the array (as above) I get runtimes such as:
1.6195669174194 (using unique)
0.017037868499756 (using flip flip)
which is two orders of magnitude faster!

Appending a string:
($final[]='test'.$i%13;)
gives:
0.42909598350525 (using unique)
0.023258924484253 (using flip-flip)
Which is not AS great, but still 20x faster than unique.

In both cases the flip-flip seems to use less memory than the unique.

Granted the flip-flip doesn't work for all cases, but if you're doing simple
stuff like this, the flip-flip will give you better run times.

~JF
Christoph Ziegenberg 17-Jun-2005 11:44
If the array key is a string it might be important to keep it although the
value is the same (as I need it at the moment). So I wrote a function which
also returns array elements which have the same value but different string
keys.

<?php
function array_unique_numeric ($arr)
{
    $str = $int = array();
    foreach(array_keys($arr) as $key) {
        ${(is_int($key)?'int':'str')}[$key] = $arr[$key];
    }
    return array_merge($str, array_unique($int));
}

// typical array after an array_merge()...
$array = array("a" => "green", "b" => "brown", "c" => "blue", "red", "d" =>
"green", "yellow", "red");

print_r(array_unique($array));
// Array
// (
//     [a] => green
//     [b] => brown
//     [c] => blue
//     [0] => red
//     [1] => yellow
// )

print_r(array_unique_numeric($array));
// Array
// (
//     [a] => green
//     [b] => brown
//     [c] => blue
//     [d] => green
//     [0] => red
//     [1] => yellow
// )
?>
memandeemail at gmail dot com 15-Apr-2005 01:46
<?php
/**
 * Removes duplicate keys from an array
 *
 * @param array $array
 * @return array
 */
function array_unique_key($array) {
    $result = array();
    foreach (array_unique(array_keys($array)) as $tvalue) {
        $result[$tvalue] = $array[$tvalue];
    }
    return $result;
}
?>
Ric 05-Apr-2005 09:44
A very simple way of getting rid of duplicate entries and re-indexing with key
starting at 0:

<?php
    $temp=array_unique($main);
    $main=array_values($temp);
?>
trigger at e-mail dot ru 03-Feb-2005 02:53
Just a simple implementation for JavaScript:

<?php
function array_unique(thearray)
{
    thearray.sort();
    //reset($thearray);
    newarray = new Array();
    for (n=0;n<thearray.length;n++)
    {
        unique=1;//by default
        for(nn=0;nn<newarray.length;nn++)
            if (thearray[n] == newarray[nn])
            {
                unique=0;//already exists
                break;
            }
        if(unique)//dont exists
            newarray.push(thearray[n]);
    }
    return newarray;
 }
?>
lucas.bickel AT purplehaze DOT ch 26-Oct-2004 08:39
I quite like the following code for making multidimensional arrays unique:

<?php
foreach ($arrAddressList AS $key => $arrAddress) {
    $arrAddressList[$key] = serialize($arrAddress);
}
$arrAddressList = array_unique($arrAdressList);
foreach ($arrAddressList AS $key => $strAddress) {
    $arrAddressList[$key] = unserialize($strAddress);
}
?>

This gets me a unique array while not minding wether the the original array
contains arrays or just strings (or whatever...).
wernerlistas at terra dot com dot br 16-Jun-2004 08:50
Following the code copies of a little function I've wrote that actually works
with multidimensional arrays.
It also resets the array indexes.

<?php
if ( !function_exists( "arrayUnique" ) ){
    function arrayUnique ( $rArray ){
        $rReturn = array ();
        while ( list( $key, $val ) = each ( $rArray ) ){
            if ( !in_array( $val, $rReturn ) )
            array_push( $rReturn, $val );
        }
        return $rReturn;
    }
}
?>
csaba at alum dot mit dot edu 09-Jun-2004 07:17
The following is an efficient, adaptable implementation of array_unique which
always retains the first key having a given value:

<?php
function array_unique2(&$aray) {
    $aHash = array();
    foreach ($aray as $key => &$val) if (@$aHash[$val]++) unset ($aray[$key]);
}
?>

It is also adaptable to multi dimensional arrays.  For example, if your array
is a sequence of (multidimensional) points, then in place of @$aHash[$val]++
you could use @$aHash[implode("X",$val)]++
If you want to not have holes in your array, you can do an array_merge($aray)
at the end.

Csaba Gabor
patrikG at home dot net 11-Mar-2004 07:05
If you need to have the keys of the duplicates in an array returned, you may
find this function useful:

<?php
function unique_events($array){
    //checks $array for duplicate values and returns an
        //array containing the keys of duplicates
    $count= array_intersect_assoc($array, array_flip( array_count_values
($array)));
    foreach($array as $key=>$value){
        if (in_array($value,$count)){
            $return[$value][]=$key;
        }
    }
    return $return;
}
?>

Example:

Input:
Array
(
    [0] => 44
    [1] => 23
    [2] => 23
    [3] => 23
    [4] => 9
    [5] => 9
    [6] => 9
    [7] => 9
    [8] => 9
    [9] => 9
    [10] => 9
    [11] => 9
)

Function returns:
Array
(
    [23] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [9] => Array
        (
            [0] => 4
            [1] => 5
            [2] => 6
            [3] => 7
            [4] => 8
            [5] => 9
            [6] => 10
            [7] => 11
        )

)
bitmore.co.kr 19-Feb-2004 03:53
//Modify
Object Unique

<?php
    class foo {
        var $_name;
        var $_age;
        function foo($name,$age=NULL)    { $this->_name = $name; $this->_age =
$age; }
        //function get()        { return $this->_name; }
        //function set($name,$age=NULL)    { $this->_name = $name; $this->_age
= $age; }
    }

    function DistinctOn ($obj, $item) {
        $out = array();
        $list = array();
        foreach ($obj as $key=>$so) {
            if (!in_array($so->$item, $list)) {
                echo "key = $key,so = $so,item = $item,IFlist = ";print_r
($list);echo "<br>";
                $list[] = $so->$item;//        
                $out[$key] = $so;
            }
            echo "Forlist = ";print_r($list);echo "<br>";
        }
        return $out;
    }

    $foo_obj[0] = new foo('tom',20);
    $foo_obj[1] = new foo('paul',66);
    $foo_obj[2] = new foo('tom',23);

    $item = '_name';
    $result = DistinctOn ($foo_obj, $item);

    while(list($k,$v) = each($result)) {
        print "K = ";print_r($k);
        print ",V = ";print_r($v);
        print "<br>";
    }
    //key = 0,so = Object,item = _name,IFlist = Array ( ) ,Forlist = Array (
[0] => tom )
    //key = 1,so = Object,item = _name,IFlist = Array ( [0] => tom ) ,Forlist =
Array ( [0] => tom [1] => paul )
    //Forlist = Array ( [0] => tom [1] => paul )
    //K = 0,V = foo Object ( [_name] => tom [_age] => 20 )
    //K = 1,V = foo Object ( [_name] => paul [_age] => 66 )

    print "<br><br>";
    $item = '_age';
    $result = DistinctOn ($foo_obj, $item);
    while(list($k,$v) = each($result)) {
        print "K = ";print_r($k);
        print ",V = ";print_r($v);
        print "<br>";
    }

    //key = 0,so = Object,item = _age,IFlist = Array ( ) ,Forlist = Array ( [0]
=> 20 )
    //key = 1,so = Object,item = _age,IFlist = Array ( [0] => 20 ) ,Forlist =
Array ( [0] => 20 [1] => 66 )
    //key = 2,so = Object,item = _age,IFlist = Array ( [0] => 20 [1] => 66 ) ,
    //    Forlist = Array ( [0] => 20 [1] => 66 [2] => 23 )
    //K = 0,V = foo Object ( [_name] => tom [_age] => 20 )
    //K = 1,V = foo Object ( [_name] => paul [_age] => 66 )
    //K = 2,V = foo Object ( [_name] => tom [_age] => 23 )
?>
kay_rules at yahoo dot com 24-May-2003 02:28
this function will return an array with unique value and proper key increment
start from 0.

<?php
/*******************************/
function my_array_unique($somearray){
    $tmparr = array_unique($somearray);
    $i=0;
    foreach ($tmparr as $v) {
        $newarr[$i] = $v;
        $i++;
    }
    return $newarr;
}
/********************************/
?>

eg:

<?php
$foo_arr[0] ='aa'
$foo_arr[1] ='bb'
$foo_arr[2] ='cc'
$foo_arr[3] ='bb'
$foo_arr[4] ='aa'
$foo_arr[5] ='dd'
?>

normal array_unique will return:

<?php
$foo_arr[0] ='aa';
$foo_arr[1] ='bb';
$foo_arr[2] ='cc';
$foo_arr[3] ='';
$foo_arr[4] ='';
$foo_arr[5] ='dd'
?>

my_array_unique will return:

<?php
$foo_arr[0] ='aa';
$foo_arr[1] ='bb';
$foo_arr[2] ='cc';
$foo_arr[3] ='dd'
?>
martin at lucas-smith dot co dot uk 27-Jan-2003 05:12
To get a list of the duplicated values in an array, array_unique isn't much
help. Instead, use array_filter in conjunction with a callback function, as
below:

<?php
$checkKeysUniqueComparison = create_function('$value','if ($value > 1) return
true;');
$result = array_keys (array_filter (array_count_values($array),
$checkKeysUniqueComparison));
?>

These two lines therefore will create $result, an array of duplicated values in
the array $array, once each. E.g. the array
$array = array ("a", "b", "a", "b", "x", "y", "z", "x");
gives the result
Array([0] => a [1] => b [2] => x)
deigo at swirve dot NOSPAM dot com 23-Sep-2002 10:04
Before I found the mysql distinct I had to make a nicer array from the keys/
values that I got from array_unique so.

<?php
$groups=array_unique($groups);
$newgroup[0]=reset($groups);
for ($x=1;$x<sizeof($groups);$x++)
{
  $newgroup[$x]=next($groups);
}
?>
php at hp-site dot dk 29-Aug-2002 11:15
Try this:
array_flip(array_flip($array));

It gives the same result as the old array_unique()
29-Aug-2002 02:39
<?php
$truc = array("l810u00","l810u00","l810q00");
$machin = array_unique($truc);
for($i=0;$i < count($machin) ; $i++){
print $machin[$i]."
";
}
?>
result :
l810u00

This is not strange: $machin (as returned by array unique), contains "l810u00"
either in key[0] or key[1] but not both (the key depends on the ersion of PHP),
and "l810q00" in key[2].
The returned array has TWO elements so count($machin)==2.
The returned array has a hole in it, and you're not displaying its full
content. You could verify it by using this display loop instead:
foreach($machine as $key=>$value){
print '[' . $key . '] => ' . $value . '
";
}
result:
[0] => l810q00
[2] => l810u00
(the first line may display [1] instead of [0] for PHP 4.0.1p3, but you'll get
the same order of values and two lines, as expected). When calling array_values
() on the result, you're building a new array with the same values in the same
order, but with renumbered keys (without holes in numeric keys).
spunk at dasspunk dot NOSPAM dot com 14-Nov-2001 04:52
I needed a way of retaining the original array's keys in the new, unique array.
I came up with this. It works for my purposes but may need refinement.

<?php
function my_array_unique($somearray)
{
    asort($somearray);
    reset($somearray);
    $currentarrayvar = current($somearray);
    foreach ($somearray as $key=>$var)
    {
        if (next($somearray) != $currentarrayvar)
        {
            $uniquearray[$key] = $currentarrayvar;
            $currentarrayvar = current($somearray);
        }
    }
    reset($uniquearray);
    return $uniquearray;
}
?>
az at top-webdesign dot de 10-Jul-2001 01:00
Attention!
If you use array_unique be aware of data-types! (I spent hours of debugging
because of that ...).

For example, if you've got an array containing a '3' as number and another '3'
as string it won't be eliminated by array_unique.

An Example where this can happen, without really thinking about it:

I've got an article-list with product-numbers where the third and fourth digit
is the code for the producer. So I read in the file an process it line by line
and put each producer-code into an array:
------------------------------
<?php
$i=0;
while($line = fgets($csv, 10000) {
// splitting the line, product_no is the first part:

$data = explode(";", $line);

// putting the producer_code into an array:

$producer_id[$i] = trim(substr($data[0], 2, 2));

// make a special exception:

if(trim(substr($data[0], 2, 2)) == 40) {
$producer_id[$j] = '30';
}

// in the above line if you leave the 30 without the ''
// array_unique won't work!

$i++;
}

$producer_ids = array_values(array_unique($producer_id));
?>
-------------------------------
Result is to have all producer-ID's in an array without dupes.
rein at velt dot net 21-Apr-2001 12:44
Following code copies unique values from MyArray to TempArray.
Then copies non-empty elements from TempArray to UniqueArray.

Not the most elegant solution, but it works.

<?php
$TempArray = array_unique($MyArray);
while (list($index,$data)=each($TempArray)) {
      if (isempty($data)) {
          $UniqueArray[$index]=$data;
      }
}
?>
jllamas at bal dot com dot mx 25-Sep-2000 09:25
It seems that array_unique creates an exact copy of the original array and then
elimitates duplicate values. It does NOT change the "internal references" of
the array. For example:

<?php
    $test_alfa = array();
    $test_alfa[0] = "aa";
    $test_alfa[1] = "aa";
    $test_alfa[2] = "aa";
    $test_alfa[3] = "bb";
    $test_alfa[4] = "aa";
    $test_alfa[5] = "bb";
    $test_alfa[6] = "cc";
    $test_alfa[7] = "bb";
  
    $test_beta= array_unique($test_alfa);
    $numValues = count($test_beta);
    for ($i = 0 ; $i <= 7 ; $i++)
       echo("test_beta[$i] = $test_beta[$i] <br>");
    echo ("Number of elements in test_beta = $numValues ");
?>
will give you the following output:

test_beta[0] =
test_beta[1] = aa
test_beta[2] =
test_beta[3] =
test_beta[4] =
test_beta[5] = bb
test_beta[6] = cc
test_beta[7] =
Number of elements in test_beta = 3

The point is that you won't get the output you'd expect if you think that the
values of the non duplicate elements are located in the first three array
locations.

<?php
    $numValues = count($test_beta);
    for ($i=0;$i<=$numValues; $i++)
       echo("test_beta[$i] = $test_beta[$i] <br>");
    echo ("Number of elements in test_beta = $numValues ");
?>

will give you:

test_beta[0] =
test_beta[1] = aa
test_beta[2] =
Number of elements in test_beta = 3

Hope that saves u some debugging time!
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Apr 28 06:22:37 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.239.52
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length = NULL [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、入力配列のポインタを、使用した後にリセット (reset()) しま
    す。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、配列の要素の中から最大でその数までの要素を返し
    ます。配列の要素数が length より少ない場合は、配列から取得できる要素だけを
    返します。length が指定され、負の場合、配列の末尾から連続する複数の要素が返
    されます。省略された場合、offset から配列の最後までの全ての要素が返されます
    。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する
  • array_chunk() - 配列を分割する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012
 
add a note add a note User Contributed Notes array_slice
masta dot hacks at gmail dot com 29-Mar-2012 08:53
This might be obvious to other people but it took me a long time to figure it
out; $length takes precedence over $preserve_keys

An example:
<?php
$array = array(1, 2, 3, 4, 5);

$slice = array_slice($array, 3);
print_r($slice); //This will return array(4, 5)

//However
$slice = array($array, 3, True); //This will return array(4)
//The reason for this, is it's read like $array=$array, $offset=3, $length=True
?>
gary at wits dot sg 10-Jun-2011 11:44
I've found this useful.
The following is a function used to shuffle a very specific part of the array,
by providing start and end index.

<?php
function array_shuffle_section(&$a, $s, $e) {
    $head = array_slice($a, 0, $s);
    $body = array_slice($a, $s, $e-$s+1);
    $tail = array_slice($a, $e+1);

    shuffle($body);
    $a = array_merge($head,$body,$tail);
}
?>
Nathan - thefiscster510 at gmail dot com 29-Mar-2011 10:38
If you want to remove a specified entry from an array i made this mwethod...

<?php
$array = array("Entry1","entry2","entry3");

$int = 3; //Number of entries in the array
$int2 = 0; //Starter array spot... it will begine its search at 0.
$del_num = 1; //Represents the second entry in the array... which is the one we
will happen to remove this time... i.e. 0 = first entry, 1 = second entry, 2 =
third...........

$newarray = array(); //Empty array that will be the new array minus the
specified entry...
print_r($array) . "<br>";    //print original array contents
print_r($newarray). "<br>"; //print the new empty array

do
{
$user = $array[$int2];
$key = array_search($user, $array);
if ($key == $del_num)
{

}
else
{
$newarray[] = $array[$int2];
}

$int2 = $int2 + 1;
} while ($int2 < $int);

print_r($newarray). "<br>"; //print the new array

?>
delew 11-Feb-2011 01:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 02-Feb-2011 07:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 05:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 03:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 06:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 04:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 10-Apr-2009 05:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 02:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 07:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 12:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 02-May-2008 09:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 12:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 10:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 08:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 02:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 12:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 05:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 07:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 03:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 08:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 01:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 15-Feb-2007 04:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 09:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 03:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 02:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 18-Oct-2006 08:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 01:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 12:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 02:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 09:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 07:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 03:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 23-Jun-2005 06:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 02:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 01:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 17-Sep-2004 09:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 09:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 02:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 21-Feb-2004 10:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 12-Nov-2002 04:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 06:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 08:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 09:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 15-Dec-2001 07:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Apr 28 06:22:37 2012 UTC
Received cookie: COUNTRY=JPN%2C111.191.182.25
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

getdate> <date_timezone_set
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012

view this page in

[English             ] Change language
date

(PHP 4, PHP 5)

date — ローカルの日付/時刻を書式化する

説明

string date ( string $format [, int $timestamp = time() ] )

指定された引数 timestamp を、与えられたフォーマット文字列によりフォーマットし、
日付文字列を返します。タイムスタンプが与えられない場合は、現在の時刻が使われま
す。つまり timestamp はオプションでありそのデフォルト値は time() の値です。

パラメータ

format

    出力される日付文字列の書式。以下のオプションを参照ください。定義済みの定数
    も用意されており、たとえば DATE_RSS はフォーマット文字列 'D, d M Y H:i:s'
    と同じ意味になります。

            以下の文字が format パラメータ文字列として認識されます
    format                    説明                           戻り値の例
     文字
    日     ---                                        ---
    d      日。二桁の数字（先頭にゼロがつく場合も）   01 から 31
    D      曜日。3文字のテキスト形式。                Mon から Sun
    j      日。先頭にゼロをつけない。                 1 から 31
    l (小
    文字の 曜日。フルスペル形式。                     Sunday から Saturday
    'L')
    N      ISO-8601 形式の、曜日の数値表現 (PHP 5.1.0 1（月曜日）から 7（日曜日
           で追加)。                                  ）
                                                      st, nd, rd または th。 j
    S      英語形式の序数を表すサフィックス。2 文字。 と一緒に使用することがで
                                                      きる。
    w      曜日。数値。                               0 (日曜)から 6 (土曜)
    z      年間の通算日。数字。(ゼロから開始)         0 から 365
    週     ---                                        ---
    W      ISO-8601 月曜日に始まる年単位の週番号 (PHP 例: 42 (年の第 42 週目)
           4.1.0 で追加)
    月     ---                                        ---
    F      月。フルスペルの文字。                     January から December
    m      月。数字。先頭にゼロをつける。             01 から 12
    M      月。3 文字形式。                           Jan から Dec
    n      月。数字。先頭にゼロをつけない。           1 から 12
    t      指定した月の日数。                         28 から 31
    年     ---                                        ---
    L      閏年であるかどうか。                       1なら閏年。0なら閏年では
                                                      ない。
           ISO-8601 形式の年。これは Y ほぼ同じだが、
    o      ISO 週番号（W）が前年あるいは翌年に属する  例: 1999 あるいは 2003
           場合がある点で異なる（PHP 5.1.0 で追加）。
    Y      年。4 桁の数字。                           例: 1999または2003
    y      年。2 桁の数字。                           例: 99 または 03
    時     ---                                        ---
    a      午前または午後（小文字）                   am または pm
    A      午前または午後（大文字）                   AM または PM
    B      Swatch インターネット時間                  000 から 999
    g      時。12時間単位。先頭にゼロを付けない。     1 から 12
    G      時。24時間単位。先頭にゼロを付けない。     0 から 23
    h      時。数字。12 時間単位。                    01 から 12
    H      時。数字。24 時間単位。                    00 から 23
    i      分。先頭にゼロをつける。                   00 から 59
    s      秒。先頭にゼロをつける。                   00 から 59
    u      マイクロ秒 (PHP 5.2.2 で追加)。            例: 654321
    タイム ---                                        ---
    ゾーン
    e      タイムゾーン識別子（PHP 5.1.0 で追加）     例: UTC, GMT, Atlantic/
                                                      Azores
    I (大                                             1ならサマータイム中。 0な
    文字の サマータイム中か否か                       らそうではない。
    i)
    O      グリニッジ標準時 (GMT) との時差            例: +0200
           グリニッジ標準時 (GMT) との時差。時間と分
    P      をコロンで区切った形式 (PHP 5.1.3 で追加)  例: +02:00
           。
    T      タイムゾーンの略称                         例: EST, MDT ...
           タイムゾーンのオフセット秒数。 UTC の西側
    Z      のタイムゾーン用のオフセットは常に負です。 -43200 から 50400
           そして、 UTC の東側のオフセットは常に正で
           す。
    全ての
    日付/  ---                                        ---
    時刻
    c      ISO 8601 日付 (PHP 5 で追加されました)     2004-02-12T15:19:21+00:00
    r      » RFC 2822 フォーマットされた日付          例: Thu, 21 Dec 2000
                                                      16:01:07 +0200
    U      Unix Epoch (1970 年 1 月 1 日 0 時 0 分 0  time() も参照
           秒) からの秒数

    フォーマット文字列中の認識されない文字は、そのまま表示されます。 Z 形式は、
    gmdate() で使用した場合、常に 0 を返します。

        注意:

        この関数が受け付けるのは integer のタイムスタンプだけです。したがって、
        書式指定文字 u が有用となるのは date_create() で作成したタイムスタンプ
        を用いて date_format() を使用した場合のみです。

timestamp

    オプションのパラメータ timestamp は、 integer 型の Unix タイムスタンプです
    。 timestamp が指定されなかった場合のデフォルト値は、現在の時刻です。言い換
    えると、デフォルトは time() の返り値となります。

返り値

日付を表す文字列を返します。 timestamp に数字以外が使用された場合は FALSE が返
され、E_WARNING レベルのエラーが発生します。

エラー / 例外

すべての日付/時刻関数は、有効なタイムゾーンが設定されていない場合に E_NOTICE を
発生させます。また、システム設定のタイムゾーンあるいは環境変数 TZ を使用した場
合には E_STRICT あるいは E_WARNING を発生させます。 date_default_timezone_set()
も参照ください。

変更履歴

バー
ジョ                                    説明
 ン
      有効なタイムスタンプの範囲は、通常 Fri, 13 Dec 1901 20:45:54 GMT から
      Tue, 19 Jan 2038 03:14:07 GMT までです (これらの日付は、32 ビット符号付き
5.1.0 整数の最小および最大値に対応します)。しかし、PHP 5.1 より前のバージョンで
      は、システム環境によっては (例: Windows) この範囲が 1970 年 1 月 1 日から
      2038 年 1 月 19 日までに制限されます。
      タイムゾーンがおかしい場合に E_STRICT や E_NOTICE が発生するようになりま
5.1.0 した。

5.1.1 PHP 5.1.1 以降、format パラメータで標準的な日付/時刻フォーマットを指定す
      る際に有用な定数がいくつか追加されました。

例

例1 date() の例

<?php
// 使用するデフォルトのタイムゾーンを指定します。PHP 5.1 以降で使用可能です。
date_default_timezone_set('UTC');


// 結果は、たとえば Monday のようになります。
echo date("l");

// 結果は、たとえば Monday 8th of August 2005 03:12:46 PM のようになります。
echo date('l jS \of F Y h:i:s A');

// 結果は July 1, 2000 is on a Saturday となります。
echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));

/* 書式指定パラメータに、定数を使用します。 */
// 結果は、たとえば Mon, 15 Aug 2005 15:12:46 UTC のようになります。
echo date(DATE_RFC822);

// 結果は、たとえば 2000-07-01T00:00:00+00:00 のようになります。
echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));
?>

前にバックスラッシュを付けてエスケープすることにより、フォーマット文字列として
認識される文字が展開されることを防止することができます。バックスラッシュ付きの
文字は既に特別なシーケンスであり、バックスラッシュもエスケープすることが必要と
なる可能性があります。

例2 date() の文字をエスケープする

<?php
// Wednesday the 15th のように出力
echo date('l \t\h\e jS');
?>

date() と mktime() の両方を用いて、未来または過去の日付を知ることができます。

例3 date() と mktime() の例

<?php
$tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
$lastmonth = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
$nextyear  = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
?>


    注意:

    サマータイムがあるため、日付や月の秒数を単純にタイムスタンプに可減算するよ
    りもより信頼性があります。

date() フォーマットのいくつかの例を示します。現在の実装で特別な意味がある文字や
今後の PHP のバージョンで意味が割り付けられるであろう文字については、望ましくな
い結果を避けるためにエスケープする必要があることに注意してください。エスケープ
をする際には、改行文字 \n のような文字を回避するためにシングルクォートを使用し
てください。

例4 date() のフォーマット指定

<?php
// 今日は March 10th, 2001, 5:16:18 pm であり、
// またタイムゾーンは Mountain Standard Time (MST) であるものとします

$today = date("F j, Y, g:i a");                 // March 10, 2001, 5:16 pm
$today = date("m.d.y");                         // 03.10.01
$today = date("j, n, Y");                       // 10, 3, 2001
$today = date("Ymd");                           // 20010310
$today = date('h-i-s, j-m-y, it is w Day');     //
 05-16-18, 10-03-01, 1631 1618 6 Satpm01
$today = date('\i\t \i\s \t\h\e jS \d\a\y.');   // it is the 10th day.
$today = date("D M j G:i:s T Y");               // Sat Mar 10 17:16:18 MST 2001
$today = date('H:m:s \m \i\s\ \m\o\n\t\h');     // 17:03:18 m is month
$today = date("H:i:s");                         // 17:16:18
?>

他の言語で日付をフォーマットするためには、date() のかわりに setlocale() および
strftime() 関数を使用する必要があります。

注意

    注意:

    日付の文字列表現からタイムスタンプを生成するには、 strtotime() が使用できる
    でしょう。さらに、いくつかのデータベースは（MySQL の » UNIX_TIMESTAMP 関数
    のような）日付フォーマットからタイムスタンプへの変換関数を有しています。

ヒント

PHP 5.1 以降、$_SERVER['REQUEST_TIME'] によってリクエスト開始時のタイムスタンプ
が取得できるようになりました。

参考

  • gmdate() - GMT/UTC の日付/時刻を書式化する
  • idate() - ローカルな時刻/日付を整数として整形する
  • getdate() - 日付/時刻情報を取得する
  • getlastmod() - 最終更新時刻を取得する
  • mktime() - 日付を Unix のタイムスタンプとして取得する
  • strftime() - ロケールの設定に基づいてローカルな日付・時間をフォーマットする
  • time() - 現在の Unix タイムスタンプを返す
  • strtotime() - 英文形式の日付を Unix タイムスタンプに変換する
  • 定義済みの定数



getdate> <date_timezone_set
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Apr 2012
 
add a note add a note User Contributed Notes date
matt 23-Mar-2012 10:23
date() has some strange behavior at extremely high values:

<?php
echo "9223372036854775805: " . date("Y-m-d g:i:s a",  9223372036854775805) . "\
n";
echo "9223372036854775806: " . date("Y-m-d g:i:s a",  9223372036854775806) . "\
n";
echo "9223372036854775807: " . date("Y-m-d g:i:s a",  9223372036854775807) . "
(0x7FFFFFFFFFFFFFFF)\n";
echo "9223372036854775808: " . date("Y-m-d g:i:s a",  9223372036854775808) . "\
n";
echo "9223372036854775809: " . date("Y-m-d g:i:s a",  9223372036854775809) . "\
n";
echo "9223372036854775810: " . date("Y-m-d g:i:s a",  9223372036854775810) . "\
n";
echo "...\n";
echo "9223372036854776832: " . date("Y-m-d g:i:s a",  9223372036854776832) . "\
n";
echo "9223372036854776833: " . date("Y-m-d g:i:s a",  9223372036854776833) . "\
n";
echo "...\n";
echo "9223372036854778879: " . date("Y-m-d g:i:s a",  9223372036854778879) . "\
n";
echo "9223372036854778880: " . date("Y-m-d g:i:s a",  9223372036854778880) . "\
n";
echo "...\n";
echo "9223372036854780928: " . date("Y-m-d g:i:s a",  9223372036854780928) . "\
n";
echo "9223372036854780929: " . date("Y-m-d g:i:s a",  9223372036854780929) . "\
n";
echo "...\n";
echo "9223372036854782975: " . date("Y-m-d g:i:s a",  9223372036854782975) . "\
n";
echo "9223372036854782976: " . date("Y-m-d g:i:s a",  9223372036854782976) . "\
n";
echo "...\n";
echo "9223372036854785024: " . date("Y-m-d g:i:s a",  9223372036854785024) . "\
n";
echo "9223372036854785025: " . date("Y-m-d g:i:s a",  9223372036854785025) . "\
n";
echo "...\n";
echo "9223372036854787071: " . date("Y-m-d g:i:s a",  9223372036854787071) . "\
n";
echo "9223372036854787072: " . date("Y-m-d g:i:s a",  9223372036854787072) . "\
n";
echo "...\n";
echo "9223372036854789120: " . date("Y-m-d g:i:s a",  9223372036854789120) . "\
n";
echo "9223372036854789121: " . date("Y-m-d g:i:s a",  9223372036854789121) . "\
n";
echo "...\n";
echo "9223372036854791167: " . date("Y-m-d g:i:s a",  9223372036854791167) . "\
n";
echo "9223372036854791168: " . date("Y-m-d g:i:s a",  9223372036854791168) . "\
n";
echo "...\n";
echo "9223372036854793215: " . date("Y-m-d g:i:s a",  9223372036854793215) . "\
n";
echo "9223372036854793216: " . date("Y-m-d g:i:s a",  9223372036854793216) . "\
n";
echo "9223372036854793217: " . date("Y-m-d g:i:s a",  9223372036854793217) . "\
n";
echo "9223372036854793218: " . date("Y-m-d g:i:s a",  9223372036854793218) . "\
n";
?>

Output:

9223372036854775805: 292277026596-12-04 10:30:05 am
9223372036854775806: 292277026596-12-04 10:30:06 am
9223372036854775807: 292277026596-12-04 10:30:07 am (0x7FFFFFFFFFFFFFFF)
9223372036854775808: 292277026596-12-04 10:30:08 am
9223372036854775809: 292277026596-12-04 10:30:08 am
9223372036854775810: 292277026596-12-04 10:30:08 am
...
9223372036854778879: 292277026596-12-04 10:30:08 am
9223372036854778880: 292277026596-12-04 11:04:16 am
...
9223372036854778879: 292277026596-12-04 11:04:16 am
9223372036854778880: 292277026596-12-04 11:38:24 am
...
9223372036854780928: 292277026596-12-04 11:38:24 am
9223372036854780929: 292277026596-12-04 12:12:32 pm
...
9223372036854782975: 292277026596-12-04 12:12:32 pm
9223372036854782976: 292277026596-12-04 12:46:40 pm
...
9223372036854785024: 292277026596-12-04 12:46:40 pm
9223372036854785025: 292277026596-12-04 1:20:48 pm
...
9223372036854787071: 292277026596-12-04 1:20:48 pm
9223372036854787072: 292277026596-12-04 1:54:56 pm
...
9223372036854789120: 292277026596-12-04 1:54:56 pm
9223372036854789121: 292277026596-12-04 2:29:04 pm
...
9223372036854791167: 292277026596-12-04 2:29:04 pm
9223372036854791168: 292277026596-12-04 3:03:12 pm
...
9223372036854793215: 292277026596-12-04 3:03:12 pm
9223372036854793216: 292277026596-12-04 3:03:12 pm
9223372036854793217: -292277022657-01-27 8:37:04 am
9223372036854793218: -292277022657-01-27 8:37:04 am

---

So, the last reliable unix timecode is 9223372036854775808
(0x1000000000000000). Not that you would probably ever need a date that high.
Bas Vijfwinkel 19-Mar-2012 06:47
Note that some formatting options are different from MySQL.
For example using a 24 hour notation without leading zeros is the option '%G'
in PHP but '%k' in MySQL.
When using dynamically generated date formatting string, be careful to generate
the correct options for either PHP or MySQL.
bakerj417 at gmail dot com 07-Mar-2012 04:48
If you are having an issue getting u to work so is everyone else. The solution
that I am using which I found on another site(so not taking credit) is to use
this:

     date("Y/m/d H:i:s"). substr((string)microtime(), 1, 6);

that will give you:

     yyyy/mm/dd hh:ii:ss.uuuuuu

hope this helps someone in need!

thanks all
Stefan at NOSPAM dot wp dot eu 24-Feb-2012 11:39
<?php
$czteraz=taketime();
$a229=date("t",$czteraz);
$dz_tyd=date("w", $czteraz);
$dz_mie=date("m", $czteraz);
$dz_rok=date("Y", $czteraz);

echo '<hr>kalendarz<br><form>';
echo '<select name="bry20" size="1">';   
    for($u = 1; $u < $a229+1;$u++)    {
    echo '<option ';
    if ($u==date("d", $czteraz)) echo 'selected="selected" ';
    echo 'value="'.$u.'">'.$u.'</option>';
                    }
echo '</select>';

echo '<select name="bry21" size="1">';   
    for($u = 1; $u < 13; $u++)    {
    echo '<option ';
    if ($u==$dz_mie) echo 'selected="selected" ';
    echo 'value="'.$u.'">'.$u.'</option>';
                    }
echo '</select>';

echo '<select name="bry22" size="1">';   
    for($u = 1997; $u < 2018; $u++)    {
    echo '<option ';
    if ($u==$dz_rok) echo 'selected="selected" ';
    echo 'value="'.$u.'">'.$u.'</option>';
                    }
echo '</select></form><br><hr>';
?>
gerben at gerbenwijnja dot nl 21-Feb-2012 05:54
I use the function below to calculate the Unix timestamp of the start of a
week. It includes a boolean flag to request a GMT offset instead of the current
locale setting.

<?php

function getWeekOffsetTimestamp($year, $week, $useGmt = false) {
        if ($useGmt) {
                // Backup timezone and set to GMT
                $timezoneSettingBackup = date_default_timezone_get();
                date_default_timezone_set("GMT");
        }

        // According to ISO-8601, January 4th is always in week 1
        $halfwayTheWeek = strtotime($year."0104 +".($week - 1)." weeks");

        // Subtract days to Monday
        $dayOfTheWeek = date("N", $halfwayTheWeek);
        $daysToSubtract = $dayOfTheWeek - 1;

        // Calculate the week's timestamp
        $unixTimestamp = strtotime("-$daysToSubtract day", $halfwayTheWeek);

        if ($useGmt) {
                // Reset timezone to backup
                date_default_timezone_set($timezoneSettingBackup);
        }

        return $unixTimestamp;
}

?>
frank at interactinet dot com 15-Feb-2012 10:07
If you want to compare this week with the same week last year, here is some
code to get you the time at the beginning of the week.  You can then add days,
hours, etc to get to the day of the week that you want to know about.

<?php
        $time_passed = (date('N')-1)* 24 * 3600; // time since start of week in
days
        $startOfWeek = mktime(0,0,0,date('m'),date('d'),date('Y')) -
$time_passed;
       
   
        $lastyear = $startOfWeek - 365*24*3600;   

        // make sure time used from last year is the same week of the year   
        $weekdiff = date('W') - date('W',$lastyear);
        if($weekdiff != 0)
        {
            $lastyear = $lastyear + ($weekdiff*7*24*3600);
        }
       
        $lastyear_time_passed = (date('N',$lastyear)-1) * 24 * 3600; // time
since start of week in days
       
        $startOfWeek_lastyear = mktime(0,0,0,date('m',$lastyear),date
('d',$lastyear),date('Y',$lastyear)) - $lastyear_time_passed;
?>

So now you have the unix time for the start of this week ($startOfWeek), and
the start of the same week last year ($startOfWeek_lastyear).

You can convert back to datetime format easily:

<?php
        echo date('Y-m-d H:i:s',$startOfWeek).'<br>';
        echo date('Y-m-d H:i:s',$startOfWeek_lastyear).'<br><br>';
       
        echo date('l F jS, Y',$startOfWeek).'<br>';
        echo date('l F jS, Y',$startOfWeek_lastyear);
?>
Jimmy 22-Dec-2011 05:04
Things to be aware of when using week numbers with years.

<?php
echo date("YW", strtotime("2011-01-07")); // gives 201101
echo date("YW", strtotime("2011-12-31")); // gives 201152
echo date("YW", strtotime("2011-01-01")); // gives 201152 too
?>

BUT

<?php
echo date("oW", strtotime("2011-01-07")); // gives 201101
echo date("oW", strtotime("2011-12-31")); // gives 201152
echo date("oW", strtotime("2011-01-01")); // gives 201052 (Year is different
than previous example)
?>

Reason:
Y is year from the date
o is ISO-8601 year number
W is ISO-8601 week number of year

Conclusion:
if using 'W' for the week number use 'o' for the year.
blinov vyacheslav AT gmail.com 23-Aug-2011 07:06
It was oblivious and discouraging that it dont mentioned in docs. If you will
use W to get week number be aware:
first days of year can be in a week of previous year, and week number always
has leading zero

<?php

echo date("YW", strtotime("2011-01-07")); // gives 201101
echo date("YW", strtotime("2011-01-01")); // gives 201152
echo date("YW", strtotime("2011-12-31")); // gives 201152 too

?>

so you can`t rely on number of week given from this function inside your
program if you want to use it for some logic
ghotinet 13-Dec-2010 10:06
Most spreadsheet programs have a rather nice little built-in function called
NETWORKDAYS to calculate the number of business days (i.e. Monday-Friday,
excluding holidays) between any two given dates. I couldn't find a simple way
to do that in PHP, so I threw this together. It replicates the functionality of
OpenOffice's NETWORKDAYS function - you give it a start date, an end date, and
an array of any holidays you want skipped, and it'll tell you the number of
business days (inclusive of the start and end days!) between them.

I've tested it pretty strenuously but date arithmetic is complicated and
there's always the possibility I missed something, so please feel free to check
my math.

The function could certainly be made much more powerful, to allow you to set
different days to be ignored (e.g. "skip all Fridays and Saturdays but include
Sundays") or to set up dates that should always be skipped (e.g. "skip July 4th
in any year, skip the first Monday in September in any year"). But that's a
project for another time.

<?php

function networkdays($s, $e, $holidays = array()) {
    // If the start and end dates are given in the wrong order, flip them.   
    if ($s > $e)
        return networkdays($e, $s, $holidays);

    // Find the ISO-8601 day of the week for the two dates.
    $sd = date("N", $s);
    $ed = date("N", $e);

    // Find the number of weeks between the dates.
    $w = floor(($e - $s)/(86400*7));    # Divide the difference in the two
times by seven days to get the number of weeks.
    if ($ed >= $sd) { $w--; }        # If the end date falls on the same day of
the week or a later day of the week than the start date, subtract a week.

    // Calculate net working days.
    $nwd = max(6 - $sd, 0);    # If the start day is Saturday or Sunday, add
zero, otherewise add six minus the weekday number.
    $nwd += min($ed, 5);    # If the end day is Saturday or Sunday, add five,
otherwise add the weekday number.
    $nwd += $w * 5;        # Add five days for each week in between.

    // Iterate through the array of holidays. For each holiday between the
start and end dates that isn't a Saturday or a Sunday, remove one day.
    foreach ($holidays as $h) {
        $h = strtotime($h);
        if ($h > $s && $h < $e && date("N", $h) < 6)
            $nwd--;
    }

    return $nwd;
}

$start = strtotime("1 January 2010");
$end = strtotime("13 December 2010");

// Add as many holidays as desired.
$holidays = array();
$holidays[] = "4 July 2010";            // Falls on a Sunday; doesn't affect
count
$holidays[] = "6 September 2010";        // Falls on a Monday; reduces count by
one

echo networkdays($start, $end, $holidays);    // Returns 246

?>

Or, if you just want to know how many work days there are in any given year,
here's a quick function for that one:

<?php

function workdaysinyear($y) {
    $j1 = mktime(0,0,0,1,1,$y);
    if (date("L", $j1)) {
        if (date("N", $j1) == 6)
            return 260;
        elseif (date("N", $j1) == 5 or date("N", $j1) == 7)
            return 261;
        else
            return 262;
    }
    else {
        if (date("N", $j1) == 6 or date("N", $j1) == 7)
            return 260;
        else
            return 261;
    }
}

?>
@PeteWilliams 08-Sep-2010 04:29
If you want to use HTML5's <date> tag, the following code will generate the
machine-readable value for the 'datetime' attribute:

<?php

/**
 * formats the date passed into format required by 'datetime' attribute of
<date> tag
 * if no intDate supplied, uses current date.
 * @param intDate integer optional
 * @return string
 **/
function getDateTimeValue( $intDate = null ) {

    $strFormat = 'Y-m-d\TH:i:s.uP';
    $strDate = $intDate ? date( $strFormat, $intDate ) : date( $strFormat ) ;
   
    return $strDate;
}

echo getDateTimeValue();

?>
lb at bostontech dot net 29-Nov-2009 11:11
Not sure why this got ignored the first time, but this is an even simpler way
to check leap year:

<?php
function isLeapYear($year)
    { return ((($year%4==0) && ($year%100)) || $year%400==0) ? (true):(false);
}
?>
Edward Rudd 05-Oct-2009 12:13
To actually make use ot the "u" (microsecond) you need to use the DateTime
object and not the date() function.

For example

<?php
$t = microtime(true);
$micro = sprintf("%06d",($t - floor($t)) * 1000000);
$d = new DateTime( date('Y-m-d H:i:s.'.$micro,$t) );

print $d->format("Y-m-d H:i:s.u");
?>
Just.Kevin 28-Jul-2009 09:52
In order to determine if a year is a leap year an earlier poster suggested
simply checking to see if the year is a multiple of four:

<?php
function is_leapyear_broken($year = 2004) {
return ($year%4)==0;
}
?>

While this will work for the majority of years it will not work on years that
are multiples of 100 but not multiples of 400 i.e.(2100).
A function not using php's date() function that will also account for this
small anomaly in leap years:

<?php
function is_leapyear_working($year = 2004) {
    if((($year%4==0) && ($year%100!=0)) || $year%400==0) {
        return true;
    }
    return false;
}
?>

While is_leapyear_working will not return true for the few non-leap years
divisible by four I couldn't tell you if this is more or less efficient than
using php's date() as an even earlier poster suggested:

<?php
function is_leapyear($year = 2004) {
$is_leap = date('L', strtotime("$year-1-1"));
return $is_leap;
}
?>
eduardo at digmotor dot com dot br 21-Apr-2009 01:34
Thanks to tcasparr at gmail dot com for the great idea (at least for me) ;)
I changed the code a little to replicate the functionality of
date_parse_from_format, once I don't have PHP 5.3.0 yet. This might be useful
for someone. Hope you don't mind changing your code tcasparr at gmail dot com.

<?php
/*******************************************************
 * Simple function to take in a date format and return array of associated
 * formats for each date element
 *
 * @return array
 * @param string $strFormat
 *
 * Example: Y/m/d g:i:s becomes
 * Array
 * (
 *     [year] => Y
 *     [month] => m
 *     [day] => d
 *     [hour] => g
 *     [minute] => i
 *     [second] => s
 * )
 *
 *  This function is needed for  PHP < 5.3.0
 ********************************************************/
function dateParseFromFormat($stFormat, $stData)
{
    $aDataRet = array();
    $aPieces = split('[:/.\ \-]', $stFormat);
    $aDatePart = split('[:/.\ \-]', $stData);
    foreach($aPieces as $key=>$chPiece)   
    {
        switch ($chPiece)
        {
            case 'd':
            case 'j':
                $aDataRet['day'] = $aDatePart[$key];
                break;
               
            case 'F':
            case 'M':
            case 'm':
            case 'n':
                $aDataRet['month'] = $aDatePart[$key];
                break;
               
            case 'o':
            case 'Y':
            case 'y':
                $aDataRet['year'] = $aDatePart[$key];
                break;
           
            case 'g':
            case 'G':
            case 'h':
            case 'H':
                $aDataRet['hour'] = $aDatePart[$key];
                break;   
               
            case 'i':
                $aDataRet['minute'] = $aDatePart[$key];
                break;
               
            case 's':
                $aDataRet['second'] = $aDatePart[$key];
                break;           
        }
       
    }
    return $aDataRet;
}
?>

Also, if you need to change the format of dates:

<?php
function changeDateFormat($stDate,$stFormatFrom,$stFormatTo)
{
  // When PHP 5.3.0 becomes available to me
  //$date = date_parse_from_format($stFormatFrom,$stDate);
  //For now I use the function above
  $date = dateParseFromFormat($stFormatFrom,$stDate);
  return date($stFormatTo,mktime($date['hour'],
                                    $date['minute'],
                                    $date['second'],
                                    $date['month'],
                                    $date['day'],
                                    $date['year']));
}

?>
Kenneth Kin Lum 02-Oct-2008 03:52
date(DATE_RFC822) and date(DATE_RFC2822) both work.  note that RFC 822 is
obsoleted by RFC 2822.  The main difference is the year being 08 in RFC 822 and
is 2008 in RFC 2822.

To use date(DATE_RFC2822), a short form is date('r').
Anonymous 12-Sep-2008 06:01
Correct format for a MySQL DATETIME column is
<?php $mysqltime = date ("Y-m-d H:i:s", $phptime); ?>
JonathanCross.com 25-Jul-2008 01:22
<?php
// A demonstration of the new DateTime class for those
// trying to use dates before 1970 or after 2038.
?>
<h2>PHP 2038 date bug demo (php version <?php echo phpversion(); ?>)</h1>
<div style='float:left;margin-right:3em;'>
<h3>OLD Buggy date()</h3>
<?php
  $format='F j, Y';
  for ( $i = 1900; $i < 2050; $i++) {
    $datep = "$i-01-01";
    ?>
    Trying: <?php echo $datep; ?> = <?php echo date($format, strtotime
($datep)); ?><br>
    <?php
  }
?></div>
<div style='float:left;'>
  <h3>NEW DateTime Class (v 5.2+)</h3><?php
  for ( $i = 1900; $i < 2050; $i++) {
    $datep = "$i-01-01";
    $date = new DateTime($datep);
    ?>
    Trying: <?php echo $datep; ?> = <?php echo $date->format($format); ?><br>
    <?php
  }
?></div>
phil dot taylor at enilsson dot com 25-May-2008 10:37
Found this helpful when converting unix dates for use with the ical file
format.

<?php
// Converts a unix timestamp to iCal format (UTC) - if no timezone is
// specified then it presumes the uStamp is already in UTC format.
// tzone must be in decimal such as 1hr 45mins would be 1.75, behind
// times should be represented as negative decimals 10hours behind
// would be -10
       
    function unixToiCal($uStamp = 0, $tzone = 0.0) {
   
        $uStampUTC = $uStamp + ($tzone * 3600);       
        $stamp  = date("Ymd\THis\Z", $uStampUTC);
       
        return $stamp;       

    }
?>
chubby at chicks dot com 23-May-2008 06:54
<?php
/**
     * Checks wether a date is between an interval
     *
     * Usage:
     *     
     * // check if today is older than 2008/12/31
     * var_dump(currentDayIsInInterval('2008/12/31'));
     * // check if today is younger than 2008/12/31
     * var_dump(currentDayIsInInterval(null,'2008/12/31'));
     * // check if today is between 2008/12/01 and 2008/12/31
     * var_dump(currentDayIsInInterval('2008/12/01','2008/12/31')); 
     *
     * Will trigger errors if date is in wrong format, notices if $begin >
$end    
     *         
     * @param string $begin Date string as YYYY/mm/dd
     * @param string $end Date string as YYYY/mm/dd
     * @return bool 
     */
function currentDayIsInInterval($begin = '',$end = '')
{
        $preg_exp = '"[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]"';
        $preg_error = 'Wrong parameter passed to function '.__FUNCTION__.' :
Invalide date
format. Please use YYYY/mm/dd.';
        $interval_error = 'First parameter in '.__FUNCTION__.' should be
smaller than
second.';
        if(empty($begin))
        {
                $begin = 0;
        }
        else
        {
                if(preg_match($preg_exp,$begin))
                {
                        $begin = (int)str_replace('/','',$begin);
                }
                else
                {
                        trigger_error($preg_error,E_USER_ERROR);
                }
        }
        if(empty($end))
        {
                $end = 99999999;
        }
        else
        {
                if(preg_match($preg_exp,$end))
                {
                        $end = (int)str_replace('/','',$end);
                }
                else
                {
                        trigger_error($preg_error,E_USER_ERROR);
                }
        }
        if($end < $begin)
        {
                trigger_error($interval_error,E_USER_WARNING);
        }
        $time = time();
        $now = (int)(date('Y',$time).date('m',$time).date('j',$time));
        if($now > $end or $now < $begin)
        {
                return false;
        }
        return true;
}
?>
jc 31-Dec-2007 06:28
date("W") returns the iso8601 week number, while date("Y") returns the
_current_ year. This can lead to odd results. For example today (dec 31, 2007)
it returns 1 for the week and of course 2007 for the year. This is not wrong in
a strict sense because iso defines this week as the first of 2008 while we
still have 2007.

So, if you don't have another way to safely retrieve the year according to the
iso8061 week-date - strftime("%G") doesn't work on some systems -, you should
be careful when working with date("W").

For most cases strftime("%W") should be a safe replacement.

[edit: Much easier is to use "o" (lower case O) instead of "Y"]
mel dot boyce at gmail dot com 06-Apr-2006 04:46
I've been flicking through the comments looking for some succinct date code and
have noticed an alarming number of questions and over-burdened examples related
to date mathematics. One of the most useful skills you can utilize when
performing date math is taking full advantage of the UNIX timestamp. The UNIX
timestamp was built for this kind of work.

An example of this relates to a comment made by james at
bandit-dot-co-dot-en-zed. James was looking for a way to calculate the number
of days which have passed since a certain date. Rather than using mktime() and
a loop, James can subtract the current timestamp from the timestamp of the date
in question and divide that by the number of seconds in a day:
<?php
$days = floor((time() - strtotime("01-Jan-2006"))/86400);
print("$days days have passed.\n");
?>

Another usage could find itself in a class submitted by Kyle M Hall which aids
in the creation of timestamps from the recent past for use with MySQL. Rather
than the looping and fine tuning of a date, Kyle can use the raw UNIX
timestamps (this is untested code):
<?php
$ago = 14; // days
$timestamp = time() - ($ago * 86400);
?>

Hopefully these two examples of "UNIX-style" timestamp usage will help those
finding date mathematics more elusive than it should be.
SpikeDaCruz 09-Mar-2006 11:12
The following function will return the date (on the Gregorian calendar) for
Orthodox Easter (Pascha).  Note that incorrect results will be returned for
years less than 1601 or greater than 2399. This is because the Julian calendar
(from which the Easter date is calculated) deviates from the Gregorian by one
day for each century-year that is NOT a leap-year, i.e. the century is
divisible by 4 but not by 10.  (In the old Julian reckoning, EVERY 4th year was
a leap-year.)

This algorithm was first proposed by the mathematician/physicist Gauss.  Its
complexity derives from the fact that the calculation is based on a combination
of solar and lunar calendars.

<?php
function getOrthodoxEaster($date){
  /*
   Takes any Gregorian date and returns the Gregorian
   date of Orthodox Easter for that year.
  */
  $year = date("Y", $date);
  $r1 = $year % 19;
  $r2 = $year % 4;
  $r3 = $year % 7;
  $ra = 19 * $r1 + 16;
  $r4 = $ra % 30;
  $rb = 2 * $r2 + 4 * $r3 + 6 * $r4;
  $r5 = $rb % 7;
  $rc = $r4 + $r5;
  //Orthodox Easter for this year will fall $rc days after April 3
  return strtotime("3 April $year + $rc days");
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Apr 28 06:22:37 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 20 Apr 2012

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length = NULL [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、入力配列のポインタを、使用した後にリセット (reset()) しま
    す。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、配列の要素の中から最大でその数までの要素を返し
    ます。配列の要素数が length より少ない場合は、配列から取得できる要素だけを
    返します。length が指定され、負の場合、配列の末尾から連続する複数の要素が返
    されます。省略された場合、offset から配列の最後までの全ての要素が返されます
    。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する
  • array_chunk() - 配列を分割する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 20 Apr 2012
 
add a note add a note User Contributed Notes array_slice
masta dot hacks at gmail dot com 29-Mar-2012 08:53
This might be obvious to other people but it took me a long time to figure it
out; $length takes precedence over $preserve_keys

An example:
<?php
$array = array(1, 2, 3, 4, 5);

$slice = array_slice($array, 3);
print_r($slice); //This will return array(4, 5)

//However
$slice = array($array, 3, True); //This will return array(4)
//The reason for this, is it's read like $array=$array, $offset=3, $length=True
?>
gary at wits dot sg 10-Jun-2011 11:44
I've found this useful.
The following is a function used to shuffle a very specific part of the array,
by providing start and end index.

<?php
function array_shuffle_section(&$a, $s, $e) {
    $head = array_slice($a, 0, $s);
    $body = array_slice($a, $s, $e-$s+1);
    $tail = array_slice($a, $e+1);

    shuffle($body);
    $a = array_merge($head,$body,$tail);
}
?>
Nathan - thefiscster510 at gmail dot com 29-Mar-2011 10:38
If you want to remove a specified entry from an array i made this mwethod...

<?php
$array = array("Entry1","entry2","entry3");

$int = 3; //Number of entries in the array
$int2 = 0; //Starter array spot... it will begine its search at 0.
$del_num = 1; //Represents the second entry in the array... which is the one we
will happen to remove this time... i.e. 0 = first entry, 1 = second entry, 2 =
third...........

$newarray = array(); //Empty array that will be the new array minus the
specified entry...
print_r($array) . "<br>";    //print original array contents
print_r($newarray). "<br>"; //print the new empty array

do
{
$user = $array[$int2];
$key = array_search($user, $array);
if ($key == $del_num)
{

}
else
{
$newarray[] = $array[$int2];
}

$int2 = $int2 + 1;
} while ($int2 < $int);

print_r($newarray). "<br>"; //print the new array

?>
delew 11-Feb-2011 01:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 02-Feb-2011 07:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 05:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 03:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 06:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 04:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 10-Apr-2009 05:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 02:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 07:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 12:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 02-May-2008 09:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 12:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 10:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 08:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 02:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 12:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 05:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 07:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 03:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 08:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 01:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 15-Feb-2007 04:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 09:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 03:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 02:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 18-Oct-2006 08:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 01:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 12:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 02:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 09:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 07:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 03:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 23-Jun-2005 06:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 02:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 01:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 17-Sep-2004 09:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 09:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 02:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 21-Feb-2004 10:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 12-Nov-2002 04:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 06:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 08:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 09:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 15-Dec-2001 07:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue Apr 24 18:21:13 2012 UTC
Received cookie: COUNTRY=JPN%2C111.188.113.87
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 数学
  • Math
  • Math 関数
  • abs
  • acos
  • acosh
  • asin
  • asinh
  • atan2
  • atan
  • atanh
  • base_ convert
  • bindec
  • ceil
  • cos
  • cosh
  • decbin
  • dechex
  • decoct
  • deg2rad
  • exp
  • expm1
  • floor
  • fmod
  • getrandmax
  • hexdec
  • hypot
  • is_ finite
  • is_ infinite
  • is_ nan
  • lcg_ value
  • log10
  • log1p
  • log
  • max
  • min
  • mt_ getrandmax
  • mt_ rand
  • mt_ srand
  • octdec
  • pi
  • pow
  • rad2deg
  • rand
  • round
  • sin
  • sinh
  • sqrt
  • srand
  • tan
  • tanh

round> <rad2deg
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 20 Apr 2012

view this page in

[English             ] Change language
rand

(PHP 4, PHP 5)

rand — 乱数を生成する

説明

int rand ( void )
int rand ( int $min , int $max )

オプションの引数 min,max を省略してコールした場合、rand() は 0 と getrandmax()
の間の擬似乱数(整数)を返します。例えば、5 から 15 まで（両端を含む）の乱数を得
たい場合、 rand(5, 15) とします。

    注意: （Windows のような）いくつかのプラットフォームでは、getrandmax() は
    32767 と小さな値となっています。 32767 より広い範囲にしたい場合、 min およ
    び max を指定することで、これより大きな範囲の乱数を生成することができます。
    もしくは、 mt_rand() をかわりに使用してみてください。

パラメータ

min

    返す値の最小値 (デフォルトは 0)。

max

    返す値の最大値 (デフォルトは getrandmax())。

返り値

min (あるいは 0) から max (あるいは getrandmax()、それぞれ端点を含む) までの間
の疑似乱数値を返します。

変更履歴

バージョン                          説明
4.2.0      乱数生成器が自動的にシードを生成するようになりました。

例

例1 rand() の例

<?php
echo rand() . "\n";
echo rand() . "\n";

echo rand(5, 15);
?>

上の例の出力は、たとえば以下のようになります。

7771
22264
11

参考

  • srand() - 乱数ジェネレータを初期化する
  • getrandmax() - 乱数の最大値を取得する
  • mt_rand() - よりよい乱数値を生成する



round> <rad2deg
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 20 Apr 2012
 
add a note add a note User Contributed Notes rand
Justin Richer 28-Mar-2012 01:43
Since many people (myself included) come to this page looking for a way to do a
random string, I present a way that uses arrays and shuffle() instead of rand
(). This also has the effect of not repeating any characters in the value set.

    $arr = str_split('ABCDEFGHIJKLMNOP'); // get all the characters into an
array
    shuffle($arr); // randomize the array
    $arr = array_slice($arr, 0, 6); // get the first six (random) characters
out
    $str = implode('', $arr); // smush them back into a string
matthias dot isler at gmail dot com 28-Feb-2012 03:44
I had to create a function that generates a random binominal distributed
integer. Take a look at the following Wiki article:

http://en.wikipedia.org/wiki/Binomial_distribution

Here is my solution:

<?php

function bin_rand($min = null, $max = null)
{
    $min = ($min) ? (int) $min : 0;
    $max = ($max) ? (int) $max : PHP_INT_MAX;
   
    $range = range($min, $max);
    $average = array_sum($range) / count($range);
   
    $dist = array();
    for ($x = $min; $x <= $max; $x++) {
        $dist[$x] = -abs($average - $x) + $average + 1;
    }
   
    $map = array();
    foreach ($dist as $int => $quantity) {
        for ($x = 0; $x < $quantity; $x++) {
            $map[] = $int;
        }
    }
   
    shuffle($map);
    return current($map);
}

?>
Zak 01-Oct-2011 08:34
I couldn't find a suitable random alpha-numeric generator function so I rolled
my own. It gives a random number in base 36 (0-9, a-z) to a given length.

<?php
function randomAlphaNum($length){

    $rangeMin = pow(36, $length-1); //smallest number to give length digits in
base 36
    $rangeMax = pow(36, $length)-1; //largest number to give length digits in
base 36
    $base10Rand = mt_rand($rangeMin, $rangeMax); //get the random number
    $newRand = base_convert($base10Rand, 10, 36); //convert it
   
    return $newRand; //spit it out

}
?>

hopefully helps someone
Daniel Klein. 19-Aug-2011 03:10
rand() has a granularity of getrandmax() which means that if you're on a
Windows system where getrandmax()==32767 then specifying a range greater than
0-32767 will still only give 32768 unique values. Specifying min=0 and max >
getrandmax()+1 where max == 2^n or max == 2^n-1 will return numbers that are
multiples of some 2^m where (getrandmax()+1) * 2^m == 2^n.

<?php
function gcd($x, $y) { // If gmp_gcd() is not available
  for (;;) {
    if ($x == 0) return $y;
      else $y %= $x;
    if ($y == 0) return $x;
      else $x %= $y;
  }
}

//$rand_max = 0xFFFFFE; // This gives 1
  $rand_max = 0xFFFFFF; // This gives 512
  $rand_max = 0x1000000; // This gives 512
//$rand_max = 0x1000001; // This gives 1

$gcd = rand(0, $rand_max);
for ($i = 0; $i < 1000; ++$i) {
  $gcd = gcd($gcd, rand(0, $rand_max));
}
print($gcd);
?>

I would suggest always using mt_rand() instead as a good habit to get into.
shiawase at gmail dot com 02-Aug-2011 07:32
Another one-liner to generate strings:
<?php
substr(str_shuffle(str_repeat
('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',5)),0,5);
?>
The strings can be repeated to have the possibility that a character appears
multiple times.
ilya dot iz at i dot ua 27-Jul-2011 08:09
I had to come up with a quick way to get a random row from a table, and came up
with the following:

<?php
$query = "SELECT `id` FROM [TABLE]";
$result = mysql_query($query, $link);
$num = mysql_num_rows($result);
if ($num > 0) {
    // Array the ID's...
    $id_array = array();
    while ($row = mysql_fetch_assoc($result)) {
        $id_array []=$row["id"];
    }
    $query = "SELECT * FROM [TABLE] WHERE `id`=".$id_array[rand(0, (count
($id_array)-1))];
    $result = mysql_query($query, $link);
    $row = mysql_fetch_assoc($result);
    // ...
}
?>

LOL
SELECT * from [TABLE] ORDER BY rand() LIMIT 1
Hamza Kubba 26-May-2011 06:47
Regarding getting a random row from a table in MySQL (or Postgres), it is
better to offload that to the database rather than doing one query to grab tons
of data from the database, then a second query to fetch one row.

I.e., this is far more efficient for small to medium sized tables (i.e. less
than 1 mil. rows):

SELECT * FROM [TABLE] ORDER BY RAND() LIMIT 1;

For large tables, this is both easy to implement and efficient:

SELECT COUNT(id) AS number_of_rows FROM [TABLE];

then something alone the lines of:

<?php
$sql = "SELECT * FROM [TABLE] LIMIT 1 OFFSET ".(rand(0, $number_of_rows - 1));
// ...
?>
Alex Khimch alex at khim dot removeit dot ich dot org 19-Mar-2011 01:41
Random is NOT actually random.

It is easily illustrated by multiplying rand(1,500) by rand(1,500) and showing
the output on the image:

<?php
header("Content-type: image/png");
$img = imagecreatetruecolor(500,500);

$ink = imagecolorallocate($img,255,255,255);

for($i=0;$i<500;$i++) {
  for($j=0;$j<500;$j++) {
  imagesetpixel($img, rand(1,500), rand(1,500), $ink1);
  }
}

imagepng($img);
imagedestroy($img);

?>

I expected to get pixel noise, but instead one can see plain diagonal lines.
szeryf.wordpress.com 24-Feb-2011 11:26
Much easier way to generate random string of numbers and letters:

<?php
$n = rand(10e16, 10e20);
echo base_convert($n, 10, 36);
?>

This generates strings of about 11 characters. Experiment with the range for
rand() if you want shorter or longer.
Jesse 21-Dec-2010 11:13
I had to come up with a quick way to get a random row from a table, and came up
with the following:

<?php
$query = "SELECT `id` FROM [TABLE]";
$result = mysql_query($query, $link);
$num = mysql_num_rows($result);
if ($num > 0) {
    // Array the ID's...
    $id_array = array();
    while ($row = mysql_fetch_assoc($result)) {
        $id_array []=$row["id"];
    }
    $query = "SELECT * FROM [TABLE] WHERE `id`=".$id_array[rand(0, (count
($id_array)-1))];
    $result = mysql_query($query, $link);
    $row = mysql_fetch_assoc($result);
    // ...
}
?>
Alireza Eliaderani 10-Sep-2010 02:18
Random integers with normal distribution,
it's not scientifically approved, but worked for me.

<?php
/*
* @param float  $mean, desired average
* @param number $sd, number of items in array
* @param number $min, minimum desired random number
* @param number $max, maximum desired random number
* @return array
*/
function array_distribute($mean,$sd,$min,$max){
    $result = array();
    $total_mean = intval($mean*$sd);
    while($sd>1){
        $allowed_max = $total_mean - $sd - $min;
        $allowed_min = intval($total_mean/$sd);
        $random = mt_rand(max($min,$allowed_min),min($max,$allowed_max));
        $result[]=$random;
        $sd--;
        $total_mean-=$random;
    }
    $result[] = $total_mean;
    return $result;
}
?>
liveonaware [at] gmail [dot] com 31-May-2010 08:16
<?php
//To Pull 7 Unique Random Values Out Of AlphaNumeric

//removed number 0, capital o, number 1 and small L
//Total: keys = 32, elements = 33
$characters = array(
"A","B","C","D","E","F","G","H","J","K","L","M",
"N","P","Q","R","S","T","U","V","W","X","Y","Z",
"1","2","3","4","5","6","7","8","9");

//make an "empty container" or array for our keys
$keys = array();

//first count of $keys is empty so "1", remaining count is 1-6 = total 7 times
while(count($keys) < 7) {
    //"0" because we use this to FIND ARRAY KEYS which has a 0 value
    //"-1" because were only concerned of number of keys which is 32 not 33
    //count($characters) = 33
    $x = mt_rand(0, count($characters)-1);
    if(!in_array($x, $keys)) {
       $keys[] = $x;
    }
}

foreach($keys as $key){
   $random_chars .= $characters[$key];
}
echo $random_chars;
?>
Anonymous 05-Mar-2010 06:41
Generate a random 5 character A-Z0-9  string

<?php
for ($i=0; $i<6; $i++) {
    $d=rand(1,30)%2;
    echo $d ? chr(rand(65,90)) : chr(rand(48,57));
}
?>

# php -r 'for ($i=0; $i<6; $i++) { $d=rand(1,30)%2; echo $d ? chr(rand(65,90))
: chr(rand(48,57)); } echo "\n";'
14BW1A
mike at marylandwebsites dot net 23-Feb-2010 06:42
Rather then counting the rows or running the RAND in my query, I find this to
work just fine.
This code is used to display business highlights at random

Would love to get feedback on this

<?php
// First get the last id from the table

$SQL = "SELECT * FROM HIGHLIGHTS ORDER BY highlight_id DESC LIMIT 1";
$result = mysql_query( $SQL );
while( $row = mysql_fetch_array( $result ) ) {
$ending_id = $row["highlight_id"];
}

// I only want the 5 most recent entries
// So I just subtract 5 from the last ID

$starting_id = $ending_id - 5;

// Because I we don't want a nagitive number I just
// make sure that the starting ID is at least 1

if($starting_id <= 0){
    $starting_id = "1";
    }
 
// now I run the the $starting_id $ending_id at RAND

$howey = rand($starting_id, $ending_id);

// Now I use howey as my id

$SQL = "SELECT * FROM HIGHLIGHTS WHERE highlight_id = '$howey'";
$result = mysql_query( $SQL );
while( $row = mysql_fetch_array( $result ) ) {
$highlight_id = $row["highlight_id"];
$highlight_title = $row["highlight_title"];
}
echo "$highlight_id $highlight_title";
?>
djindjojlo AT gmail DOT com 20-Feb-2010 05:52
a very easy random letters and numbers... one of my beginers scripts :)

<?php

$abc= array("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z");
$num= array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9");
echo $abc[rand(0,25)];
echo $num[rand(0,9)]; 
?>
John Galt 02-Jan-2010 11:24
Another way to create an array of random numbers where there are no identical
numbers.

($n = number of random numbers to return in the array
$min = minimum number
$max = maximum number)

<?php
 function uniqueRand($n, $min = 0, $max = null)
 {
  if($max === null)
   $max = getrandmax();
  $array = range($min, $max);
  $return = array();
  $keys = array_rand($array, $n);
  foreach($keys as $key)
   $return[] = $array[$key];
  return $return;
 }
?>
Hugo Scott hrmscott at hotmail dot com 29-Jul-2009 07:52
Here's a simple function to generate a random date between a start date and an
end date.

It is inclusive of BOTH dates - so using dates 2009-04-01 and 2009-04-03 would
generate a random date that could be 2009-04-01, 2009-04-02 or 2009-04-03.

It won't work if the end date is prior to the start date and if you use a
non-existant date (eg 2009-02-30) it defaults to 1970-01-01

the longer version:
<?php
function makeRandomDateInclusive($startDate,$endDate){
    $days = round((strtotime($endDate) - strtotime($startDate)) / (60 * 60 *
24));
    $n = rand(0,$days);
    return date("Y-m-d",strtotime("$startDate + $n days"));   
}
?>

and the one-line version for compactness freaks:
<?php
function makeRandomDateInclusive($startDate,$endDate){   
    return date("Y-m-d",strtotime("$startDate + ".rand(0,round((strtotime
($endDate) - strtotime($startDate)) / (60 * 60 * 24)))." days"));
}
?>

it is called like this
<?php
echo makeRandomDateInclusive('2009-04-01','2009-04-03');
?>
Hope this is of some use to someone
Greg R. 15-Jun-2009 04:49
I thought this function (random color) might be of use to someone [to create
and return a random hex for HTML colors]:

<?php
function get_random_color()
{
    for ($i = 0; $i<6; $i++)
    {
        $c .=  dechex(rand(0,15));
    }
    return "#$c";
}
?>
alex at bimpson dot com 15-Jun-2009 09:30
A very easy method for generating for generating an array of UNIQUE random
numbers:

<?php

$rand = array();
while (count($rand) < $total ) {
    $r = mt_rand($min,$max);
    if ( !in_array($r,$rand) ) {
        $rand[] = $r;
    }
}

?>

whereby $total is the number of unique random numbers you want, $min is the
lowest possible value and $max is the highest possible value.
david [at] ddrewdesign [dot] com 26-May-2009 06:21
To Jano and Peta:

Thanks for the code. In real world usage, I only had one problem with it: It
will never return the first result of the array (or it will return nothing if
there's only one item in the array). To remedy this, I simply subtracted 1 from

<?php
$rand = rand(1,$max);
?>

like so:

<?php
$rand = rand(1,$max)-1;
?>

Thanks though, for the code you supplied. It was exactly what I needed.
kyle dot florence [@t] gmail dot com 08-May-2009 03:23
Improved random string generation function:

<?php
// Generate a random character string
function rand_str($length = 32, $chars =
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890')
{
    // Length of character list
    $chars_length = (strlen($chars) - 1);

    // Start our string
    $string = $chars{rand(0, $chars_length)};
   
    // Generate random string
    for ($i = 1; $i < $length; $i = strlen($string))
    {
        // Grab a random character from our list
        $r = $chars{rand(0, $chars_length)};
       
        // Make sure the same two characters don't appear next to each other
        if ($r != $string{$i - 1}) $string .=  $r;
    }
   
    // Return the string
    return $string;
}
?>
admin at djs-music dot com 25-Apr-2009 10:13
A nice function to generate a random string, using any character:

<?php
function generateRandStr($length){
      $randstr = "";
      for($i=0; $i<$length; $i++){
         $randnum = mt_rand(0,61);
         if($randnum < 10){
            $randstr .= chr($randnum+48);
         }else if($randnum < 36){
            $randstr .= chr($randnum+55);
         }else{
            $randstr .= chr($randnum+61);
         }
      }
      return $randstr;
   }
?>

Simply use:
generateRandStr(10);

Sample output: $%29zon(4f
petabyte.se 15-Mar-2009 08:56
As an further optimization on janoserki[at]gmail[dot]com previous post i would
recommend that you optimize you first part of php/sql code to something like
this.

<?php
// estimate the number of rows in a table
$lekerdezes = mysql_query("select count(*) as rows from table");
while ($row = mysql_fetch_assoc($lekerdezes))
{
    $max = $row["rows"];
}
?>
the count(*) is much faster for the database than grabbing the hole dataset
from the table.
janoserki [at] gmail [dot] com 04-Mar-2009 12:16
Easy way for mysql: random row
the original form is: "... order by rand()"
but this is not the best way, because it's very slow by a big database (it can
take more minutes to complete the request!)
My suggestion:

<?php
// estimate the number of rows in a table
$lekerdezes = mysql_query("select * from table");
$max = mysql_num_rows($lekerdezes);

// pick one
$rand = rand(1,$max);

$lekerdezes2 = mysql_query("select * from table limit $rand, 1");

// that's all folks :)

?>
whatchildisthis at gmail dot com 06-Dec-2008 04:00
I also enjoy making one-liners.

Here's a non-regular expression approach. It generates a random 32 character
string consisting of, by default, only A-Z, a-z, and 0-9, but you can change
the value of $a for other characters. The random string will be in variable $s
after this line.

<?php
for ($s = '', $i = 0, $z = strlen($a =
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789')-1; $i != 32;
$x = rand(0,$z), $s .= $a{$x}, $i++);
?>

If you don't want the same character to appear beside itself, use this:

<?php
for ($i = 0, $z = strlen($a =
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890')-1, $s = $a
{rand(0,$z)}, $i = 1; $i != 32; $x = rand(0,$z), $s .= $a{$x}, $s = ($s{$i} ==
$s{$i-1} ? substr($s,0,-1) : $s), $i=strlen($s));
?>

For those of you who want both as a function, use this:

<?php
function rand_chars($c, $l, $u = FALSE) {
 if (!$u) for ($s = '', $i = 0, $z = strlen($c)-1; $i < $l; $x = rand(0,$z), $s
.= $c{$x}, $i++);
 else for ($i = 0, $z = strlen($c)-1, $s = $c{rand(0,$z)}, $i = 1; $i != $l; $x
= rand(0,$z), $s .= $c{$x}, $s = ($s{$i} == $s{$i-1} ? substr($s,0,-1) : $s),
$i=strlen($s));
 return $s;
}
?>

string $c is the string of characters to use.
integer $l is how long you want the string to be.
boolean $u is whether or not a character can appear beside itself.

Examples:
rand_chars("ABCEDFG", 10) == GABGFFGCDA
rand_chars("ABCEDFG", 10, TRUE) == CBGFAEDFEC
adam at greatbigmassive dot com 02-Dec-2008 05:10
I've noticed alot of people doing long winded random string generators so I
thought I'd post my one liner to give a bit of a fresh approach.

The concept is simple. The rand() function generates a number made up of 10
different digits. (0,1,2,3,4,5,6,7,8,9).
To generate an equivalent string I only need 10 alpha characters to replace the
numbers.

I am using (p,q,r,s,t,u,v,w,x,y). I chose these letters because they don't
include any characters that resemble numbers and was the best set generated by
the chr() function.

Anyway, to create a 6 character random string I do this:

$rand = preg_replace("/([0-9])/e","chr((\\1+112))",rand(100000,999999));

The length of the string is based on the length of the random number generated.
This would also mean you could generate a random string at a random length too
if you wanted.

Adam
amossoma at o2 dot pl 19-Nov-2008 01:40
<?php
function generateRandomString($length = 10, $letters =
'1234567890qwertyuiopasdfghjklzxcvbnm')
  {
      $s = '';
      $lettersLength = strlen($letters)-1;
     
      for($i = 0 ; $i < $length ; $i++)
      {
      $s .= $letters[rand(0,$lettersLength)];
      }
     
      return $s;
  }
?>
opbarnes 20-Oct-2008 12:33
Generate a random 5 character alpha string:

<?php
print preg_replace('/([ ])/e', 'chr(rand(97,122))', '     ');
?>
szczepan[DoT]Krol #HT# gmail [knowRest] 14-Aug-2008 06:55
Heres another function to generate Random Unique numbers.

<?php
class UniqueRand{
  var $alreadyExists = array();

  function uRand($min = NULL, $max = NULL){
    $break='false';
    while($break=='false'){
      $rand=mt_rand($min,$max);

      if(array_search($rand,$this->alreadyExists)===false){
        $this->alreadyExists[]=$rand;
        $break='stop';
      }else{
        echo " $rand already!  ";
        print_r($this->alreadyExists);
      }
    }
    return $rand;
  }
}
$rand=new UniqueRand();


echo"<b> ". $rand->uRand(0,5)."</b>";
echo"<b> ". $rand->uRand(5,5)."</b>";
echo"<b> ". $rand->uRand(10,5)."</b>";

?>
thomas at tgohome dot com 31-Jul-2008 08:46
You don't need fancy queries to grab a random row(s) from MySQL; it's actually
quite simple. In fact, you can do it in a single query.

<?php
$random_rows = array();

$query = mysql_query("SELECT * FROM tablename ORDER BY RAND() LIMIT 1");

while($row = mysql_fetch_array($query))
{
     $random_rows[] = $row;
}
?>

You can extend LIMIT to any number, so you can select 10 random rows. Also,
because it uses ORDER BY the rows are always unique if you select 10 rows, for
example.

This might work on other database systems such as MsSQL and PostgreSQL but I
haven't tested them.
Anonymous 30-Jul-2008 04:29
quick way to generate randomish numbers and simple strings.
no messing around with functions, so you can just pop the line into the middle
of your existing code.

not the most perfect for sure, but ok for plenty of situations...

<?php

$random_number = intval( "0" . rand(1,9) . rand(0,9) . rand(0,9) . rand(0,9) .
rand(0,9) ); // random(ish) 5 digit int

$random_string = chr(rand(65,90)) . chr(rand(65,90)) . chr(rand(65,90)) . chr
(rand(65,90)) . chr(rand(65,90)); // random(ish) 5 character string

?>

hope someone finds it useful for somthing.

regards,
deeeeeen alxndr0u
gacek at my dot planet 29-May-2008 04:36
For some people who would need to generate random string:

<?php

function random_letters ($numofletters) {
    if (!isset($numofletters)) $numofletters = 10; // if $numofletters is not
specified sets to 10 letters
    $literki = array('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K',
'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'W');
    $ilosc_literek = count($literki);
    for ($licz = 0; $licz < $numofletters; $licz++) {
    $rand = rand(0, $ilosc_literek-1);
    $vercode = $vercode.$literki[$rand];
    }
}

?>
davidsteinsland [at] gmail [dot] com 26-Apr-2008 12:27
emad_ramahi at hotmail dot com:
I've actually noticed that with a large dataset (100k rows), the query
dramatically slows down the server and performance is way too bad.

The way I see it, you have to workable solutions:

Using PHP:

<?php
//$Table holds the name of the table we're getting the random row from
//$Rows specifies how many rows we need to fetch
function mysql_rand ($Query, $Rows = 1) {
    //getting the table name from $query
    //what you can do, is replace the $query argument with $table,
    //this way to dont have to search for the table's name
    $SQL = sprintf ('SELECT COUNT(*) FROM %s', substr ($query, stripos ($query,
'from')+5, strpos ($query, ' ')));
   
    $Max = mysql_result (mysql_query ($SQL), 0);
    $Random = rand (0, $Max);
   
    //If the random number is 99, and the database only has 100 rows
    //We'll subtract the random number, so we don't exceed 100, thus preventing
a MySQL error message
    return $Query . sprintf ('LIMIT %d, %d', ($Max < $Rows) ? 0 : (($Random >
$Max - $Rows) ? $Max - $Rows : $Random), $Rows);
}

//Instead of using MySQL's RAND(), we use LIMIT to fetch rows
//E.g. LIMIT 5,9 fetches from row 5, and the subsequent 9
$SQL = mysql_rand ('SELECT row FROM table'); //SELECT row FROM table LIMIT x, y
?>

or SQL:
SELECT * FROM Table T JOIN (SELECT FLOOR(MAX(ID)*RAND()) AS ID FROM Table) AS x
ON T.ID >= x.ID LIMIT 1;
emad_ramahi at hotmail dot com 09-Mar-2008 01:16
Hi All,
For those whom wants to get a random value from MySQL:
select coumnName from TableName order by rand()
Anonymous 25-Feb-2008 12:37
Using the script below with rand() instead of mt_rand(),
I was suprised to find many "words" and part of "phrases" in common.

mt_rand() is highly recomanded when you want to build test cases.

<?php
 $ressbdd = mysql_connect("localhost", "usr", "pass")
  or  die("Could not connect: " . mysql_error());
 for($i=0;$i<100000;$i++){
  $xx1=mt_rand(15,80);
  $texte = phrase($xx1);
  $sql = 'INSERT into phrases.valeurs set valeur = \'' . $texte . '\'';
  mysql_query( $sql , $ressbdd );
 }
//=============================================
function phrase($n){
 $phrase='';
 for($i=0;$i<$n;$i++){
  $xx2=mt_rand(2,20);
  $phrase.=mot($xx2) . ' ';
 }
 return(substr($phrase,0,-1).'.'); // phrase ends with a .
}
//=============================================
function mot($n){
 if($n<=0)  return 'hello';
 if($n>=31) return 'world';
 $voyelle =Array('a','e','i','o','u','y');
 $consonne=Array(
'b','c','d','f','g','h','j','k','l','m',
'n','p','q','r','s','t','v','w','x','z');
 $mot='';
 for($i=0;$i<$n;$i++){
  if($i%2==0){
   $xx3=mt_rand(0,19);
   $mot.=$consonne[$xx3];
  }else{
   $xx4=mt_rand(0,5);
   $mot.=$voyelle[$xx4];
  }
 }
 return $mot;
}
?>
Anonymous 06-Nov-2007 01:24
Note, the function used by PHP to constrain a random number between (min, max)
is the following:

$number = $min + (($max - $min + 1) * ($number / ($rand_max + 1));

where the following:
$number - the initially generated random number
$min - the minimum in the range
$max - the maximum in the range
$rand_max - the maximum possible random value

What this algorithm does is constrain the generated number to a 0-1 range, then
multiply it against your range, mapping the two to each other.

In practice you'll see the following results:
For a generated $number of 16384 and a $rand_max of 32768:
rand(0, 10) = 5
rand(0, 100) = 50
rand(0, 1000) = 500

with the additional property that if the range you're asking for is larger than
$rand_max, random numbers will be in a multiple of $max/$rand_max.
Ishtar 10-Sep-2007 06:18
A small comment on phpdev-dunnbypauls conclusion that rand() only generates
numbers that are a multiply of 3.
<?php
$n = rand(0,100000); // with MAX_RAND=32768
?>
Since, 100000/32768=3.05 you get multiples of 3. The random integer will be
multiplied by 3.05 to fit between 0 and 100000. rand() works fine, if you don't
ask for bigger numbers then RAND_MAX.
rok dot kralj at gmail dot com 16-Jun-2007 12:43
rand function returns just a whole numbers. If you want a random float, then
here's an elegant way:

<?php
function random_float ($min,$max) {
   return ($min+lcg_value()*(abs($max-$min)));
}
?>
bozo_z_clown at yahoo dot com 23-May-2007 05:36
Note that the automatic seeding seems to be done with the current number of
seconds which means you can get the same results for several runs on a fast
server.  Either call srand() yourself with a more frequently changing seed or
use mt_rand() which doesn't appear to suffer from the problem.
jont at live dot co dot uk 05-Apr-2007 03:42
isn't this just a simpler way of making a random id for somthing? I mean i know
that there is a very slight chance that a duplicate could be made but its a
very, very, very small chance, nearly impossible.

$rand = mt_rand(0, 32);
$code = md5($rand . time());
echo "$code";

and if you don't want it the md5 can be removed, I've just added it as a prefer
it there :)

Jon
phpdev at dunnbypaul dot net 07-Mar-2007 08:51
Here's an interesting note about the inferiority of the rand() function. Try,
for example, the following code...

<?php
$r = array(0,0,0,0,0,0,0,0,0,0,0);
for ($i=0;$i<1000000;$i++) {
  $n = rand(0,100000);
  if ($n<=10) {
    $r[$n]++;
  }
}
print_r($r);
?>

which produces something similar to the following output (on my windows box,
where RAND_MAX is 32768):

Array
(
    [0] => 31
    [1] => 0
    [2] => 0
    [3] => 31
    [4] => 0
    [5] => 0
    [6] => 30
    [7] => 0
    [8] => 0
    [9] => 31
    [10] => 0
)

Within this range only multiples of 3 are being selected. Also note that values
that are filled are always 30 or 31 (no other values! really!)

Now replace rand() with mt_rand() and see the difference...

Array
(
    [0] => 8
    [1] => 8
    [2] => 14
    [3] => 16
    [4] => 9
    [5] => 11
    [6] => 8
    [7] => 9
    [8] => 7
    [9] => 7
    [10] => 9
)

Much more randomly distributed!

Conclusion: mt_rand() is not just faster, it is a far superior algorithm.
Patrick Daryll G. 02-Mar-2007 06:51
Using rand()%x is faster than rand(0,x) yes, but it is wrong.
Consider the following example:
RAND_MAX is 32768 (like on Windows for example)
You use rand()%30000
Imagine rand() returns a value between 30000 and 32768.
Modulo could make any value between 0 and 2768, but not any between 2769 and
29999 (except the value is below 29999).
This would double the chance of getting a number between 0 and 2768, which is
speaking against the principles of randomness.
ludicruz at yahoo dot com 27-Sep-2006 05:42
frank, nick at nerdynick dot com, and kniht
this is now O(n) instead of O(n^2) ish...

<?php
function rand_permute($size, $min, $max)
{
    $retval = array();
    //initialize an array of integers from $min to $max
    for($i = $min;$i <= $max;$i++)
    {
        $retval[$i] = $i;
    }
    //start with the the first index ($min).
    //randomly swap this number with any other number in the array.
    //this way we guarantee all numbers are permuted in the array,
    //and we assure no number is used more than once (technically reiterating
prev line).
    //therefore we don't have to do the random checking each time we put
something into the array.
    for($i=$min; $i < $size; $i++)
    {
        $tmp = $retval[$i];
        $retval[$i] = $retval[$tmpkey = rand($min, $max)];
        $retval[$tmpkey] = $tmp;
    }
    return array_slice($retval, 0, $size);
}
?>
umpalump at poczta dot neostrada dot pl 13-Jun-2005 05:32
Random numbers with Gauss distribution (normal distribution).
A correct alghoritm. Without aproximations, like Smaaps'
It is specially usefull for simulations in physics.
Check yourself, and have a fun.

<?php

function gauss()
{   // N(0,1)
    // returns random number with normal distribution:
    //   mean=0
    //   std dev=1
   
    // auxilary vars
    $x=random_0_1();
    $y=random_0_1();
   
    // two independent variables with normal distribution N(0,1)
    $u=sqrt(-2*log($x))*cos(2*pi()*$y);
    $v=sqrt(-2*log($x))*sin(2*pi()*$y);
   
    // i will return only one, couse only one needed
    return $u;
}

function gauss_ms($m=0.0,$s=1.0)
{   // N(m,s)
    // returns random number with normal distribution:
    //   mean=m
    //   std dev=s
   
    return gauss()*$s+$m;
}

function random_0_1()
{   // auxiliary function
    // returns random number with flat distribution from 0 to 1
    return (float)rand()/(float)getrandmax();
}

?>

JanS
student of astronomy
on Warsaw University
smaaps at kaldamar dot de 06-Jun-2005 10:44
Lately I needed some random numbers with a gaussian (normal) distribution, not
evenly distributed as the numbers generated by rand(). After googling a while,
I found out that there is no perfect algrorithm that creates such numbers out
of evenly distruted random numbers but a few methods that have similar effect.
The following function implements all three algorithms I found- The the last
two methods create numbers where you can find a lower and upper boundary and
the first one will create a number from time to time (such as one in every
10000) that may be very far from the average value. Have fun testing and using
it.

<?php
function gauss($algorithm = "polar") {
    $randmax = 9999;
   
    switch($algorithm) {
       
        //polar-methode by marsaglia
        case "polar":
            $v = 2;
            while ($v > 1) {
                $u1 = rand(0, $randmax) / $randmax;
                $u2 = rand(0, $randmax) / $randmax;

                $v = (2 * $u1 - 1) * (2 * $u1 - 1) + (2 * $u2 - 1) * (2 * $u2 -
1);
            }
           
            return (2* $u1 - 1) * (( -2 * log($v) / $v) ^ 0.5);
       
        // box-muller-method
        case "boxmuller":
            do {
                $u1 = rand(0, $randmax) / $randmax;
                $u2 = rand(0, $randmax) / $randmax;                   
               
                $x = sqrt(-2 * log($u1)) * cos(2 * pi() * $u2);
            } while (strval($x) == "1.#INF" or strval($x) == "-1.#INF");
           
            // the check has to be done cause sometimes (1:10000)
            // values such as "1.#INF" occur and i dont know why
           
            return $x;

        // twelve random numbers  
        case "zwoelfer":
            $sum = 0;
            for ($i = 0; $i < 12; $i++) {
                $sum += rand(0, $randmax) / $randmax;
            }
            return $sum;
     }      
}
?>
relsqui at armory dot com 21-Jan-2005 02:23
Don't forget, it's faster to use bitwise operations when you need a random
number that's less than some power of two. For example,

<?php
rand()&1;
// instead of
rand(0,1);
// for generating 0 or 1,

rand()&3;
// instead of
rand(0,3);
// for generating 0, 1, 2, or 3,

rand()&7;
// instead of
rand(0,7)
// for generating 0, 1, 2, 3, 4, 5, 6, or 7,
?>

and so on. All you're doing there is generating a default random number (so PHP
doesn't have to parse any arguments) and chopping off the piece that's useful
to you (using a bitwise operation which is faster than even basic math).
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue Apr 24 17:21:12 2012 UTC
Received cookie: COUNTRY=JPN%2C111.188.5.19
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 20 Apr 2012

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列内の部分文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れる位置を探します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    指定すると、文字列内での検索開始位置がその位置になります。 strrpos() や
    strripos() と異なり、負の数は指定できません。

返り値

needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) から
の相対位置で返します。文字列の開始位置は 0 であり、1 ではないことに注意しましょ
う。

needle が見つからない場合は FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strstr() - 文字列が最初に現れる位置を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • substr() - 文字列の一部分を返す
  • preg_match() - 正規表現によるマッチングを行う



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 20 Apr 2012
 
add a note add a note User Contributed Notes strpos
martijn at martijnfrazer dot nl 25-Feb-2012 03:58
This is a function I wrote to find all occurrences of a string, using strpos
recursively.

<?php
function strpos_recursive($haystack, $needle, $offset = 0, &$results = array())
{               
    $offset = strpos($haystack, $needle, $offset);
    if($offset === false) {
        return $results;           
    } else {
        $results[] = $offset;
        return strpos_recursive($haystack, $needle, ($offset + 1), $results);
    }
}
?>

This is how you use it:

<?php
$string = 'This is some string';
$search = 'a';
$found = strpos_recursive($string, $search);

if($found) {
    foreach($found as $pos) {
        echo 'Found "'.$search.'" in string "'.$string.'" at position <b>
'.$pos.'</b><br />';
    }   
} else {
    echo '"'.$search.'" not found in "'.$string.'"';
}
?>
Logan Baron 02-Feb-2012 02:31
After looking at the strposa function posted earlier, I noticed that if one of
the needles tested false when being checked in its own strpos, the function
would always return false. So, I re-wrote it to return the lowest index of the
first occurring match.

private function strposa($haystack, $needles=array(), $offset=0)
{
        $chr = array();
        foreach($needles as $needle)
        {
                $res = strpos($haystack, $needle, $offset);
                if ($res !== false) $chr[$needle] = $res;
        }
        if(empty($chr)) return false;
        return min($chr);
}

Now, it simply doesn't add that needle's strpos value if it's false. The check
that already existed will be useful here, if nothing got added to the array
there were no matches, so return false. However this time, it will return
something other than 0 (false) if there was a match but also a non-match in the
array of needles.
rjeggens at ijskoud dot org 24-Jan-2012 07:38
I lost an hour before I noticed that strpos only returns FALSE as a boolean,
never TRUE.. This means that

strpos() !== false

is a different beast then:

strpos() === true

since the latter will never be true. After I found out, The warning in the
documentation made a lot more sense.
gjh42 - simonokewode at hotmail dot com 07-Nov-2011 07:59
A pair of functions to replace every nth occurrence of a string with another
string, starting at any position in the haystack. The first works on a string
and the second works on a single-level array of strings, treating it as a
single string for replacement purposes (any needles split over two array
elements are ignored).

Can be used for formatting dynamically-generated HTML output without touching
the original generator: e.g. add a newLine class tag to every third item in a
floated list, starting with the fourth item.
 
<?php
/* String Replace at Intervals   by Glenn Herbert (gjh42)    2010-12-17
 */
 
//(basic locator by someone else - name unknown)
//strnposr() - Find the position of nth needle in haystack.
function strnposr($haystack, $needle, $occurrence, $pos = 0) {
    return ($occurrence<2)?strpos($haystack, $needle, $pos):strnposr
($haystack,$needle,$occurrence-1,strpos($haystack, $needle, $pos) + 1);
}

//gjh42
//replace every nth occurrence of $needle with $repl, starting from any
position
function str_replace_int($needle, $repl, $haystack, $interval, $first=1, $pos=
0) {
  if ($pos >= strlen($haystack) or substr_count($haystack, $needle, $pos) <
$first) return $haystack;
  $firstpos = strnposr($haystack, $needle, $first, $pos);
  $nl = strlen($needle);
  $qty = floor(substr_count($haystack, $needle, $firstpos + 1)/$interval);
  do { //in reverse order
    $nextpos = strnposr($haystack, $needle, ($qty * $interval) + 1, $firstpos);
    $qty--;
    $haystack = substr_replace($haystack, $repl, $nextpos, $nl);
  } while ($nextpos > $firstpos);
  return $haystack;
}
  //$needle = string to find
  //$repl = string to replace needle
  //$haystack = string to do replacing in
  //$interval = number of needles in loop
  //$first=1 = first occurrence of needle to replace (defaults to first)
  //$pos=0 = position in haystack string to start from (defaults to first)
 
//replace every nth occurrence of $needle with $repl, starting from any
position, in a single-level array
function arr_replace_int($needle, $repl, $arr, $interval, $first=1, $pos=0,
$glue='|+|') {
  if (!is_array($arr))  return $arr;
  foreach($arr as $key=>$value){
    if (is_array($arr[$key])) return $arr;
  }
  $haystack = implode($glue, $arr);
  $haystack = str_replace_int($needle, $repl, $haystack, $interval, $first,
$pos);
  $tarr = explode($glue, $haystack);
  $i = 0;
  foreach($arr as $key=>$value){
    $arr[$key] = $tarr[$i];
    $i++;
  }
  return $arr;
}
?>
If $arr is not an array, or a multilevel array, it is returned unchanged.
Mark Oates 25-Oct-2011 08:36
When using GLOB_BRACE to find files on a local computer, note that including
the drive lettername within the braces may cause the behavior to not work as
expected:

<?php

$location = "{c:/foo/*.txt,c:/foo/bar/*.txt}"; // < will NOT work

$location = "c:{/foo/*.txt,/foo/bar/*.txt}"; // < works

$location = "c:/{foo/*.txt,foo/bar/*.txt}"; // < works

$location = "{/foo/*.txt,/foo/bar/*.txt}"; // < works

print_r(glob($location, GLOB_BRACE));

?>
jim at terrys dot net 29-Sep-2011 11:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 08:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 04:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 02:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 02:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 03:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 05:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 04:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 07:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 02:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 02:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 09:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 30-Sep-2009 08:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 01:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 09:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 01:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 11:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 06:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 12:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 09:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 11:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 27-Dec-2008 04:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 17-Nov-2008 05:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 22-Oct-2008 06:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 27-Sep-2008 11:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 11:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 12:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 03:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 06:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 01-Apr-2008 04:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 03:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 04:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 01:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 02:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 08:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 05:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 09:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 12:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 02:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 10:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 26-Sep-2006 07:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 07:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 06:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 02:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 05:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 06:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 20-Jan-2005 06:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 09:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 03:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 10:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 03:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 09:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 09-Mar-2004 05:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 10:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 09:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Apr 21 15:21:08 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

sscanf> <soundex
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 13 Apr 2012

view this page in

[English             ] Change language
sprintf

(PHP 4, PHP 5)

sprintf — フォーマットされた文字列を返す

説明

string sprintf ( string $format [, mixed $args [, mixed $... ]] )

フォーマット文字列 format に基づき生成された文字列を返します。

パラメータ

format

    フォーマット文字列は 0 個以上のディレクティブ（指示子）により構成されます。
    ディレクティブには、そのまま結果にコピーされる (% を除く) 通常の文字と変換
    指定子 (conversion specifications) があり、取り出される際はどちらもそれ自身
    がパラメータとなります。このことは sprintf() の場合だけでなく printf() の場
    合も同様です。

    各変換指定子は、パーセント記号 (%) の後にこれらの要素が一つ以上続いたものに
    なります。
     1. オプションの符号指定子。これは、数値で符号 (- あるいは +) を使用するよ
        う指定します。デフォルトでは、数値が負の場合の - 符号のみが使用されます
        。この指定子により、正の数にも強制的に + 符号をつけることができます。こ
        れは PHP 4.3.0 で追加されました。
     2. オプションのパディング指定子。これは、文字列が正しい長さになるまでどん
        な文字で埋めるかということを指定します。これは空白かまたは 0 (文字 '0')
        のいずれかです。デフォルトでは空白で埋められます。これ以外のパディング
        文字を指定するには、その文字の前に単一引用符 (') を置きます。後述の例を
        参照ください。
     3. オプションのアラインメント指定子。これは、結果を左寄せまたは右寄せにし
        たい場合に指定します。デフォルトは右寄せです。ここで - 文字を指定すると
        左寄せとなります。
     4. オプションの数字。これは表示幅指定子です。結果を（最低）何桁にするかを
        指定します。
     5. オプションの精度指定子 (ピリオド (`.') に続けてオプションで桁数指定文字
        列を書いたもの)。これは、浮動小数点数に対して数字を何桁まで表示するかを
        指定します。文字列に対して使用した場合は、これは切り捨て位置として働き
        ます。この文字数を超える文字を切り捨てられます。
     6. 型指定子。引数を何の型として扱うかを指定します。指定できる型を以下に示
        します。
          ☆ % - パーセント文字。引数は不要です。
          ☆ b - 引数を整数として扱い、 2 進数として表現します。
          ☆ c - 引数を整数として扱い、その ASCII 値の文字として表現します。
          ☆ d - 引数を整数として扱い、 10 進数として表現します。
          ☆ e - 引数を科学記法として扱います (例 1.2e+2)。精度の指定子は、PHP
            5.2.1 以降では小数点以下の桁数を表します。それより前のバージョンで
            は、有効数字の桁数 (ひとつ小さい値) を意味していました。
          ☆ E - %e と同じですが、大文字を使います (例 1.2E+2)。
          ☆ u - 引数を整数として扱い、符号無しの 10 進数として表現します。
          ☆ f - 引数を double として扱い、浮動小数点数として表現します。
          ☆ F - 引数を float として扱い、浮動小数点数として表現します (ロケール
            に依存しません)。 PHP 4.3.10 および PHP 5.0.3 以降で使用可能です。
          ☆ g - %e および %f の短縮形。
          ☆ G - %E および %f の短縮形。
          ☆ o - 引数を整数として扱い、 8 進数として表現します。
          ☆ s - 引数を文字列として扱い、表現します。
          ☆ x - 引数を整数として扱い、16 進数として (小文字で)表現します。
          ☆ X - 引数を整数として扱い、16 進数として (大文字で)表現します。

    フォーマット文字列における引数の番号付け/交換をサポートしています。以下に例
    を示します。
   
    例1 引数の交換

    <?php
    $num = 5;
    $location = 'tree';

    $format = 'There are %d monkeys in the %s';
    printf($format, $num, $location);
    ?>
    この出力は、"There are 5 monkeys in the tree" のようになります。ここで、フ
    ォーマット文字列が別のファイルにある場合を考えてみましょう。これは、出力を
    国際化したりする場合に行われる可能性があります。たとえばフォーマット文字列
    が次のように書き換えられたとすると、
   
    例2 引数の交換

    <?php
    $format = 'The %s contains %d monkeys';
    printf($format, $num, $location);
    ?>
    ここで、問題が発生します。フォーマット文字列における置換指示子の順番は、コ
    ードにおける引数の順番と一致していません。だからといってコードを変更するの
    ではなく、むしろ置換指示子が参照するフォーマット文字列のほうで指示を行う方
    が望ましいでしょう。フォーマット文字列を次のように書き換えてみましょう。
   
    例3 引数の交換

    <?php
    $format = 'The %2$s contains %1$d monkeys';
    printf($format, $num, $location);
    ?>
    こうすることによるもうひとつの利点は、同じ置換指示子を複数回使用する際にコ
    ードに引数を追加せずにすむことです。例えば、次のようになります。
   
    例4 引数の交換

    <?php
    $format = 'The %2$s contains %1$d monkeys.
               That\'s a nice %2$s full of %1$d monkeys.';
    printf($format, $num, $location);
    ?>
    引数の交換を使うときには、位置指定子 n$ をパーセント記号 (%) の直後に置かな
    ければならず、間に他の指定を入れてはいけません。次の例を示します。
   
    例5 位置指定子と他の指定との共用

    <?php
    $format= 'The %2$s contains %1$04d monkeys';
    printf($format, $num, $location);
    ?>

    上の例の出力は以下となります。

    The tree contains 0005 monkeys

args

...

返り値

フォーマット文字列 format に基づき生成された文字列を返します。

変更履歴

バージョン                        説明
4.0.6      引数の番号付け/交換をサポートするようになりました。

例

例6 printf() のさまざまな例

<?php
$n =  43951789;
$u = -43951789;
$c = 65; // ASCII コードの 65 は 'A' です

// %% に注目しましょう。これは、リテラル '%' を文字として出力します
printf("%%b = '%b'\n", $n); // 2 進表現
printf("%%c = '%c'\n", $c); // ascii 文字を表示します。chr() 関数と同じです
printf("%%d = '%d'\n", $n); // 標準の整数表現
printf("%%e = '%e'\n", $n); // 科学記法
printf("%%u = '%u'\n", $n); // 正の整数の、符号なし整数表現
printf("%%u = '%u'\n", $u); // 負の整数の、符号なし整数表現
printf("%%f = '%f'\n", $n); // 浮動小数点表現
printf("%%o = '%o'\n", $n); // 8 進表現
printf("%%s = '%s'\n", $n); // 文字列表現
printf("%%x = '%x'\n", $n); // 16 進表現 (小文字)
printf("%%X = '%X'\n", $n); // 16 進表現 (大文字)

printf("%%+d = '%+d'\n", $n); // 正の整数に符号指定子を使用
printf("%%+d = '%+d'\n", $u); // 負の整数に符号指定子を使用
?>

上の例の出力は以下となります。

%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'

例7 printf() の文字列指定子

<?php
$s = 'monkey';
$t = 'many monkeys';

printf("[%s]\n",      $s); // 標準の文字列出力
printf("[%10s]\n",    $s); // 空白を使用して右詰め
printf("[%-10s]\n",   $s); // 空白を使用して左詰め
printf("[%010s]\n",   $s); // ゼロ埋めは文字列でも可能です
printf("[%'#10s]\n",  $s); // ゼロの代わりに独自の文字 '#' で埋めます
printf("[%10.10s]\n", $t); // 左詰めを行い、10 文字以上は切り捨てます
?>

上の例の出力は以下となります。

[monkey]
[    monkey]
[monkey    ]
[0000monkey]
[####monkey]
[many monke]

例8 sprintf(): 整数のゼロ埋め

<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>

例9 sprintf(): 通貨をフォーマットする例

<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money は "123.1" を出力します。
$formatted = sprintf("%01.2f", $money);
// echo $formatted は "123.10"を出力します
?>

例10 sprintf(): 科学記法

<?php
$number = 362525200;

echo sprintf("%.3e", $number); // 3.625e+8 を出力します
?>

参考

  • printf() - フォーマット済みの文字列を出力する
  • sscanf() - フォーマット文字列に基づき入力を処理する
  • fscanf() - フォーマットに基づきファイルからの入力を処理する
  • vsprintf() - フォーマットされた文字列を返す
  • number_format() - 数字を千位毎にグループ化してフォーマットする



sscanf> <soundex
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 13 Apr 2012
 
add a note add a note User Contributed Notes sprintf
eslindsey at gmail dot com 10-Mar-2012 06:49
@andrejsstepanovs at gmail dot com:

You should just use PHP's built-in error suppression; that's exactly the kind
of situation it's there for:

$str = @sprintf('%s %s %s', 'too few parameters');
krzysiek dot 333 at gmail dot com - zryty dot hekko dot pl 20-Aug-2011 12:48
Encoding and decoding IP adress to format: 1A2B3C4D (mysql column: char(8) )

<?php
function encode_ip($dotquad_ip)
{
    $ip_sep = explode('.', $dotquad_ip);
    return sprintf('%02x%02x%02x%02x', $ip_sep[0], $ip_sep[1], $ip_sep[2],
$ip_sep[3]);
}

function decode_ip($int_ip)
{
    $hexipbang = explode('.', chunk_split($int_ip, 2, '.'));
    return hexdec($hexipbang[0]). '.' . hexdec($hexipbang[1]) . '.' . hexdec
($hexipbang[2]) . '.' . hexdec($hexipbang[3]);
}
?>
timo dot frenay at gmail dot com 02-May-2011 05:38
Here is how to print a floating point number with 16 significant digits
regardless of magnitude:

<?php
    $result = sprintf(sprintf('%%.%dF', max(15 - floor(log10($value)), 0)),
$value);
?>

This works more reliably than doing something like sprintf('%.15F', $value) as
the latter may cut off significant digits for very small numbers, or prints
bogus digits (meaning extra digits beyond what can reliably be represented in a
floating point number) for very large numbers.
andrejsstepanovs at gmail dot com 21-Apr-2011 07:13
Use this function to ignore warning "Too few arguments".

<?php
/**
 * Ignores php E_WARNING "sprintf(): Too few arguments".
 * If parameters is too fiew, then this function add extra empty parameter and
try again.
 * Working in recursion.
 *
 * @param string $template
 * @param mixed $parameters
 * @return string
 */
function my_sprintf($template, $parameters){
   if(!function_exists('handleError')){//initialize new error handler function
      function handleError($errno, $errstr, $errfile, $errline, array
$errcontext){
         throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
      }
      set_error_handler('handleError');
   }

   if(!is_array($parameters)){//manage parameters to allow string
      $parameters = array($parameters);
   }

   try{//trying to execute function. if warning is received, then add parameter
      eval('$return = sprintf($template, "'.implode('","', $parameters).'");');
      return $return;
   }catch(ErrorException $e){
      array_push($parameters, null);
      return my_sprintf($template, $parameters);
   }
}
?>
carmageddon at gmail dot com 02-Feb-2011 06:38
If you want to convert a decimal (integer) number into constant length binary
number in lets say 9 bits, use this:

$binary = sprintf('%08b', $number );

for example:
<?php
$bin = sprintf('%08b',511 );
echo $bin."\n";
?>

would output 111111111
And 2 would output 00000010

I know the leading zeros are useful to me, perhaps they are to someone else
too.
dwieeb at gmail dot com 01-Sep-2010 11:54
If you use the default padding specifier (a space) and then print it to HTML,
you will notice that HTML does not display the multiple spaces correctly. This
is because any sequence of white-space is treated as a single space.

To overcome this, I wrote a simple function that replaces all the spaces in the
string returned by sprintf() with the character entity reference "&nbsp;" to
achieve non-breaking space in strings returned by sprintf()

<?php
//Here is the function:
function sprintf_nbsp() {
   $args = func_get_args();
   return str_replace(' ', '&nbsp;', vsprintf(array_shift($args), array_values
($args)));
}

//Usage (exactly like sprintf):
$format = 'The %d monkeys are attacking the [%10s]!';
$str = sprintf_nbsp($format, 15, 'zoo');
echo $str;
?>

The above example will output:
The 15 monkeys are attacking the [       zoo]!

<?php
//The variation that prints the string instead of returning it:
function printf_nbsp() {
   $args = func_get_args();
   echo str_replace(' ', '&nbsp;', vsprintf(array_shift($args), array_values
($args)));
}
?>
geertdd at gmail dot com 01-Sep-2010 12:53
Note that when using a sign specifier, the number zero is considered positive
and a "+" sign will be prepended to it.

<?php
printf('%+d', 0); // +0
?>
nate at frickenate dot com 13-Nov-2009 11:45
Here's a clean, working version of functions to allow using named arguments
instead of numeric ones. ex: instead of sprintf('%1$s', 'Joe');, we can use
sprintf('%name$s', array('name' => 'Joe'));. I've provided 2 different
versions: the first uses the php-like syntax (ex: %name$s), while the second
uses the python syntax (ex: %(name)s).

<?php

/**
 * version of sprintf for cases where named arguments are desired (php syntax)
 *
 * with sprintf: sprintf('second: %2$s ; first: %1$s', '1st', '2nd');
 *
 * with sprintfn: sprintfn('second: %second$s ; first: %first$s', array(
 *  'first' => '1st',
 *  'second'=> '2nd'
 * ));
 *
 * @param string $format sprintf format string, with any number of named
arguments
 * @param array $args array of [ 'arg_name' => 'arg value', ... ] replacements
to be made
 * @return string|false result of sprintf call, or bool false on error
 */
function sprintfn ($format, array $args = array()) {
    // map of argument names to their corresponding sprintf numeric argument
value
    $arg_nums = array_slice(array_flip(array_keys(array(0 => 0) + $args)), 1);

    // find the next named argument. each search starts at the end of the
previous replacement.
    for ($pos = 0; preg_match('/(?<=%)([a-zA-Z_]\w*)(?=\$)/', $format, $match,
PREG_OFFSET_CAPTURE, $pos);) {
        $arg_pos = $match[0][1];
        $arg_len = strlen($match[0][0]);
        $arg_key = $match[1][0];

        // programmer did not supply a value for the named argument found in
the format string
        if (! array_key_exists($arg_key, $arg_nums)) {
            user_error("sprintfn(): Missing argument '${arg_key}'",
E_USER_WARNING);
            return false;
        }

        // replace the named argument with the corresponding numeric one
        $format = substr_replace($format, $replace = $arg_nums[$arg_key],
$arg_pos, $arg_len);
        $pos = $arg_pos + strlen($replace); // skip to end of replacement for
next iteration
    }

    return vsprintf($format, array_values($args));
}

/**
 * version of sprintf for cases where named arguments are desired (python
syntax)
 *
 * with sprintf: sprintf('second: %2$s ; first: %1$s', '1st', '2nd');
 *
 * with sprintfn: sprintfn('second: %(second)s ; first: %(first)s', array(
 *  'first' => '1st',
 *  'second'=> '2nd'
 * ));
 *
 * @param string $format sprintf format string, with any number of named
arguments
 * @param array $args array of [ 'arg_name' => 'arg value', ... ] replacements
to be made
 * @return string|false result of sprintf call, or bool false on error
 */
function sprintfn ($format, array $args = array()) {
    // map of argument names to their corresponding sprintf numeric argument
value
    $arg_nums = array_slice(array_flip(array_keys(array(0 => 0) + $args)), 1);

    // find the next named argument. each search starts at the end of the
previous replacement.
    for ($pos = 0; preg_match('/(?<=%)\(([a-zA-Z_]\w*)\)/', $format, $match,
PREG_OFFSET_CAPTURE, $pos);) {
        $arg_pos = $match[0][1];
        $arg_len = strlen($match[0][0]);
        $arg_key = $match[1][0];

        // programmer did not supply a value for the named argument found in
the format string
        if (! array_key_exists($arg_key, $arg_nums)) {
            user_error("sprintfn(): Missing argument '${arg_key}'",
E_USER_WARNING);
            return false;
        }

        // replace the named argument with the corresponding numeric one
        $format = substr_replace($format, $replace = $arg_nums[$arg_key] . '$',
$arg_pos, $arg_len);
        $pos = $arg_pos + strlen($replace); // skip to end of replacement for
next iteration
    }

    return vsprintf($format, array_values($args));
}

?>
Astone 15-Sep-2009 11:41
When you're using Google translator, you have to 'escape' the 'conversion
specifications' by putting <span class="notranslate"></span> around them.

Like this:

<?php

function getGoogleTranslation($sString, $bEscapeParams = true)
{
    // "escape" sprintf paramerters
    if ($bEscapeParams)
    {
        $sPatern = '/(?:%%|%(?:[0-9]+\$)?[+-]?(?:[ 0]|\'.)?-?[0-9]*(?:\.[0-9]
+)?[bcdeufFosxX])/';       
        $sEscapeString = '<span class="notranslate">$0</span>';
        $sString = preg_replace($sPatern, $sEscapeString, $sString);
    }

    // Compose data array (English to Dutch)
    $aData = array(
        'v'            => '1.0',
        'q'            => $sString,
        'langpair'    => 'en|nl',
    );

    // Initialize connection
    $rService = curl_init();
   
    // Connection settings
    curl_setopt($rService, CURLOPT_URL, 'http://ajax.googleapis.com/ajax/
services/language/translate');
    curl_setopt($rService, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($rService, CURLOPT_POSTFIELDS, $aData);
   
    // Execute request
    $sResponse = curl_exec($rService);

    // Close connection
    curl_close($rService);
   
    // Extract text from JSON response
    $oResponse = json_decode($sResponse);
    if (isset($oResponse->responseData->translatedText))
    {
        $sTranslation = $oResponse->responseData->translatedText;
    }
    else
    {
        // If some error occured, use the original string
        $sTranslation = $sString;
    }
   
    // Replace "notranslate" tags
    if ($bEscapeParams)
    {
        $sEscapePatern = '/<span class="notranslate">([^<]*)<\/span>/';
        $sTranslation = preg_replace($sEscapePatern, '$1', $sTranslation);
    }
   
    // Return result
    return $sTranslation;
}

?>

Thanks to MelTraX for defining the RegExp!
Jay Gilford 25-Aug-2009 05:13
I created this function a while back to save on having to combine
mysql_real_escape_string onto all the params passed into a sprintf. it works
literally the same as the sprintf other than that it doesn't require you to
escape your inputs. Hope its of some use to people

<?php
function mressf()
{
    $args = func_get_args();
    if (count($args) < 2)
        return false;
    $query = array_shift($args);
    $args = array_map('mysql_real_escape_string', $args);
    array_unshift($args, $query);
    $query = call_user_func_array('sprintf', $args);
    return $query;
}
?>

Regards
Jay
Jaygilford.com
jfgrissom at gmail dot com 11-Jul-2009 09:51
I had a nightmare trying to find the two's complement of a 32 bit number.

I got this from http://www.webmasterworld.com/forum88/13334.htm (credit where
credit is due... =P  )

Quote: ...find out the 2's complement of any number, which is -(pow(2, n) - N)
where n is the number of bits and N is the number for which to find out its 2's
complement.

This worked magic for me... previously I was trying to use

sprintf ("%b",$32BitDecimal);
But it always returned 10000000000000000000000 when the $32BitDecimal value got
above 2,000,000,000.

This -(pow(2, n) - N)
Worked remarkably well and was very accurate.

Hope this helps someone fighting with two's complement in PHP.
John Walker 09-Jul-2009 05:56
To add to other notes below about floating point problems, I noted that %f and
%F will apparently output a maximum precision of 6 as a default so you have to
specify 1.15f (eg) if you need more.

In my case, the input (from MySQL) was a string with 15 digits of precision
that was displayed with 6. Likely what happens is that the rounding occurs in
the conversion to a float before it is displayed. Displaying it as 1.15f (or in
my case, %s) shows the correct number.
viktor at textalk dot com 18-Feb-2009 08:16
A more complete and working version of mb_sprintf and mb_vsprintf. It should
work with any "ASCII preserving" encoding such as UTF-8 and all the ISO-8859
charsets. It handles sign, padding, alignment, width and precision. Argument
swapping is not handled.

<?php
if (!function_exists('mb_sprintf')) {
  function mb_sprintf($format) {
      $argv = func_get_args() ;
      array_shift($argv) ;
      return mb_vsprintf($format, $argv) ;
  }
}
if (!function_exists('mb_vsprintf')) {
  /**
   * Works with all encodings in format and arguments.
   * Supported: Sign, padding, alignment, width and precision.
   * Not supported: Argument swapping.
   */
  function mb_vsprintf($format, $argv, $encoding=null) {
      if (is_null($encoding))
          $encoding = mb_internal_encoding();

      // Use UTF-8 in the format so we can use the u flag in preg_split
      $format = mb_convert_encoding($format, 'UTF-8', $encoding);

      $newformat = ""; // build a new format in UTF-8
      $newargv = array(); // unhandled args in unchanged encoding

      while ($format !== "") {
     
        // Split the format in two parts: $pre and $post by the first
%-directive
        // We get also the matched groups
        list ($pre, $sign, $filler, $align, $size, $precision, $type, $post) =
            preg_split("!\%(\+?)('.|[0 ]|)(-?)([1-9][0-9]*|)(\.[1-9][0-9]*|)
([%a-zA-Z])!u",
                       $format, 2, PREG_SPLIT_DELIM_CAPTURE) ;

        $newformat .= mb_convert_encoding($pre, $encoding, 'UTF-8');
       
        if ($type == '') {
          // didn't match. do nothing. this is the last iteration.
        }
        elseif ($type == '%') {
          // an escaped %
          $newformat .= '%%';
        }
        elseif ($type == 's') {
          $arg = array_shift($argv);
          $arg = mb_convert_encoding($arg, 'UTF-8', $encoding);
          $padding_pre = '';
          $padding_post = '';
         
          // truncate $arg
          if ($precision !== '') {
            $precision = intval(substr($precision,1));
            if ($precision > 0 && mb_strlen($arg,$encoding) > $precision)
              $arg = mb_substr($precision,0,$precision,$encoding);
          }
         
          // define padding
          if ($size > 0) {
            $arglen = mb_strlen($arg, $encoding);
            if ($arglen < $size) {
              if($filler==='')
                  $filler = ' ';
              if ($align == '-')
                  $padding_post = str_repeat($filler, $size - $arglen);
              else
                  $padding_pre = str_repeat($filler, $size - $arglen);
            }
          }
         
          // escape % and pass it forward
          $newformat .= $padding_pre . str_replace('%', '%%', $arg) .
$padding_post;
        }
        else {
          // another type, pass forward
          $newformat .= "%$sign$filler$align$size$precision$type";
          $newargv[] = array_shift($argv);
        }
        $format = strval($post);
      }
      // Convert new format back from UTF-8 to the original encoding
      $newformat = mb_convert_encoding($newformat, $encoding, 'UTF-8');
      return vsprintf($newformat, $newargv);
  }
}
?>
splogamurugan at gmail dot com 06-Feb-2009 05:59
$format = 'There are %1$d monkeys in the %s and %s ';
printf($format, 100, 'Chennai', 'Bangalore');

Expecting to output
"There are 100 monkeys in the Chennai and bangalore"

But, this will output
"There are 100 monkeys in the 100 and Chennai"

Because, the second and Third specifiers takes 1rst and 2nd arguments. Because
it is not assigned with any arguments.
remy dot damour at -please-no-spam-laposte dot net 15-Jan-2009 11:15
With printf() and sprintf() functions, escape character is not backslash '\'
but rather '%'.

Ie. to print '%' character you need to escape it with itself:
<?php
printf('%%%s%%', 'koko'); #output: '%koko%'
?>
MelTraX 05-Nov-2008 01:40
<?php
  // parses a string meant for printf and returns an array of found parameters
(or NULL if it contains syntax errors)
  function parsePrintfParameters($string) {
    $valid = '/^(?:%%|%(?:[0-9]+\$)?[+-]?(?:[ 0]|\'.)?-?[0-9]*(?:\.[0-9]+)?
[bcdeufFosxX])/';
    $originalString = $string;

    $result = array();
    while(strlen($string)) {
      if(!$string = preg_replace('/^[^%]*/', '', $string))
        break;

      if(preg_match($valid, $string, $matches)) {
        $result[] = $matches[0];
        $string = substr($string, strlen($matches[0]));
      } else {
        error(sprintf('"%s" has an error near "%s".', $originalString,
$string));
        return NULL;
      }
    }
    return $result;
  }
?>
savannah at seznam dot cz 12-Oct-2008 04:29
If you have problems using utf-8 with string paddings, you can use this
function:

<?php
/**
 * Formats string using sprintf, but correctly handles %s  with space paddings
 *
 * uses conversion to iso-8859-2 and back
 *
 * it is, however, much slower, so use only when needed!
 *
 * @param string $format
 */
function utf_8_sprintf ($format) {
  $args = func_get_args();

  for ($i = 1; $i < count($args); $i++) {
    $args [$i] = iconv('UTF-8', 'ISO-8859-2', $args [$i]);
  }
 
  return iconv('ISO-8859-2', 'UTF-8', call_user_func_array('sprintf', $args));
}

// test

echo sprintf ("[%-20s]\n", 'escrzyaie'); //  how it should look without special
chars
echo sprintf ("[%-20s]\n", 'ěščřžýáíé'); // not correctly handled by php
echo utf_8_sprintf ("[%-20s]\n", 'ěščřžýáíé'); // using above function

/*
produces:
[escrzyaie           ]
[ěščřžýáíé  ]
[ěščřžýáíé           ]
*/

?>
the trick is to convert arguments to iso8859-2 and result back to utf-8.
php at mikeboers dot com 01-Oct-2008 01:42
And continuing on the same theme of a key-based sprintf...

I'm roughly (I can see a couple cases where it comes out wierd) copying the
syntax of Python's string formatting with a dictionary. The improvement over
the several past attempts is that this one still respects all of the formating
options, as you can see in my example.

And the error handling is really crappy (just an echo). I just threw this
together so do with it what you will. =]

<?php

function sprintf_array($string, $array)
{
    $keys    = array_keys($array);
    $keysmap = array_flip($keys);
    $values  = array_values($array);
   
    while (preg_match('/%\(([a-zA-Z0-9_ -]+)\)/', $string, $m))
    {   
        if (!isset($keysmap[$m[1]]))
        {
            echo "No key $m[1]\n";
            return false;
        }
       
        $string = str_replace($m[0], '%' . ($keysmap[$m[1]] + 1) . '$',
$string);
    }
   
    array_unshift($values, $string);
    var_dump($values);
    return call_user_func_array('sprintf', $values);
}

echo sprintf_array('4 digit padded number: %(num)04d ', array('num' => 42));

?>

Cheers!
ant at loadtrax dot com 18-Jun-2008 02:19
Rounding seems a little inconsistent, so beware:

$ php -a

php> print round(1.0*20*1.175/100,2);
0.24
php > print sprintf("%.2f",1.0*20*1.175/100);
0.23
php > print sprintf("%.0f",1.0*20*1.175);
24

I get round this by doing the round first, then doing the sprintf.
jaimthorn at yahoo dot com 11-Jun-2008 07:01
I needed a piece of code similar to the one Matt posted below, on the 10th of
March, 2008.  However, I wasn't completely satisfied with Matt's code (sorry,
Matt!  No offense intended!), because

1) I don't like to initialize variables when it's not really needed, and
2) it contains two bugs.

What are the bugs?

First, Matt's code tests for count($vars) > 0, but if $var == "Hello world!",
then count($var) == 1, but the foreach() will crash because $var has to be an
array.  So instead, my code tests for is_array($var).

Second, if a key in $vars is a prefix of any of the later keys in the array
(like 'object' is the beginning of 'objective') then the str_replace messes
things up.  This is no big deal if your keys are hard-coded and you can make
sure the keys don't interfere, but in my code the keys are variable.  So I
decided to first sort the array on a decreasing length of the key.

<?php

function cmp($a, $b)
{
    return strlen($b) - strlen($a);
}

function sprintf2($str, $vars, $char = '%')
{
    if(is_array($vars))
    {
        uksort($vars, "cmp");

        foreach($vars as $k => $v)
        {
            $str = str_replace($char . $k, $v, $str);
        }
    }

    return $str;
}

echo sprintf2( 'Hello %your_name, my name is %my_name! I am %my_age, how old
are you? I like %object and I want to %objective_in_life!'
             , array( 'your_name'         => 'Matt'
                    , 'my_name'           => 'Jim'
                    , 'my_age'            => 'old'
                    , 'object'            => 'women'
                    , 'objective_in_life' => 'write code'
                    )
             );

?>

If possible, and if you're willing, you can also embed the key fields in the
text between percent-signs, rather than prefixing the keys with one.  Sorting
is no longer necessary, and the execution time is less than half of the code
above:

<?php

function sprintf3($str, $vars, $char = '%')
{
    $tmp = array();
    foreach($vars as $k => $v)
    {
        $tmp[$char . $k . $char] = $v;
    }
    return str_replace(array_keys($tmp), array_values($tmp), $str);
}

echo sprintf3( 'Hello %your_name%, my name is %my_name%! I am %my_age%, how old
are you? I like %object% and I want to %objective_in_life%!'
             , array( 'your_name'         => 'Matt'
                    , 'my_name'           => 'Jim'
                    , 'my_age'            => 'old'
                    , 'object'            => 'women'
                    , 'objective_in_life' => 'write code'
                    )
             );
?>

If you're willing to embed the keys in the text, you may also be willing to
embed the keys themselves in percent signs, thus shaving off another 30% of the
execution time:

<?php

function sprintf4($str, $vars)
{
    return str_replace(array_keys($vars), array_values($vars), $str);
}

echo sprintf4( 'Hello %your_name%, my name is %my_name%! I am %my_age%, how old
are you? I like %object% and I want to %objective_in_life%!'
             , array( '%your_name%'         => 'Matt'
                    , '%my_name%'           => 'Jim'
                    , '%my_age%'            => 'old'
                    , '%object%'            => 'women'
                    , '%objective_in_life%' => 'write code'
                    )
             );
?>

Of course, by now the sprintf function is no longer something you'd want to
write to mum and dad about...
ranema at ubuntu dot polarhome dot com 30-Mar-2008 07:40
It's very comfortible for long Sql queries:

<?php
$_gQuery = "UPDATE `x` SET `a` = %i AND `b` = '%s' WHERE `my` = '%s';"; //
........

mysql_query( sprintf( $_gQuery, 10, 'a', 'rrrr' ) );
?>

But if you have a short query, then it would be much faster to append your data
by using `.`.

<?php
$_gQuery = 'SELECT COUNT(*) FROM `' . $_gName . '`;';
?>
matt 10-Mar-2008 09:13
Was looking for a assoc way of using sprintf but couldnt find one, probably
wasnt looking hard enough so came up with this. Very very simple indeed...

<?php

function sprintf2($str='', $vars=array(), $char='%')
{
    if (!$str) return '';
    if (count($vars) > 0)
    {
        foreach ($vars as $k => $v)
        {
            $str = str_replace($char . $k, $v, $str);
        }
    }

    return $str;
}

echo sprintf2('Hello %your_name my name is %my_name! I am %my_age, how old are
you? I like %object!', array(
    'your_name' => 'Ben',
    'my_name' => 'Matt',
    'my_age' => '21',
    'object' => 'food'
));

// Hello Ben my name is Matt! I am 21, how old are you? I like food!

?>

Looks nice anyway :)
andyhaslam at hotmail dot com 05-Feb-2008 09:46
An interesting bug, if you do the following:

$val = 2345.35;
$val = sprintf("%01.2f", $val);
echo $val;

Output is "2.00", instead of "2345.35". The solution is to use an intermediate
variable:

$val = 2345.35;
$val2 = sprintf("%01.2f", $val);
$val = $val2;
echo $val;
scott dot gardner at mac dot com 10-Jan-2008 01:22
In the last example of Example#6, there is an error regarding the output.

printf("[%10.10s]\n", $t); // left-justification but with a cutoff of 10
characters

This outputs right-justified.

In order to output left-justified:

printf("[%-10.10s]\n", $t);
me at umarfarooq dot net 06-Sep-2007 11:29
/**
This function returns a formated  string with the legnth you specify
@string holds the string which you want to format
@len holds the length you want to format
**/
function formatString($string, $len)
{
    if (strlen($string) < $len)
    {
        $addchar=($len - strlen($string)) ;
        for ($i = 0; $i < $addchar; $i++)
        {
            $string=sprintf("$string%s", "0");
        }
    }
   
    if (strlen($string) > $len)
    {
        $string=substr($string,0,$len);
    }
   
    return $string;   
}
Thomas Breuss 11-May-2007 12:03
Note:
If you want to use % in sprintf, you have to "quote" it like %%.

Example:
echo sprintf("Green => %d%%'", 50);

Output:
Green => 50%
eagle at electric-force dot net 27-Mar-2007 11:25
Display an binary string like an Hex Editor.

<?php
function BinToHexView($binstr) {
    $HexView = "";

    $binpos = 0;
    $binsize = strlen($binstr);
    $binr = ( ($binsize-$binpos-16) > 16 ? 16 : $binsize-$binpos-16 );

    while ($binr > 0) {
        $hline = "";
        $dline = "";
        $HexView .= sprintf("%04x", $binpos);
        for ($c=0;$c<$binr;$c++) {
            $hline .= sprintf("%02x",ord($binstr[$binpos+$c]))." ";
        }
        for ($c=0;$c<$binr;$c++) {
            $ord = ord($binstr[$binpos+$c]);
            $dline .= ( $ord<32 || $ord>126 ? "." : $binstr[$binpos+$c] );
        }
        $HexView .= sprintf("  %-48s  %-16s\n", $hline, $dline);
        $binpos += $binr;
        $binr = ( ($binsize-$binpos-16) > 16 ? 16 : $binsize-$binpos-16 );
    }

    return $HexView;
}
?>
29-Jan-2007 10:15
In response to juan at ecogomera dot com:

I think what you want is:

$x = 3327
$y=decbin($x);
echo $y."<br>";
$z = sprintf("%012d", $x);
echo $z;

3327
110011111111
000000003327

Right? You were double-converting the number. First to binary, then again to
decimal. You should be converting the source number directly into the required
base.
SWestrup 09-Nov-2006 11:46
In response to Anonymous, who claimed that:

  printf("[%s]\n", str_pad('Hello', 20));

and

  printf("[%-20s]\n", 'Hello');

are the same thing: you've missed the point.

They're only the same when the amount of padding is a known constant. When its
a variable (or an expression), its often much more convenient to be able to
write:

  printf("[%-*s]\n", 3*$n+2, "Hello");

than what you have to go through now, which is either:

  $t = 3*$n+2;
  printf("[%-{$t}s]\n","Hello");

or

  printf("[%s]\n", str_pad('Hello', 3*$n+2));
Anonymous 16-Oct-2006 04:04
In response to Fredrik Rambris in the com top domain:

<?php

//Your code:

printf("[%s]\n", str_pad('Hello', 20));

//Is the same as:

printf("[%-20s]\n", 'Hello');

?>
Fredrik Rambris in the com top domain 28-Sep-2006 02:48
The C implementation of printf (alteast in glibc) can handle field length as
arguments like this:

printf("[%-*s]\n", (int)20, "Hello");

To have the same result in PHP you need to run

printf("[%s]\n, str_pad("Hello", 20) );

It would be nice if one could use the field length directly like in C.
Moore (at) Hs-Furtwangen (dot) De 12-Aug-2006 11:54
Here a litle function that might come handy one time:
It gives back a String and adds a <BR> (you can change it to <br />) to every
line end. And it adds $num blanks to the front of the next line.

<?php
 function nl2brnl($text, $num)
  {
   return preg_replace("/\\r\\n|\\n|\\r/", sprintf("% -".(5+$num)."s","<BR>\\
n"), $text);
  }

$a = " one\\n two\\r\\n three";

$b = nl2brnl($a, 2);

var_dump($b);

/* output will be:
string(30) " one<BR>
   two<BR>
   three"
*/

echo "  <P>\\n   ";
echo $b

/* output will be:
  <P>
   one<BR>
   two<BR>
   three
*/
?>

Is helpfull for avouding code_soup.
bknakkerNO at SPAMgmail dot com 10-Aug-2006 02:54
Note that in PHP5 (.1.4 for me) sprintf will not use the __toString function of
an object.

<?php
class pr{
private $l;
public function __construct($l)
{
$this->l=$l;
}
public function __toString()
{
return $this->l;
}
}
echo new pr('This works!!'); //This will display 'This works!!'
echo sprintf(new pr('This doesnt')); // will display 'Object'
?>

Be careful with that!
Ulf Wostner 06-Aug-2006 10:35
<?php
#-----------------------------------------------------
# Viewing Two's Complement using sprintf formatting.
#-----------------------------------------------------
# Systems using Two's Complements have exactly one number that equals its own
Two's Complement.
# On a 32-bit system look at  1000 0000 0000 0000  for  -2147483648
# Take the one's complement, to get 0111 1111 1111 1111, add 1
# to get the Two's Complement: 1000 0000 0000 0000
#  We are back to the original number, the so-called Weird Number for 32-bits.

# For a 64-bit system, format that number as binary, width 64, padded with 0's.

printf("%064b\n", -2147483648);

# Output with added spaces:
# 11111111 11111111 11111111 11111111 10000000 00000000 00000000 00000000

# And here is the Two's Complement on a 64-bit system.

printf("%064b\n", +2147483648);

# Output with added spaces:
# 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000
# They share those last 32 bits, accounting for the 32-bit Weird Number.

#----------------------------------------------------------
# Is PHP running  32-bit or 64-bit?
#----------------------------------------------------------
# Sure, we can look at the max int, but  The Weird Number  also tells if we are
in 32-bit, 64-bit, or ...

function getBitCount() {
  $how_many_bits = 1;  $n = 2;
  while(True) {
    $how_many_bits += 1;   $n *= 2;  # powers of 2
    # matches its own two's complement? 
    if( sprintf("%b", $n) == sprintf("%b", -$n)  )
      return 1 + $how_many_bits;
  }
  return;
}
?>
egingell at sisna dot com 26-Apr-2006 01:51
<?
/**
 * [string or int] vprint ( string $format [, mixed $ary [, bool $return]] )
 *
 * Closely mimics the functionality of sprintf(), printf(), vprintf(), and
vsprintf().
 *
 * Replaces %[bcdeufFosxX] with each element of $ary
 *     See http://us3.php.net/manual/en/function.sprintf.php for details on
replacement types.
 *
 * If there are not enough elements in $ary (or it is left out) to satisfy
$format,
 *     it will be padded to the correct length.
 *
 * Since v*printf() doesn't mind having too many elements in the array, $format
will be left alone.
 *
 * If $ary is a string, it will be recast into an array.
 *
 * If $return is set to a value considered to be false (0, '', null, false, and
array()),
 *     then the output will be sent to STDOUT and the strlen() of the output
string will be returned;
 *     otherwise, the output string will be returned.
 *
 * It's buggy when using the argument swapping functionality, unless you do it
propperly.
 *
 * May break when using modifiers (%.4e, %02s, etc), unless you do it
propperly.
 **/
function vprint($format, $ary = array(), $return = true) {
    // Sanity?!
    if (!is_array($ary)) $ary = array($ary);

    // Find %n$n.
    preg_match_all('#\\%[\\d]*\\$[bcdeufFosxX]#', $format, $matches);

    // Weed out the dupes and count how many there are.
    $counts = count(array_unique($matches[0]));

    // Count the number of %n's and add it to the number of %n$n's.
    $countf = preg_match_all('#\\%[bcdeufFosxX]#', $format, $matches) +
$counts;

    // Count the number of replacements.
    $counta = count($ary);

    if ($countf > $counta) {
        // Pad $ary if there's not enough elements.
        $ary = array_pad($ary, $countf, "&nbsp;");
    }

    if ($return) {
        return vsprintf($format, $ary);
    } else {
        return vprintf($format, $ary);
    }
}

?>
mauf at franzoni dot info 16-Feb-2006 07:21
The format of floating values has been previously reporting as depending on
platform (linux / windows) yet I see it changes within two linux systems
depending on the version:
In V4.2.2 "%3.2" displays 3 integers and two decimals (i.e. the first digit
represents just the number of integer digits), on V4.4.1 the same displays (and
justifies the string to) a three character string (i.e. the first digit is the
total lenght of the number, including the decimal dot).

Maybe someone may better specify which version this happens from.
darkfalconIV at hotmail dot com 18-Dec-2005 12:57
henke dot andersson

You can accomplish feeding it array if you use call_user_func_array. Not
exactly a `clean' option, but it does work.
tim dot brouckaert dot NOSPAM at gmail dot com 12-Oct-2005 05:35
If you want to center align some text using the printf or sprintf functions,
you can just use the following:

function center_text($word){
    $tot_width = 30;
    $symbol = "-";
    $middle = round($tot_width/2);
    $length_word = strlen($word);
    $middle_word = round($length_word / 2);
    $last_position = $middle + $middle_word;
    $number_of_spaces = $middle - $middle_word;

    $result = sprintf("%'{$symbol}{$last_position}s", $word);
        for ($i = 0; $i < $number_of_spaces; $i++){
            $result .= "$symbol";
        }
    return $result;
}

$string = "This is some text";
print center_text($string);

off course you can modify the function to use more arguments.
webmaster at cafe-clope dot net 14-Aug-2005 09:47
trying to fix the multibyte non-compliance of sprintf, I came to that :

<?php
function mb_sprintf($format) {
    $argv = func_get_args() ;
    array_shift($argv) ;
    return mb_vsprintf($format, $argv) ;
}

function mb_vsprintf($format, $argv) {
    $newargv = array() ;
   
    preg_match_all("`\%('.+|[0 ]|)([1-9][0-9]*|)s`U", $format, $results,
PREG_SET_ORDER) ;
   
    foreach($results as $result) {
        list($string_format, $filler, $size) = $result ;
        if(strlen($filler)>1)
            $filler = substr($filler, 1) ;
        while(!is_string($arg = array_shift($argv)))
            $newargv[] = $arg ;
        $pos = strpos($format, $string_format) ;
        $format = substr($format, 0, $pos)
                  . ($size ? str_repeat($filler, $size-strlen($arg)) : '')
                    . str_replace('%', '%%', $arg)
                    . substr($format, $pos+strlen($string_format))
                    ;
    }
       
    return vsprintf($format, $newargv) ;
}

?>

handle with care :
1. that function was designed mostly for utf-8. i guess it won't work with any
static mb encoding.
2. my configuration sets the mbstring.func_overload configuration directive to
7, so you may wish to replace substr, strlen, etc. with mb_* equivalents.
3. since preg_* doesn't complies with mb strings, I used a '.+' in the regexp
to symbolize an escaped filler character. That means, %'xy5s pattern will
match, unfortunately. It is recomended to remove the '+', unless you are
intending to use an mb char as filler.
4. the filler fills at left, and only at left.
5. I couldn't succeed with a preg_replace thing : the problem was to use the
differents lengths of the string arguements in the same replacement, string or
callback. That's why the code is much longuer than I expected.
6. The pattern wil not match any %1\$s thing... just was too complicated for
me.
7. Although it has been tested, and works fine within the limits above, this is
much more a draft than a end-user function. I would enjoy any improvment.

The test code below shows possibilities, and explains the problem that occures
with an mb string argument in sprintf.

<?php
header("content-type:text/plain; charset=UTF-8") ;
$mb_string = "x x x" ;
echo sprintf("%010s", $mb_string), " [octet-size: ", str_sizeof($mb_string) , "
; count: ", strlen(sprintf("%010s", $mb_string)), " characters]\n" ;
echo mb_sprintf("%010s", $mb_string), " [octet-size: ", str_sizeof($mb_string)
, " ; count: ", strlen(mb_sprintf("%010s", $mb_string)), " characters]\n" ;
echo "\n" ;
echo mb_sprintf("%''10s\n%'010s\n%' 10s\n%10d\n%'x10s\n%010s\n% 10s\n%010s\
n%'1s\n", "zero", "one", "two", 3, "four", "  ve", "%s%i%x", "  ve ", "eight")
;
?>
david at rayninfo dot co dot uk 16-Jun-2005 11:33
Using sprintf to force leading leading zeros

foreach (range(1, 10) as $v) {echo "<br>tag_".sprintf("%02d",$v);}

displays
tag_01
tag_02
tag_03
.. etc
ian dot w dot davis at gmail dot com 30-May-2005 07:03
Just to elaborate on downright's point about different meanings for %f, it
appears the behavior changed significantly as of 4.3.7, rather than just being
different on different platforms. Previously, the width specifier gave the
number of characters allowed BEFORE the decimal. Now, the width specifier gives
the TOTAL number of characters. (This is in line with the semantics of printf()
in other languages.) See bugs #28633 and #29286 for more details.
Pacogliss 02-May-2005 12:08
Just a reminder for beginners : example 6 'printf("[%10s]\n",    $s);' only
works (that is, shows out the spaces) if you put the html '<pre></pre>' tags (
head-scraping time saver ;-).
christian at wenz dot org 18-Apr-2005 12:20
@ henke dot andersson at comhem dot se: Use vprintf()/vsprintf() for that.
henke dot andersson at comhem dot se 15-Apr-2005 08:07
Mind that it doesn't allow you to use a array as multiple arguments like this:
<?php
printf('%s %s',array('a','b')) ?>
downright at comcast dot net 31-Jan-2005 02:03
Just thought I'd give a heads up for anyone doing cross platform applications.

sprintf spacing is different numerically with Windows and Linux.

Linux aligned correctly:
$ol = sprintf ("%-6s|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f\
n",

Windows aligned correctly:
$ol = sprintf ("%-6s|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f\
n",

As you can see the strings are fine for spacing, however, the numbers need a
difference of 3 in order to have the same amount of spaces.

I noticed this after using sprintf to format a header for a web app I was
working on.  On windows it fit, however, when it came to linux it was MUCH
larger than the header.
jrpozo at conclase dot net 21-Jan-2005 07:13
Be careful if you use the %f modifier to round decimal numbers as it (starting
from 4.3.10) will no longer produce a float number if you set certain locales,
so you can't accumulate the result. For example:

setlocale(LC_ALL, 'es_ES');
echo(sprintf("%.2f", 13.332) + sprintf("%.2f", 14.446))

gives 27 instead of 27.78, so use %F instead.
timo at frenay dot net 10-Jan-2005 10:58
Note that the documentation is unclear about the details of the sign specifier.
First of all, the character for this is "+".

Also note that the following does NOT print "+00.00" as you might expect:

<?php
    printf('%+02.2f', 0);
?>

The sign is included in the width. This can't be solved by increasing the
width:

<?php
    printf('%+03.2f', 0);
?>

This will put the padding 0 before the sign.
Here is a possible solution:

<?php
    $value = 0;
    printf('%s%02.2f', ($value < 0) ? '-' : '+', abs($value));
?>
Gkeeper80 11-Aug-2004 03:58
When using sprintf with padding, it's important to note that specifying the
length of your padding does not restrict the length of your output.

For example:
$var = 'test';
$output sprintf("%03s", $var);

print $output;

Produces:
test

NOT:
est

This may seem intuitive for working with numbers, but not neccesarily when
working with strings.
rex 15-Jun-2004 02:47
Note, if you are just looking for something to pad out a string consider
str_pad.

From testing, it seems faster and was more intuitive to use (for example,
making it pad the begining or end of a string... with sprintf you would have to
use negative indexes)
php at sharpdreams dot com 08-May-2004 02:13
Note that when using the argument swapping, you MUST number every argument,
otherwise sprintf gets confused. This only happens if you use number arguments
first, then switch to a non-numbered, and then back to a numbered one.

<?php
$sql = sprintf( "select * from %1\$s left join %2\$s on( %1\$s.id = %2\
$s.midpoint ) where %1\$s.name like '%%%s%%' and %2\$s.tagname is not null",
"table1", "table2", "bob" );
// Wont work:
// Sprintf will complain about not enough arguments.
$sql = sprintf( "select * from %1\$s left join %2\$s on( %1\$s.id = %2\
$s.midpoint ) where %1\$s.name like '%%%3\$s%%' and %2\$s.tagname is not null",
"table1", "table2", "bob" );
// Will work: note the %3\$s
?>
tobias at silverxnet dot de 16-Apr-2004 07:09
Regarding the previous posting:
I just wanted to give an explanation. This should be because the float to
string / integer to string conversion (you are using a string, multiplying it
with a float value what php automatically causes to convert the string to a
float value). This is a general "problem" (or not), but not that hard to
explain.
Where an integer or float starts with 0, in a string it does obviously with 1.
So if you are using a string your value will increase by one (You started with
a string, so it does not increase but contain the real result. If you start
using a float value by not using '' around the value, you have to output the
float value as well. This is just the PHP conversion.)

Try putting
$x = strval( $x );
after
$x = $x * 100;
and using your example again. You will see that the output will change to 13664
= 13664 because of the general string conversion. It seems that PHP is
converting a float to a string by inceasing by one. By doing the same with
intval instead of strval the output changes to 13663 = 13663.

! sprintf seems to behave wrong when using the conversation to an integer value
and NOT doing the conversation at all. So use intval to convert to an integer
value or strval to convert to a string value BEFORE using sprintf. This should
be solving the problems.
kekec at kukac dot hu 29-Mar-2004 09:16
A really working one:
<?php
function cutzero($value) {
   return preg_replace("/(\.?)0+$/", "", $value);
}
?>
05-Mar-2004 10:54
both of your cut-zero functions are just way too complicated. if it's a string
where only the zeros at the end should be truncated, why not use a syntax as
simple as rtrim("4.7000","0") ?
Rene dot Leonhardt at agritec24 dot com 16-May-2003 10:02
Your cutzero function could be faster ;-)
   return (double)$value;

But if you must have a function:
   return preg_replace('/0+$/', '', $value);
kouber at php dot net 08-May-2003 02:55
If you want to cut all the zeros off the end of a float, but not losing any
sensitive information, use this:

<?
function cutzero($value) {
    return preg_replace("/(\.\d+?)0+$/", "$1", $value)*1;
}
?>

Some examples:

<?
cutzero("4.7600");     // returns 4.76
cutzero("4.7604")      // returns 4.7604
cutzero("4.7000");     // returns 4.7
cutzero("4.0000");     // returns 4
?>
info at nospam dot webtip dot dk 18-Feb-2003 05:06
If you want to format a phonenumber with spaces, use chunk_split() which splits
a string into smaller chunks. It's much simpler than using sprintf.

$phone = "12345678";

chunk_split ($phone, 2);

will return 12 34 56 78
moritz dot geselle at invision-team dot de 02-Dec-2002 02:52
a little note to the argument swapping examples which took me a while to get:
if you use single quotes for the format string (like you should do, since there
aren't any variable conversions to do as long as you don't need any special
chars), the given examples won't work because of the backslash before the $
(needs to be escaped in double quoted strings - but not in single quoted!)

so this:

$format = "The %2\$s contains %1\$d monkeys";
printf($format,$num,$location);

with a single quoted format string would look like this:

$format = 'The %2$s contains %1$d monkeys';
printf($format,$num,$location);

(no escapes)

I hope that helps to avoid confusion ;)
no dot email dot address at example dot com 16-Sep-2002 06:29
Using argument swapping in sprintf() with gettext: Let's say you've written the
following script:

<?php
$var = sprintf(gettext("The %2\$s contains %1\$d monkeys"), 2, "cage");
?>

Now you run xgettext in order to generate a .po file. The .po file will then
look like this:

#: file.php:9
#, ycp-format
msgid "The %2\\$s contains %1\\$d monkeys"
msgstr ""

Notice how an extra backslash has been added by xgettext.

Once you've translated the string, you must remove all backslashes from the ID
string as well as the translation, so the po file will look like this:

#: file.php:9
#, ycp-format
msgid "The %2$s contains %1$d monkeys"
msgstr "Der er %1$d aber i %2$s"

Now run msgfmt to generate the .mo file, restart Apache to remove the gettext
cache if necessary, and you're off.
abiltcliffe at bigfoot.com 10-Sep-2002 11:01
To jrust at rustyparts.com, note that if you're using a double-quoted string
and *don't* escape the dollar sign with a backslash, $s and $d will be
interpreted as variable references. The backslash isn't part of the format
specifier itself but you do need to include it when you write the format string
(unless you use single quotes).
Andrew dot Wright at spamsux dot atnf dot csiro dot au 03-Jul-2002 02:22
An error in my last example:
$b = sprintf("%30.s", $a);
will only add enough spaces before $a to pad the spaces + strlen($a) to 30
places.

My method of centering fixed text in a 72 character width space is:

$a = "Some string here";
$lwidth = 36; // 72/2
$b = sprintf("%".($lwidth + round(strlen($a)/2)).".s", $a);
eden_zero_x at hotmail dot com 26-Jun-2002 02:05
Well I came up with this one, extremely simple. instead of writing <span class=
"class">hello</a>
you can write: print class('class','hello'); using sprintf
-----------------------------
function class_ ($class, $text=false)
 {
    return sprintf ("<span class=\"%s\">%s</span>",
        $class,
        ($text ? $text : $class)
    );
 }
-----------------------------
shgyn at binabakti dot or dot id 01-Jun-2002 07:57
Previously submitted sci() function to get scientific representation of a
number is not working with 0 and negative numbers. So, here is the modified
version:

function sci($x, $d=-1) {
    $min=($x<0)?"-":"";
    $x=abs($x); 
    $e=floor(($x!=0)?log10($x):0);
    $x*=pow(10,-$e);
    $fmt=($d>=0)?".".$d:"";
    $e=($e>=0)?"+".sprintf("%02d",$e):"-".sprintf("%02d",-$e);
    return sprintf("$min%".$fmt."fe%s",$x,$e);
}
fuchschr at surfeu dot at 20-Feb-2002 08:54
To have a string with leading zeros use this:
$string_i = sprintf("%04s",$value)

Gives you an output with leading zeros and 4 digits.
i.e.
0001
0002
...
0010
an so on
cv at corbach dot de 10-Feb-2002 07:36
To make radu.rendec@ines.ro's excellent function work on signed numbers you
must change the first line to:

$e = floor(log10(abs($x)));
anqmb(at)yahoo.co.jp 05-Dec-2001 04:51
Watch out the mysterious rounding rule.
<?php
$a = 4.5;
$b = sprintf("%d",$a);
$c = 4.5;
$d = sprintf("%.0f",$c);
$e = 0.45;
$f = sprintf("%.1f",$e);
print ("$b,$d,$f\n");
?>

The code above prints "4,5,0.5".
(Perl version prints "4,4,0.5".)
keeper at odi dot com dot br 26-Nov-2001 09:26
Took me a while to find this out.
hope will save someones time.
IT ADD A CARACRER TO THE END OF A STRING

$x = sprintf("%'x-10s", "a");
echo $x;
tjchamberlain.hotmail@com 25-Mar-2001 11:16
It is worth noting that "%5.2f" will result in a string 8 characters long (5
then the '.' then 2), not 5 characters as you might expect.
prolixmp3 at navigators dot lv 23-Mar-2001 10:55
If you are going to create a counter which uses _symbols_ before actual digits
(see, f.e., SpyLog.com counters - they are filling space with "." before, so
the count like 12345 looks like "........12345"), you can use the following:

$txt = "Abracadabra"; // actual string
$fit = 16; // how many digits to use
$fill = "."; // what to fill
$digits = sprintf ("%'{$fill}{$fit}s", $txt);

Paul (a.k.a. Mr.Prolix)
voudras at nospam dot swiftslayer dot org 17-Nov-2000 06:58
Little note about sprintf and its ilk.
if you attempt something like
$string = "dingy%sflem%dwombat";
$nbr = 5;
$name = "voudras";

$msg = sprintf("%d $string %s", $nbr, $name);

sprintf will complain about a lack in the number of arguments, this would be
because of the %'s in the actual string. This can be a great benifit, but is
also rather confusing if you dont realize this feature, and are passing
questionable variables to sprintf (for, say perhaps logging). One way around
this is using
ereg_replace("%","%%", $string); before
sending it off to sprintf. This is actually how i came across this as a problem
- i had realized some time ago that i would have to test my $string for
%'s, but when running the %->%% replacement on a very large serialized object,
my application timed out.
    My solution was to use
sprintf("%d %s %s", $nbr, $string, $name);
but, there was a reason i originally had done this the other way - i suppose
i'll find out soon enough
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 18 18:21:20 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

Not Found

The manual page you are looking for (http://php.benscom.com/manual/ja/
function.instanceof.php) is not available on this server right now. Please
check back later, or if the problem persist, contact the webmasters.

 
credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 18 18:21:20 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • クラス/オブジェクト
  • クラス/オブジェクト関数
  • _ _ autoload
  • call_ user_ method_ array
  • call_ user_ method
  • class_ alias
  • class_ exists
  • get_ called_ class
  • get_ class_ methods
  • get_ class_ vars
  • get_ class
  • get_ declared_ classes
  • get_ declared_ interfaces
  • get_ declared_ traits
  • get_ object_ vars
  • get_ parent_ class
  • interface_ exists
  • is_ a
  • is_ subclass_ of
  • method_ exists
  • property_ exists
  • trait_ exists

is_subclass_of> <interface_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 13 Apr 2012

view this page in

[English             ] Change language
is_a

(PHP 4 >= 4.2.0, PHP 5)

is_a — オブジェクトがこのクラスのものであるか、このクラスをその親クラスのひとつ
としているかどうかを調べる

説明

bool is_a ( object $object , string $class_name [, bool $allow_string = FALSE ]
)

指定した object がこのクラスのものであるか、あるいはこのクラスをその親クラスの
ひとつとしているかどうかを調べます。

パラメータ

object

    調べたいオブジェクト。

class_name

    クラス名。

allow_string

    このパラメータを false にすると、クラス名を表す文字列を object に指定できな
    くなります。そして、クラスが存在しない場合のオートローダーの呼び出しもしな
    くなります。

返り値

オブジェクトがこのクラスのものであるか、あるいはこのクラスをその親クラスのひと
つとしている場合に TRUE、それ以外の場合に FALSE を返します。

変更履歴

バージ                                   説明
 ョン
5.3.9  パラメータ allow_string が追加されました。
5.3.0  この関数は非推奨ではなくなりました。そのため E_STRICT も発生しなくなりま
       した。
5.0.0  この関数は非推奨となり、かわりに instanceof 演算子の使用が推奨されるよう
       になりました。この関数をコールすると E_STRICT が発生します。

例

例1 is_a() の例

<?php
// クラス定義
class WidgetFactory
{
  var $oink = 'moo';
}

// オブジェクトを作成します
$WF = new WidgetFactory();

if (is_a($WF, 'WidgetFactory')) {
  echo "はい、\$WF は WidgetFactory です\n";
}
?>

例2 PHP 5 での instanceof 演算子の使用

<?php
if ($WF instanceof WidgetFactory) {
    echo 'はい、$WF は WidgetFactory です';
}
?>

参考

  • get_class() - オブジェクトのクラス名を返す
  • get_parent_class() - オブジェクトの親クラスの名前を取得する
  • is_subclass_of() - あるオブジェクトが指定したクラスのサブクラスに属するかど
    うかを調べる



is_subclass_of> <interface_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 13 Apr 2012
 
add a note add a note User Contributed Notes is_a
webmaster at thedigitalorchard dot ca 14-Jan-2012 01:35
What a farce, I must say. :)

PHP 5.3.9 adds an $allow_string parameter in order to handle strings being
passed in, but controls the auto-loading behavior? Talk about confusing. Not
sure if there's a committee discussing changes to core functions like this, but
I feel that's a poor design. Don't get me wrong, I greatly appreciate the
voluntary efforts of PHP developers, but this loosy-goosy approach to function
prototypes is a recipe for disaster over the long term.
eitan at mosenkis dot net 12-Jan-2012 01:09
As of PHP 5.3.9, is_a() seems to return false when passed a string for the
first argument. Instead, use is_subclass_of() and, if necessary for your
purposes, also check if the two arguments are equal, since is_subclass_of
('foo', 'foo') will return false, while is_a('foo', 'foo') used to return true.
Aron Budinszky 07-Sep-2011 04:21
Be careful! Starting in PHP 5.3.7 the behavior of is_a() has changed slightly:
when calling is_a() with a first argument that is not an object, __autoload()
is triggered!

In practice, this means that calling is_a('23', 'User'); will trigger
__autoload() on "23". Previously, the above statement simply returned 'false'.

More info can be found here:
https://bugs.php.net/bug.php?id=55475

Whether this change is considered a bug and whether it will be reverted or kept
in future versions is yet to be determined, but nevertheless it is how it is,
for now...
p dot scheit at zweipol dot net 16-Jan-2007 01:44
At least in PHP 5.1.6 this works as well with Interfaces.

<?php
interface test {
  public function A();
}

class TestImplementor implements test {
  public function A () {
    print "A";
  }
}

$testImpl = new TestImplementor();

var_dump(is_a($testImpl,'test'));
?>

will return true
martin dunisch 13-Feb-2006 12:02
Workaround for older PHP-Versions:

function is_a($anObject, $aClass) {
   return get_class($anObject) == strtolower($aClass)
     or is_subclass_of($anObject, $aClass);
}
dead dot screamer at seznam dot cz 06-Feb-2006 11:44
Why I test if class `A` inherit class `B` or implements interface `C` before I
create class `A`?

<?
//That isn't work:

//1. function is_A()
if(is_A('A','B'))$a=new A;
if(is_A('A','C'))$a=new A;

//2. operator instanceOf
if(A instanceOf B)$a=new A;
if(A instanceOf C)$a=new A;
?>
zabmilenko at hotmail dot com 07-Oct-2005 05:18
Lazy Instantiation using is_a() and php5

<?php

class ObjectA
{
    public function print_line($text)
    {
        print $text . "\n";
    }
}

class ObjectB
{
    public function ObjectA()
    {
        static $objecta;

        if (!is_a($objecta, 'ObjectA'))
        {
            $objecta = new ObjectA;
        }

        return $objecta;
    }
}

$obj = new ObjectB;
$obj->ObjectA()->print_line('testing, 1 2 3');

?>

In the above example, ObjectA is not instantiated until needed by ObjectB. 
Then ObjectB can continually use it's creation as needed without
reinstantiating it. 

There are other ways, but I like this one :-)
cesoid at yahoo dot com 05-Oct-2005 07:01
is_a returns TRUE for instances of children of the class.

For example:

class Animal
{}

class Dog extends Animal
{}

$test = new Dog();

In this example is_a($test, "Animal") would evaluate to TRUE as well as is_a
($test, "Dog").

This seemed intuitive to me, but did not seem to be documented.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 18 18:21:20 2012 UTC
Received cookie: COUNTRY=JPN%2C111.191.192.164
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

sscanf> <soundex
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 13 Apr 2012

view this page in

[English             ] Change language
sprintf

(PHP 4, PHP 5)

sprintf — フォーマットされた文字列を返す

説明

string sprintf ( string $format [, mixed $args [, mixed $... ]] )

フォーマット文字列 format に基づき生成された文字列を返します。

パラメータ

format

    フォーマット文字列は 0 個以上のディレクティブ（指示子）により構成されます。
    ディレクティブには、そのまま結果にコピーされる (% を除く) 通常の文字と変換
    指定子 (conversion specifications) があり、取り出される際はどちらもそれ自身
    がパラメータとなります。このことは sprintf() の場合だけでなく printf() の場
    合も同様です。

    各変換指定子は、パーセント記号 (%) の後にこれらの要素が一つ以上続いたものに
    なります。
     1. オプションの符号指定子。これは、数値で符号 (- あるいは +) を使用するよ
        う指定します。デフォルトでは、数値が負の場合の - 符号のみが使用されます
        。この指定子により、正の数にも強制的に + 符号をつけることができます。こ
        れは PHP 4.3.0 で追加されました。
     2. オプションのパディング指定子。これは、文字列が正しい長さになるまでどん
        な文字で埋めるかということを指定します。これは空白かまたは 0 (文字 '0')
        のいずれかです。デフォルトでは空白で埋められます。これ以外のパディング
        文字を指定するには、その文字の前に単一引用符 (') を置きます。後述の例を
        参照ください。
     3. オプションのアラインメント指定子。これは、結果を左寄せまたは右寄せにし
        たい場合に指定します。デフォルトは右寄せです。ここで - 文字を指定すると
        左寄せとなります。
     4. オプションの数字。これは表示幅指定子です。結果を（最低）何桁にするかを
        指定します。
     5. オプションの精度指定子 (ピリオド (`.') に続けてオプションで桁数指定文字
        列を書いたもの)。これは、浮動小数点数に対して数字を何桁まで表示するかを
        指定します。文字列に対して使用した場合は、これは切り捨て位置として働き
        ます。この文字数を超える文字を切り捨てられます。
     6. 型指定子。引数を何の型として扱うかを指定します。指定できる型を以下に示
        します。
          ☆ % - パーセント文字。引数は不要です。
          ☆ b - 引数を整数として扱い、 2 進数として表現します。
          ☆ c - 引数を整数として扱い、その ASCII 値の文字として表現します。
          ☆ d - 引数を整数として扱い、 10 進数として表現します。
          ☆ e - 引数を科学記法として扱います (例 1.2e+2)。精度の指定子は、PHP
            5.2.1 以降では小数点以下の桁数を表します。それより前のバージョンで
            は、有効数字の桁数 (ひとつ小さい値) を意味していました。
          ☆ E - %e と同じですが、大文字を使います (例 1.2E+2)。
          ☆ u - 引数を整数として扱い、符号無しの 10 進数として表現します。
          ☆ f - 引数を double として扱い、浮動小数点数として表現します。
          ☆ F - 引数を float として扱い、浮動小数点数として表現します (ロケール
            に依存しません)。 PHP 4.3.10 および PHP 5.0.3 以降で使用可能です。
          ☆ g - %e および %f の短縮形。
          ☆ G - %E および %f の短縮形。
          ☆ o - 引数を整数として扱い、 8 進数として表現します。
          ☆ s - 引数を文字列として扱い、表現します。
          ☆ x - 引数を整数として扱い、16 進数として (小文字で)表現します。
          ☆ X - 引数を整数として扱い、16 進数として (大文字で)表現します。

    フォーマット文字列における引数の番号付け/交換をサポートしています。以下に例
    を示します。
   
    例1 引数の交換

    <?php
    $num = 5;
    $location = 'tree';

    $format = 'There are %d monkeys in the %s';
    printf($format, $num, $location);
    ?>
    この出力は、"There are 5 monkeys in the tree" のようになります。ここで、フ
    ォーマット文字列が別のファイルにある場合を考えてみましょう。これは、出力を
    国際化したりする場合に行われる可能性があります。たとえばフォーマット文字列
    が次のように書き換えられたとすると、
   
    例2 引数の交換

    <?php
    $format = 'The %s contains %d monkeys';
    printf($format, $num, $location);
    ?>
    ここで、問題が発生します。フォーマット文字列における置換指示子の順番は、コ
    ードにおける引数の順番と一致していません。だからといってコードを変更するの
    ではなく、むしろ置換指示子が参照するフォーマット文字列のほうで指示を行う方
    が望ましいでしょう。フォーマット文字列を次のように書き換えてみましょう。
   
    例3 引数の交換

    <?php
    $format = 'The %2$s contains %1$d monkeys';
    printf($format, $num, $location);
    ?>
    こうすることによるもうひとつの利点は、同じ置換指示子を複数回使用する際にコ
    ードに引数を追加せずにすむことです。例えば、次のようになります。
   
    例4 引数の交換

    <?php
    $format = 'The %2$s contains %1$d monkeys.
               That\'s a nice %2$s full of %1$d monkeys.';
    printf($format, $num, $location);
    ?>
    引数の交換を使うときには、位置指定子 n$ をパーセント記号 (%) の直後に置かな
    ければならず、間に他の指定を入れてはいけません。次の例を示します。
   
    例5 位置指定子と他の指定との共用

    <?php
    $format= 'The %2$s contains %1$04d monkeys';
    printf($format, $num, $location);
    ?>

    上の例の出力は以下となります。

    The tree contains 0005 monkeys

args

...

返り値

フォーマット文字列 format に基づき生成された文字列を返します。

変更履歴

バージョン                        説明
4.0.6      引数の番号付け/交換をサポートするようになりました。

例

例6 printf() のさまざまな例

<?php
$n =  43951789;
$u = -43951789;
$c = 65; // ASCII コードの 65 は 'A' です

// %% に注目しましょう。これは、リテラル '%' を文字として出力します
printf("%%b = '%b'\n", $n); // 2 進表現
printf("%%c = '%c'\n", $c); // ascii 文字を表示します。chr() 関数と同じです
printf("%%d = '%d'\n", $n); // 標準の整数表現
printf("%%e = '%e'\n", $n); // 科学記法
printf("%%u = '%u'\n", $n); // 正の整数の、符号なし整数表現
printf("%%u = '%u'\n", $u); // 負の整数の、符号なし整数表現
printf("%%f = '%f'\n", $n); // 浮動小数点表現
printf("%%o = '%o'\n", $n); // 8 進表現
printf("%%s = '%s'\n", $n); // 文字列表現
printf("%%x = '%x'\n", $n); // 16 進表現 (小文字)
printf("%%X = '%X'\n", $n); // 16 進表現 (大文字)

printf("%%+d = '%+d'\n", $n); // 正の整数に符号指定子を使用
printf("%%+d = '%+d'\n", $u); // 負の整数に符号指定子を使用
?>

上の例の出力は以下となります。

%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'

例7 printf() の文字列指定子

<?php
$s = 'monkey';
$t = 'many monkeys';

printf("[%s]\n",      $s); // 標準の文字列出力
printf("[%10s]\n",    $s); // 空白を使用して右詰め
printf("[%-10s]\n",   $s); // 空白を使用して左詰め
printf("[%010s]\n",   $s); // ゼロ埋めは文字列でも可能です
printf("[%'#10s]\n",  $s); // ゼロの代わりに独自の文字 '#' で埋めます
printf("[%10.10s]\n", $t); // 左詰めを行い、10 文字以上は切り捨てます
?>

上の例の出力は以下となります。

[monkey]
[    monkey]
[monkey    ]
[0000monkey]
[####monkey]
[many monke]

例8 sprintf(): 整数のゼロ埋め

<?php
$isodate = sprintf("%04d-%02d-%02d", $year, $month, $day);
?>

例9 sprintf(): 通貨をフォーマットする例

<?php
$money1 = 68.75;
$money2 = 54.35;
$money = $money1 + $money2;
// echo $money は "123.1" を出力します。
$formatted = sprintf("%01.2f", $money);
// echo $formatted は "123.10"を出力します
?>

例10 sprintf(): 科学記法

<?php
$number = 362525200;

echo sprintf("%.3e", $number); // 3.625e+8 を出力します
?>

参考

  • printf() - フォーマット済みの文字列を出力する
  • sscanf() - フォーマット文字列に基づき入力を処理する
  • fscanf() - フォーマットに基づきファイルからの入力を処理する
  • vsprintf() - フォーマットされた文字列を返す
  • number_format() - 数字を千位毎にグループ化してフォーマットする



sscanf> <soundex
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 13 Apr 2012
 
add a note add a note User Contributed Notes sprintf
eslindsey at gmail dot com 10-Mar-2012 06:49
@andrejsstepanovs at gmail dot com:

You should just use PHP's built-in error suppression; that's exactly the kind
of situation it's there for:

$str = @sprintf('%s %s %s', 'too few parameters');
krzysiek dot 333 at gmail dot com - zryty dot hekko dot pl 20-Aug-2011 12:48
Encoding and decoding IP adress to format: 1A2B3C4D (mysql column: char(8) )

<?php
function encode_ip($dotquad_ip)
{
    $ip_sep = explode('.', $dotquad_ip);
    return sprintf('%02x%02x%02x%02x', $ip_sep[0], $ip_sep[1], $ip_sep[2],
$ip_sep[3]);
}

function decode_ip($int_ip)
{
    $hexipbang = explode('.', chunk_split($int_ip, 2, '.'));
    return hexdec($hexipbang[0]). '.' . hexdec($hexipbang[1]) . '.' . hexdec
($hexipbang[2]) . '.' . hexdec($hexipbang[3]);
}
?>
timo dot frenay at gmail dot com 02-May-2011 05:38
Here is how to print a floating point number with 16 significant digits
regardless of magnitude:

<?php
    $result = sprintf(sprintf('%%.%dF', max(15 - floor(log10($value)), 0)),
$value);
?>

This works more reliably than doing something like sprintf('%.15F', $value) as
the latter may cut off significant digits for very small numbers, or prints
bogus digits (meaning extra digits beyond what can reliably be represented in a
floating point number) for very large numbers.
andrejsstepanovs at gmail dot com 21-Apr-2011 07:13
Use this function to ignore warning "Too few arguments".

<?php
/**
 * Ignores php E_WARNING "sprintf(): Too few arguments".
 * If parameters is too fiew, then this function add extra empty parameter and
try again.
 * Working in recursion.
 *
 * @param string $template
 * @param mixed $parameters
 * @return string
 */
function my_sprintf($template, $parameters){
   if(!function_exists('handleError')){//initialize new error handler function
      function handleError($errno, $errstr, $errfile, $errline, array
$errcontext){
         throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
      }
      set_error_handler('handleError');
   }

   if(!is_array($parameters)){//manage parameters to allow string
      $parameters = array($parameters);
   }

   try{//trying to execute function. if warning is received, then add parameter
      eval('$return = sprintf($template, "'.implode('","', $parameters).'");');
      return $return;
   }catch(ErrorException $e){
      array_push($parameters, null);
      return my_sprintf($template, $parameters);
   }
}
?>
carmageddon at gmail dot com 02-Feb-2011 06:38
If you want to convert a decimal (integer) number into constant length binary
number in lets say 9 bits, use this:

$binary = sprintf('%08b', $number );

for example:
<?php
$bin = sprintf('%08b',511 );
echo $bin."\n";
?>

would output 111111111
And 2 would output 00000010

I know the leading zeros are useful to me, perhaps they are to someone else
too.
dwieeb at gmail dot com 01-Sep-2010 11:54
If you use the default padding specifier (a space) and then print it to HTML,
you will notice that HTML does not display the multiple spaces correctly. This
is because any sequence of white-space is treated as a single space.

To overcome this, I wrote a simple function that replaces all the spaces in the
string returned by sprintf() with the character entity reference "&nbsp;" to
achieve non-breaking space in strings returned by sprintf()

<?php
//Here is the function:
function sprintf_nbsp() {
   $args = func_get_args();
   return str_replace(' ', '&nbsp;', vsprintf(array_shift($args), array_values
($args)));
}

//Usage (exactly like sprintf):
$format = 'The %d monkeys are attacking the [%10s]!';
$str = sprintf_nbsp($format, 15, 'zoo');
echo $str;
?>

The above example will output:
The 15 monkeys are attacking the [       zoo]!

<?php
//The variation that prints the string instead of returning it:
function printf_nbsp() {
   $args = func_get_args();
   echo str_replace(' ', '&nbsp;', vsprintf(array_shift($args), array_values
($args)));
}
?>
geertdd at gmail dot com 01-Sep-2010 12:53
Note that when using a sign specifier, the number zero is considered positive
and a "+" sign will be prepended to it.

<?php
printf('%+d', 0); // +0
?>
nate at frickenate dot com 13-Nov-2009 11:45
Here's a clean, working version of functions to allow using named arguments
instead of numeric ones. ex: instead of sprintf('%1$s', 'Joe');, we can use
sprintf('%name$s', array('name' => 'Joe'));. I've provided 2 different
versions: the first uses the php-like syntax (ex: %name$s), while the second
uses the python syntax (ex: %(name)s).

<?php

/**
 * version of sprintf for cases where named arguments are desired (php syntax)
 *
 * with sprintf: sprintf('second: %2$s ; first: %1$s', '1st', '2nd');
 *
 * with sprintfn: sprintfn('second: %second$s ; first: %first$s', array(
 *  'first' => '1st',
 *  'second'=> '2nd'
 * ));
 *
 * @param string $format sprintf format string, with any number of named
arguments
 * @param array $args array of [ 'arg_name' => 'arg value', ... ] replacements
to be made
 * @return string|false result of sprintf call, or bool false on error
 */
function sprintfn ($format, array $args = array()) {
    // map of argument names to their corresponding sprintf numeric argument
value
    $arg_nums = array_slice(array_flip(array_keys(array(0 => 0) + $args)), 1);

    // find the next named argument. each search starts at the end of the
previous replacement.
    for ($pos = 0; preg_match('/(?<=%)([a-zA-Z_]\w*)(?=\$)/', $format, $match,
PREG_OFFSET_CAPTURE, $pos);) {
        $arg_pos = $match[0][1];
        $arg_len = strlen($match[0][0]);
        $arg_key = $match[1][0];

        // programmer did not supply a value for the named argument found in
the format string
        if (! array_key_exists($arg_key, $arg_nums)) {
            user_error("sprintfn(): Missing argument '${arg_key}'",
E_USER_WARNING);
            return false;
        }

        // replace the named argument with the corresponding numeric one
        $format = substr_replace($format, $replace = $arg_nums[$arg_key],
$arg_pos, $arg_len);
        $pos = $arg_pos + strlen($replace); // skip to end of replacement for
next iteration
    }

    return vsprintf($format, array_values($args));
}

/**
 * version of sprintf for cases where named arguments are desired (python
syntax)
 *
 * with sprintf: sprintf('second: %2$s ; first: %1$s', '1st', '2nd');
 *
 * with sprintfn: sprintfn('second: %(second)s ; first: %(first)s', array(
 *  'first' => '1st',
 *  'second'=> '2nd'
 * ));
 *
 * @param string $format sprintf format string, with any number of named
arguments
 * @param array $args array of [ 'arg_name' => 'arg value', ... ] replacements
to be made
 * @return string|false result of sprintf call, or bool false on error
 */
function sprintfn ($format, array $args = array()) {
    // map of argument names to their corresponding sprintf numeric argument
value
    $arg_nums = array_slice(array_flip(array_keys(array(0 => 0) + $args)), 1);

    // find the next named argument. each search starts at the end of the
previous replacement.
    for ($pos = 0; preg_match('/(?<=%)\(([a-zA-Z_]\w*)\)/', $format, $match,
PREG_OFFSET_CAPTURE, $pos);) {
        $arg_pos = $match[0][1];
        $arg_len = strlen($match[0][0]);
        $arg_key = $match[1][0];

        // programmer did not supply a value for the named argument found in
the format string
        if (! array_key_exists($arg_key, $arg_nums)) {
            user_error("sprintfn(): Missing argument '${arg_key}'",
E_USER_WARNING);
            return false;
        }

        // replace the named argument with the corresponding numeric one
        $format = substr_replace($format, $replace = $arg_nums[$arg_key] . '$',
$arg_pos, $arg_len);
        $pos = $arg_pos + strlen($replace); // skip to end of replacement for
next iteration
    }

    return vsprintf($format, array_values($args));
}

?>
Astone 15-Sep-2009 11:41
When you're using Google translator, you have to 'escape' the 'conversion
specifications' by putting <span class="notranslate"></span> around them.

Like this:

<?php

function getGoogleTranslation($sString, $bEscapeParams = true)
{
    // "escape" sprintf paramerters
    if ($bEscapeParams)
    {
        $sPatern = '/(?:%%|%(?:[0-9]+\$)?[+-]?(?:[ 0]|\'.)?-?[0-9]*(?:\.[0-9]
+)?[bcdeufFosxX])/';       
        $sEscapeString = '<span class="notranslate">$0</span>';
        $sString = preg_replace($sPatern, $sEscapeString, $sString);
    }

    // Compose data array (English to Dutch)
    $aData = array(
        'v'            => '1.0',
        'q'            => $sString,
        'langpair'    => 'en|nl',
    );

    // Initialize connection
    $rService = curl_init();
   
    // Connection settings
    curl_setopt($rService, CURLOPT_URL, 'http://ajax.googleapis.com/ajax/
services/language/translate');
    curl_setopt($rService, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($rService, CURLOPT_POSTFIELDS, $aData);
   
    // Execute request
    $sResponse = curl_exec($rService);

    // Close connection
    curl_close($rService);
   
    // Extract text from JSON response
    $oResponse = json_decode($sResponse);
    if (isset($oResponse->responseData->translatedText))
    {
        $sTranslation = $oResponse->responseData->translatedText;
    }
    else
    {
        // If some error occured, use the original string
        $sTranslation = $sString;
    }
   
    // Replace "notranslate" tags
    if ($bEscapeParams)
    {
        $sEscapePatern = '/<span class="notranslate">([^<]*)<\/span>/';
        $sTranslation = preg_replace($sEscapePatern, '$1', $sTranslation);
    }
   
    // Return result
    return $sTranslation;
}

?>

Thanks to MelTraX for defining the RegExp!
Jay Gilford 25-Aug-2009 05:13
I created this function a while back to save on having to combine
mysql_real_escape_string onto all the params passed into a sprintf. it works
literally the same as the sprintf other than that it doesn't require you to
escape your inputs. Hope its of some use to people

<?php
function mressf()
{
    $args = func_get_args();
    if (count($args) < 2)
        return false;
    $query = array_shift($args);
    $args = array_map('mysql_real_escape_string', $args);
    array_unshift($args, $query);
    $query = call_user_func_array('sprintf', $args);
    return $query;
}
?>

Regards
Jay
Jaygilford.com
jfgrissom at gmail dot com 11-Jul-2009 09:51
I had a nightmare trying to find the two's complement of a 32 bit number.

I got this from http://www.webmasterworld.com/forum88/13334.htm (credit where
credit is due... =P  )

Quote: ...find out the 2's complement of any number, which is -(pow(2, n) - N)
where n is the number of bits and N is the number for which to find out its 2's
complement.

This worked magic for me... previously I was trying to use

sprintf ("%b",$32BitDecimal);
But it always returned 10000000000000000000000 when the $32BitDecimal value got
above 2,000,000,000.

This -(pow(2, n) - N)
Worked remarkably well and was very accurate.

Hope this helps someone fighting with two's complement in PHP.
John Walker 09-Jul-2009 05:56
To add to other notes below about floating point problems, I noted that %f and
%F will apparently output a maximum precision of 6 as a default so you have to
specify 1.15f (eg) if you need more.

In my case, the input (from MySQL) was a string with 15 digits of precision
that was displayed with 6. Likely what happens is that the rounding occurs in
the conversion to a float before it is displayed. Displaying it as 1.15f (or in
my case, %s) shows the correct number.
viktor at textalk dot com 18-Feb-2009 08:16
A more complete and working version of mb_sprintf and mb_vsprintf. It should
work with any "ASCII preserving" encoding such as UTF-8 and all the ISO-8859
charsets. It handles sign, padding, alignment, width and precision. Argument
swapping is not handled.

<?php
if (!function_exists('mb_sprintf')) {
  function mb_sprintf($format) {
      $argv = func_get_args() ;
      array_shift($argv) ;
      return mb_vsprintf($format, $argv) ;
  }
}
if (!function_exists('mb_vsprintf')) {
  /**
   * Works with all encodings in format and arguments.
   * Supported: Sign, padding, alignment, width and precision.
   * Not supported: Argument swapping.
   */
  function mb_vsprintf($format, $argv, $encoding=null) {
      if (is_null($encoding))
          $encoding = mb_internal_encoding();

      // Use UTF-8 in the format so we can use the u flag in preg_split
      $format = mb_convert_encoding($format, 'UTF-8', $encoding);

      $newformat = ""; // build a new format in UTF-8
      $newargv = array(); // unhandled args in unchanged encoding

      while ($format !== "") {
     
        // Split the format in two parts: $pre and $post by the first
%-directive
        // We get also the matched groups
        list ($pre, $sign, $filler, $align, $size, $precision, $type, $post) =
            preg_split("!\%(\+?)('.|[0 ]|)(-?)([1-9][0-9]*|)(\.[1-9][0-9]*|)
([%a-zA-Z])!u",
                       $format, 2, PREG_SPLIT_DELIM_CAPTURE) ;

        $newformat .= mb_convert_encoding($pre, $encoding, 'UTF-8');
       
        if ($type == '') {
          // didn't match. do nothing. this is the last iteration.
        }
        elseif ($type == '%') {
          // an escaped %
          $newformat .= '%%';
        }
        elseif ($type == 's') {
          $arg = array_shift($argv);
          $arg = mb_convert_encoding($arg, 'UTF-8', $encoding);
          $padding_pre = '';
          $padding_post = '';
         
          // truncate $arg
          if ($precision !== '') {
            $precision = intval(substr($precision,1));
            if ($precision > 0 && mb_strlen($arg,$encoding) > $precision)
              $arg = mb_substr($precision,0,$precision,$encoding);
          }
         
          // define padding
          if ($size > 0) {
            $arglen = mb_strlen($arg, $encoding);
            if ($arglen < $size) {
              if($filler==='')
                  $filler = ' ';
              if ($align == '-')
                  $padding_post = str_repeat($filler, $size - $arglen);
              else
                  $padding_pre = str_repeat($filler, $size - $arglen);
            }
          }
         
          // escape % and pass it forward
          $newformat .= $padding_pre . str_replace('%', '%%', $arg) .
$padding_post;
        }
        else {
          // another type, pass forward
          $newformat .= "%$sign$filler$align$size$precision$type";
          $newargv[] = array_shift($argv);
        }
        $format = strval($post);
      }
      // Convert new format back from UTF-8 to the original encoding
      $newformat = mb_convert_encoding($newformat, $encoding, 'UTF-8');
      return vsprintf($newformat, $newargv);
  }
}
?>
splogamurugan at gmail dot com 06-Feb-2009 05:59
$format = 'There are %1$d monkeys in the %s and %s ';
printf($format, 100, 'Chennai', 'Bangalore');

Expecting to output
"There are 100 monkeys in the Chennai and bangalore"

But, this will output
"There are 100 monkeys in the 100 and Chennai"

Because, the second and Third specifiers takes 1rst and 2nd arguments. Because
it is not assigned with any arguments.
remy dot damour at -please-no-spam-laposte dot net 15-Jan-2009 11:15
With printf() and sprintf() functions, escape character is not backslash '\'
but rather '%'.

Ie. to print '%' character you need to escape it with itself:
<?php
printf('%%%s%%', 'koko'); #output: '%koko%'
?>
MelTraX 05-Nov-2008 01:40
<?php
  // parses a string meant for printf and returns an array of found parameters
(or NULL if it contains syntax errors)
  function parsePrintfParameters($string) {
    $valid = '/^(?:%%|%(?:[0-9]+\$)?[+-]?(?:[ 0]|\'.)?-?[0-9]*(?:\.[0-9]+)?
[bcdeufFosxX])/';
    $originalString = $string;

    $result = array();
    while(strlen($string)) {
      if(!$string = preg_replace('/^[^%]*/', '', $string))
        break;

      if(preg_match($valid, $string, $matches)) {
        $result[] = $matches[0];
        $string = substr($string, strlen($matches[0]));
      } else {
        error(sprintf('"%s" has an error near "%s".', $originalString,
$string));
        return NULL;
      }
    }
    return $result;
  }
?>
savannah at seznam dot cz 12-Oct-2008 04:29
If you have problems using utf-8 with string paddings, you can use this
function:

<?php
/**
 * Formats string using sprintf, but correctly handles %s  with space paddings
 *
 * uses conversion to iso-8859-2 and back
 *
 * it is, however, much slower, so use only when needed!
 *
 * @param string $format
 */
function utf_8_sprintf ($format) {
  $args = func_get_args();

  for ($i = 1; $i < count($args); $i++) {
    $args [$i] = iconv('UTF-8', 'ISO-8859-2', $args [$i]);
  }
 
  return iconv('ISO-8859-2', 'UTF-8', call_user_func_array('sprintf', $args));
}

// test

echo sprintf ("[%-20s]\n", 'escrzyaie'); //  how it should look without special
chars
echo sprintf ("[%-20s]\n", 'ěščřžýáíé'); // not correctly handled by php
echo utf_8_sprintf ("[%-20s]\n", 'ěščřžýáíé'); // using above function

/*
produces:
[escrzyaie           ]
[ěščřžýáíé  ]
[ěščřžýáíé           ]
*/

?>
the trick is to convert arguments to iso8859-2 and result back to utf-8.
php at mikeboers dot com 01-Oct-2008 01:42
And continuing on the same theme of a key-based sprintf...

I'm roughly (I can see a couple cases where it comes out wierd) copying the
syntax of Python's string formatting with a dictionary. The improvement over
the several past attempts is that this one still respects all of the formating
options, as you can see in my example.

And the error handling is really crappy (just an echo). I just threw this
together so do with it what you will. =]

<?php

function sprintf_array($string, $array)
{
    $keys    = array_keys($array);
    $keysmap = array_flip($keys);
    $values  = array_values($array);
   
    while (preg_match('/%\(([a-zA-Z0-9_ -]+)\)/', $string, $m))
    {   
        if (!isset($keysmap[$m[1]]))
        {
            echo "No key $m[1]\n";
            return false;
        }
       
        $string = str_replace($m[0], '%' . ($keysmap[$m[1]] + 1) . '$',
$string);
    }
   
    array_unshift($values, $string);
    var_dump($values);
    return call_user_func_array('sprintf', $values);
}

echo sprintf_array('4 digit padded number: %(num)04d ', array('num' => 42));

?>

Cheers!
ant at loadtrax dot com 18-Jun-2008 02:19
Rounding seems a little inconsistent, so beware:

$ php -a

php> print round(1.0*20*1.175/100,2);
0.24
php > print sprintf("%.2f",1.0*20*1.175/100);
0.23
php > print sprintf("%.0f",1.0*20*1.175);
24

I get round this by doing the round first, then doing the sprintf.
jaimthorn at yahoo dot com 11-Jun-2008 07:01
I needed a piece of code similar to the one Matt posted below, on the 10th of
March, 2008.  However, I wasn't completely satisfied with Matt's code (sorry,
Matt!  No offense intended!), because

1) I don't like to initialize variables when it's not really needed, and
2) it contains two bugs.

What are the bugs?

First, Matt's code tests for count($vars) > 0, but if $var == "Hello world!",
then count($var) == 1, but the foreach() will crash because $var has to be an
array.  So instead, my code tests for is_array($var).

Second, if a key in $vars is a prefix of any of the later keys in the array
(like 'object' is the beginning of 'objective') then the str_replace messes
things up.  This is no big deal if your keys are hard-coded and you can make
sure the keys don't interfere, but in my code the keys are variable.  So I
decided to first sort the array on a decreasing length of the key.

<?php

function cmp($a, $b)
{
    return strlen($b) - strlen($a);
}

function sprintf2($str, $vars, $char = '%')
{
    if(is_array($vars))
    {
        uksort($vars, "cmp");

        foreach($vars as $k => $v)
        {
            $str = str_replace($char . $k, $v, $str);
        }
    }

    return $str;
}

echo sprintf2( 'Hello %your_name, my name is %my_name! I am %my_age, how old
are you? I like %object and I want to %objective_in_life!'
             , array( 'your_name'         => 'Matt'
                    , 'my_name'           => 'Jim'
                    , 'my_age'            => 'old'
                    , 'object'            => 'women'
                    , 'objective_in_life' => 'write code'
                    )
             );

?>

If possible, and if you're willing, you can also embed the key fields in the
text between percent-signs, rather than prefixing the keys with one.  Sorting
is no longer necessary, and the execution time is less than half of the code
above:

<?php

function sprintf3($str, $vars, $char = '%')
{
    $tmp = array();
    foreach($vars as $k => $v)
    {
        $tmp[$char . $k . $char] = $v;
    }
    return str_replace(array_keys($tmp), array_values($tmp), $str);
}

echo sprintf3( 'Hello %your_name%, my name is %my_name%! I am %my_age%, how old
are you? I like %object% and I want to %objective_in_life%!'
             , array( 'your_name'         => 'Matt'
                    , 'my_name'           => 'Jim'
                    , 'my_age'            => 'old'
                    , 'object'            => 'women'
                    , 'objective_in_life' => 'write code'
                    )
             );
?>

If you're willing to embed the keys in the text, you may also be willing to
embed the keys themselves in percent signs, thus shaving off another 30% of the
execution time:

<?php

function sprintf4($str, $vars)
{
    return str_replace(array_keys($vars), array_values($vars), $str);
}

echo sprintf4( 'Hello %your_name%, my name is %my_name%! I am %my_age%, how old
are you? I like %object% and I want to %objective_in_life%!'
             , array( '%your_name%'         => 'Matt'
                    , '%my_name%'           => 'Jim'
                    , '%my_age%'            => 'old'
                    , '%object%'            => 'women'
                    , '%objective_in_life%' => 'write code'
                    )
             );
?>

Of course, by now the sprintf function is no longer something you'd want to
write to mum and dad about...
ranema at ubuntu dot polarhome dot com 30-Mar-2008 07:40
It's very comfortible for long Sql queries:

<?php
$_gQuery = "UPDATE `x` SET `a` = %i AND `b` = '%s' WHERE `my` = '%s';"; //
........

mysql_query( sprintf( $_gQuery, 10, 'a', 'rrrr' ) );
?>

But if you have a short query, then it would be much faster to append your data
by using `.`.

<?php
$_gQuery = 'SELECT COUNT(*) FROM `' . $_gName . '`;';
?>
matt 10-Mar-2008 09:13
Was looking for a assoc way of using sprintf but couldnt find one, probably
wasnt looking hard enough so came up with this. Very very simple indeed...

<?php

function sprintf2($str='', $vars=array(), $char='%')
{
    if (!$str) return '';
    if (count($vars) > 0)
    {
        foreach ($vars as $k => $v)
        {
            $str = str_replace($char . $k, $v, $str);
        }
    }

    return $str;
}

echo sprintf2('Hello %your_name my name is %my_name! I am %my_age, how old are
you? I like %object!', array(
    'your_name' => 'Ben',
    'my_name' => 'Matt',
    'my_age' => '21',
    'object' => 'food'
));

// Hello Ben my name is Matt! I am 21, how old are you? I like food!

?>

Looks nice anyway :)
andyhaslam at hotmail dot com 05-Feb-2008 09:46
An interesting bug, if you do the following:

$val = 2345.35;
$val = sprintf("%01.2f", $val);
echo $val;

Output is "2.00", instead of "2345.35". The solution is to use an intermediate
variable:

$val = 2345.35;
$val2 = sprintf("%01.2f", $val);
$val = $val2;
echo $val;
scott dot gardner at mac dot com 10-Jan-2008 01:22
In the last example of Example#6, there is an error regarding the output.

printf("[%10.10s]\n", $t); // left-justification but with a cutoff of 10
characters

This outputs right-justified.

In order to output left-justified:

printf("[%-10.10s]\n", $t);
me at umarfarooq dot net 06-Sep-2007 11:29
/**
This function returns a formated  string with the legnth you specify
@string holds the string which you want to format
@len holds the length you want to format
**/
function formatString($string, $len)
{
    if (strlen($string) < $len)
    {
        $addchar=($len - strlen($string)) ;
        for ($i = 0; $i < $addchar; $i++)
        {
            $string=sprintf("$string%s", "0");
        }
    }
   
    if (strlen($string) > $len)
    {
        $string=substr($string,0,$len);
    }
   
    return $string;   
}
Thomas Breuss 11-May-2007 12:03
Note:
If you want to use % in sprintf, you have to "quote" it like %%.

Example:
echo sprintf("Green => %d%%'", 50);

Output:
Green => 50%
eagle at electric-force dot net 27-Mar-2007 11:25
Display an binary string like an Hex Editor.

<?php
function BinToHexView($binstr) {
    $HexView = "";

    $binpos = 0;
    $binsize = strlen($binstr);
    $binr = ( ($binsize-$binpos-16) > 16 ? 16 : $binsize-$binpos-16 );

    while ($binr > 0) {
        $hline = "";
        $dline = "";
        $HexView .= sprintf("%04x", $binpos);
        for ($c=0;$c<$binr;$c++) {
            $hline .= sprintf("%02x",ord($binstr[$binpos+$c]))." ";
        }
        for ($c=0;$c<$binr;$c++) {
            $ord = ord($binstr[$binpos+$c]);
            $dline .= ( $ord<32 || $ord>126 ? "." : $binstr[$binpos+$c] );
        }
        $HexView .= sprintf("  %-48s  %-16s\n", $hline, $dline);
        $binpos += $binr;
        $binr = ( ($binsize-$binpos-16) > 16 ? 16 : $binsize-$binpos-16 );
    }

    return $HexView;
}
?>
29-Jan-2007 10:15
In response to juan at ecogomera dot com:

I think what you want is:

$x = 3327
$y=decbin($x);
echo $y."<br>";
$z = sprintf("%012d", $x);
echo $z;

3327
110011111111
000000003327

Right? You were double-converting the number. First to binary, then again to
decimal. You should be converting the source number directly into the required
base.
SWestrup 09-Nov-2006 11:46
In response to Anonymous, who claimed that:

  printf("[%s]\n", str_pad('Hello', 20));

and

  printf("[%-20s]\n", 'Hello');

are the same thing: you've missed the point.

They're only the same when the amount of padding is a known constant. When its
a variable (or an expression), its often much more convenient to be able to
write:

  printf("[%-*s]\n", 3*$n+2, "Hello");

than what you have to go through now, which is either:

  $t = 3*$n+2;
  printf("[%-{$t}s]\n","Hello");

or

  printf("[%s]\n", str_pad('Hello', 3*$n+2));
Anonymous 16-Oct-2006 04:04
In response to Fredrik Rambris in the com top domain:

<?php

//Your code:

printf("[%s]\n", str_pad('Hello', 20));

//Is the same as:

printf("[%-20s]\n", 'Hello');

?>
Fredrik Rambris in the com top domain 28-Sep-2006 02:48
The C implementation of printf (alteast in glibc) can handle field length as
arguments like this:

printf("[%-*s]\n", (int)20, "Hello");

To have the same result in PHP you need to run

printf("[%s]\n, str_pad("Hello", 20) );

It would be nice if one could use the field length directly like in C.
Moore (at) Hs-Furtwangen (dot) De 12-Aug-2006 11:54
Here a litle function that might come handy one time:
It gives back a String and adds a <BR> (you can change it to <br />) to every
line end. And it adds $num blanks to the front of the next line.

<?php
 function nl2brnl($text, $num)
  {
   return preg_replace("/\\r\\n|\\n|\\r/", sprintf("% -".(5+$num)."s","<BR>\\
n"), $text);
  }

$a = " one\\n two\\r\\n three";

$b = nl2brnl($a, 2);

var_dump($b);

/* output will be:
string(30) " one<BR>
   two<BR>
   three"
*/

echo "  <P>\\n   ";
echo $b

/* output will be:
  <P>
   one<BR>
   two<BR>
   three
*/
?>

Is helpfull for avouding code_soup.
bknakkerNO at SPAMgmail dot com 10-Aug-2006 02:54
Note that in PHP5 (.1.4 for me) sprintf will not use the __toString function of
an object.

<?php
class pr{
private $l;
public function __construct($l)
{
$this->l=$l;
}
public function __toString()
{
return $this->l;
}
}
echo new pr('This works!!'); //This will display 'This works!!'
echo sprintf(new pr('This doesnt')); // will display 'Object'
?>

Be careful with that!
Ulf Wostner 06-Aug-2006 10:35
<?php
#-----------------------------------------------------
# Viewing Two's Complement using sprintf formatting.
#-----------------------------------------------------
# Systems using Two's Complements have exactly one number that equals its own
Two's Complement.
# On a 32-bit system look at  1000 0000 0000 0000  for  -2147483648
# Take the one's complement, to get 0111 1111 1111 1111, add 1
# to get the Two's Complement: 1000 0000 0000 0000
#  We are back to the original number, the so-called Weird Number for 32-bits.

# For a 64-bit system, format that number as binary, width 64, padded with 0's.

printf("%064b\n", -2147483648);

# Output with added spaces:
# 11111111 11111111 11111111 11111111 10000000 00000000 00000000 00000000

# And here is the Two's Complement on a 64-bit system.

printf("%064b\n", +2147483648);

# Output with added spaces:
# 00000000 00000000 00000000 00000000 10000000 00000000 00000000 00000000
# They share those last 32 bits, accounting for the 32-bit Weird Number.

#----------------------------------------------------------
# Is PHP running  32-bit or 64-bit?
#----------------------------------------------------------
# Sure, we can look at the max int, but  The Weird Number  also tells if we are
in 32-bit, 64-bit, or ...

function getBitCount() {
  $how_many_bits = 1;  $n = 2;
  while(True) {
    $how_many_bits += 1;   $n *= 2;  # powers of 2
    # matches its own two's complement? 
    if( sprintf("%b", $n) == sprintf("%b", -$n)  )
      return 1 + $how_many_bits;
  }
  return;
}
?>
egingell at sisna dot com 26-Apr-2006 01:51
<?
/**
 * [string or int] vprint ( string $format [, mixed $ary [, bool $return]] )
 *
 * Closely mimics the functionality of sprintf(), printf(), vprintf(), and
vsprintf().
 *
 * Replaces %[bcdeufFosxX] with each element of $ary
 *     See http://us3.php.net/manual/en/function.sprintf.php for details on
replacement types.
 *
 * If there are not enough elements in $ary (or it is left out) to satisfy
$format,
 *     it will be padded to the correct length.
 *
 * Since v*printf() doesn't mind having too many elements in the array, $format
will be left alone.
 *
 * If $ary is a string, it will be recast into an array.
 *
 * If $return is set to a value considered to be false (0, '', null, false, and
array()),
 *     then the output will be sent to STDOUT and the strlen() of the output
string will be returned;
 *     otherwise, the output string will be returned.
 *
 * It's buggy when using the argument swapping functionality, unless you do it
propperly.
 *
 * May break when using modifiers (%.4e, %02s, etc), unless you do it
propperly.
 **/
function vprint($format, $ary = array(), $return = true) {
    // Sanity?!
    if (!is_array($ary)) $ary = array($ary);

    // Find %n$n.
    preg_match_all('#\\%[\\d]*\\$[bcdeufFosxX]#', $format, $matches);

    // Weed out the dupes and count how many there are.
    $counts = count(array_unique($matches[0]));

    // Count the number of %n's and add it to the number of %n$n's.
    $countf = preg_match_all('#\\%[bcdeufFosxX]#', $format, $matches) +
$counts;

    // Count the number of replacements.
    $counta = count($ary);

    if ($countf > $counta) {
        // Pad $ary if there's not enough elements.
        $ary = array_pad($ary, $countf, "&nbsp;");
    }

    if ($return) {
        return vsprintf($format, $ary);
    } else {
        return vprintf($format, $ary);
    }
}

?>
mauf at franzoni dot info 16-Feb-2006 07:21
The format of floating values has been previously reporting as depending on
platform (linux / windows) yet I see it changes within two linux systems
depending on the version:
In V4.2.2 "%3.2" displays 3 integers and two decimals (i.e. the first digit
represents just the number of integer digits), on V4.4.1 the same displays (and
justifies the string to) a three character string (i.e. the first digit is the
total lenght of the number, including the decimal dot).

Maybe someone may better specify which version this happens from.
darkfalconIV at hotmail dot com 18-Dec-2005 12:57
henke dot andersson

You can accomplish feeding it array if you use call_user_func_array. Not
exactly a `clean' option, but it does work.
tim dot brouckaert dot NOSPAM at gmail dot com 12-Oct-2005 05:35
If you want to center align some text using the printf or sprintf functions,
you can just use the following:

function center_text($word){
    $tot_width = 30;
    $symbol = "-";
    $middle = round($tot_width/2);
    $length_word = strlen($word);
    $middle_word = round($length_word / 2);
    $last_position = $middle + $middle_word;
    $number_of_spaces = $middle - $middle_word;

    $result = sprintf("%'{$symbol}{$last_position}s", $word);
        for ($i = 0; $i < $number_of_spaces; $i++){
            $result .= "$symbol";
        }
    return $result;
}

$string = "This is some text";
print center_text($string);

off course you can modify the function to use more arguments.
webmaster at cafe-clope dot net 14-Aug-2005 09:47
trying to fix the multibyte non-compliance of sprintf, I came to that :

<?php
function mb_sprintf($format) {
    $argv = func_get_args() ;
    array_shift($argv) ;
    return mb_vsprintf($format, $argv) ;
}

function mb_vsprintf($format, $argv) {
    $newargv = array() ;
   
    preg_match_all("`\%('.+|[0 ]|)([1-9][0-9]*|)s`U", $format, $results,
PREG_SET_ORDER) ;
   
    foreach($results as $result) {
        list($string_format, $filler, $size) = $result ;
        if(strlen($filler)>1)
            $filler = substr($filler, 1) ;
        while(!is_string($arg = array_shift($argv)))
            $newargv[] = $arg ;
        $pos = strpos($format, $string_format) ;
        $format = substr($format, 0, $pos)
                  . ($size ? str_repeat($filler, $size-strlen($arg)) : '')
                    . str_replace('%', '%%', $arg)
                    . substr($format, $pos+strlen($string_format))
                    ;
    }
       
    return vsprintf($format, $newargv) ;
}

?>

handle with care :
1. that function was designed mostly for utf-8. i guess it won't work with any
static mb encoding.
2. my configuration sets the mbstring.func_overload configuration directive to
7, so you may wish to replace substr, strlen, etc. with mb_* equivalents.
3. since preg_* doesn't complies with mb strings, I used a '.+' in the regexp
to symbolize an escaped filler character. That means, %'xy5s pattern will
match, unfortunately. It is recomended to remove the '+', unless you are
intending to use an mb char as filler.
4. the filler fills at left, and only at left.
5. I couldn't succeed with a preg_replace thing : the problem was to use the
differents lengths of the string arguements in the same replacement, string or
callback. That's why the code is much longuer than I expected.
6. The pattern wil not match any %1\$s thing... just was too complicated for
me.
7. Although it has been tested, and works fine within the limits above, this is
much more a draft than a end-user function. I would enjoy any improvment.

The test code below shows possibilities, and explains the problem that occures
with an mb string argument in sprintf.

<?php
header("content-type:text/plain; charset=UTF-8") ;
$mb_string = "x x x" ;
echo sprintf("%010s", $mb_string), " [octet-size: ", str_sizeof($mb_string) , "
; count: ", strlen(sprintf("%010s", $mb_string)), " characters]\n" ;
echo mb_sprintf("%010s", $mb_string), " [octet-size: ", str_sizeof($mb_string)
, " ; count: ", strlen(mb_sprintf("%010s", $mb_string)), " characters]\n" ;
echo "\n" ;
echo mb_sprintf("%''10s\n%'010s\n%' 10s\n%10d\n%'x10s\n%010s\n% 10s\n%010s\
n%'1s\n", "zero", "one", "two", 3, "four", "  ve", "%s%i%x", "  ve ", "eight")
;
?>
david at rayninfo dot co dot uk 16-Jun-2005 11:33
Using sprintf to force leading leading zeros

foreach (range(1, 10) as $v) {echo "<br>tag_".sprintf("%02d",$v);}

displays
tag_01
tag_02
tag_03
.. etc
ian dot w dot davis at gmail dot com 30-May-2005 07:03
Just to elaborate on downright's point about different meanings for %f, it
appears the behavior changed significantly as of 4.3.7, rather than just being
different on different platforms. Previously, the width specifier gave the
number of characters allowed BEFORE the decimal. Now, the width specifier gives
the TOTAL number of characters. (This is in line with the semantics of printf()
in other languages.) See bugs #28633 and #29286 for more details.
Pacogliss 02-May-2005 12:08
Just a reminder for beginners : example 6 'printf("[%10s]\n",    $s);' only
works (that is, shows out the spaces) if you put the html '<pre></pre>' tags (
head-scraping time saver ;-).
christian at wenz dot org 18-Apr-2005 12:20
@ henke dot andersson at comhem dot se: Use vprintf()/vsprintf() for that.
henke dot andersson at comhem dot se 15-Apr-2005 08:07
Mind that it doesn't allow you to use a array as multiple arguments like this:
<?php
printf('%s %s',array('a','b')) ?>
downright at comcast dot net 31-Jan-2005 02:03
Just thought I'd give a heads up for anyone doing cross platform applications.

sprintf spacing is different numerically with Windows and Linux.

Linux aligned correctly:
$ol = sprintf ("%-6s|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f|%11.2f\
n",

Windows aligned correctly:
$ol = sprintf ("%-6s|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f|%14.2f\
n",

As you can see the strings are fine for spacing, however, the numbers need a
difference of 3 in order to have the same amount of spaces.

I noticed this after using sprintf to format a header for a web app I was
working on.  On windows it fit, however, when it came to linux it was MUCH
larger than the header.
jrpozo at conclase dot net 21-Jan-2005 07:13
Be careful if you use the %f modifier to round decimal numbers as it (starting
from 4.3.10) will no longer produce a float number if you set certain locales,
so you can't accumulate the result. For example:

setlocale(LC_ALL, 'es_ES');
echo(sprintf("%.2f", 13.332) + sprintf("%.2f", 14.446))

gives 27 instead of 27.78, so use %F instead.
timo at frenay dot net 10-Jan-2005 10:58
Note that the documentation is unclear about the details of the sign specifier.
First of all, the character for this is "+".

Also note that the following does NOT print "+00.00" as you might expect:

<?php
    printf('%+02.2f', 0);
?>

The sign is included in the width. This can't be solved by increasing the
width:

<?php
    printf('%+03.2f', 0);
?>

This will put the padding 0 before the sign.
Here is a possible solution:

<?php
    $value = 0;
    printf('%s%02.2f', ($value < 0) ? '-' : '+', abs($value));
?>
Gkeeper80 11-Aug-2004 03:58
When using sprintf with padding, it's important to note that specifying the
length of your padding does not restrict the length of your output.

For example:
$var = 'test';
$output sprintf("%03s", $var);

print $output;

Produces:
test

NOT:
est

This may seem intuitive for working with numbers, but not neccesarily when
working with strings.
rex 15-Jun-2004 02:47
Note, if you are just looking for something to pad out a string consider
str_pad.

From testing, it seems faster and was more intuitive to use (for example,
making it pad the begining or end of a string... with sprintf you would have to
use negative indexes)
php at sharpdreams dot com 08-May-2004 02:13
Note that when using the argument swapping, you MUST number every argument,
otherwise sprintf gets confused. This only happens if you use number arguments
first, then switch to a non-numbered, and then back to a numbered one.

<?php
$sql = sprintf( "select * from %1\$s left join %2\$s on( %1\$s.id = %2\
$s.midpoint ) where %1\$s.name like '%%%s%%' and %2\$s.tagname is not null",
"table1", "table2", "bob" );
// Wont work:
// Sprintf will complain about not enough arguments.
$sql = sprintf( "select * from %1\$s left join %2\$s on( %1\$s.id = %2\
$s.midpoint ) where %1\$s.name like '%%%3\$s%%' and %2\$s.tagname is not null",
"table1", "table2", "bob" );
// Will work: note the %3\$s
?>
tobias at silverxnet dot de 16-Apr-2004 07:09
Regarding the previous posting:
I just wanted to give an explanation. This should be because the float to
string / integer to string conversion (you are using a string, multiplying it
with a float value what php automatically causes to convert the string to a
float value). This is a general "problem" (or not), but not that hard to
explain.
Where an integer or float starts with 0, in a string it does obviously with 1.
So if you are using a string your value will increase by one (You started with
a string, so it does not increase but contain the real result. If you start
using a float value by not using '' around the value, you have to output the
float value as well. This is just the PHP conversion.)

Try putting
$x = strval( $x );
after
$x = $x * 100;
and using your example again. You will see that the output will change to 13664
= 13664 because of the general string conversion. It seems that PHP is
converting a float to a string by inceasing by one. By doing the same with
intval instead of strval the output changes to 13663 = 13663.

! sprintf seems to behave wrong when using the conversation to an integer value
and NOT doing the conversation at all. So use intval to convert to an integer
value or strval to convert to a string value BEFORE using sprintf. This should
be solving the problems.
kekec at kukac dot hu 29-Mar-2004 09:16
A really working one:
<?php
function cutzero($value) {
   return preg_replace("/(\.?)0+$/", "", $value);
}
?>
05-Mar-2004 10:54
both of your cut-zero functions are just way too complicated. if it's a string
where only the zeros at the end should be truncated, why not use a syntax as
simple as rtrim("4.7000","0") ?
Rene dot Leonhardt at agritec24 dot com 16-May-2003 10:02
Your cutzero function could be faster ;-)
   return (double)$value;

But if you must have a function:
   return preg_replace('/0+$/', '', $value);
kouber at php dot net 08-May-2003 02:55
If you want to cut all the zeros off the end of a float, but not losing any
sensitive information, use this:

<?
function cutzero($value) {
    return preg_replace("/(\.\d+?)0+$/", "$1", $value)*1;
}
?>

Some examples:

<?
cutzero("4.7600");     // returns 4.76
cutzero("4.7604")      // returns 4.7604
cutzero("4.7000");     // returns 4.7
cutzero("4.0000");     // returns 4
?>
info at nospam dot webtip dot dk 18-Feb-2003 05:06
If you want to format a phonenumber with spaces, use chunk_split() which splits
a string into smaller chunks. It's much simpler than using sprintf.

$phone = "12345678";

chunk_split ($phone, 2);

will return 12 34 56 78
moritz dot geselle at invision-team dot de 02-Dec-2002 02:52
a little note to the argument swapping examples which took me a while to get:
if you use single quotes for the format string (like you should do, since there
aren't any variable conversions to do as long as you don't need any special
chars), the given examples won't work because of the backslash before the $
(needs to be escaped in double quoted strings - but not in single quoted!)

so this:

$format = "The %2\$s contains %1\$d monkeys";
printf($format,$num,$location);

with a single quoted format string would look like this:

$format = 'The %2$s contains %1$d monkeys';
printf($format,$num,$location);

(no escapes)

I hope that helps to avoid confusion ;)
no dot email dot address at example dot com 16-Sep-2002 06:29
Using argument swapping in sprintf() with gettext: Let's say you've written the
following script:

<?php
$var = sprintf(gettext("The %2\$s contains %1\$d monkeys"), 2, "cage");
?>

Now you run xgettext in order to generate a .po file. The .po file will then
look like this:

#: file.php:9
#, ycp-format
msgid "The %2\\$s contains %1\\$d monkeys"
msgstr ""

Notice how an extra backslash has been added by xgettext.

Once you've translated the string, you must remove all backslashes from the ID
string as well as the translation, so the po file will look like this:

#: file.php:9
#, ycp-format
msgid "The %2$s contains %1$d monkeys"
msgstr "Der er %1$d aber i %2$s"

Now run msgfmt to generate the .mo file, restart Apache to remove the gettext
cache if necessary, and you're off.
abiltcliffe at bigfoot.com 10-Sep-2002 11:01
To jrust at rustyparts.com, note that if you're using a double-quoted string
and *don't* escape the dollar sign with a backslash, $s and $d will be
interpreted as variable references. The backslash isn't part of the format
specifier itself but you do need to include it when you write the format string
(unless you use single quotes).
Andrew dot Wright at spamsux dot atnf dot csiro dot au 03-Jul-2002 02:22
An error in my last example:
$b = sprintf("%30.s", $a);
will only add enough spaces before $a to pad the spaces + strlen($a) to 30
places.

My method of centering fixed text in a 72 character width space is:

$a = "Some string here";
$lwidth = 36; // 72/2
$b = sprintf("%".($lwidth + round(strlen($a)/2)).".s", $a);
eden_zero_x at hotmail dot com 26-Jun-2002 02:05
Well I came up with this one, extremely simple. instead of writing <span class=
"class">hello</a>
you can write: print class('class','hello'); using sprintf
-----------------------------
function class_ ($class, $text=false)
 {
    return sprintf ("<span class=\"%s\">%s</span>",
        $class,
        ($text ? $text : $class)
    );
 }
-----------------------------
shgyn at binabakti dot or dot id 01-Jun-2002 07:57
Previously submitted sci() function to get scientific representation of a
number is not working with 0 and negative numbers. So, here is the modified
version:

function sci($x, $d=-1) {
    $min=($x<0)?"-":"";
    $x=abs($x); 
    $e=floor(($x!=0)?log10($x):0);
    $x*=pow(10,-$e);
    $fmt=($d>=0)?".".$d:"";
    $e=($e>=0)?"+".sprintf("%02d",$e):"-".sprintf("%02d",-$e);
    return sprintf("$min%".$fmt."fe%s",$x,$e);
}
fuchschr at surfeu dot at 20-Feb-2002 08:54
To have a string with leading zeros use this:
$string_i = sprintf("%04s",$value)

Gives you an output with leading zeros and 4 digits.
i.e.
0001
0002
...
0010
an so on
cv at corbach dot de 10-Feb-2002 07:36
To make radu.rendec@ines.ro's excellent function work on signed numbers you
must change the first line to:

$e = floor(log10(abs($x)));
anqmb(at)yahoo.co.jp 05-Dec-2001 04:51
Watch out the mysterious rounding rule.
<?php
$a = 4.5;
$b = sprintf("%d",$a);
$c = 4.5;
$d = sprintf("%.0f",$c);
$e = 0.45;
$f = sprintf("%.1f",$e);
print ("$b,$d,$f\n");
?>

The code above prints "4,5,0.5".
(Perl version prints "4,4,0.5".)
keeper at odi dot com dot br 26-Nov-2001 09:26
Took me a while to find this out.
hope will save someones time.
IT ADD A CARACRER TO THE END OF A STRING

$x = sprintf("%'x-10s", "a");
echo $x;
tjchamberlain.hotmail@com 25-Mar-2001 11:16
It is worth noting that "%5.2f" will result in a string 8 characters long (5
then the '.' then 2), not 5 characters as you might expect.
prolixmp3 at navigators dot lv 23-Mar-2001 10:55
If you are going to create a counter which uses _symbols_ before actual digits
(see, f.e., SpyLog.com counters - they are filling space with "." before, so
the count like 12345 looks like "........12345"), you can use the following:

$txt = "Abracadabra"; // actual string
$fit = 16; // how many digits to use
$fill = "."; // what to fill
$digits = sprintf ("%'{$fill}{$fit}s", $txt);

Paul (a.k.a. Mr.Prolix)
voudras at nospam dot swiftslayer dot org 17-Nov-2000 06:58
Little note about sprintf and its ilk.
if you attempt something like
$string = "dingy%sflem%dwombat";
$nbr = 5;
$name = "voudras";

$msg = sprintf("%d $string %s", $nbr, $name);

sprintf will complain about a lack in the number of arguments, this would be
because of the %'s in the actual string. This can be a great benifit, but is
also rather confusing if you dont realize this feature, and are passing
questionable variables to sprintf (for, say perhaps logging). One way around
this is using
ereg_replace("%","%%", $string); before
sending it off to sprintf. This is actually how i came across this as a problem
- i had realized some time ago that i would have to test my $string for
%'s, but when running the %->%% replacement on a very large serialized object,
my application timed out.
    My solution was to use
sprintf("%d %s %s", $nbr, $string, $name);
but, there was a reason i originally had done this the other way - i suppose
i'll find out soon enough
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 18 18:21:20 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • PHP の振る舞いの変更
  • 出力制御
  • 出力制御関数
  • flush
  • ob_ clean
  • ob_ end_ clean
  • ob_ end_ flush
  • ob_ flush
  • ob_ get_ clean
  • ob_ get_ contents
  • ob_ get_ flush
  • ob_ get_ length
  • ob_ get_ level
  • ob_ get_ status
  • ob_ gzhandler
  • ob_ implicit_ flush
  • ob_ list_ handlers
  • ob_ start
  • output_ add_ rewrite_ var
  • output_ reset_ rewrite_ vars

ob_get_contents> <ob_flush
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
ob_get_clean

(PHP 4 >= 4.3.0, PHP 5)

ob_get_clean — 現在のバッファの内容を取得し、出力バッファを削除する

説明

string ob_get_clean ( void )

現在のバッファの中身を取得し、出力バッファを削除します。

ob_get_clean() は、基本的に ob_get_contents() および ob_end_clean() を同時に実
行するのと同じです。

返り値

出力バッファの内容を返した後で出力のバッファリングを終了します。出力バッファリ
ングが開始されていない場合は FALSE が返されます。

例

例1 単純な ob_get_clean() の例

<?php

ob_start();

echo "Hello World";

$out = ob_get_clean();
$out = strtolower($out);

var_dump($out);
?>

上の例の出力は以下となります。


string(11) "hello world"


参考

  • ob_get_contents() - 出力用バッファの内容を返す
  • ob_start() - 出力のバッファリングを有効にする



ob_get_contents> <ob_flush
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes ob_get_clean
steven at bielik dot com 21-Feb-2011 11:57
Also, don't forget that you will need to ob_start() again for any successive
calls:

<?php
ob_start();
echo "1";
$content = ob_get_clean();

ob_start(); // This is NECESSARY for the next ob_get_clean() to work as
intended.
echo "2";
$content .= ob_get_clean();

echo $content;
?>

Output: 12

Without the second ob_start(), the output is 21 ...
56ka dot prog at gmail dot com 13-Sep-2010 05:27
Hi

Warning, this command isn't exactly like ob_get_contents() and ob_end_clean()
successively. Sometimes you will have to do these two commands manually.

Today I lost 2 hours to localize that problem and to find the solution -_-'

See you
profix at cms-studio dot net 09-Jul-2008 07:01
Maybe it can be useful

$__ob_stack=array();

function ob_break() {
global $__ob_stack;
while (ob_get_level()>0)
  array_push($__ob_stack,ob_get_clean());
}

function ob_continue() {
global $__ob_stack;
while (count($__ob_stack)>0) {
  ob_start();
  echo array_pop($__ob_stack);
  }
}

ob_start();
echo "1"; // now we write to "ob" buffer
ob_break();
echo "2"; // now we write to stdout
ob_continue();
echo "3"; // now we write again to "ob" buffer
$output=ob_get_clean();
echo $output;

// output is 213
egbert teeselink 02-Feb-2008 07:47
If you're trying to capture the output from an included 3rd party script you
don't seem to be capturing everything, the following might help:

function ob_end_clean_all()
{
    $s = "";
    do
    {
        $s = ob_get_contents() . $s;
    } while(ob_end_clean());
    return $s;
}

This function closes all nested output bufferings, therefore closing any
buffers that the included script does not explicitly close. It's basically a
ob_end_clean that sweeps together all the output buffers instead of just the
innermost one.
ludvig dot ericson at gmail dot com 10-Aug-2005 07:10
Notice that the function beneath does not catch errors, so throw in an @ before
those ob_* calls
webmaster at ragnarokonline dot de 01-Oct-2003 05:21
Running PHP4 < 4.3.0, you can simply add the following to use the function
anyway:

<?php
if (!function_exists("ob_get_clean")) {
    function ob_get_clean() {
        $ob_contents = ob_get_contents();
        ob_end_clean();
        return $ob_contents;
    }
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 4 18:21:08 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

fprintf> <echo
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
explode

(PHP 4, PHP 5)

explode — 文字列を文字列により分割する

説明

array explode ( string $delimiter , string $string [, int $limit ] )

文字列の配列を返します。この配列の各要素は、 string を文字列 delimiter で区切っ
た部分文字列となります。

パラメータ

delimiter

    区切り文字列。

string

    入力文字列。

limit

    limit に正の値が指定された場合、返される配列には最大 limit の要素が含まれ、
    その最後の要素には string の残りの部分が全て含まれます。

    もし limit パラメータが負の場合、最後の -limit 個の要素を除く全ての構成要素
    が返されます。

    limit パラメータがゼロの場合は、1 を指定したものとみなされます。

歴史的理由により、implode() はいずれのパラメータ順も受け入れることができますが
、 explode() はそうできません。 string 引数の前に必ず delimiter 引数がくるよう
に確認する必要があります。

返り値

string の内容を delimiter で分割した文字列の配列を返します。

空の文字列 ("") が delimiter として使用された場合、 explode() は FALSE を返しま
す。delimiter に引数 string に含まれていない値が含まれている場合は、 limit が負
の値なら空の配列、そうでなければ引数 string を含む配列を返します。

変更履歴

バージョン                     説明
5.1.0      limit に負の数を指定できるようになりました。
4.0.1      limit パラメータが追加されました。

例

例1 explode() の例

<?php
// 例 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// 例 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>

例2 limit パラメータの例

<?php
$str = 'one|two|three|four';

// 正の値を持つ limit
print_r(explode('|', $str, 2));

// 負の値を持つ limit (PHP 5.1 以降)
print_r(explode('|', $str, -1));
?>

上の例の出力は以下となります。

Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • preg_split() - 正規表現で文字列を分割する
  • str_split() - 文字列を配列に変換する
  • mb_split() - マルチバイト文字列を正規表現により分割する
  • str_word_count() - 文字列に使用されている単語についての情報を返す
  • strtok() - 文字列をトークンに分割する
  • implode() - 配列要素を文字列により連結する



fprintf> <echo
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes explode
Mobin Hosseini 14-Mar-2012 10:25
Hello,
I just wanted to note some behaviours of the explode function, well i am
submitting a bunch of urls, one each line and i am using the "\n" (it should be
within double quotes) as the delimiter and i am iterating to check for dupe
values and always the last value stays unchecked unless i am appending a new
line "\n" to the $_POST.

Let me demonstrate what i mean(sorry if there is any syntax error i am just
writing this on-the-fly):

if(isset($_POST['files']) && !empty($_POST['files'])){   

        $regex = "((http|ftp)+\:\/\/(www.)?(.*)/(.*)(\.)?(.*)?)";
        $ls = $_POST['files'];
        $posts = explode("\n", $ls);
       
        //remove duplicates
        $count = count($posts);
        for($i=0;$i<$count;$i++){
            if($posts[$i]=="") continue;
            for($j=$i+1;$j<$count;$j++){
                if($posts[$j]=="") continue;
                if((string)$posts[$i] == (string)$posts[$j]){
                    $posts[$j] = "";
                }
            }
        }
        $i=0;
        $files = array();
        foreach($posts as $f ){
            if(preg_match($regex,$f,$matches)){
                $files[] = $f;
                 $i++;
            }
            if($i>=10){
                break;
            }
        }
       
        echo "<pre>";
        print_r($files);
        echo "</pre>";
       
}

submit some urls in this format :
http://www.google.com/admin.db
http://www.google.com/admin.db[dont hit the "enter" key here]

i didn't have much time to look at it in deep so i just appended using
javascript the new line :
document.getElementById('files').value += "\n";

This way the last dupe value will get deleted too otherwise it wont!
ali balouch 11-Mar-2012 06:59
exploding string.......
<?php
    //(,'')
            $array2 = array();
            $string2 = "this is a car";
            $whitspace = " ";
            $increment=0;
            $length = strlen($string2);
                for($i=1;$i<$length;$i++){
                    $char = substr($string2,$i,1);
                        if($whitspace == $char){
                            $increment++;
                            }
                        elseif($whitspace==""){
                            $array2[$increment].= $char;
                            $increment++;
                            }else{
                            $array2[$increment].= $char;
                            }
            }       
        var_dump($array2);
    ?>
qeremy [atta] gmail [dotta] com 23-Feb-2012 11:17
If you don't want any empty array element, just use simply "preg_split" instead
this function (or struggle with an extra function, i.e. "trim");
 
$uri = "/user/123/";

$tmp = explode("/", $uri);
print_r($tmp);

$tmp = explode("/", trim($uri, "/"));
print_r($tmp);

$tmp = preg_split("~/~", $uri, -1, PREG_SPLIT_NO_EMPTY);
print_r($tmp);

Array
(
    [0] =>
    [1] => user
    [2] => 123
    [3] =>
)
Array
(
    [0] => user
    [1] => 123
)
Array
(
    [0] => user
    [1] => 123
)
eye_syah88 at yahoo dot com 30-May-2011 12:32
a simple one line method to explode & trim whitespaces from the exploded
elements

array_map('trim',explode(",",$str));

example:

$str="one  ,two  ,       three  ,  four    ";
print_r(array_map('trim',explode(",",$str)));

Output:

Array ( [0] => one [1] => two [2] => three [3] => four )
Rijk van Wel 17-May-2011 08:05
Here's another one of those functions that allow you to work with an escaped
delimiter. It works by internally url-encoding the escaped delimiters before
calling explode(). So if your delimiter is a %, you should use another encoding
function ;)

<?php
function explode_escaped( $delimiter, $string ) {
    $string = str_replace( '\\' . $delimiter, urlencode( $delimiter ), $string
);
    return array_map( 'urldecode', explode( $delimiter, $string ) );
}
?>
bernard.schenk [at] bordet.be 17-May-2011 02:53
Nifty multiple explode function:

<?php
function multipleExplode($delimiters = array(), $string = ''){

    $mainDelim=$delimiters[count($delimiters)-1]; // dernier
   
    array_pop($delimiters);
   
    foreach($delimiters as $delimiter){
   
        $string= str_replace($delimiter, $mainDelim, $string);
   
    }

    $result= explode($mainDelim, $string);
    return $result;

}
?>
alexander at textalk dot se 12-Apr-2011 12:27
If the string begins or ends with the delimiter:

<?php

$path = '/one/two/three/';
$folderNames = explode('/', $path);
print_r($folderNames);

?>

Will give:

Array
(
    [0] =>
    [1] => one
    [2] => two
    [3] => three
    [4] =>
)
lm at ms dot net 23-Mar-2011 03:58
while explode() and implode() are counterparts, note that it does NOT work for
an empty delimiter!

solution: use str_split($str) instead of explode('', $str)

example:
<?php
$str1 = 'abc';
var_dump($str1);

$str2 = implode(',' , explode(',' , $str1)); // OK (explode with non-empty
delimiter)
var_dump($str2);

$str3 = implode('' , str_split($str1));      // OK (str_split)
var_dump($str3);

$str4 = implode('' , explode('' , $str1));   // ERROR! (explode with empty
delimiter)
var_dump($str4);
?>

returns:
string 'abc' (length=3)
string 'abc' (length=3)
string 'abc' (length=3)
Warning: explode() [function.explode]: Empty delimiter.
Warning: implode() [function.implode]: Bad arguments.
null
Kamba Jeno 19-Mar-2011 05:47
if u cannot use the original function explode, or your version is less than
4.0.1 you can use this example  whith optional limit argument.

<?php
function exploding($separator,$string,$limit=NULL){
$returnarray = array();
$increment = 0;
$length = strlen($string);
$limit_negative=($limit < 0);

    for($i = 0; $i < $length;$i++){
        $current = substr($string,$i,1);
         //main explode function
            if($separator == $current){
            $increment++;
            }
            elseif($separator == ""){   
            @$returnarray[$increment].=$current;
            $increment++;   
            }
            else{
            @$returnarray[$increment].=$current;
            }
        //if limit is positive
        if(isset($limit) && $limit == $increment){
        break;
        }
       
    }
    //if limit is negative
    if($limit_negative){
        for($i = 0; $i > $limit;$i--){
           array_pop($returnarray);
           }
   
   
    }
return $returnarray;
}

//Test
$something = "Kamba.jeno.attila";

$result = exploding(".",$something)
/*returns
array(3) {
[0]=> string(5) "Kamba"
[1]=> string(4) "Jeno"
[2]=> string(6) "Attila" }
*/

$result2 = exploding(".",$something,1)
/*returns
array(1) {
[0]=> string(5) "Kamba" }
*/

$result3 = exploding(".",$something,-1)
/*returns
array(2) {
[0]=> string(5) "Kamba"
[1]=> string(4) "Jeno" }
*/
?>
Aram Kocharyan 27-Feb-2011 07:04
Here is a function to explode a comma separated string and trim the elements of
any whitespace that may come before or after the comma, and will also trim
whitespace from the front and end of the string, as well as allow you to
specify a delimiter yourself.

<?php

/* Performs explode() on a string with the given delimiter and trims all
whitespace for the elements */
function explode_trim($str, $delimiter = ',') {
    if ( is_string($delimiter) ) {
        $str = trim(preg_replace('|\\s*(?:' . preg_quote($delimiter) . ')\\s*|
', $delimiter, $str));
        return explode($delimiter, $str);
    }
    return $str;
}

// Test
$str = '    mouse ,cat , dog  ,  human    ';
$array = explode_trim($str);
print_r($array);

?>

This will output:
(
    [0] => mouse
    [1] => cat
    [2] => dog
    [3] => human
)
jehoshua02 at gmail dot com 22-Feb-2011 11:37
If you are looking for a simpler multi-explode that returns a flat array, use a
regular expression to standardize all delimiters before exploding.

<?php

// function to explode on multiple delimiters
function multi_explode($pattern, $string, $standardDelimiter = ':')
{
    // replace delimiters with standard delimiter, also removing redundant
delimiters
    $string = preg_replace(array($pattern, "/{$standardDelimiter}+/s"),
$standardDelimiter, $string);

    // return the results of explode
    return explode($standardDelimiter, $string);
}

// test

    // set up variables
    $string = "zero  one | two :three/ four\ five:: six|| seven eight nine\n
ten \televen twelve thirteen fourteen fifteen";
    $pattern = '/[:\|\\\\\/\s]/';  // colon (:), pipe (escaped '\|'), slashes
(escaped '\\\\' and '\/'), white space (\s)

    // call function
    $result = multi_explode($pattern, $string);
   
    // display results
    var_dump($result);

?>

Output:

array
  0 => string 'zero' (length=4)
  1 => string 'one' (length=3)
  2 => string 'two' (length=3)
  3 => string 'three' (length=5)
  4 => string 'four' (length=4)
  5 => string 'five' (length=4)
  6 => string 'six' (length=3)
  7 => string 'seven' (length=5)
  8 => string 'eight' (length=5)
  9 => string 'nine' (length=4)
  10 => string 'ten' (length=3)
  11 => string 'eleven' (length=6)
  12 => string 'twelve' (length=6)
  13 => string 'thirteen' (length=8)
  14 => string 'fourteen' (length=8)
  15 => string 'fifteen' (length=7)

See:
http://www.php.net/manual/en/book.pcre.php
dhz 30-Dec-2010 09:21
A one-liner to extract a portion of a string, starting from the END of the
string....
<?php
$extracted_string = implode('.', array_slice(explode('.', $original_string),
-2));
?>
jamestrowbridge at gmail dot com 19-Dec-2010 12:50
FYI, use double quotes for the separator parameter:

<?php
$string = "Hello\nHello\nHello";
$arr = explode('\n',$string);//Using single quotes
print_r($arr);
/*
Returns:
Array
(
    [0] => Hello
Hello
Hello
)
*/
?>
Is different than:
<?php
$string = "Hello\nHello\nHello";
$arr = explode("\n",$string);//Using double quotes
print_r($arr);
/*
Returns:
Array
(
    [0] => Hello
    [1] => Hello
    [2] => Hello
)
*/
?>
xananax at yelostudio dot com 10-Nov-2010 06:18
I needed a way to explode an array, just like one would explode a string, and
could not find anything on the net.
Maybe this can be made more efficient, but it fits my purpose. Contributions
and comments welcome.
<?php
    /**
     * Allows to explode an array into multiple arrays on a set delimiter.
     * Delimiter Can be set either by key, or by value, or by both (in which
case,
     * both key and value must be strictly equal to values provided).
     * Note that numeric indexes don't work since the original array is reduced
     * at each loop (thus making numerical indexes useless).
     * @param array $array the array to explode
     * @param mixed $key the key to check
     * @param mixed $value the value to check
     * @param int $limit You can limit the number of parts with this. If set to
0, limit is infinite
     * @param boolean $removeDelimiter if set to TRUE, removes the delimiter
key from the returned arrays
     * @return array|boolean an array of as many parts as needed, or FALSE on
error.
     */
    function array_explode(array $array, $key=NULL, $value=NULL, $limit=0,
$removeDelimiter=TRUE){
        if($key===NULL && $value===NULL){return FALSE;}
        $parts = array();
        $delimiter = NULL;
        $partsN = 0;
        while($v = current($array)){
            $k = key($array);
            if(
                (($key!==NULL && $value!==NULL) && ($k===$key && $v===$value))
||
                ($key!==NULL && $value===NULL && $k===$key) ||
                ($value!==NULL && $key===NULL && $v===$value)
            ){
                $delimiter = TRUE;
                if($removeDelimiter){array_shift($array);}
                $partsN++;
                if($partsN===$limit){$parts[$partsN] = $array;return $parts;}
            }
            $parts[$partsN][] = array_shift($array);
        }
        if($delimiter){
            return $parts;
        }
        return FALSE;
    }
?>
mvpetrovich 09-Sep-2010 05:35
In using explode, with the list command, you will get errors if the number of
variables is larger than the produced array by explode.

For example:

<?php
$str = 'aa|bb|cc';
list($one, $two, $three, $four) = explode('|', $str);
?>

To solve these cases, where you would like to assign empty strings to the extra
variables (and eliminate errors), append a delimiter string to the string as
follows.

<?php
$str = 'aa|bb|cc';
list($one, $two, $three, $four) = explode('|', $str . '|||');
?>

This way, the list variables will always be assigned.
tiago dot dias at flow-me dot com 09-Sep-2010 03:40
Beaware splitting empty strings.

<?php
$str = "";
$res = explode(",", $str);
print_r($res);
?>

If you split an empty string, you get back a one-element array with 0 as the
key and an empty string for the value.

Array
(
    [0] =>
)

To solve this, just use array_filter() without callback. Quoting manual page
"If the callback function is not supplied, array_filter() will remove all the
entries of input that are equal to FALSE.".

<?php
$str = "";
$res = array_filter(explode(",", $str));
print_r($res);
?>

Array
(
)
Cody G. 08-Aug-2010 06:41
I'm sure you guys get just a bit frustrated at times when you need a fraction
of a very simple string and you use "explode()", but then you have to define a
whole extra variable. (That is because you need to store a function-returned
array in a variable before you can extract a value).

If you're extracting the last half, or third, of a string, there's an easy
inline workaround. Check this:

<?php
 $mystr = "separated-text";
 print(str_replace("-","",strstr("-",$mystr)));
 //Returns "text"
?>

If the separator (dash) can be left in, you don't even need the "str_replace()"
function.

Lets try this with 3 fractions:

<?php
 $mystr = "separated-text-again";
 //Comment submission wouldn't let me
 // combine this into one statement.
 // That's okay, it's more readable.
 $split1 = str_replace("-","",strstr("-",$mystr));
 print(str_replace("-","",strstr("-",$split1)));
 //Returns "again"
?>

Anything more than 3 fractions gets really confusing, in that case you should
use "explode()".

Hope this helps!
~Cody G.
m0gr14 at gmail dot com 31-Jul-2010 07:02
Here's a function for "multi" exploding a string.

<?php
//the function
//Param 1 has to be an Array
//Param 2 has to be a String
function multiexplode ($delimiters,$string) {
    $ary = explode($delimiters[0],$string);
    array_shift($delimiters);
    if($delimiters != NULL) {
        foreach($ary as $key => $val) {
             $ary[$key] = multiexplode($delimiters, $val);
        }
    }
    return  $ary;
}

// Example of use
$string = "1-2-3|4-5|6:7-8-9-0|1,2:3-4|5";
$delimiters = Array(",",":","|","-");

$res = multiexplode($delimiters,$string);
echo '<pre>';
print_r($res);
echo '</pre>';

//returns
/*
Array
(
    [0] => Array
        (
            [0] => Array
                (
                    [0] => Array
                        (
                            [0] => 1
                            [1] => 2
                            [2] => 3
                        )

                    [1] => Array
                        (
                            [0] => 4
                            [1] => 5
                        )

                    [2] => Array
                        (
                            [0] => 6
                        )

                )

            [1] => Array
                (
                    [0] => Array
                        (
                            [0] => 7
                            [1] => 8
                            [2] => 9
                            [3] => 0
                        )

                    [1] => Array
                        (
                            [0] => 1
                        )

                )

        )

    [1] => Array
        (
            [0] => Array
                (
                    [0] => Array
                        (
                            [0] => 2
                        )

                )

            [1] => Array
                (
                    [0] => Array
                        (
                            [0] => 3
                            [1] => 4
                        )

                    [1] => Array
                        (
                            [0] => 5
                        )

                )

        )

)
*/
?>
info at noextratime dot com 04-Jul-2010 01:09
Here is a function for "double" exploding a string, like in the case of a
flattened multi-dimensional array.
<?php

function doubleExplode ($del1, $del2, $array){
    $array1 = explode("$del1", $array);
foreach($array1 as $key=>$value){
$array2 = explode("$del2", $value);
foreach($array2 as $key2=>$value2){
$array3[] = $value2; 
}
}
    $afinal = array();
for ( $i = 0; $i <= count($array3); $i += 2) {
    if($array3[$i]!=""){
    $afinal[trim($array3[$i])] = trim($array3[$i+1]);
    }
}
return $afinal;
}
$proddetails = 'Size=Large, Color=Black';
$test = doubleExplode(',', '=', $proddetails);
print_r($test);
?>

/*
Array
(
    [Size] => Large
    [Color] => Black
)
*/
jessebusman at gmail dot com 27-May-2010 12:45
Sometimes you need to explode a string by different delimiters. In that case
you can use this function:

<?php
print_r(explodeX(Array(".","!"," ","?",";"),"This.sentence?contains wrong;
characters"));
// Returns:
// Array("This","sentence","contains","wrong","characters")

function explodeX($delimiters,$string)
{
    $return_array = Array($string); // The array to return
    $d_count = 0;
    while (isset($delimiters[$d_count])) // Loop to loop through all delimiters
    {
        $new_return_array = Array();
        foreach($return_array as $el_to_split) // Explode all returned elements
by the next delimiter
        {
            $put_in_new_return_array = explode($delimiters
[$d_count],$el_to_split);
            foreach($put_in_new_return_array as $substr) // Put all the
exploded elements in array to return
            {
                $new_return_array[] = $substr;
            }
        }
        $return_array = $new_return_array; // Replace the previous return array
by the next version
        $d_count++;
    }
    return $return_array; // Return the exploded elements
}
?>
Onur Nizam onur dot nizam at yahoo dot com 16-May-2010 12:27
The regular expression parameters such as \n or \t can be used as well as other
strings as the delimeter which can be used to parse any given text files or
downloaded web pages to read line by line.

An example may be considered as, name surname and phone numbers are written
into a text file line by line and columns are seperated by tabs, can be
exploded and read easily through the return and tab characters. After storing
them in the array they can be manipulated or displayed in any other formats.

<?php
// Explode text file and store each row of the file into the array elements
function explodeRows($data) {
  $rowsArr = explode("\n", $data);
  return $rowsArr;
}

// Explode the columns according to tabs
function explodeTabs($singleLine) {
  $tabsArr = explode("\t", $singleLine);
  return $tabsArr;
}

// Open the text file and get the content
$filename = "phonebook.txt";
$handle   = fopen($filename, 'r');
$data     = fread($handle, filesize($filename));
$rowsArr  = explodeRows($data);

// Display content which is exploded by regular expression parameters \n and \t
for($i=0;$i<count($rowsArr);$i++) {
  $lineDetails = explodeTabs($rowsArr[$i]);
    echo "<br>Name : " . $lineDetails[0];
    echo "<br>Surname : " . $lineDetails[1];
    echo "<br>Tel Number : " . $lineDetails[2];
    echo "<br><br>";
}

/*
phonebook.txt text file can be something like this;
name1    sname1    +905429998877
name2    sname2    +905429998876
name3    sname3    +905429998875

The output will be as follows;
Name : name1
Surname : sname1
Tel Number : +905429998877

Name : name2
Surname : sname2
Tel Number : +905429998876

Name : name3
Surname : sname3
Tel Number : +905429998875
*/

?>
drieick at hotmail dot com 21-Apr-2010 08:34
When explode is given an empty $string, it'll return an array with a single
empty element.

<?php

# returns Array([0] => );
print_r(explode(',', ''));

?>

This is not a bug, but it can be pretty tricky (especially with callbacks that
expect a certain type of array). So, be sure to check your arrays. It's not a
bug, because there's nothing to split.
locoluis at gmail dot com 08-Apr-2010 09:02
That with all stateful encodings that use bytes between 0x00 and 0x7f for
something other than, say, encoding ASCII characters. Including GBK, BIG5,
Shift-JIS etc.

explode and other such PHP functions work on bytes, not characters.

What you do is to convert the string to UTF-8 using iconv(), then explode, then
go back to GBK.
gxd305 at gmail dot com 16-Nov-2009 05:47
when the encoding of $string  is 'GBK' and $delimiter is '|' , the return value
may be wrong.
for example:

<?php
$result = explode("|", "滕华弢|海青");
var_dump($result);
?>

and the result will be:
array (
  0 => '滕华,
  1 => '',
  2 => '海青',
)

bcz "弢" 's GBK is '0x8f7c'. and "|" 's ASCII is '0x7c'.

So, all GBK-encoding characters include '7c' will lead to the error result.
nick dot brown at free dot fr 14-Oct-2009 03:47
My application was running out of memory (my hosting company limits PHP to
32MB).  I have a string containing between 100 and 20000 triplets, separated by
a space, with each triplet consisting of three double-precision numbers,
separated by commas.  Total size of the biggest string, with 20000 triplets, is
about 1MB.

The application needs to split the string into triplets, then split the triplet
into numbers.  In C, this would take up about 480K (20000 times 3 x 8 bytes)
for the final array.  The intermediate array of strings shouldn't be much
bigger than the long string itself (1MB).  And I expect some overhead from PHP,
say 300% to allow for indexes etc.

Well, PHP5 manages to run out of memory *at the first stage* (exploding the
string on the space character).  I'm expecting to get an array of 20000
strings, but it needs more than 32MB to store it.  Amazing.

The workaround was easy and had the bonus of producing faster code (I compared
it on a 10000 triplet string).  Since in any case I had to split up the numeric
triplets afterwards, I decided to use preg_match_all() on the original string. 
Despite the fact that the resulting "matches" array contains more data per
element than the result of explode() - because it stores the matched triplet,
plus its component numbers - it takes up far less memory.

Moral: be careful when using explode() on big strings, as it can also explode
your memory usage.
Jrg Wagner 12-Oct-2009 02:28
Here is a very concise example for a quote aware explode - substrings in quotes
(or another definable enclosure char) are not exploded.
An additional parameter allows to determine whether the enclosure chars should
be preserved within the resulting array elements. Please note that as of PHP
5.3 the str_getcsv function offers a built-in way to do this!

<?php
function csv_explode($delim=',', $str, $enclose='"', $preserve=false){
  $resArr = array();
  $n = 0;
  $expEncArr = explode($enclose, $str);
  foreach($expEncArr as $EncItem){
    if($n++%2){
      array_push($resArr, array_pop($resArr) . ($preserve?$enclose:'') .
$EncItem.($preserve?$enclose:''));
    }else{
      $expDelArr = explode($delim, $EncItem);
      array_push($resArr, array_pop($resArr) . array_shift($expDelArr));
      $resArr = array_merge($resArr, $expDelArr);
    }
  }
  return $resArr;
}
?>
Anonymous 28-Sep-2009 03:20
Note to the previous example: we can do the whole string->array conversion
using explode() exclusively.

<?php
    // converts pure string into a trimmed keyed array
    function string_2_array( $string, $delimiter = ',', $kv = '=>')
    {
        if ($element = explode( $delimiter, $string ))
        {
            // create parts
            foreach ( $element as $key_value )
            {
                // key -> value pair or single value
                $atom = explode( $kv, $key_value );

                if( trim($atom[1]) )
                {
                  $key_arr[trim($atom[0])] = trim($atom[1]);
                }
                else
                {
                    $key_arr[] = trim($atom[0]);
                }
            }
        }
        else
        {
            $key_arr = false;
        }

        return $key_arr;
    }
?>
Anonymous 02-Sep-2009 07:18
<?php
// converts pure string into a trimmed keyed array
function string2KeyedArray($string, $delimiter = ',', $kv = '=>') {
  if ($a = explode($delimiter, $string)) { // create parts
    foreach ($a as $s) { // each part
      if ($s) {
        if ($pos = strpos($s, $kv)) { // key/value delimiter
          $ka[trim(substr($s, 0, $pos))] = trim(substr($s, $pos + strlen
($kv)));
        } else { // key delimiter not found
          $ka[] = trim($s);
        }
      }
    }
    return $ka;
  }
} // string2KeyedArray

$string = 'a=>1, b=>23   , $a, c=> 45% , true,d => ab c ';
print_r(string2KeyedArray($string));
?>

Array
(
  [a] => 1
  [b] => 23
  [0] => $a
  [c] => 45%
  [1] => true
  [d] => ab c
)
Anonymous 10-Aug-2009 10:55
If you are exploding string literals in your code that have a dollar sign ($)
in it, be sure to use single-quotes instead of double-quotes, since php will
not spare any chance to interpret the variable-friendly characters after the
dollar signs as variables, leading to unintended consequences, the most typical
being missing characters.

<?php
$doubleAr = explode(" ", "The $quick brown fox");
$singleAr = explode(" ", 'The $quick brown fox');
echo $doubleAr[1]; // prints "";
echo $singleAr[1]; // prints "$quick";
?>
vzverev at nm dot ru 24-Jul-2009 07:33
If you are going to use foreach after explode(), call reset() before foreach:
<?php
$arr = explode("\n", 'test \n test2 \n test3');
reset($arr);
foreach($arr as $line)
{ /* do something */ ; }
?>
marcus at synchromedia dot co dot uk 15-Jun-2009 06:50
Just in case the comment about empty strings is not clear:

<?php
$a = array();
var_dump($a);
$s = implode("\n", $a);
var_dump($s);
$b = explode("\n", $s);
var_dump($b);
$b = preg_split('/\n/', $s,-1,PREG_SPLIT_NO_EMPTY);
var_dump($b);
?>

Results in:

array(0) {
}
string(0) ""
array(1) {
  [0]=>
  string(0) ""
}
array(0) {
}

i.e. exploding an empty string results in an array with one element. You can
use preg_split to skip the empty item, but that may not be quite what you need
should your array have empty elements intentionally.
SR 21-Apr-2009 07:50
Keep in mind that explode() can return empty elements if the delimiter is
immediately repeated twice (or more), as shown by the following example:

<?php
$foo = 'uno dos  tres'; // two spaces between "dos" and "tres"
print_r(explode(' ', $foo));
?>

Array
(
    [0] => uno
    [1] => dos
    [2] =>
    [3] => tres
)

Needless to say this is definitely not intuitive and must be handled carefully.
Michael 19-Apr-2009 02:29
Here's a simple script which uses explode() to check to see if an IP address is
in an array (can be used as a ban-check, without needing to resort to database
storage and queries).

<?php

 function denied($one) {

  $denied = array(

   0 => '^255.255.255.255',
   1 => '^255.250',
   2 => '^255.255.250'

  );

  for ($i = 0 ; $i < sizeof($denied) ; $i++) {

   if (sizeof(explode($denied[$i], '^' . $one . '$')) == 2) {
    return true;
   }

  }

  return false;

 }

 if (denied($_SERVER['REMOTE_ADDR'])) {
  header('Location: denied.php');
 }

?>
Navi 31-Mar-2009 04:03
<?php
function my_explode($delim, $str, $lim = 1)
{
    if ($lim > -2) return explode($delim, $str, abs($lim));

    $lim = -$lim;
    $out = explode($delim, $str);
    if ($lim >= count($out)) return $out;

    $out = array_chunk($out, count($out) - $lim + 1);

    return array_merge(array(implode($delim, $out[0])), $out[1]);
}
?>
This function can assume `limit' parameter less than 0, for example:
<?php
print_r(my_explode('.', 'file.some.ext.jpg', -2));
?>
prints
Array
(
    [0] => file.some.ext
    [1] => jpg
)
adrian at bilsoftware dot com 23-Feb-2009 02:40
<?php
function explode_escaped($delimiter, $string){
        $exploded = explode($delimiter, $string);
        $fixed = array();
        for($k = 0, $l = count($exploded); $k < $l; ++$k){
            if($exploded[$k][strlen($exploded[$k]) - 1] == '\\') {
                if($k + 1 >= $l) {
                    $fixed[] = trim($exploded[$k]);
                    break;
                }
                $exploded[$k][strlen($exploded[$k]) - 1] = $delimiter;
                $exploded[$k] .= $exploded[$k + 1];
                array_splice($exploded, $k + 1, 1);
                --$l;
                --$k;
            } else $fixed[] = trim($exploded[$k]);
        }
        return $fixed;
    }
?>

Here's a function which explodes string with delimiter, but if delimiter is
"escaped" by backslash, function won't split in that point. Example:

<?php

$result = explode_escaped(',', 'string, piece, group\, item\, item2, next
\,asd');
print_r($result);
?>
Will give:
Array
(
    [0] => string
    [1] => piece
    [2] => group, item, item2
    [3] => next,asd
)
Elad Elrom 04-Dec-2008 09:02
<?php
// Remove words if more than max allowed character are insert or add a string
in case less than min are displayed
// Example: LimitText("The red dog ran out of thefence",15,20,"<br>");

function LimitText($Text,$Min,$Max,$MinAddChar) {
   if (strlen($Text) < $Min) {
       $Limit = $Min-strlen($Text);
       $Text .= $MinAddChar;
   }
   elseif (strlen($Text) >= $Max) {
       $words = explode(" ", $Text);
       $check=1;
       while (strlen($Text) >= $Max) {
           $c=count($words)-$check;          
           $Text=substr($Text,0,(strlen($words[$c])+1)*(-1));
           $check++;
       }
   }
 
   return $Text;
}
?>
Nobody 16-Nov-2008 05:38
A really better and shorter way to get extension is via:

<?php $extension = end(explode('.', $filename)); ?>

this will print the last part after the last dot :)
shaun 29-Aug-2008 12:24
For anyone trying to get an array of key => value pairs from a query string,
use parse_str.  (Better alternative than the explode_assoc function listed way
down the page unless you need different separators.)
pinkgothic at gmail dot com 15-Oct-2007 02:26
coroa at cosmo-genics dot com mentioned using preg_split() instead of explode()
when you have multiple delimiters in your text and don't want your result array
cluttered with empty elements. While that certainly works, it means you need to
know your way around regular expressions... and, as it turns out, it is slower
than its alternative. Specifically, you can cut execution time roughly in half
if you use array_filter(explode(...)) instead.

Benchmarks (using 'too many spaces'):
Looped 100000 times:
preg_split: 1.61789011955 seconds
filter-explode: 0.916578054428 seconds

Looped 10000 times:
preg_split: 0.162719011307 seconds
filter-explode: 0.0918920040131 seconds

(The relation is, evidently, pretty linear.)

Note: Adding array_values() to the filter-explode combination, to avoid having
those oft-feared 'holes' in your array, doesn't remove the benefit, either.
(For scale - the '9' becomes a '11' in the benchmarks above.)

Also note: I haven't tested anything other than the example with spaces - since
djogo_curl at yahoo's note seems to imply that explode() might get slow with
longer delimiters, I expect this would be the case here, too.

I hope this helps someone. :)
seventoes at gmail dot com 09-Dec-2006 07:49
Note that explode, split, and functions like it, can accept more than a single
character for the delimiter.

<?php
$string = "Something--next--something else--next--one more";

print_r(explode('--next--',$string));
?>
djogo_curl at yahoo 01-Dec-2004 04:50
Being a beginner in php but not so in Perl, I was used to split() instead of
explode(). But as split() works with regexps it turned out to be much slower
than explode(), when working with single characters.
coroa at cosmo-genics dot com 16-Nov-2003 08:01
To split a string containing multiple seperators between elements rather use
preg_split than explode:

preg_split ("/\s+/", "Here  are    to    many  spaces in   between");

which gives you
array ("Here", "are", "to", "many", "spaces", "in", "between");
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 4 18:21:08 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes substr
qeremy [atta] gmail [dotta] com 27-Feb-2012 03:58
A proper (logical) alternative for unicode strings;

<?php
function substr_unicode($str, $s, $l = null) {
    return join("", array_slice(
        preg_split("//u", $str, -1, PREG_SPLIT_NO_EMPTY), $s, $l));
}

$str = "Büyük";
$s = 0; // start from "0" (nth) char
$l = 3; // get "3" chars
echo substr($str, $s, $l) ."\n";    // Bü
echo mb_substr($str, $s, $l) ."\n"; // Bü
echo substr_unicode($str, $s, $l);  // Büy
?>
maxim at inbox dot ru 27-Jan-2012 04:43
Here is a recursion function to get parts of passed string which are in a char.
Func looks pretty, and works fast, tell me please if you find more opt way.
<?php
$s = "info= &make&,endvcc &new& &another&info";
echo str_cut($s,"&",",");
//output:
//make,new,another

function str_cut($s,$a,$d="")
{
    $f=strpos($s,$a)+1;
    $l=strpos($s,$a,$f);
    $out= substr($s,$f,$l-$f);
                if
    (strpos($s,$a,$l+1)!==false)
    {$s=substr($s,$l+1);$out.=$d.str_cut($s,$a,$d);}
return $out;
}
?>

it is possible to output in array, you have to returns a var as an array.
Also you can add an extra needle, which would be compare with the end of
strings :
replace to
$l=strpos($s,$b,$f)-$f;
and dont forget to pass into recursion call $b value, but i did like that
$b=func_get_arg(func_num_args()-1);
care! the last argument should be $a, because $b getting last arg. like that:
function str_cut($s,$d="",$a)
but i think this method of getting $b not the best way for perfomance.
Sorry for my English.
munirsunni(at)gmail(dot)com 23-Nov-2011 02:30
<?php

//Here is the function created for strip tags with sub string

function displaySubStringWithStrip($string, $length=NULL)
{
    if ($length == NULL)
            $length = 50;
  
    $stringDisplay = substr(strip_tags($string), 0, $length);
    if (strlen(strip_tags($string)) > $length)
        $stringDisplay .= ' ...';
    return $stringDisplay;
}

?>
leon weidauer 08-Jul-2011 01:07
When using a value of a wrong type as second parameter , substr() does not
return FALSE but NULL although the docs say, it should return FALSE on error.

Prior to PHP 5.3, substr() tries to cast the second parameter to int and
doesn't throw any errors. Since PHP 5.3 a warning is thrown.
Quicker 06-May-2011 04:17
If you need to parse utf-8 strings char by char, try this one:

<?php
     $utf8marker=chr(128);
     $count=0;
     while(isset($string{$count})){
       if($string{$count}>=$utf8marker) {
         $parsechar=substr($string,$count,2);
         $count+=2;
       } else {
         $parsechar=$string{$count};
         $count++;
       }
       /* do what you like with parsechar ... , eg.:*/  echo $parsechar."<BR>\r
\n";
     }
?>

- it works without mb_substr
- it is fast, because it grabs characters based on indexes  when possible and
avoids any count and split functions
slow at acedsl dot com 28-Mar-2011 01:47
Anyone coming from the Python world will be accustomed to making substrings by
using a "slice index" on a string.  The following function emulates basic
Python string slice behavior. (A more elaborate version could be made to
support array input as well as string, and the optional third "step" argument.)

<?php

function py_slice($input, $slice) {
    $arg = explode(':', $slice);
    $start = intval($arg[0]);
    if ($start < 0) {
        $start += strlen($input);
    }
    if (count($arg) === 1) {
        return substr($input, $start, 1);
    }
    if (trim($arg[1]) === '') {
        return substr($input, $start);
    }
    $end = intval($arg[1]);
    if ($end < 0) {
        $end += strlen($input);
    }
    return substr($input, $start, $end - $start);
}

print py_slice('abcdefg', '2') . "\n";
print py_slice('abcdefg', '2:4') . "\n";
print py_slice('abcdefg', '2:') . "\n";
print py_slice('abcdefg', ':4') . "\n";
print py_slice('abcdefg', ':-3') . "\n";
print py_slice('abcdefg', '-3:') . "\n";

?>

The $slice parameter can be a single character index, or a range separated by a
colon. The start of the range is inclusive and the end is exclusive, which may
be  counterintuitive. (Eg, py_slice('abcdefg', '2:4') yields 'cd' not 'cde'). A
negative range value means to count from the end of the string instead of the
beginning. Both the start and end of the range may be omitted; the start
defaults to 0 and the end defaults to the total length of the input.

The output from the examples:
c
cd
cdefg
abcd
abcd
efg
southern 25-Feb-2011 06:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 08:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 02:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 02:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 12:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 02:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 19-Jul-2010 05:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 05:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 01:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 12:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 10:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 09:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 11:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 04:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 03:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 03:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 03:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
kaysar in ymail in com 07-Jun-2009 11:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 01:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 06:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 02:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 07:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 12:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 21-Mar-2009 05:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 20-Mar-2009 07:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 10-Mar-2009 05:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 07:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 01:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 30-Oct-2008 04:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 02:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 10:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 03:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 12:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 07:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 02:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 11:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 01:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 03:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 03:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 29-Feb-2008 05:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 22-Feb-2008 05:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 05-Jan-2008 08:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 10:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 04:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 03:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 03:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 02:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 03:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 09:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 01:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
ijavier aka(not imatech) igjav 14-Feb-2007 02:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 07:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 03:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 15-Oct-2006 05:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 09:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 05:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 03-Feb-2006 06:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 01:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 04-Jan-2006 07:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 02:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 04:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 02:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 11:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 08:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 07-Jun-2005 08:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 03:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 10:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 16-May-2005 11:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 11:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 13-Mar-2005 09:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 12:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 21-Feb-2005 06:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 01:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 03:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 07:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 11:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
phplist at boonedocks dot net 28-Aug-2003 01:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
05-Jul-2003 05:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 4 18:21:08 2012 UTC
Received cookie: COUNTRY=JPN%2C111.191.85.101
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列内の部分文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れる位置を探します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    指定すると、文字列内での検索開始位置がその位置になります。 strrpos() や
    strripos() と異なり、負の数は指定できません。

返り値

needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) から
の相対位置で返します。文字列の開始位置は 0 であり、1 ではないことに注意しましょ
う。

needle が見つからない場合は FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strstr() - 文字列が最初に現れる位置を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • substr() - 文字列の一部分を返す
  • preg_match() - 正規表現によるマッチングを行う



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes strpos
martijn at martijnfrazer dot nl 25-Feb-2012 03:58
This is a function I wrote to find all occurrences of a string, using strpos
recursively.

<?php
function strpos_recursive($haystack, $needle, $offset = 0, &$results = array())
{               
    $offset = strpos($haystack, $needle, $offset);
    if($offset === false) {
        return $results;           
    } else {
        $results[] = $offset;
        return strpos_recursive($haystack, $needle, ($offset + 1), $results);
    }
}
?>

This is how you use it:

<?php
$string = 'This is some string';
$search = 'a';
$found = strpos_recursive($string, $search);

if($found) {
    foreach($found as $pos) {
        echo 'Found "'.$search.'" in string "'.$string.'" at position <b>
'.$pos.'</b><br />';
    }   
} else {
    echo '"'.$search.'" not found in "'.$string.'"';
}
?>
Logan Baron 02-Feb-2012 02:31
After looking at the strposa function posted earlier, I noticed that if one of
the needles tested false when being checked in its own strpos, the function
would always return false. So, I re-wrote it to return the lowest index of the
first occurring match.

private function strposa($haystack, $needles=array(), $offset=0)
{
        $chr = array();
        foreach($needles as $needle)
        {
                $res = strpos($haystack, $needle, $offset);
                if ($res !== false) $chr[$needle] = $res;
        }
        if(empty($chr)) return false;
        return min($chr);
}

Now, it simply doesn't add that needle's strpos value if it's false. The check
that already existed will be useful here, if nothing got added to the array
there were no matches, so return false. However this time, it will return
something other than 0 (false) if there was a match but also a non-match in the
array of needles.
rjeggens at ijskoud dot org 24-Jan-2012 07:38
I lost an hour before I noticed that strpos only returns FALSE as a boolean,
never TRUE.. This means that

strpos() !== false

is a different beast then:

strpos() === true

since the latter will never be true. After I found out, The warning in the
documentation made a lot more sense.
gjh42 - simonokewode at hotmail dot com 07-Nov-2011 07:59
A pair of functions to replace every nth occurrence of a string with another
string, starting at any position in the haystack. The first works on a string
and the second works on a single-level array of strings, treating it as a
single string for replacement purposes (any needles split over two array
elements are ignored).

Can be used for formatting dynamically-generated HTML output without touching
the original generator: e.g. add a newLine class tag to every third item in a
floated list, starting with the fourth item.
 
<?php
/* String Replace at Intervals   by Glenn Herbert (gjh42)    2010-12-17
 */
 
//(basic locator by someone else - name unknown)
//strnposr() - Find the position of nth needle in haystack.
function strnposr($haystack, $needle, $occurrence, $pos = 0) {
    return ($occurrence<2)?strpos($haystack, $needle, $pos):strnposr
($haystack,$needle,$occurrence-1,strpos($haystack, $needle, $pos) + 1);
}

//gjh42
//replace every nth occurrence of $needle with $repl, starting from any
position
function str_replace_int($needle, $repl, $haystack, $interval, $first=1, $pos=
0) {
  if ($pos >= strlen($haystack) or substr_count($haystack, $needle, $pos) <
$first) return $haystack;
  $firstpos = strnposr($haystack, $needle, $first, $pos);
  $nl = strlen($needle);
  $qty = floor(substr_count($haystack, $needle, $firstpos + 1)/$interval);
  do { //in reverse order
    $nextpos = strnposr($haystack, $needle, ($qty * $interval) + 1, $firstpos);
    $qty--;
    $haystack = substr_replace($haystack, $repl, $nextpos, $nl);
  } while ($nextpos > $firstpos);
  return $haystack;
}
  //$needle = string to find
  //$repl = string to replace needle
  //$haystack = string to do replacing in
  //$interval = number of needles in loop
  //$first=1 = first occurrence of needle to replace (defaults to first)
  //$pos=0 = position in haystack string to start from (defaults to first)
 
//replace every nth occurrence of $needle with $repl, starting from any
position, in a single-level array
function arr_replace_int($needle, $repl, $arr, $interval, $first=1, $pos=0,
$glue='|+|') {
  if (!is_array($arr))  return $arr;
  foreach($arr as $key=>$value){
    if (is_array($arr[$key])) return $arr;
  }
  $haystack = implode($glue, $arr);
  $haystack = str_replace_int($needle, $repl, $haystack, $interval, $first,
$pos);
  $tarr = explode($glue, $haystack);
  $i = 0;
  foreach($arr as $key=>$value){
    $arr[$key] = $tarr[$i];
    $i++;
  }
  return $arr;
}
?>
If $arr is not an array, or a multilevel array, it is returned unchanged.
Mark Oates 25-Oct-2011 08:36
When using GLOB_BRACE to find files on a local computer, note that including
the drive lettername within the braces may cause the behavior to not work as
expected:

<?php

$location = "{c:/foo/*.txt,c:/foo/bar/*.txt}"; // < will NOT work

$location = "c:{/foo/*.txt,/foo/bar/*.txt}"; // < works

$location = "c:/{foo/*.txt,foo/bar/*.txt}"; // < works

$location = "{/foo/*.txt,/foo/bar/*.txt}"; // < works

print_r(glob($location, GLOB_BRACE));

?>
jim at terrys dot net 29-Sep-2011 11:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 08:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 04:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 02:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 02:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 03:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 05:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 04:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 07:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 02:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 02:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 09:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 30-Sep-2009 08:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 01:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 09:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 01:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 11:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 06:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 12:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 09:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 11:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 27-Dec-2008 04:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 17-Nov-2008 05:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 22-Oct-2008 06:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 27-Sep-2008 11:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 11:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 12:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 03:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 06:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 01-Apr-2008 04:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 03:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 04:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 01:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 02:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 08:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 05:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 09:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 12:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 02:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 10:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 26-Sep-2006 07:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 07:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 06:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 02:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 05:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 06:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 20-Jan-2005 06:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 09:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 03:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 10:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 03:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 09:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 09-Mar-2004 05:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 10:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 09:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Apr 4 18:21:08 2012 UTC
Received cookie: COUNTRY=JPN%2C1.112.146.108
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列内の部分文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れる位置を探します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    指定すると、文字列内での検索開始位置がその位置になります。 strrpos() や
    strripos() と異なり、負の数は指定できません。

返り値

needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) から
の相対位置で返します。文字列の開始位置は 0 であり、1 ではないことに注意しましょ
う。

needle が見つからない場合は FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strstr() - 文字列が最初に現れる位置を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • substr() - 文字列の一部分を返す
  • preg_match() - 正規表現によるマッチングを行う



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes strpos
martijn at martijnfrazer dot nl 25-Feb-2012 03:58
This is a function I wrote to find all occurrences of a string, using strpos
recursively.

<?php
function strpos_recursive($haystack, $needle, $offset = 0, &$results = array())
{               
    $offset = strpos($haystack, $needle, $offset);
    if($offset === false) {
        return $results;           
    } else {
        $results[] = $offset;
        return strpos_recursive($haystack, $needle, ($offset + 1), $results);
    }
}
?>

This is how you use it:

<?php
$string = 'This is some string';
$search = 'a';
$found = strpos_recursive($string, $search);

if($found) {
    foreach($found as $pos) {
        echo 'Found "'.$search.'" in string "'.$string.'" at position <b>
'.$pos.'</b><br />';
    }   
} else {
    echo '"'.$search.'" not found in "'.$string.'"';
}
?>
Logan Baron 02-Feb-2012 02:31
After looking at the strposa function posted earlier, I noticed that if one of
the needles tested false when being checked in its own strpos, the function
would always return false. So, I re-wrote it to return the lowest index of the
first occurring match.

private function strposa($haystack, $needles=array(), $offset=0)
{
        $chr = array();
        foreach($needles as $needle)
        {
                $res = strpos($haystack, $needle, $offset);
                if ($res !== false) $chr[$needle] = $res;
        }
        if(empty($chr)) return false;
        return min($chr);
}

Now, it simply doesn't add that needle's strpos value if it's false. The check
that already existed will be useful here, if nothing got added to the array
there were no matches, so return false. However this time, it will return
something other than 0 (false) if there was a match but also a non-match in the
array of needles.
rjeggens at ijskoud dot org 24-Jan-2012 07:38
I lost an hour before I noticed that strpos only returns FALSE as a boolean,
never TRUE.. This means that

strpos() !== false

is a different beast then:

strpos() === true

since the latter will never be true. After I found out, The warning in the
documentation made a lot more sense.
gjh42 - simonokewode at hotmail dot com 07-Nov-2011 07:59
A pair of functions to replace every nth occurrence of a string with another
string, starting at any position in the haystack. The first works on a string
and the second works on a single-level array of strings, treating it as a
single string for replacement purposes (any needles split over two array
elements are ignored).

Can be used for formatting dynamically-generated HTML output without touching
the original generator: e.g. add a newLine class tag to every third item in a
floated list, starting with the fourth item.
 
<?php
/* String Replace at Intervals   by Glenn Herbert (gjh42)    2010-12-17
 */
 
//(basic locator by someone else - name unknown)
//strnposr() - Find the position of nth needle in haystack.
function strnposr($haystack, $needle, $occurrence, $pos = 0) {
    return ($occurrence<2)?strpos($haystack, $needle, $pos):strnposr
($haystack,$needle,$occurrence-1,strpos($haystack, $needle, $pos) + 1);
}

//gjh42
//replace every nth occurrence of $needle with $repl, starting from any
position
function str_replace_int($needle, $repl, $haystack, $interval, $first=1, $pos=
0) {
  if ($pos >= strlen($haystack) or substr_count($haystack, $needle, $pos) <
$first) return $haystack;
  $firstpos = strnposr($haystack, $needle, $first, $pos);
  $nl = strlen($needle);
  $qty = floor(substr_count($haystack, $needle, $firstpos + 1)/$interval);
  do { //in reverse order
    $nextpos = strnposr($haystack, $needle, ($qty * $interval) + 1, $firstpos);
    $qty--;
    $haystack = substr_replace($haystack, $repl, $nextpos, $nl);
  } while ($nextpos > $firstpos);
  return $haystack;
}
  //$needle = string to find
  //$repl = string to replace needle
  //$haystack = string to do replacing in
  //$interval = number of needles in loop
  //$first=1 = first occurrence of needle to replace (defaults to first)
  //$pos=0 = position in haystack string to start from (defaults to first)
 
//replace every nth occurrence of $needle with $repl, starting from any
position, in a single-level array
function arr_replace_int($needle, $repl, $arr, $interval, $first=1, $pos=0,
$glue='|+|') {
  if (!is_array($arr))  return $arr;
  foreach($arr as $key=>$value){
    if (is_array($arr[$key])) return $arr;
  }
  $haystack = implode($glue, $arr);
  $haystack = str_replace_int($needle, $repl, $haystack, $interval, $first,
$pos);
  $tarr = explode($glue, $haystack);
  $i = 0;
  foreach($arr as $key=>$value){
    $arr[$key] = $tarr[$i];
    $i++;
  }
  return $arr;
}
?>
If $arr is not an array, or a multilevel array, it is returned unchanged.
Mark Oates 25-Oct-2011 08:36
When using GLOB_BRACE to find files on a local computer, note that including
the drive lettername within the braces may cause the behavior to not work as
expected:

<?php

$location = "{c:/foo/*.txt,c:/foo/bar/*.txt}"; // < will NOT work

$location = "c:{/foo/*.txt,/foo/bar/*.txt}"; // < works

$location = "c:/{foo/*.txt,foo/bar/*.txt}"; // < works

$location = "{/foo/*.txt,/foo/bar/*.txt}"; // < works

print_r(glob($location, GLOB_BRACE));

?>
jim at terrys dot net 29-Sep-2011 11:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 08:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 04:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 02:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 02:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 03:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 05:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 04:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 07:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 02:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 02:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 09:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 30-Sep-2009 08:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 01:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 09:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 01:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 11:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 06:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 12:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 09:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 11:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 27-Dec-2008 04:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 17-Nov-2008 05:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 22-Oct-2008 06:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 27-Sep-2008 11:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 11:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 12:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 03:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 06:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 01-Apr-2008 04:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 03:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 04:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 01:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 02:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 08:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 05:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 09:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 12:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 02:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 10:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 26-Sep-2006 07:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 07:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 06:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 02:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 05:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 06:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 20-Jan-2005 06:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 09:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 03:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 10:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 03:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 09:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 09-Mar-2004 05:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 10:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 09:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue Apr 3 21:21:07 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_shift> <array_reverse
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
array_search

(PHP 4 >= 4.0.5, PHP 5)

array_search — 指定した値を配列で検索し、見つかった場合に対応するキーを返す

説明

mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ]
)

haystack において needle を検索します。

パラメータ

needle

    探したい値。

        注意:

        needle が文字列の場合、大文字小文字を区別して比較が行われます。

haystack

    配列。

strict

    オプションの3番目のパラメータ strict に TRUE が指定された場合、array_search
    () は identical 要素を haystack から探します。つまり、 haystack の中で
    needle の型に一致するかどうか、そしてオブジェクトが同一のインスタンスである
    かどうかも確認します。

返り値

needle が見つかった場合に配列のキー、それ以外の場合に FALSE を返します。

もし haystack に 1 つ以上の needle に見つかった場合、最初にマッチしたキーが返さ
れます。全てのマッチした値に対するキーを返すためには、代わりに array_keys() に
パラメータ search_value を付けて使用してください。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

変更履歴

バージョ                                  説明
   ン
4.2.0    PHP 4.2.0 以前では、array_search() は、失敗した場合に FALSE ではなく
         NULL を返します。

例

例1 array_search() の例

<?php
$array = array(0 => 'blue', 1 => 'red', 2 => 'green', 3 => 'red');

$key = array_search('green', $array); // $key = 2;
$key = array_search('red', $array);   // $key = 1;
?>

参考

  • array_keys() - 配列のキーすべて、あるいはその一部を返す
  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • in_array() - 配列に値があるかチェックする



array_shift> <array_reverse
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes array_search
sneskid at hotmail dot com 15-Mar-2012 08:50
I had an array of arrays and needed to find the key of an element by comparing
actual reference.
Beware that even with strict equality (===) php will equate arrays via their
elements recursively, not by a simple internal pointer check as with class
objects. The === can be slow for massive arrays and also crash if they contain
circular references.

This function performs reference sniffing in order to return the key for an
element that is exactly a reference of needle.

<?php
function array_ref_search(&$v, array &$s)
{
    if(is_object($v)){ return array_search($v, $s, true); }
    foreach($s as $rK => &$rV)
    { // reference sniff
        $tV = $v;
        if( ($rV === ($v = 1)) && ($rV === ($v = 0)) ){
        $v = $tV; return $rK; }
        $v = $tV;
    }
    return false; // use null for php < 4.2.0
}

$list   = array();
$list['A'] = &$valA; $list['B'] = &$valB;

$valA = 1; $valB = 1;
echo 'array_ref_search: ', array_ref_search($valB, $list), '</br>'; // key 'B'
echo 'array_search:     ', array_search($valB, $list, true), '</br>'; // key
'A'

$valA = array(1,2,3); $valB = array(1,2,3);
echo 'array_ref_search: ', array_ref_search($valB, $list), '</br>'; // key 'B'
echo 'array_search:     ', array_search($valB, $list, true), '</br>'; // key
'A' because ($valA === $valB) is true by elements

$valB[] = &$valB; // circular reference
echo 'array_ref_search: ', array_ref_search($valB, $list), '</br>'; // key 'B'
echo 'array_search:     ', array_search($valB, $list, true), '</br>'; // crash
because ($valB === $valB) causes infinite loop
?>
nateferrero at gmail dot com 27-Jan-2012 04:56
I built a function to find the numeric index of a key in an array.

<?php

/**
 * Array key index
 * @author Nate Ferrero
 */
function array_key_index(&$arr, $key) {
    $i = 0;
    foreach(array_keys($arr) as $k) {
        if($k == $key) return $i;
        $i++;
    }
}
nsstl 22-Jan-2012 09:57
Some thing that I wrote from a while, for what ever usefull purpose

This retrieves recursively a value from an array using a path-like notation.
 
   with:
     $delimiter         path delimiter
     $strict              if false, the search will allow gaps between path's
components        

<?php
function path_through_array($path, $array, $delimiter = '.', $strict = false)
{
  $path_token = explode($delimiter, $path);
  $head = array_shift($path_token);

  if (isset($array[$head]) && (0 == count($path_token)))
  {
    return $array[$head];
  }
  else if (isset($array[$head]))
  {
    return path_through_array(implode($delimiter, $path_token), $array[$head],
$delimiter, $strict);
  }
  else if ($strict == true)
  {
    return false;
  }

  foreach ($array as $key=>$value)
  {
    if (is_array($value))
    {
      $found = path_through_array($path, $value, $delimiter, $strict);

      if(false != $found)
      {
        return $found;
      }
    }
  }
  return false;
}

//use:

$array1 = array('path' => array('to' => array('get' => array('something' =>
'bar')), 'somethingelse'), 'foo' => 'anotherthing');

$val1 = path_through_array('path.to.get.something', $array1);                 
       // => will return : 'bar'
$val2 = path_through_array('path.to.get', $array1);                           
           // => will return : array('something'=>'bar')
$val3 = path_through_array('path/to/get/something', $array1, '/');             
    // => will return : 'bar'
$val4 = path_through_array('path.to.something', $array1);                     
      // => will return : 'bar'
$val5 = path_through_array('path.to.something', $array1, '.', true);           
   // => will return : false
Ouz zcan (mail at oguzozcan dot com) 17-Dec-2011 02:06
This is a multidimensional recursive find function :

<?php
function GetArrKey( $findArr, $key_arr, $depth=0 )
{
        if( count($key_arr) <= $depth || !array_key_exists($key_arr[$depth],
$findArr) )
                return NULL;
        else if( count($key_arr) == $depth+1 )
                return $findArr[$key_arr[$depth]];
       
        return self::GetArrKey( $findArr[$key_arr[$depth]], $key_arr, $depth+1
);
}
?>

Using :
<?php
        $findArray = array( "first_dim" => array( "first_dim_in_1" => array(
"first_dim_in_1_val_1", "first_dim_in_1_val_2", "first_dim_in_1_val_3" ),
"first_dim_in_2" => array( "first_dim_in_2_val_1", "first_dim_in_2_val_2",
"first_dim_in_2_val_3" ) ), "second_dim" => array( "second_dim_in" => "test",
"second_dim_in_val_1"));

        var_dump( GetArrKey( $findArray, array( "first_dim", "first_dim_in_2" )
) );

        /*
            Prints :
            array( "first_dim_in_2_val_1", "first_dim_in_2_val_2",
"first_dim_in_2_val_3" )
        */

        //----------------------------------------------------//

        var_dump(GetArrKey( $findArray, array( "first_dim", "first_dim_in_2", 0
) ) );

        /*
            Prints :
            string(20) => "first_dim_in_2_val_1"
        */

        //----------------------------------------------------//

        var_dump(GetArrKey( $findArray, array( "second_dim", 0 ) ) );

        /*
            Prints :
            string(4) => "test"
        */

        //----------------------------------------------------//

        var_dump(GetArrKey( $findArray, array( "second_dim", 0 ) ) );

        /*
            Prints :
            string(4) => "test"
        */

        //----------------------------------------------------//

        var_dump(GetArrKey( $findArray, array( "second_dim", 1 ) ) );

        /*
            Prints :
            string(19) => "second_dim_in_val_1"
        */

        //----------------------------------------------------//

        var_dump(GetArrKey( $findArray, array( "second_dim", 1, 1 ) ) );

        /*
            Prints :
            std_object => NULL
        */

?>
revoke 11-Oct-2011 04:12
Better solution of multidimensional searching.

<?php
function multidimensional_search($parents, $searched) {
  if (empty($searched) || empty($parents)) {
    return false;
  }
 
  foreach ($parents as $key => $value) {
    $exists = true;
    foreach ($searched as $skey => $svalue) {
      $exists = ($exists && IsSet($parents[$key][$skey]) && $parents[$key]
[$skey] == $svalue);
    }
    if($exists){ return $key; }
  }
 
  return false;
}

$parents = array();
$parents[] = array('date'=>1320883200, 'uid'=>3);
$parents[] = array('date'=>1320883200, 'uid'=>5);
$parents[] = array('date'=>1318204800, 'uid'=>5);

echo multidimensional_search($parents, array('date'=>1320883200, 'uid'=>5)); //
1
?>
stooshie at gmail dot com 06-Oct-2011 02:51
Example of a recursive binary search that returns the index rather than
boolean.
<?php
// returns the index of needle in haystack
function binSearch($needle, $haystack)
{
    // n is only needed if counting depth of search
    global $n;
    $n++;
    // get the length of passed array
    $l = count($haystack);
    // if length is 0, problem
    if($l <= 0)
    {
        return -1;
    }
    // get the mid element
    $m = (($l+($l%2))/2);
    // if mid >= length (e.g. l=1)
    if($m >= $l)
    {
        $m = $m-1;
    }
    // get the indexed element to compare to the passed element and branch
accordingly
    $compare = $haystack[$m];
    switch(true)
    {
        case($compare>$needle):
        {
            // recurse on the lower half
            $new_haystack = array_slice($haystack, 0, $m);
            $c = count($new_haystack);
            $r = binSearch($needle, $new_haystack);
            // return current index - (length of lower half - found index in
lower half)
            return $m - ($c - $r);
            break;
        }
        case($compare<$needle):
        {
            // recurse on the upper half
            $new_haystack = array_slice($haystack, $m, ($l-$m));
            $c = count($new_haystack);
            $r = binSearch($needle, $new_haystack);
            // return current position + found index in upper half
            return $m + $r;
            break;
        }
        case($compare==$needle):
        {
            // found it, so return index
            return $m;
            break;
        }
    }
}
?>
Dave C 27-Sep-2011 01:18
Here is a version of binary search that is done via recursion instead of
iteration.  Remember that your data needs to be presorted!

<?php
static function Bin_Search(&$needle, &$haystack, $start, $end) {
        if($end < $start)
        {
            return false;
        }

        $mid = (int)(($end - $start) / 2) + $start;
 
        if($haystack[$mid] > $needle)
        {
            return Bin_Search($needle, $haystack, $start, $mid - 1);
        }
        else if($haystack[$mid] < $needle)
        {
            return Bin_Search($needle, $haystack, $mid + 1, $end);
        }
        else
        {
            return true;
        }
}
?>
Jordan Rutty (ruttyj92[-at-][hotmailcom) 04-Jul-2011 10:41
Array AFTER/BEFORE Function

function made to mimic the jQuery function to insert items/arrays into another
array before or after a specific key. It is split into two functions for reuse
to find the offset of a key. it detects if the array is associative (can also
be manually controlled) and adds the keys where needed. if the inserted array
is associative then any overlapping keys will be replaced by the new ones.

array_insert(array &$original , mixed $insert=null , var $position='after' ,
$key=null [, $keep_keys=true])

options for $position = (after|before)

<?php
function key_offset(&$array, $searchKey){
    if(is_array($array) && array_key_exists($searchKey, $array)){
        $counter = 0;
        foreach($array as $key => $value){
            if($searchKey == $key){
                return $counter;
            } else {
                $counter++;
            }
        }
    }
}

function array_insert(&$original, $insert=null, $position='after', $key=null,
$sens=true){
    if(!empty($insert)){   
           $after = $position == 'after' ? true : false;
           $insert = (array)$insert;          
           $assoc = (array_keys($insert) !== range(0, count($insert)-1));     
    
           $keep_keys = is_string($insert) || !$assoc || $sens;
          
        if(!empty($key) && array_key_exists($key, $original)){   
            $start = key_offset($original, $key);
               $start = $after ? $start+1 : $start;
            if(!$keep_keys){   
                array_Splice($original,$start,0,$insert);
                } else {
                $keys = array_Keys($original);
                $values = array_Values($original);
                $insert = (array)$insert;
                $rKeys = array_Keys($insert);
                $rValues = array_Values($insert);
                array_Splice($keys,$start,0,$rKeys);
                array_Splice($values,$start,0,$rValues);
                    $original = array_Combine($keys,$values);
                }
        } else {
            $original = $after ? array_merge($original, $insert) : array_merge
($insert, $original);
        }
    }
}

$insert = array('omg'=> 'it works', 'this_is' => 'awsome', 'r' =>103,104);
$insert2 = range(11,15);
$insert3 = array(100=>101,102,103,104);

$original=range(1,10);
array_insert($original, $insert, 'after', 4);

$original=range(1,10);
array_insert($original, $insert, 'after', 4, false);

$original=range(1,10);
array_insert($original, $insert2, 'after', 4);

$original=range(1,10);
array_insert($original, $insert3, 'after', 4);

/*
Array
(
    [0] => 104
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
    [omg] => it works
    [this_is] => awsome
    [r] => 103
    [5] => 6
    [6] => 7
    [7] => 8
    [8] => 9
    [9] => 10
)

Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
    [5] => it works
    [6] => awsome
    [7] => 103
    [8] => 104
    [9] => 6
    [10] => 7
    [11] => 8
    [12] => 9
    [13] => 10
)

Array
(
    [0] => 11
    [1] => 12
    [2] => 13
    [3] => 14
    [4] => 15
    [5] => 6
    [6] => 7
    [7] => 8
    [8] => 9
    [9] => 10
)

Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
    [4] => 5
    [100] => 101
    [101] => 102
    [102] => 103
    [103] => 104
    [5] => 6
    [6] => 7
    [7] => 8
    [8] => 9
    [9] => 10
)
*/
?>
willemvannus at gmail dot com 11-Feb-2011 03:23
I found a simple script to remove certain values from a array.
I use it when using the scandir function, because i don't want certain items in
the array (like the ., .. folders and the thumbs.db)

<?php
$music = scandir("music");
unset($music[array_search('.',$music)]);  // Removing the . directory
unset($music[array_search('..',$music)]); // Removing the .. directory
unset($music[array_search('Thumbs.db',$music)]); // Removing the Thumbs.db file
unset($music[array_search('thumbs.db',$music)]); // Removing the thumbs.db file
?>
syrgjyn at gmail dot com 18-Jan-2011 07:51
Recently I had to get all locations of a one-dimensional non-associative array
(needle, not array of needles) in another one-dimensional non-associative array
(haystack) without using more memory than necessary. I haven't found any
satisfactory way to do that, so I wrote the following function, inspired by the
array_slice() source code.

Notes:
0. $offset, $length and $strict behave the same way as those for array_slice()
and array_search();
1. this function doesn't use foreach or array_slice(), neither does it modify
$needle or $haystack, so no temporary copies are needed/created, regardless of
whether the arguments are passed by reference or not -- useful when dealing
with very large haystacks and needles;
2. $needle and $haystack are typecast to array if they're not arrays;
3. you can specify the $start position to start searching from in the $haystack
(default is 0);
4. negative $start values can be used if you want to specify the starting
position from the end of $haystack.
5. you can specify the search $length, starting from $start; a negative value
stops the search at that many elements from the end of the haystack;
6. pass true as the fifth argument to do a strict search (not tested on
objects);
7. the function returns an array if it finds one or more occurrences of $needle
in the $haystack, false on failure.
8. keys are preserved;
9. if you want to get only the first location of $needle in $haystack, returned
as an integer rather than array -- in other words, to make an array_match()
function instead of array_match_all() -- remove this line:

  $results = array();

and replace:

    if ($found)
    {
      $results[] = $i;
      $i += $ncount - 1;
    }
  }
  if (!empty($results))
    return $results;
  else
    return false;

with:

    if ($found)
      return $i;
  }
  return false;

And now the function:

<?php
function array_match_all($needle, $haystack, $offset = 0, $length = 0, $strict
= false)
{
  if (!is_array($needle))
    $needle = (array) $needle;
  if (!is_array($haystack))
    $haystack = (array) $haystack;

  $offset = (int) $offset;
  $length = (int) $length;
  $strict = ($strict != false);
  $ncount = count($needle);
  $hcount = count($haystack);

  // Empty arrays? Really? Also, no point in dealing with a needle larger than
the haystack.
  if (($hcount == 0) || ($ncount == 0) || ($ncount > $hcount))
    return false;

  // Is offset beyond the upper bound?
  if ($offset > $hcount - $ncount)
    return false;
  // If offset is specified from the end of haystack, is it beyond the lower
bound?
  elseif ($offset < 0 && ($offset = $hcount + $offset) < 0)
    $offset = 0;

  // Determine the length.
  if ($length == 0)
    $length = $hcount;

  if ($length < 0)
    $length = $hcount - $offset + $length;
  elseif ($offset + $length > $hcount)
    $length = $hcount - $offset;

  // Is the needle larger than the portion of the haystack we are searching in?
  if (($length <= 1) || ($ncount > $length))
    return false;

  // Determine the actual search length.
  $length = $offset + $length - $ncount + 1;

  $results = array();
  for ($i = $offset; $i < $length; ++$i)
  {
    $found = true;
    for ($j = 0; $j < $ncount; ++$j)
    {
      if (($strict && ($haystack[$i + $j] !== $needle[$j])) || (!$strict &&
($haystack[$i + $j] != $needle[$j])))
      {
        $found = false;       
        break;
      }
    }
    if ($found)
    {
      $results[] = $i;
      $i += $ncount - 1;
    }
  }

  if (empty($results))
    return false;
  else
    return $results;
}
?>
stefano@takys dot it 14-Jan-2011 01:58
for searching case insensitive better this:

<?php
array_search(strtolower($element),array_map('strtolower',$array));
?>
user at www dot mp3s dot pl 28-Dec-2010 01:25
for case insensitive array_search you could use:

<?php
function array_search_i($str,$array){
    foreach($array as $key => $value) {
        if(stristr($str,$value)) return $key;
    }
    return false;
}
?>
manchimen [at) yahoo [dot) com 01-Nov-2010 02:18
Hey all - I needed a function to search for an array in a multi-dimensional
array, but only the keys I wanted, not all keys. Hee if my function:

<?php
function my_array_search($needle, $haystack) {
        if (empty($needle) || empty($haystack)) {
            return false;
        }
       
        foreach ($haystack as $key => $value) {
            $exists = 0;
            foreach ($needle as $nkey => $nvalue) {
                if (!empty($value[$nkey]) && $value[$nkey] == $nvalue) {
                    $exists = 1;
                } else {
                    $exists = 0;
                }
            }
            if ($exists) return $key;
        }
       
        return false;
    }
?>

Examples:
<?php
$needle = array('date_start' => '27-10-2010', 'date_end' => '29-10-2010');

$haystack = array();
$haystack[] = array('date_start' => '25-10-2010', 'date_end' => '26-10-2010',
'promos' => array('test', 'test1');
$haystack[] = array('date_start' => '27-10-2010', 'date_end' => '28-10-2010',
'promos' => array('test2', 'test3');
$haystack[] = array('date_start' => '27-10-2010', 'date_end' => '29-10-2010',
'promos' => array('test4', 'test5');

$key = my_array_search($needle, $haystack);
// will output (bool)false for not found or (int)key_no with the key number
// this example outputs (int)2
var_dump($key);
?>

I hope this function will help someone!
GuardianGI 23-Sep-2010 12:42
I needed to check an array for a value but the value only had to match part of
a string in the array value so i wrote this little function hope it helps
someone out (also some documentation of what used to test if there already was
such a function 'couse i was hoping array_search was this.

<?php
function my_array_search($needle = null, $haystack_array = null, $skip = 0)
{
    if($needle == null || $haystack_array == null)
        die('$needle and $haystack_array are mandatory for functie
my_array_search()');
    foreach($haystack_array as $key => $eval)
    {
        if($skip != 0)$eval = substr($eval, $skip);
        if(stristr($eval, $needle) !== false) return true;
    }
    return false;
}

$arr = array('foo', 'bar');

echo 'using in_array<br />';
if(in_array('ar', $arr) === true)echo 'ar found<br />';
if(in_array('bar', $arr) === true)echo 'bar found<br />';

echo 'using array_search<br />';
if(array_search('ar', $arr) !== false)echo 'ar found<br />';
if(array_search('bar', $arr) !== false)echo 'bar found<br />';

echo 'using my_array_search<br />';
if(my_array_search('ar', $arr) !== false)echo 'ar found<br />';
if(my_array_search('bar', $arr) !== false)echo 'bar found<br />';
?>

returns:

using in_array
bar found
using array_search
bar found
using my_array_search
ar found
bar found
j dot vd dot merwe at enovision dot net 22-Sep-2010 02:42
The getParentStack is also working if you work with JSON records that are
encoded. Following sample:

$in = '{"total":"2","records": [{"id":"25"},{"id":"32"}]}'; // string!!!
$json = json_decode( $in, true ); //don't forget the true here

$s = getParentStack(32, $json['records']) ;

then test this with:

if ($s != false)     // then it is found, don't test true here!!!

or test direct with:

if ( getParentStack(32, $json['records']) != false )

It works great with my JSON's thanks Robert Gonzalez
robert at robert-gonzalez dot com 22-Sep-2010 12:15
I needed a way to find the parent hierarchy of a multidimensional array. Being
the rogue that I am, I got to coding before searching the manual and came up
with two little functions that will return a parent stack for a first find and
a complete parent stack, similar in nature to the solution presented by jette
at nerdgirl dot dk without all the extra stuff or use of eval(). ;)

<?php
/**
 * Gets the parent stack of a string array element if it is found within the
 * parent array
 *
 * This will not search objects within an array, though I suspect you could
 * tweak it easily enough to do that
 *
 * @param string $child The string array element to search for
 * @param array $stack The stack to search within for the child
 * @return array An array containing the parent stack for the child if found,
 *               false otherwise
 */
function getParentStack($child, $stack) {
    foreach ($stack as $k => $v) {
        if (is_array($v)) {
            // If the current element of the array is an array, recurse it and
capture the return
            $return = getParentStack($child, $v);
           
            // If the return is an array, stack it and return it
            if (is_array($return)) {
                return array($k => $return);
            }
        } else {
            // Since we are not on an array, compare directly
            if ($v == $child) {
                // And if we match, stack it and return it
                return array($k => $child);
            }
        }
    }
   
    // Return false since there was nothing found
    return false;
}

/**
 * Gets the complete parent stack of a string array element if it is found
 * within the parent array
 *
 * This will not search objects within an array, though I suspect you could
 * tweak it easily enough to do that
 *
 * @param string $child The string array element to search for
 * @param array $stack The stack to search within for the child
 * @return array An array containing the parent stack for the child if found,
 *               false otherwise
 */
function getParentStackComplete($child, $stack) {
    $return = array();
    foreach ($stack as $k => $v) {
        if (is_array($v)) {
            // If the current element of the array is an array, recurse it
            // and capture the return stack
            $stack = getParentStackComplete($child, $v);
           
            // If the return stack is an array, add it to the return
            if (is_array($stack) && !empty($stack)) {
                $return[$k] = $stack;
            }
        } else {
            // Since we are not on an array, compare directly
            if ($v == $child) {
                // And if we match, stack it and return it
                $return[$k] = $child;
            }
        }
    }
   
    // Return the stack
    return empty($return) ? false: $return;
}

// TESTING
$array = array(
    'balloon' => array(
        'red' => array(1 => 'Love', 'Valentine', 'Heart',),
        'green' => array(1 => 'Summertime', 'Hope',),
    ),
    'ribbon' => array(
        'yellow' => array(2 => 'Welcome',),
        'red' => array(3 => 'Love', 'Love',),
    ),
);

$s = getParentStack('Love', $array);
$c = getParentStackComplete('Love', $array);
var_dump($s, $c);
?>

Output:

array
  'balloon' =>
    array
      'red' =>
        array
          1 => string 'Love' (length=4)

array
  'balloon' =>
    array
      'red' =>
        array
          1 => string 'Love' (length=4)
  'ribbon' =>
    array
      'red' =>
        array
          3 => string 'Love' (length=4)
          4 => string 'Love' (length=4)
hanan dot ali dot shaikh at googlemail dot com 17-Sep-2010 01:14
In this code I write a code to find next and previous element of an array using
current element of that array. Let suppose if we are in element 9 and have to
access its next and previous element then this code be helpful for someone.

<?php
$myArray = array(4,5,7,9,10,11,13,19,25);

$currentElement = 9;
$firstElement = current($myArray);
$lastElement = $myArray[sizeof($myArray)-1];

$currentKey = array_search($currentElement, $myArray);
$currentValue = $myArray[$currentKey];

$previousValue = "";
$nextValue = "";
if($currentElement!=$lastElement){
    $nextKey = $currentKey + 1;
    $nextValue = $myArray[$nextKey];
}

if($currentElement!=$firstElement){
    $previousKey = $currentKey - 1;
    $previousValue = $myArray[$previousKey];
}

echo $previousValue."--".$currentValue."--".$nextValue;

?>

Thanks,
Hanan Ali
Yco 03-Aug-2010 01:35
This a simple and lazy lazy method to search a key name in an array by pattern,
and return the value if it isn't empty.

<?php
function array_search_key($p, $a)
{
    foreach ($a as $k => $v) {
        if(strstr($k, $p)){
            if(!empty($v) || $v > 0){
                return $v;
            }
        }
    }
}
?>
giulio dot provasi at gmail dot com 30-Apr-2010 02:06
If you want a very simple way of searching a value through a multidimensionnal
array here's a  trick :

<?php
function recursiveArraySearch($haystack, $needle, $index = null)
{
    $aIt     = new RecursiveArrayIterator($haystack);
    $it    = new RecursiveIteratorIterator($aIt);
   
    while($it->valid())
    {       
        if (((isset($index) AND ($it->key() == $index)) OR (!isset($index)))
AND ($it->current() == $needle)) {
            return $aIt->key();
        }
       
        $it->next();
    }
   
    return false;
}
?>

So let's take a misc multi-dimensionnal array :

<?php
$std = new stdClass();
$std->name     = 'luke';
$std->age     = '25';
$std->sex     = 'M';

$array     = array(    array('type'=>'dog', 'name'=>'butch', 'sex'=>'m',
'breed'=>'boxer'),
                    array('type'=>'dog', 'name'=>'fido', 'sex'=>'m', 'breed'=>
'doberman'),
                    'simpleValue',
                    array('type'=>'cat', 'name'=>'tiddles','sex'=>'m', 'breed'
=>'maine coon'),
                    array('type'=>'horse', 'name'=>'ed','sex'=>'m', 'breed'=>
'clydesdale'),
                    $std);

echo recursiveArraySearch($array, '25', 'age');        // returns 5
echo recursiveArraySearch($array, '25', 'name');    // returns false
echo recursiveArraySearch($array, 'simpleValue');    // returns 2
echo recursiveArraySearch($array, 'fido');            // returns 1
?>
kim at steinhaug dot com 19-Mar-2010 12:44
I was looking around for a recursive search by keys in multidimensional arrays.
After testing the ones in this thread seems noone accually works. So I put this
one together, and it does what you expect it to do.

You need to find the value for the key "han-solo".

<?php
if( ($val = array_search_key('han-solo',$array)) !== false){
  var_dump($val);
} else {
  // No keys with the name "han-solo"
}

function array_search_key( $needle_key, $array ) {
  foreach($array AS $key=>$value){
    if($key == $needle_key) return $value;
    if(is_array($value)){
      if( ($result = array_search_key($needle_key,$value)) !== false)
        return $result;
    }
  }
  return false;
}
?>
camden dot michael at gmail dot com 03-Mar-2010 10:58
I needed a case insensitive array search function for a project...

<?php
/**
 * Performs the same function as array_search except that it is case
 * insensitive
 * @param mixed $needle
 * @param array $haystack
 * @return mixed
 */

function array_nsearch($needle, array $haystack) {
   $it = new IteratorIterator(new ArrayIterator($haystack));
   foreach($it as $key => $val) {
       if(strcasecmp($val,$needle) === 0) {
           return $key;
       }
   }
   return false;
}
?>
jette at nerdgirl dot dk 01-Mar-2010 08:07
I use this function to search the value of arrays of any dimension, and return
the result with keys preserved:

<?php
function multiArrayValueSearch($haystack, $needle, &$result, &$aryPath=NULL,
$currentKey='') {
  if (is_array($haystack)) {
    $count = count($haystack);
    $iterator = 0;
    foreach($haystack as $location => $straw) {
      $iterator++;
      $next = ($iterator == $count)?false:true;
      if (is_array($straw)) $aryPath[$location] = $location;
        multiArrayValueSearch($straw,$needle,$result,$aryPath,$location);
        if (!$next) {
          unset($aryPath[$currentKey]);
        }
      }
    } else {
      $straw = $haystack;
      if ($straw == $needle) {
        if (!isset($aryPath)) {
          $strPath = "\$result[$currentKey] = \$needle;";
        } else {
          $strPath = "\$result['".join("']['",$aryPath)."'][$currentKey] = \
$needle;";
        }
        eval($strPath);
      }
   }
}
?>

Example:

<?php
$ary['ballon']['red'][1] = 'Love';
$ary['ballon']['red'][2] = 'Valentine';
$ary['ballon']['red'][3] = 'Heart';
$ary['ballon']['green'][1] = 'Summertime';
$ary['ballon']['green'][2] = 'Hope';
$ary['ribbon']['yellow'][2] = 'Welcome';
$ary['ribbon']['red'][3] = 'Love';
$ary['ribbon']['red'][4] = 'Love';

echo "<pre>";

//Just call the function with 3 first parameters set:
//  1) The array to search
//  2) The value to find
//  3) A variable to store the result
multiArrayValueSearch($ary,'Love',$match);

print_r($match);
echo "</pre>";
?>

Output:

Array
(
    [ballon] => Array
        (
            [red] => Array
                (
                    [1] => Love
                )

        )

    [ribbon] => Array
        (
            [red] => Array
                (
                    [3] => Love
                    [4] => Love
                )

        )

)

You can easily adapt it to suit your need of matching, by changing line 16 in
the function:

<?php
if ($straw == $needle) {
?>
james at bandit.co.nz 28-Jan-2010 05:33
A couple of staple custom PHP array searching functions I rely on in most of my
projects;

<?php
    // array_search with partial matches and optional search by key
    function array_find($needle, $haystack, $search_keys = false) {
        if(!is_array($haystack)) return false;
        foreach($haystack as $key=>$value) {
            $what = ($search_keys) ? $key : $value;
            if(strpos($what, $needle)!==false) return $key;
        }
        return false;
    }
   
    // array_search with recursive searching, optional partial matches and
optional search by key
    function array_find_r($needle, $haystack, $partial_matches = false,
$search_keys = false) {
        if(!is_array($haystack)) return false;
        foreach($haystack as $key=>$value) {
            $what = ($search_keys) ? $key : $value;
            if($needle===$what) return $key;
            else if($partial_matches && @strpos($what, $needle)!==false) return
$key;
            else if(is_array($value) && array_find_r($needle, $value,
$partial_matches, $search_keys)!==false) return $key;
        }
        return false;
    }
?>

Hope they help someone!
mrjay42 at gmail dot com 13-Nov-2009 06:09
If you search a key position in an associative array (keys are uniques), i
suggest this function :
<?php
public function getKeyPositionInArray($haystack, $keyNeedle)
{
    $i = 0;
    foreach($haystack as $key => $value)
    {
        if($key == $keyNeedle)
        {
            return $i;
        }
        $i++;
    }
}
?>
codeslinger at compsalot dot com 02-Oct-2009 12:22
one thing to be very aware of is that array_search() will fail if the needle is
a string and the array itself contains values that are mixture of numbers and
strings.  (or even a string that looks like a number)

The problem is that unless you specify "strict" the match is done using ==   
and in that case any string will match a numeric value of zero which is not
what you want.

-----

also, php can lookup an index pretty darn fast.  for many scenarios, it is
practical to maintain multiple arrays, one in which the index of the array is
the search key and the normal array that contains the data.

<?php

  $normal[$index] = array('key'=>$key, 'data'=>'foo');
  $inverse[$key] = $index;

  //very fast lookup, this beats any other kind of search

  if (array_key_exists($key, $inverse))
  {
    $index = $inverse[$key];
    return $normal[$index];
  }

?>
pi3ch at gmx dot com 28-Sep-2009 09:29
The return value for array_search is confusing if the return key is zero. it is
better to double check it with in_array() function.

Example:
<?php

$SampleArray = ('a', 'b', 'c');

$Key = array_search('a', $SampleArray);
$Zero = in_array('a', $SampleArray);

if($Key == NULL && !$Zero)
   echo "Key doesnt exists";
else
   echo "Key exists";

 ?>
pvenakis at efrontlearning dot net 24-Sep-2009 05:02
if $haystack is not an array, for example false from some previous action, the
function returns null instead of false in php 5.3.
temporal dot pl at gmail dot com 04-Sep-2009 03:57
Sometimes you need to find a given value in a sorted array or - if not found -
detect the place where it should be. After that you can for example split the
array into two halves, the  greater and the smaller one.

greenmr, dennis.decoene and php at celerondude had all posted very good binary
search functions but these functions all return false if the needle was not
found in the haystack. I've tweaked greenmr's code a little:

<?php
function Array_BinarySearch( $needle, $haystack, $comparator , &$probe )
{
    $high = Count( $haystack ) -1;
    $low = 0;
   
    while ( $high >= $low )
    {
        $probe = Floor( ( $high + $low ) / 2 );
        $comparison = $comparator( $haystack[$probe], $needle );
        if ( $comparison < 0 )
        {
            $low = $probe +1;
        }
        elseif ( $comparison > 0 )
        {
            $high = $probe -1;
        }
        else
        {
            return true;
        }
    }
    //The loop ended without a match
    //Compensate for needle greater than highest haystack element
    if($comparator($haystack[count($haystack)-1], $needle) < 0)
    {
        $probe = count($haystack);
    }
    return false;
}
?>

Now, the function returns true if it finds something and false otherwise. If a
needle was found, then $probe will contain it's position. Otherwise, $probe
will contain position of where the needle would be if it were there :). This is
possible because we pass $probe by reference.

Example:

<?php
//ultra-simple comparator :)
function CompareNumbers($obj, $needle)
{
    return $obj - $needle;
}

//use examples
$testArr = array(10, 20, 30, 40, 50);
$res = Array_BinarySearch(30, $testArr, 'CompareNumbers', $probe);
echo (int)$res.' '.$probe.'<br />';
//output is: 1 2 - found at position 2

$res = Array_BinarySearch(45, $testArr, 'CompareNumbers', $probe);
echo (int)$res.' '.$probe.'<br />';
//output is: 0 4 - not found, but it would be at position 4 (between 40 and 45)
 
$res = Array_BinarySearch(-3, $testArr, 'CompareNumbers', $probe);
echo (int)$res.' '.$probe.'<br />';
//output is: 0 0 - not found, but it would be at position 0 (before 10)

$res = Array_BinarySearch(300, $testArr, 'CompareNumbers', $probe);
echo (int)$res.' '.$probe.'<br />';
//output is: 0 5 - not found, but it would be at position 5 (after 50; note,
that count($haystack) == 5)
?>

See original greenmr's note for additional details about usage of this binary
search: http://php.net/manual/en/function.array-search.php#89413
Nguyen KimKha 23-Aug-2009 10:18
You can remove some values from array, by using unset() and array_search().

<?php

$friends = array( 'Bob', 'Ann', 'Peter' ); // Two persons named 'Bob'
$find = 'Bob';
$key = array_search( $find, $friends ); // Find key of given value
if ($key != NULL || $key !== FALSE) {
    unset($friends[$key]); // remove key from array
}

// Now, $friends = array( 'Ann', 'Peter');

?>
Frank A Cefalu frankcefalu at gmail dot com 18-Aug-2009 11:22
The original function for searching a multidimensional array didn't let you
filter by arraykeys.

This one is modified so you can search by array keys or not.

If you want a general search for a value and don't care which specific key to
target you dont have to specify it but example.

<?php
$array = ("shoes" => array("test1"=> "123","test2"=>"1234","test3"=>"12345"),
             "shoes2"=> array("test1"=>"324","test2"=>"3515","test3"=>
"123131");

array_search_value("123",$array,"test1"); // would return shoes
array_search_value("12223",$array,"test1"); // would return false;
?>
this makes it easier to validate a multi-dimensional array to make sure certain
data is present.

Enjoy!

<?php

function array_search_value($needle,$haystack,$arraykey=FALSE) {
    foreach($haystack as $key=>$value) {
        $current_key=$key;

        if($arraykey){
           
            if($needle == $value[$arraykey]){
            return $value['id'];
            }
           
            if(array_search_value($needle,$value[$arraykey]) == true) {
            return $current_key;
            }
           
        }else{
           
            if($needle == $value)
            return $value;
           
            if(array_search_value($needle,$value) == true) {
                return $current_key;
            }
           
           
        }
       
       
    }
    return false;
}
?>
mikeytown2 22-Jul-2009 04:14
Made a function that I used to search the $_SERVER variable ( http://php.net/
reserved.variables.server ) for matches to getcwd ( http://php.net/getcwd )
excluding some key's that I don't want.

<?php
/**
 * Returns all key/values in array that match.
 *
 * @param $needle
 *  What your searching for
 * @param $haystack
 *  Array of values
 * @param $a_not
 *  Optional array of key names to exclude
 */
function boost_array_find($needle, $haystack, $a_not = array()) {
  $out = array();
  foreach($haystack as $key=>$value) {
    if (strpos($value, $needle) !== FALSE) {
      $good = TRUE;
      foreach($a_not as $not) {
        if (strpos($key, $not) !== FALSE) {
          $good = FALSE;
        }
      }
      if ($good) {
        $out[$key] = $value;
      }
    }
  }
  return $out;
}

// Example Usage
$document_root = str_replace("\\", '/', getcwd());
$rejects = array('SCRIPT_FILENAME');
$out = boost_array_find($document_root, $_SERVER, $rejects);
print_r($out);
?>

Which should output this on most servers.
Array
(
    [DOCUMENT_ROOT] => path/to/webroot
)

On Mosso's servers it will output this
Array
(
    [PHP_DOCUMENT_ROOT] => path/to/webroot
)
Anonymous 22-Jun-2009 02:51
Here is a cool trick:

<?php
function arr_search ( $array, $expression ) {
    $result = array();
    $expression = preg_replace ( "/([^\s]+?)(=|<|>|!)/", "\$a['$1']$2",
$expression );
    foreach ( $array as $a ) if ( eval ( "return $expression;" ) ) $result[] =
$a;
    return $result;
}

$data = array (
    array ( "name" => "bill", "age" => 40 ),
    array ( "name" => "john", "age" => 30 ),
    array ( "name" => "jack", "age" => 50 ),
    array ( "name" => "john", "age" => 25 )
);

print_r ( arr_search ( $data, "age>=30" ) );
print_r ( arr_search ( $data, "name=='john'" ) );
print_r ( arr_search ( $data, "age>25 and name=='john'" ) );
?>

-- results --

Array
(
    [0] => Array
        (
            [name] => bill
            [age] => 40
        )

    [1] => Array
        (
            [name] => john
            [age] => 30
        )

    [2] => Array
        (
            [name] => jack
            [age] => 50
        )

)
Array
(
    [0] => Array
        (
            [name] => john
            [age] => 30
        )

    [1] => Array
        (
            [name] => john
            [age] => 25
        )

)
Array
(
    [0] => Array
        (
            [name] => john
            [age] => 30
        )

)
buddel 08-Jun-2009 08:13
the recursive function by tony have a small bug. it failes when a key is 0

here is the corrected version of this helpful function:

<?php
function recursive_array_search($needle,$haystack) {
    foreach($haystack as $key=>$value) {
        $current_key=$key;
        if($needle===$value OR (is_array($value) && recursive_array_search
($needle,$value) !== false)) {
            return $current_key;
        }
    }
    return false;
}
?>
tony dot peter at wanadoo dot fr 11-May-2009 12:53
A simple recursive array_search function :

<?php
function recursive_array_search($needle,$haystack) {
    foreach($haystack as $key=>$value) {
        $current_key=$key;
        if($needle===$value OR (is_array($value) && recursive_array_search
($needle,$value))) {
            return $current_key;
        }
    }
    return false;
}
?>
n-regen 05-May-2009 10:36
If you only know a part of a value in an array and want to know the complete
value, you can use the following function:
<?php
function array_find($needle, $haystack)
{
   foreach ($haystack as $item)
   {
      if (strpos($item, $needle) !== FALSE)
      {
         return $item;
         break;
      }
   }
}
?>
The function returns the complete first value of $haystack that contains
$needle.
alex at softservice dot org 28-Apr-2009 09:07
Can be useful for searching in a multi-dimensional array:

<?php
function array_search_in_level($needle, $haystack, $key, &$result, $searchlevel
= 0) { 
  while(is_array($haystack) && isset($haystack[key($haystack)])) {
    if($searchlevel == 0 && key($haystack) == $key && $haystack[$key] ==
$needle) {
      $result = $haystack;
    } elseif($searchlevel > 0) {
      array_search_in_level($needle, $haystack[key($haystack)], $key, $result,
$searchlevel - 1);
    }
    next($haystack);
  }
}
?>

Examples:

1. 2-dimensional array, search by both key and value
$arr1 = array(
  1 => array('id' => 1, 'name' => 'Alex', 'gender' => 'male'),
  ...
  12 => array('id' => 12, 'name' => 'John', 'gender' => 'male'),
);


<?php array_search_in_level('John', $arr1, 'name', $result, 1); ?>

$result is:
array(
  'id' => int 12
  'name' => string 'John' (length=4)
  'gender' => string 'male' (length=4)
)

2. 3-dimensional array, search by value only:

<?php
$arr2 = array(
  1 => array('id' => 1, 'name' => 'Alex', 'gender' => 'male'),
  /* ... */
  12 => array('id' => 12, 'name' => 'John', 'gender' => 'male', 'friends' =>
array('Helen', 'Julia')),
);

array_search_in_level('Helen', $arr1, 0, $result, 2);
?>

$result is:
array(
  0 => string 'Helen' (length=5)
  1 => string 'Julia' (length=5)
)
office at drsoft dot com 02-Apr-2009 04:59
If you wish to search a multidimensional array by keys:

<?php
function extract_values_by_key ( $array, $needle_key, &$out = array () ) {
    foreach ( (array) $array as $key => $value ) {
        if ( ! is_array ( $value ) && $key == $needle_key ) {
            array_push ( $out, $value );
        }
        else {
            extract_values_by_key ( $value, $needle_key, &$out );
        }
    }

    return $out;
}
?>
elie at najberg dot fr 26-Mar-2009 06:04
This is how to search a part of a val in an array :

<?php
      function array_ereg_search($val, $array) {
         
          $i = 0;
          $return = array();
         
          foreach($array as $v) {
             
               if(eregi($val, $v)) $return[] = $i;
               $i++;
              
          }
         
      return $return;
     
      }
?>
greenmr 06-Mar-2009 11:02
Incidentally, the KeyCompare() function I described above is a generalized
version. Since array_bsearch() doesn't care about specific return values, just
greater then, less than, or equal to zero, when you are comparing two numbers
you can greatly simplify the comparison function to something like:

<?php
  function KeyCompare( $obj, $needle ) {
      return $obj['my_key'] - $needle;
  }
?>
greenmr 06-Mar-2009 10:15
As others have noted, if your array is already sorted, a binary search is the
way to go. When I realized PHP doesn't have a native one, I came here to see
what others had done to implement this workhorse algorithm. While I appreciate
those that have posted their own solutions here, none of those implementations
met my needs. Also, due mainly to non-optimal loop processing, the code offered
required extra post-processing to handle various ways the search loop may have
exited. Proper coding of initial conditions and the main loop eliminates this
extra processing.

Also, the solutions presented assumed a simple one-dimensional array and basic
comparisons. I needed to search an array of user objects, with the comparison
performed on one of the object attributes. C/C++ handles the need for
comparison flexibility by the binary search function taking a parameter that
points to a user function that performs any arbitrarily complex comparison and
returns a defined result depending on the relative magnitudes of the compared
entities. Since PHP allows similar function reference parameters, I realised it
would be quite easy to implement this functionality.

I won't go into an explanation of the algorithm chosen for the main binary
search function, google "binary searches" if you don't understand how they
work. I will mention however that the ONLY way to exit the main loop in this
function is on a match, or a definite fail. The loop will never terminate while
the result of the search is indeterminate.

Some solutions I've seen here and elsewhere return the index of the found
element on a match, and "false" on a fail. Since PHP treats a zero the same as
false in expressions, and zero is a valid array index, using false to designate
"not found" gives an ambiguous result in some cases. I chose to use the value
-1 to signify a search failure instead.

<?php
    function array_bsearch( $needle, $haystack, $comparator ) {
        $high = Count( $haystack ) -1;
        $low = 0;
       
        while ( $high >= $low ){
            $probe = Floor( ( $high + $low ) / 2 );
            $comparison = $comparator( $haystack[$probe], $needle );
            if ( $comparison < 0 ) {
                $low = $probe +1;
            } elseif ( $comparison > 0 ) {
                $high = $probe -1;
            } else {
                return $probe;
            }
        }
     
      // ---The loop ended without a match
      return -1;
    }
?>

In this function the parameters "$needle" and "$haystack" have the same meaning
as for the native array_search() PHP function. The third parameter,
"$comparator" is the name of the function to use to determine if an array
element matches the needle.

The array_bsearch() function is self-contained, and doesn't need modification
no matter how complex the comparison needs to be. The actual comparison is
performed by a purpose-written user function that takes two parameters and
returns a numerical result. array_bsearch() will call this function each time
it needs to compare an array element to the needle. The first parameter passed
will be the element to test, and the second will the the needle value passed to
array_bsearch(). Note that if you will always search for the same thing your
user function can ignore the second parameter and hard-code the test on the
first parameter.

The comparison user function must return a positive number if the element is
greater than the needle, a negative number if it is smaller than the needle,
and zero if they match.

Given a scenario where you want to find the index of a user object loaded from
MySQL in an array, where the "my_key" property equals 54. Here's how you could
code it using a user function and the new array_bsearch() function.

<?php
  function KeyCompare( $obj, $needle ) {
      if ( $obj['my_key'] < $needle ) {
          return -1;
      } elseif ( $obj['my_key'] > $needle ) {
          return 1;
      } else {
          return 0;
      }
  }

  $index = array_bsearch( 54, $my_array, 'KeyCompare' );
?>

Hope this is helpful to somebody out there.
info at [hidden] dot apanel dot nl 04-Feb-2009 05:27
I made this function after I didnt find a recursive array_search function with
a limit and the possibility to inverse the search. So here is it:

<?php

function search_in_array ($needle, $haystack, $inverse = false, $limit = 1) {
   
    # Settings
    $path = array ();
    $count = 0;
   
    # Check if inverse
    if ($inverse == true)
        $haystack = array_reverse ($haystack, true);
       
    # Loop
    foreach ($haystack as $key => $value) {

        # Check for return
        if ($count > 0 && $count == $limit)   
            return $path;
       
        # Check for val
        if ($value === $needle) {
           
            # Add to path
            $path[] = $key;
           
            # Count
            $count++;
           
        } else if (is_array ($value)) {
           
            # Fetch subs
            $sub = search_in_array ($needle, $value, $inverse, $limit);
           
            # Check if there are subs
            if (count ($sub) > 0) {
               
                # Add to path
                $path[$key] = $sub;
               
                # Add to count
                $count += count ($sub);
            }
        }
    }
   
    return $path;
}

?>
helenadeus at gmail dot com 25-Jan-2009 01:05
I was trying to use array_search to retrieve all the values that match a given
needle, but it turns out only the first match key is returned. I built this
little function, which works just like array_search, but returns all the keys
that match a given needle instead. The output is an array.

<?php

$haystack = array('a','b','a','b');

$needle = 'a';

print_r(array_search_all($needle, $haystack));

//Output will be
// Array
// (
//         [0]=>1
//         [1]=>3
// )

function array_search_all($needle, $haystack)
{#array_search_match($needle, $haystack) returns all the keys of the values
that match $needle in $haystack

    foreach ($haystack as $k=>$v) {
   
        if($haystack[$k]==$needle){
       
           $array[] = $k;
        }
    }
    return ($array);

   
}

?>
tim_hauber at stev dot net 07-Jan-2009 08:50
A slight addition to array_search_recursive by Alireza Eliaderani below.  The
original searched the entire haystack, even if it found the needle at the
beginning of the haystack. I must admit I had a little trouble wrapping my head
around how to break out of a loop in a recursive function.  This version
returns after first occurrence of needle. changes commented.

<?php
function array_search_recursive($needle, $haystack){
    $path=array();
    foreach($haystack as $id => $val)
    {
 
         if($val === $needle) {
              $path[]=$id;
 
             break;
             # ^^this breaks out of loop when it finds needle

         } else if(is_array($val)){
             $found=array_search_recursive($needle, $val);
              if(count($found)>0){
                  $path[$id]=$found;
 
                 break;
                # ^^this breaks out of loop when recursive call found needle
 
             }     
          }
      }
      return $path;
}
?>
azaozz, gmail 20-Dec-2008 05:23
Expanding on the comment by hansen{}cointel.de:

When searching for a string and the array contains 0 (zero), the string is
casted to (int) by the type-casting which is always 0 (perhaps the opposite is
the proper behaviour, the array value 0 should have been casted to string).
That produces unexpected results if strict comparison is not used:

<?php
$a = array(0, "str1", "str2", "str3");
echo "
str1 = ".array_search("str1", $a).",
str2 = ".array_search("str2", $a).",
str3 = ".array_search("str3", $a).",

str1 strict = ".array_search("str1", $a, true).",
str2 strict = ".array_search("str2", $a, true).",
str3 strict = ".array_search("str3", $a, true);
?>

This will return:
str1 = 0, str2 = 0, str3 = 0, str1 strict = 1, str2 strict = 2, str3 strict = 3
grezvany13 [at] notitia.nl 11-Dec-2008 03:32
This function can search for an array or string within an array.

<?php
function array_search_array($needle, $haystack){
    if(is_array($needle) && is_array($haystack)) {
        $tmp = array_diff_assoc($needle, $haystack);
        if(empty($tmp)) return true;
        foreach($haystack as $value) {
            if(is_array($value)) {
                $tmp = array_diff_assoc($needle, $value);
                if(empty($tmp)) return true;
            }
        }
    }
    if(is_array($haystack) && !is_array($needle)) {
        foreach($haystack as $value) {
            if(is_array($value)) {
                $tmp = array_diff_assoc($needle, $value);
                if(empty($tmp)) return true;
            } elseif($needle == $value) return true;
        }
    } elseif($needle == $haystack) return true;
    return false;
}
?>

It's not recursive yet, so please improve it if you feel for it ;)
Alireza Eliaderani 25-Nov-2008 10:42
this function return a multidimensional path of recursively founded $needle in
a multidimensional $haystack

<?php
function array_search_recursive($needle, $haystack){
    $path=array();
    foreach($haystack as $id => $val)
    {
 
         if($val === $needle)
              $path[]=$id;
         else if(is_array($val)){
             $found=array_search_recursive($needle, $val);
              if(count($found)>0){
                  $path[$id]=$found;
              }      
          }
      }
      return $path;
}
?>
michi7x7 17-Nov-2008 11:32
If you exit the function whith "return", there is no need to break ;)

i would write it like this:

<?php

function array_search_recursive($needle, $haystack, $path=array())
{
    foreach($haystack as $id => $val)
    {
         $path2=$path;
         $path2[] = $id;
 
         if($val === $needle)
              return $path2;
         else if(is_array($val))
              if($ret = array_search_recursive($needle, $val, $path2))
                   return $ret;
      }
      return false;
}
 
$array = array(
   "a" => array(
       "b" => array("c"),
       "d" => array("e"),
       ),
    "f" => array( "g", "h"),
    );
 
var_dump(array_search_recursive("e", $array));

?>

var dump prints a array: (a, d, 0)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 02:39
I wrote a better array_search_recursive function.  The other functions listed
work and will evaluate to true, however, they loop through the stack even after
the needle is found: so this function will take the overhead off the cpu =P

<?php

  function array_search_recursive($needle, $haystack)
  {    
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return true;
          break;
        }
    }
  }

  $access['admin'] = array('nick1');
  $access['voice'] = array('nick2', 'nick3');

  if (array_search_recursive('nick3', $access))
    echo 'yes';
  print_r($access);

?>

I wrote this for an access list that I have implemented into an IRC bot.  See
more interesting stuff at dreamevilconcept's forum.
dcez at land dot ru 30-Apr-2008 01:15
Simple way to get variable name by using array_search function:

<?php

function varname($var){

    return (isset($var))? array_search($var, $GLOBALS) : false;

}

$boogie = 'tonight';

echo varname($boogie);

?>
andreas dot damm at maxmachine dot de 03-Apr-2008 04:07
Combining syntax of array_search() and functionality of array_keys() to get all
key=>value associations of an array with the given search-value:
<?php
function array_search_values( $m_needle, $a_haystack, $b_strict = false){
    return array_intersect_key( $a_haystack, array_flip( array_keys(
$a_haystack, $m_needle, $b_strict)));
}
?>

Usage:
<?php
$array1 = array( 'pre'=>'2', 1, 2, 3, '1', '2', '3', 'post'=>2);
print_r( array_search_values( '2', $array1));
print_r( array_search_values( '2', $array1, true));
print_r( array_search_values( 2, $array1, true));
?>

Will return:
array(4) {
    ["pre"] =>
    string(1) "2"
    [1] =>
    int(2)
    [4] =>
    string(1) "2"
    ["post"] =>
    int(2)
}
array(2) {
    ["pre"] =>
    string(1) "2"
    [4] =>
    string(1) "2"
}
array(2) {
    [1] =>
    int(2)
    ["post"] =>
    int(2)
}
dot dot dot dot dot alexander at gmail dot com 09-Mar-2008 08:30
This is the phpfied version of the array_search function for PHP version under
4.0.5

<?php
if(!function_exists("array_search")){
    function array_search( $needle, $haystack, $strict = FALSE ){
        if( !is_array($haystack) )return FALSE;
        foreach($haystack as $key => $val){
            if(   (  ( $strict ) && ( $needle === $val )  ) || (  ( !$strict )
&& ( $needle == $val )  )   )return $key;
        }
        return FALSE;
    }/* endfunction array_search */
}/* endfunction exists array_search*/
?>
mjaning at gmail dot com 05-Feb-2008 11:42
Hi! Based on Chris function, I made another to simplify code and improve
diferents features...

With this function you can:
- Filter Key and Values recursively
- Call function many times using previows result
- Final result always will be an array numeric index contenting a value or
sigle array key=>value.

Thanks for PHP!

<?php
function array_search_recursive($needle, $haystack, $nodes=array())
{     
  foreach ($haystack as $key1=>$value1)
  {
    if (is_array($value1))
      $nodes = array_search_recursive($needle, $value1, $nodes);
   elseif (($key1 == $needle) or ($value1 == $needle))
      $nodes[] = array($key1=>$value1);
  }
  return $nodes;
}
   
$arg[] = array("column1"=>"Class3");
$arg[] = array("column2"=>"Class1");
$arg[] = array("column3"=>"Class3");
$arg[] = array("column4"=>"Class4");
$arg[] = array("column4"=>"Class3");
$arg[] = "column3";
   
$filter = array_search_recursive("Class3",$arg);
echo "<hr>";var_dump($filter);
   
$filter = array_search_recursive("column3",$filter);
echo "<hr>";var_dump($filter);
?>
pmmout at gmail dot com 29-Jan-2008 04:55
MultiArray find function.
After some time unsuccessful looking for algorithm to find a string in
multidimensional array I wrote one:

<?php
function multidimArrayLocate($array, $text){
  foreach($array as $key => $arrayValue){
    if (is_array($arrayValue)){
      if ($key == $text) $arrayResult[$key] = $arrayValue;
      $temp[$key] = multidimArrayLocate($arrayValue, $text);
      if ($temp[$key]) $arrayResult[$key] = $temp[$key];
    }
    else{
      if ($key == $text) $arrayResult[$key] = $arrayValue;
    }
  }
  return $arrayResult;
}
?>
steev at anticulture dot co dot uk 13-Jan-2008 02:46
Just adding my two penneth to someone else's script from below. If you need to
easily index your csv use this slightly modified script to parse a csv file
into an associative array 2d, indexed by the first column value

<?php
function buildStock($File) {
        $handle = fopen($File, "r");
        $fields = fgetcsv($handle, 1000, ",");

        while($data = fgetcsv($handle, 1000, ",")) {
            $detail[] = $data;
        }
        echo "details";
        var_dump($detail);
        echo "<br />";

        $x = 0;
        $y = 0;

        foreach($detail as $i) {
            foreach($fields as $z) {
                //original code
                //$stock[$x][$z] = $i[$y];
                $stock[$i['0']][$z] = $i[$y];
                $y++;
            }
            $y = 0;
            $x++;
        }
        return $stock;
    }

var_dump(buildStock("conf.csv"));
?>
toni dot garcia dot gutsens at gmail dot com 02-Dec-2007 05:35
Make a recursive search on array and return the matches elements in the same
structure than the original array and unset empty arrays:

<?php
function array_search_recursive($needle, $haystack,&$tree=Array(),$index=""){
        if (is_array($haystack)){
            if (count($tree)==0) $tree=array_merge(Array(),$haystack);
            foreach($haystack as $k=>$current){
                if (is_array($current)){
                    array_search_recursive($needle,$current,$tree,$index."[$k]
");
                    eval("\$a=\$tree{$index}[{$k}];"); // unset all elements =
empty array
                    if (count($a)==0)  //is empty?
                        eval("unset(\$tree{$index}[$k]);"); // unset array
                }
                else{
                    if ($current!=$needle){
                        eval("unset(\$tree{$index}[{$k}]);");
                    }
                }
            }
        }
        return $tree;
    }
?>
chris 20-Nov-2007 07:11
<?php

/*Another recursive array_search that works better for me
* Returns all the keys to all the needles found
*and put them in an array.
*/

function array_search_recursive($needle, $haystack, $a=0, $nodes_temp=array()){
global $nodes_found;
  $a++;
  foreach ($haystack as $key1=>$value1) {
    $nodes_temp[$a] = $key1;
    if (is_array($value1)){    
      array_search_recursive($needle, $value1, $a, $nodes_temp);
    }
    else if ($value1 === $needle){
      $nodes_found[] = $nodes_temp;
    }
  } 
  return $nodes_found;
}
?>
kermes [at] thesevens [dot] net 11-Sep-2007 03:09
A variation of previous searches that returns an array of keys that match the
given value:

<?php
function array_ksearch($array, $str)
{
    $result = array();
    for($i = 0; $i < count($array); next($array), $i++)
        if(strtolower(current($array)) == strtolower($str))
            array_push($result, key($array);
   
    return $result;
}
?>

Usage would be as follows:
<?php
$testArray = array('one' => 'test1', 'two' => 'test2', 'three' => 'test1',
'four' => 'test2', 'five' => 'test1');
    print_r(array_ksearch($testArray, 'test1'));
?>
robertark at gmail dot com 01-Sep-2007 11:20
A better array_isearch would be to store all results in an array, then return
the KEYS stored in $found, such as:

<?php
function array_isearch($str, $array){
  $found = array();
  foreach ($array as $k => $v)
      if (strtolower($v) == strtolower($str)) $found[] = $k;
  return $found;
}
?>

To use, simply have an array to search from then search it, for example:

<?php

function array_isearch($str, $array) {
  $found = array();
  foreach($array as $k => $v)
    if(strtolower($v) == strtolower($str)) $found[] = $k;
  return $found;
}

$stored = "these are an array";
$stored = explode(" ", $stored);

$compare = array("these", "are", "some", "results", "stored", "in", "an",
"array");
foreach($stored as $store) {
  $results = array_isearch($store, $compare);
  foreach($results as $key => $result)
    echo "Key: ".$results[$key]."<br />Found: ".$compare[$result]."<br />";
}

?>

Hope this helps :-)

-Rob
php5 site builder 23-May-2007 10:14
If you encounter a situation where condition test is failing on the result of
either array_search or in_array, even when using "===" and "!==", make sure to
set $strict = true in your array_search() or in_array() function call.

A situation such as :

$arTemp[0] = 1;
$arTemp[1] = 0;
$arTemp[2] = 3;
$arTemp[3] = 5;
$sTempTest = 'BLAH';

$bResult = in_array($sTempTest,$arTemp);
$bResult2 = array_search($sTempTest,$arTemp);

var_dump($bResult);
var_dump($bResult2);

will result in :

boolean true
int 1

Using :

$bResult = in_array($sTempTest,$arTemp,true);
$bResult2 = array_search($sTempTest,$arTemp,true);

will yield :
boolean false
boolean false

This is necessary in any instance where you have an array value equal to the
integer zero.  As soon as you put the zero in quotes or double quotes (a
string), the evaluation works with in_array & array_search without the $strict
parameter being set.
elvenone at gmail dot com 27-Jan-2007 05:10
<?php
                // Search an array in reverse order.
        function array_reverse_search($value, $array) {
             for($i = sizeof($array)-1; $i>=0; $i--) {
                if ($array[$i] == $value) return $i;
             }
            return -1;    
        }
?>
francois at tekwire dot net 18-Jan-2007 02:34
Please note that, in PHP5, if you search for an object in an array using the
array_search() function, PHP will return the first object whose properties
match, not the same class and instance as your needle. In other words, the
object comparison is of type '==', not '===' (see the 'Comparing objects'
page).
erick dot xavier at gmail dot com 04-Jan-2007 04:57
Modifing the "multiarray_search" to unordered Array....
<?PHP
function multiarray_search($arrayVet, $campo, $valor){
    while(isset($arrayVet[key($arrayVet)])){
        if($arrayVet[key($arrayVet)][$campo] == $valor){
            return key($arrayVet);
        }
        next($arrayVet);
    }
    return -1;
}

//I.e.:

$myArr = array(
    13 => array(
        "fruit" => "banana"
    ),
    654 => array(
        "fruit" => "apple"
    ),
    2445 => array(
        "fruit" => "nothing more"
    )
);

print(multiarray_search($myArr , "fruit", "apple"));

/*
Output:
654
*/

//and

print(multiarray_search($myArr , "fruit", "orange"));

/*
Output:
-1
*/
?>
otto at twbc dot net 13-Dec-2006 11:06
Unlimited depth array regular expression search, I found it useful, perhaps
someone else will too. Searches on the array values only. Key search could be
easily added.

<?php
function Array_Search_Preg( $find, $in_array, $keys_found=Array() )
{
    if( is_array( $in_array ) )
    {
        foreach( $in_array as $key=> $val )
        {
            if( is_array( $val ) ) $this->Array_Search_Preg( $find, $val,
$keys_found );
            else
            {
                if( preg_match( '/'. $find .'/', $val ) ) $keys_found[] = $key;
            }
        }
        return $keys_found;
    }
    return false;
}
?>
evert_18 at hotmail dot com 13-Nov-2006 06:18
This function can search in multidimensional arrays, no mather how
multidimensional the array is!

<?php
function array_search(&$array,$needle)
{
    foreach($array as $key => $value)
    {
        if($value == $needle || $key == $needle)
            return(true);
        else
            if(is_array($value))
                $this->search($value,$needle);
            else
                return(false);
    }
}
?>
dmitry dot polushkin at gmail dot com 21-Oct-2006 10:03
To get the key of the found search value, use:
<?php
$a = array('a', 'b', 'c');
echo array_search(array_search('c', $a), array_keys($a));
?>
jupiter at nospam dot com 29-Sep-2006 02:25
Checks that array value STARTS with the string(needle), while other functions
require an exact match OR the needle can be anywhere within.  This function can
be manipulated to END with the needle if needed
<?php
// returns first key of haystackarray which array valuestring starts with
needlestring, is case-sensitive
function arrayHaystackStartsWithNeedleString($haystackarray, $needlestring) {
    if (is_array($haystackarray)) {  // confirms array
        $needlelength = strlen($needlestring);  // length of string needle
        foreach ($haystackarray as $arraykey => $arrayvalue) {  // gets array
value
            $arraypart = substr($arrayvalue, 0, $needlelength);  // first
characters of array value
            if ($needlestring == $arraypart) {  // did we find a match
                return $arraykey;  // return will stop loop
            }  // end match conditional
        }  // end loop
    }  // end array check
    return false;  // no matches found if this far
}
?>
I haven't speed tested this, but it should be pretty quick.
Digitally Designed dot co dot uk 28-Sep-2006 02:48
My Function to search a Multidimensional array.

Pass in :

$theNeedle as what you want to find.
$theHaystack as the array
$keyToSearch as what key in the array you want to find the value in.

<?php   

function myMulti_Array_Search($theNeedle, $theHaystack, $keyToSearch)
        {
        foreach($theHaystack as $theKey => $theValue)
            {
            $intCurrentKey = $theKey;   
               
            if($theValue[$keyToSearch] == $theNeedle)
                {
   
                return $intCurrentKey ;
                }
            else
                {
                return 0;
                }
            }
        }

?>
lars-magne 22-Sep-2006 05:19
Further comments on the multidimensional array searches given earlier:

I needed an extended search function which could search in both keys and values
in any # dimension array and return all results. Each result contains key/value
hit, type (key or value), key path and value (in case result is a key).

<?php

function array_search_ext($arr, $search, $exact = true, $trav_keys = null)
{
  if(!is_array($arr) || !$search || ($trav_keys && !is_array($trav_keys)))
return false;
  $res_arr = array();
  foreach($arr as $key => $val)
  {
    $used_keys = $trav_keys ? array_merge($trav_keys, array($key)) : array
($key);
    if(($key === $search) || (!$exact && (strpos(strtolower($key), strtolower
($search)) !== false))) $res_arr[] = array('type' => "key", 'hit' => $key,
'keys' => $used_keys, 'val' => $val);
    if(is_array($val) && ($children_res = array_search_ext($val, $search,
$exact, $used_keys))) $res_arr = array_merge($res_arr, $children_res);
    else if(($val === $search) || (!$exact && (strpos(strtolower($val),
strtolower($search)) !== false))) $res_arr[] = array('type' => "val", 'hit' =>
$val, 'keys' => $used_keys, 'val' => $val);
  }
  return $res_arr ? $res_arr : false;
}

// I.e.:
$haystack[754] = "Norwegian";
$haystack[28]['details']['Norway'] = "Oslo";
$needle = "Norw";

if($results = array_search_ext($haystack, $needle, false))
  foreach($results as $res)
    echo "Found '$needle' in $res[type] '$res[hit]', using key(s) '".implode
("', '", $res['keys'])."'. (Value: $res[val])<br />\n";

/* Printed result will be:
Found 'Norw' in val 'Norwegian', using key(s) '754'. (Value: Norwegian)
Found 'Norw' in key 'Norway', using key(s) '28', 'details', 'Norway'. (Value:
Oslo)
*/

?>
mark dot php at mhudson dot net 11-Sep-2006 05:49
I was going to complain bitterly about array_search() using zero-based indexes,
but then I realized I should be using in_array() instead.

// if ( isset( $_GET['table'] ) and array_search( $_GET['table'],
$valid_tables) ) {  // BAD: fails on first[0] element
// if ( isset( $_GET['table'] ) and ( FALSE !== array_search( $_GET['table'],
$valid_tables) ) ) { OK: but wasteful and convoluted
   if ( isset( $_GET['table'] ) and in_array( $_GET['table'], $valid_tables) )
{ // BETTER

The essence is this: if you really want to know the location of an element in
an array, then use array_search, else if you only want to know whether that
element exists, then use in_array()
ob at babcom dot biz 28-Aug-2006 02:55
This function is based on the function in comment "array_search" from July 26th
2006.

I added the possibility of defining the key which $Needle shall be searched
for.

<?php
// search haystack for needle and return an array of the key path,
// FALSE otherwise.
// if NeedleKey is given, return only for this key
// mixed ArraySearchRecursive(mixed Needle,array Haystack
//                            [,NeedleKey[,bool Strict[,array Path]]])

function ArraySearchRecursive($Needle,$Haystack,$NeedleKey="",
                              $Strict=false,$Path=array()) {
  if(!is_array($Haystack))
    return false;
  foreach($Haystack as $Key => $Val) {
    if(is_array($Val)&&
       $SubPath=ArraySearchRecursive($Needle,$Val,$NeedleKey,
                                     $Strict,$Path)) {
      $Path=array_merge($Path,Array($Key),$SubPath);
      return $Path;
    }
    elseif((!$Strict&&$Val==$Needle&&
            $Key==(strlen($NeedleKey)>0?$NeedleKey:$Key))||
            ($Strict&&$Val===$Needle&&
             $Key==(strlen($NeedleKey)>0?$NeedleKey:$Key))) {
      $Path[]=$Key;
      return $Path;
    }
  }
  return false;
}
?>

Remove unnecessary new lines. I had to add them because of too long lines.
26-Jul-2006 07:19
<?php
/**
 * Searches haystack for needle and returns an array of the key path if it is
found in the (multidimensional) array, FALSE otherwise.
 *
 * mixed array_searchRecursive ( mixed needle, array haystack [, bool strict[,
array path]] )
 */

function array_searchRecursive( $needle, $haystack, $strict=false, $path=array
() )
{
    if( !is_array($haystack) ) {
        return false;
    }

    foreach( $haystack as $key => $val ) {
        if( is_array($val) && $subPath = array_searchRecursive($needle, $val,
$strict, $path) ) {
            $path = array_merge($path, array($key), $subPath);
            return $path;
        } elseif( (!$strict && $val == $needle) || ($strict && $val ===
$needle) ) {
            $path[] = $key;
            return $path;
        }
    }
    return false;
}
?>
gullevek at gullevek dot org 18-Apr-2006 10:31
There were two previous entries for having a recursive search. The first one
only searched for values, second one for values with an optional key.

But both of those stopped after they found an entry. I needed, that it searches
recursive, with optional key and returns me all matches found in the array.

So I wrote this function:

needle is the value you search, haystack is the array of course, key is the
optional key in the array where the needle should be. path should be never set
on intial call. its an internal used variable.

It returns an array $path with the array entry 'found' where you can find all
found groups. In these groups you have the array which holds the keys to find
the data.

I hope this helps some of you.

<?php
    function array_search_recursive_all($needle, $haystack, $key, $path = NULL)
    {
        if (!$path['level'])
            $path['level'] = 0;
        if (!$path['work'])
            $path['work'] = array();
        if (!is_array($haystack))
            $haystack = array();

        // go through the array,
        foreach ($haystack as $_key => $_value)
        {
            // only value matches
            if (is_scalar($_value) && $_value == $needle && !$key)
            {
                $path['work'][$path['level']] = $_key;
                $path['found'][] = $path['work'];
            }
            // key and value matches
            elseif (is_scalar($_value) && $_value == $needle && $_key == $key)
            {
                $path['work'][$path['level']] = $_key;
                $path['found'][] = $path['work'];
            }
            elseif (is_array($_value))
            {
                // add position to working
                $path['work'][$path['level']] = $_key;
                // we will up a level
                $path['level'] += 1;
                // call recursive
                $path = array_search_recursive_all($needle, $_value, $key,
$path);
            }
        }
        // cut all that is >= level
        array_splice($path['work'], $path['level']);
        // step back a level
        $path['level'] -= 1;
        return $path;
    }
?>

If you call it with this:

<?php
    $right_side = array ('foo' => 'alpha', 'bar' => 'beta', 'delta' => 'gamma',
'gamma' => 'delta');
    $value = 'beta';
    $key = 'bar';
    $pos = array_search_recursive_all($value, $right_side, $key);
?>

You will find in $pos this data

Array
(
    [level] => -1
    [work] => Array
        (
        )

    [found] => Array
        (
            [0] => Array
                (
                    [0] => bar
                )

        )

)
RichGC 20-Mar-2006 05:54
To expand on previous comments, here are some examples of
where using array_search within an IF statement can go
wrong when you want to use the array key thats returned.

Take the following two arrays you wish to search:

<?php
$fruit_array = array("apple", "pear", "orange");
$fruit_array = array("a" => "apple", "b" => "pear", "c" => "orange");

if ($i = array_search("apple", $fruit_array))
//PROBLEM: the first array returns a key of 0 and IF treats it as FALSE

if (is_numeric($i = array_search("apple", $fruit_array)))
//PROBLEM: works on numeric keys of the first array but fails on the second

if ($i = is_numeric(array_search("apple", $fruit_array)))
//PROBLEM: using the above in the wrong order causes $i to always equal 1

if ($i = array_search("apple", $fruit_array) !== FALSE)
//PROBLEM: explicit with no extra brackets causes $i to always equal 1

if (($i = array_search("apple", $fruit_array)) !== FALSE)
//YES: works on both arrays returning their keys
?>
congaz at yahoo dot dk 09-Mar-2006 07:38
Search a multi-dimensional array on keys!
-------------------------------------------

I needed to search dynamically in a multi-dimen array on keys. I came up with
this little neat function. It is so amazingly simple, that I actually didn't
think it would work - but it does...

mixed array_searchMultiOnKeys(array, array);

<?php
function array_searchMultiOnKeys($multiArray, $searchKeysArray) {
    // Iterate through searchKeys, making $multiArray smaller and smaller.
    foreach ($searchKeysArray as $keySearch) {
        $multiArray = $multiArray[$keySearch];
        $result = $multiArray;
    }
   
    // Check $result.
    if (is_array($multiArray)) {
        // An array was found at the end of the search. Return true.
        $result = true;
    }
    else if ($result == '') {
        // There was nothing found at the end of the search. Return false.
        $result = false;
    }

    return $result;
// End of function,
}

// --- Test array_searchMultiOnKeys ---
$multiArray['webpages']['downloads']['music'] = 1;
$multiArray['webpages']['downloads']['pressmaterial'] = 5;
$multiArray['webpages']['links'] = 7;

array_searchMultiOnKeys($multiArray, array('webpages', 'links')); // returns 7.
array_searchMultiOnKeys($multiArray, array('webpages', 'downloads')); //
returns true.
array_searchMultiOnKeys($multiArray, array('webpages', 'downloads',
'software')); // returns false.

?>

$multiArray / $searchKeysArray can be any size.

Happy hacking...
chappy at citromail dot hu 11-Feb-2006 12:26
If you're searching for strings and you need a case-insensetive script, there's
one:

<?php
function array_lsearch($str,$array){
    $found=array();
    foreach($array as $k=>$v){
        if(strtolower($v)==strtolower($str)){
            $found[]=$v;
        }
    }
    $f=count($found);
    if($f===0)return false;elseif($f===1)return $found[0];else return $found;
}
?>

It returns the original string, not the lower. Also good if use strtoupper().
hansen{ }cointel.de 08-Feb-2006 06:26
may be good to take note of PHP's mind-boggling 'fuzzy' (vulgo "magic
type-casting") comparison features not only in using the results, but also in
the search, too:
<?php
$a=array("a","b",0,"c","d");
echo "a: ".array_search("a",$a);
echo "b: ".array_search("b",$a);
echo "c: ".array_search("c",$a);
echo "d: ".array_search("d",$a);
echo "0: ".array_search("0",$a);
echo "x: ".array_search("x",$a);
echo "1: ".array_search("1",$a);
?>
will result in:
a: 0, b: 1, c: 2, d: 2, 0: 2, x: 2, 1: false

as from "c" on, the first match found in $a is "0", as any string compared to
an int is automatically cast to (int)0.
ludwig_von_rocht at yahoo dot com 23-Nov-2005 03:50
Here's a little function I wrote to find the key of the LAST occurrance of
something in an array.

<?php
if(!function_exists('array_rsearch')){
    function array_rsearch($search, $array, $strict = false){
        $array = array_reverse($array, true);
        foreach($array as $key => $value){
            if($strict){
                if($value === $search)
                    return $key;
            } else {
                if(strpos($value, $search))
                    return $key;
            }
        }
        return false;
    }
}
?>
mark meves 22-Nov-2005 03:13
A quick-and-dirty array_search_all() that i used for a small
dup-checking routine. 

there are many, many ways to do something like this, not
the worst of which would be to use a relational database
for a dataset any larger than this ;)

-mark meves

<?php
/**
@return array of zero or more keys form $aHaystack whose
    values match $mScalarNeedle using a
    '==', (ie not strict) comparison
*/
function array_search_all($mScalarNeedle,$aHaystack){
    return array_keys( array_filter($aHaystack,
        create_function('$v','return $v == \''.addslashes($mScalarNeedle).'\';
')
    ));
}

/*
test it:
*/
$aNicknames = array('jimmy'=>1,'james'=>1,'jim'=>1,
                    'billy'=>2,'william'=>2,'bill'=>2);
foreach(array('jim','bill') as $sName){
    echo "variations for \"$sName\" :(".
        implode(', ', array_search_all($aNicknames[$sName],$aNicknames)).
    ")\n";
}
/* outputs:
variations for "jim" are (jimmy, james, jim)
variations for "bill" are (billy, william, bill)
*/
?>
pornsak at neowin dot net 21-Nov-2004 07:28
This is a modified version of Mark Meves's wonderful function. I needed
something that would be able to let me force search the key name where the
needle should be found.

<?php
function array_search_recursive($needle, $haystack, $key_lookin="") {

$path = NULL;

    if (!empty($key_lookin) && array_key_exists($key_lookin, $haystack) &&
$needle === $haystack[$key_lookin]) {
    $path[] = $key_lookin;

    } else {

        foreach($haystack as $key => $val) {
            if (is_scalar($val) && $val === $needle && empty($key_lookin)) {
            $path[] = $key;
            break;
            }       

            elseif (is_array($val) && $path = array_search_recursive($needle,
$val, $key_lookin)) {
            array_unshift($path, $key);
            break;
            }
        }
    }

return $path;
}
?>
scripts at webfire dot org 03-Nov-2004 09:13
* Multi-Dimensional Array Search *
If you're searching for a function to search in Multi-Arrays,
this is probably usefull for you.
-------------------------------------------------------------

<?php
function multi_array_search($search_value, $the_array)
{
    if (is_array($the_array))
    {
        foreach ($the_array as $key => $value)
        {
            $result = multi_array_search($search_value, $value);
            if (is_array($result))
            {
                $return = $result;
                array_unshift($return, $key);
                return $return;
            }
            elseif ($result == true)
            {
                $return[] = $key;
                return $return;
            }
        }
        return false;
    }
    else
    {
        if ($search_value == $the_array)
        {
            return true;
        }
        else return false;
    }
}
?>

-------------------------------------------------------------
It will return an Array with the keys from the original array
where your search-string was found or false. e.g.:
-------------------------------------------------------------

<?php
$foo[1]['a']['xx'] = 'bar 1';
$foo[1]['b']['xx'] = 'bar 2';
$foo[2]['a']['bb'] = 'bar 3';
$foo[2]['a']['yy'] = 'bar 4';
$foo['info'][1] = 'bar 5';

$result = multi_array_search('bar 3', $foo);
print_r($result);
?>

-------------------------------------------------------------

Output:

Array
(
      [0] => 2
      [1] => a
      [2] => bb
)

-------------------------------------------------------------

I hope you like it ;)
greetz Udo
 
F lix Cloutier <felixcca at yahoo dot ca> 22-Oct-2004 05:01
There is no function to count the occurences of needle in haystack, so I made
my own one...

<?php
function array_match($needle, $haystack)
{
    if( !is_array($haystack) ) return false;
   
    $i = 0;
    while( (in_array( $needle, $haystack )) != FALSE )
    {
        $i++;
        $haystack[array_search($needle, $haystack)] = md5($needle);
        reset($haystack);
    }
   
    return $i;
}
?>

I know it's a bit crappy, but don't ask me too much, I'm still only 13... ;)
Wouter van Vliet <me at woutervanvliet dot nl> 19-Aug-2004 08:55
I was looking for a way to use a user defined function for array_search and
eventually came up writing my own. Which was remarkably simple :P. Let me share
this:

<?php
function array_usearch($cb, $ndl, $hs, $strict=false) {
    if (!is_array($hs)) user_error('Third argument to array_usearch is expected
to be an array, '.gettype($hs).' given', E_USER_ERROR);
    foreach($hs as $key=>$value) if (call_user_func_array($cb, Array($ndl,
$value, $key, $strict))) return $key;
};
?>

I'm not sure if I'm following correct conventions to specify the callback as
the first argument, but it seemed most logical to me to not interrupt the order
of the other four arguments (mixed needle, array haystack, boole strict).

[so far for my first post to the php notes]
andrey at php dot net 07-Aug-2004 04:56
array_search() has kind of hidden behaviour which comes from the way PHP
compares values of different types (PHP is a type-loose language) - so called
type juggling.
for example :
<?php
$a=array(0,0,5,0,0);
var_dump(array_search(true, $a));
?>
In the array there are only integers but we give a boolean value TRUE for be
the needle. The result is that array_search() returns the first non-negative
value in the haystack array. The same way if we pass FALSE it will return the
first value that compared with FALSE gives TRUE - for example NULL
<?php
$a=array(1,NULL,5,0,0);
var_dump(array_search(FALSE, $a));
?>
Returns:
int(1)  <-- the key of the NULL value
softexpert [at] libertysurf [dot] fr 03-May-2004 11:51
I use this for searching for a value in a bidimensional array .

<?php
function SearchBiDimArray(&$theArray, $dimNo, $searchValue, $returnIndex =
true){
    if(is_array($theArray)){
        $keys = array_keys($theArray[0]);
        $key = $keys[$dimNo];
        $elcount = count($theArray);

        for($i=0; $i < $elcount; $i++){
            if($theArray[$i][$key] === $searchValue){
                if ($returnIndex){
                    return $i;
                }
                else{
                    return $theArray[$i];
                }
            }
        }

    }
    else{
        return array_search($searchValue, $theArray);
    }
}

$theArray = array();
$theArray[0]['firstproperty'] = 'avalue1';
$theArray[0]['secondproperty'] = 'anothervalue1';

$theArray[1]['firstproperty'] = 'avalue2';
$theArray[1]['secondproperty'] = 'anothervalue2';

$theArray[2]['firstproperty'] = 'avalue3';
$theArray[2]['secondproperty'] = 'anothervalue3';

print SearchBiDimArray($theArray, 1, 'anothervalue2', true);
// result is 1

print SearchBiDimArray($theArray, 1, 'anothervalue2', true);
// result is
//Array
//(
//    [firstproperty] => avalue2
//    [secondproperty] => anothervalue2
//)

?>
dcsoboda at oakland dot edu 28-Jan-2004 01:13
I've noticed problems with array_search() when it's handling extremely large
arrays.

In one example, I had a 2000 slot array with a 128 char string in each slot,
and was searching for a 128 char string within the array.

It regularly returned the wrong key. I even had it print the search string,
along with the found key in the array, as a  test, and it would print obvious
different strings.

The problem was alleviated when I ran gzcompress() on each array slot (and on
my search string, obviously). In this case, no strings were longer than 67
bytes. It performed far faster and had no accuracy problems.
dennis dot decoene at removthis dot moveit dot be 17-Jan-2004 10:41
It has been said before: array_search is VERY slow. Everyone knows binary
search is fast by design. Here is an implementation.

<?php
$arr=array(1,3,5,7,9,10,11,13);
$searchfor = 6;
echo binsearch($searchfor, $arr);

/**
 * @return integer
 * @param var $needle
 * @param array $haystack
 * @desc Feed a sorted array to $haystack and a value to search for to $needle.
             It will return false if not found or the index where it was found.
             This function is superfast. Try an array with 50.000 elements and
search for something,
             you will be amazed.
*/
function binsearch($needle, $haystack)
{
    $high = count($haystack);
    $low = 0;
   
    while ($high - $low > 1){
        $probe = ($high + $low) / 2;
        if ($haystack[$probe] < $needle){
            $low = $probe;
        }else{
            $high = $probe;
        }
    }

    if ($high == count($haystack) || $haystack[$high] != $needle) {
        return false;
    }else {
        return $high;
    }
}
?>
jwhite at ytztech dot com 18-Nov-2003 06:59
Searching arrays is a very slow process.  I've tried to use as many strings as
I can for where an array is called, if possible. Here's a quick test to show
the (eye-popping) difference between searching for a match between strings and
arrays:

<?php

  $test_string = '';
  for ($i=1; $i <= 500000; $i++) {
    $test_string .= '['.$i.']';
  }

  $test_array = array();
  for ($i=1; $i <= 5000; $i++) {
    $test_array[] = $i;
  }

  $time_str = getmicrotime();
  for ($i=1; $i <= 500000; $i++) {
    strstr($i,$test_string);
  }
  $time_str = getmicrotime() - $time_str;

  $time_array = getmicrotime();
  for ($i=1; $i <= 5000; $i++) {
    array_search($i,$test_array);
  }
  $time_array = getmicrotime() - $time_array;

  echo "<H1>Test Results</H1>\r\n";
  echo "<P>String Test:&nbsp; $time_str seconds.</P>\r\n";
  echo "<P>Array Test:&nbsp; $time_array seconds.</P>\r\n";

   function getmicrotime(){
     list($usec, $sec) = explode(" ",microtime());
     return ((float)$usec + (float)$sec);
   }

?>

This code block takes some time to get going (because of the number of strings
to place into memory), the results, even on modest hardware are staggering. 
Comparing 500000 strstr() operations to 5000 array_search() operations on a
P3-800 with 512 MB of RAM got the following output:

[H1]Test Results[/H1]
[P]String Test: 3.09137701988 seconds.[/P]
[P]Array Test:  4.23609495163 seconds.[/P]

The getmicrotime() function came from the note on microtime(), so that's not
mine...credit to "daniel141 at yahoo dot com".

STRINGS RULE!
--
Justin White
YTZ Technical Services, LLC
php at celerondude dot com 12-Nov-2003 03:07
I think array_search uses serial search because they binary search function i
wrote here seems to do a better job for records that are not always at the
beginning of the array.

Here it is

<?php
function binarySearch ( $a, $t, $l, $r )
{
    if($t<$a[$l]||$t>$a[$r])return NULL;
    while ( $l < $r )
    {
        $m=intval($l+$r)/2;
        if($a[$m]==$t)return $m;
        elseif($t<$a[$m])$r=$m-1;
        elseif($t>$a[$m])$l = $m + 1;
    }
    if($t==$a[$r])
    return $r;
    return NULL;
}
?>

usage:
binarySearch ( array, target, left range, right range );

if your array is a multidimensional array, simply change the comparison method.
:)
cue at openxbox dot com 09-Jun-2003 07:50
If you are using the result of array_search in a condition statement, make sure
you use the === operator instead of == to test whether or not it found a
match.  Otherwise, searching through an array with numeric indicies will result
in index 0 always getting evaluated as false/null.  This nuance cost me a lot
of time and sanity, so I hope this helps someone.  In case you don't know what
I'm talking about, here's an example:

<?php
$code = array("a", "b", "a", "c", "a", "b", "b"); // infamous abacabb mortal
kombat code :-P

// this is WRONG
while (($key = array_search("a", $code)) != NULL)
{
 // infinite loop, regardless of the unset
 unset($code[$key]);
}

// this is _RIGHT_
while (($key = array_search("a", $code)) !== NULL)
{
 // loop will terminate
 unset($code[$key]);
}
?>
richard at richard-sumilang dot com 16-Apr-2003 03:59
<?php
/**
     *    Search an array recursivly
     *
     *    This function will search an array recursivly
     *    till it finds what it is looking for. An array
     *    within an array within an array within array
     *    is all good :-)
     *
     *    @author        Richard Sumilang    <richard@richard-sumilang.com>
     *    @param        string    $needle        What are you searching for?
     *    @param        array    $haystack    What you want to search in
     *    @return        boolean
     *    @access        public
     */
    function array_search_r($needle, $haystack){
        foreach($haystack as $value){
            if(is_array($value))
                $match=array_search_r($needle, $value);
            if($value==$needle)
                $match=1;
            if($match)
                return 1;
        }
        return 0;
    }
?>
Darkvie 16-Mar-2003 04:53
I wanted to search a  multidimensional array for a value & assign another
element of array CONTAINING the searched value.

In the array I am using ($Projects), each item in $Projects contains a
"Text_ID" & "Text_Value" field from a database result. I want to search for a
"Text_ID" value (456 in this example)  & get it's "Text_Value" value assigned
to a variable called $Text_Value.

Here's how I did it:
============================================

<?PHP
//Array I am going to look in:
$Projects[0] = array(123, "Text 1");  
$Projects[1] = array(456, "Text 2");  
$Projects[2] = array(789, "Text 3");  

// This loop goes through every element in $Projects
foreach ($Projects as $key => $ArrayRow)
{   
// Now: $ArrayRow[0] = $Projects[x][0] and $ArrayRow[1] = $Projects[x][1]

// Look for the value "456".  Assign to variable & stop looking if found.
if ($ArrayRow[0] == "456")  {$Text_Value= $ArrayRow[1]; break; }
}
?>

============================================
Hope this helps someone.
-Darkive
retestro_REMOVE at SPAM_esperanto dot org dot il 28-Feb-2003 08:46
If you're interested in finding a line in a file, after you read it into an
array using file(), you can not use array_search since the match should be
exact, and lines have line-endings ('\n', '\r' or '\n\r') - or else you know
for sure what your lines contain physically.

The solution is to traverse the whole array, trim() each entry and then use
array_search() - or - use something like the following small function I wrote
for myself:

<?php
function search_array($needle, $haystack)
{
        if (!is_array($haystack) || !is_string($needle))
                return false;  // not valid argument types

        @reset($haystack);

        while (list ($key, $value) = each($haystack)) {
                $value = trim($value);  // remove spaces from the beginning and
the end
                if ($value === $needle)
                        return $key;  // $needle was found, return the key
        }

        return false;  // no $needle was found in $haystack
}
?>

-----------------------------
Notes:
1. you should check the return value with === since 0 as a key equals to
'false'.
    i.e. if (search_array('my_line', $my_array) === false)  { ... }
2. I have no need in whitespace at the beginning of the line, therefore I use
trim(). If it's important to you, use rtrim() or chop() instead.

-
- Sergey.
saltymeat at hotmail dot com 24-Jun-2002 02:03
Here's how you can use array_search() to replace all occurances of a value in
an array:

<?php
function array_replace($a, $tofind, $toreplace)
{
    $i = array_search($tofind, $a);
    if ($i === false)
    {
        return $a;
    }
    else
    {
        $a[$i] = $toreplace;
        return array_replace($a, $tofind, $toreplace);
    }
}
?>

Usage:
$a = array(1,2,3);
$a = array_replace($a, 1, 4);
echo $a[0]; // Outputs 4
dakota at dir dot bg 29-May-2002 04:44
For versions later than 4.2.0, the check  isset($key) won't work properly
because the function now returns false, which "isset". This change is missing
in the Change Log!

So the right way to use the function is:

<?php
$key = array_search($needle, $array);
if ($key!==null&&$key!==false) {
  ...
}
?>

This example will work in both older and newer to 4.2.0 versions.

P.S.: My previous post where isset() is used won't work in newer versions.
swbrown at ucsd dot edu 02-May-2002 01:18
Be absolutely sure to check that your code that uses array_search now checks
for 'false' too if you upgrade to PHP 4.2.0!

I was using array_search in my page authentication routines and this change had
the fun side-effect of causing my code to always think a user had full
permissions!  It was letting anyone click through to our installation of
phpMyAdmin.  Not good indeed!
saconner at iastate dot edu 04-Feb-2002 01:16
In PHP versions before 4.2.0 needle was not allowed to be an array.  (funnily
enough, at time of posting this note, we're still at ver 4.1.1 )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Apr 2 20:21:11 2012 UTC
Received cookie: COUNTRY=JPN%2C111.188.129.144
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )

needle で haystack を検索します。 strict が設定されていない限りは型の比較は行い
ません。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
    haystack の中の needle の型も確認します。

返り値

配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Mar 2012
 
add a note add a note User Contributed Notes in_array
dlancea 07-Mar-2012 04:24
FYI, the in_arrayr function below is incorrect. It will not continue past the
first rested array (and return false if not found). Corrected version is below:

<?php
function in_arrayr( $needle, $haystack ) {
    foreach( $haystack as $v ){
        if( $needle == $v )
            return true;
        elseif( is_array( $v ) )
            if( in_arrayr( $needle, $v ) )
                return true;
    }
    return false;
}
?>
whats happend? 01-Mar-2012 09:02
$user = array
(
    0 => 307,
    1 => 157,
    2 => 234,
    3 => 200,
    4 => 322,
    5 => 324
);
$node = array
(
    0 => 200,
    1 => 234
);
$node2 = array(200,234);

$a = in_array($user, $node);
$b = in_array($user, $node, true);

$c = in_array($node, $user);
$d = in_array($node, $user, true);

$e = in_array($node, $node2);
$f = in_array($node2, $node);
$g = in_array($node, $node2, true);
$h = in_array($node2, $node, true);

$i = in_array($node, $node);

output
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
bool(false)
janis dot janovskis at gmail dot com 28-Feb-2012 11:03
Since sometimes in_array returns strange results - see notes above.
I was able to find value in array by this quite a simple function;
<?php
/**
* $find <mixed> value to find
* $array<array> array to search in
*/

function _value_in_array($array, $find){
 $exists = FALSE;
 if(!is_array($array)){
   return;
}
foreach ($array as $key => $value) {
  if($find == $value){
       $exists = TRUE;
  }
}
  return $exists;
}

// Note
// You can't use wildcards and it does not check variable type
?>
rajeevroy15 at gmail dot com dot com 30-Nov-2011 04:51
is_array function checks only array only and giving incorrect result with
multi-dimensional arrays.

Here is a custom function which will give the solution to check Array or Object
and Checking of multi-dimensional arrays and objects as well.

<?php

function in_object($val, $obj){

    if($val == ""){
        trigger_error("in_object expects parameter 1 must not empty",
E_USER_WARNING);
        return false;
    }
    if(!is_object($obj)){
        $obj = (object)$obj;
    }

    foreach($obj as $key => $value){
        if(!is_object($value) && !is_array($value)){
            if($value == $val){
                return true;
            }
        }else{
            return in_object($val, $value);
        }
    }
    return false;
}
?>
Usage  :
<?php

$array = array("a", "b", "c"=>array("x", "y"=>array("p", "q"=>"r")));

if(in_object("r", $arrX)){
    echo "r is there ";
}else{
    echo "Its not there ";
}
?>
beingmrkenny at gmail dot com 27-Oct-2011 03:35
Loose checking returns some crazy, counter-intuitive results when used with
certain arrays. It is completely correct behaviour, due to PHP's leniency on
variable types, but in "real-life" is almost useless.

The solution is to use the strict checking option.

<?php

// Example array

$array = array(
    'egg' => true,
    'cheese' => false,
    'hair' => 765,
    'goblins' => null,
    'ogres' => 'no ogres allowed in this array'
);

// Loose checking -- return values are in comments

// First three make sense, last four do not

in_array(null, $array); // true
in_array(false, $array); // true
in_array(765, $array); // true
in_array(763, $array); // true
in_array('egg', $array); // true
in_array('hhh', $array); // true
in_array(array(), $array); // true

// Strict checking

in_array(null, $array, true); // true
in_array(false, $array, true); // true
in_array(765, $array, true); // true
in_array(763, $array, true); // false
in_array('egg', $array, true); // false
in_array('hhh', $array, true); // false
in_array(array(), $array, true); // false

?>
chris at axxis dot gr 26-Sep-2011 07:49
It's funny how PHP has an in_array method, but not an in_object one. Here is a
simple function which will check if a value can be found within an object.

<?php
  // in_object method
  // to check if a value in an object exists.
  function in_object($value,$object) {
    if (is_object($object)) {
      foreach($object as $key => $item) {
        if ($value==$item) return $key;
      }
    }
    return false;
  }
?>
 
This is very useful if an object has been created dynamically (especially from
external code, which you don't control, as in an application-plugin, CMS, etc),
and you don't know the object's properties.
The above function will return the property, so you will be able to use it in
your code later on.

Here is a very good basic example of how useful this function is!

<?php
  class My_Class {
    function __construct($key, $value) {
      $this->$key = $value;
      // As you can see, this is a dynamic class, its properties and values can
be unknown...
    }
  }

  function in_object($value,$object) {
    if (is_object($object)) {
      foreach($object as $key => $item) {
        if ($value==$item) return $key;
      }
    }
    return false;
  }
 
  function manipulate_property($value,$object) {
    if ($property = in_object($value,$object)) {
      // value found. I can now use this property.
      // I can simply echo'it (makes no sense, as I could instead simply echo
"value")
      echo "<br />I found the property holding this value: ".$object->
$property;
      // or (here comes the good part)
      // change the property
      $object->$property = "This is a changed value!";
      echo "<br />I changed the value to: ".$object->$property;
      // or return it for use in my program flow
      return $property;
    } else {
      echo "Value NOT FOUND!<br />";
      return false;
    }
  }
 
  // imagine if some function creates the class conditionally...
  if ( 1 == 1) {
    $class = new My_Class("property","Unchanged Value");
  } else {
    $class = new My_Class("property","Some Other Value");
  }
 
  // now let's check if the value we want exists, and if yes, let's have some
fun with it...
  $property = manipulate_property("Unchanged Value",$class);
  if ($property) {
    $my_variable = $class->$property;
    echo "<br />This is my variable now:".$my_variable;
  } else $my_variable = $some_other_variable;
?>

Just run it to see for yourself!
Lea Hayes 04-Aug-2011 05:40
Determine whether an object field matches needle.

Usage Example:
---------------

<?php
$arr = array( new stdClass(), new stdClass() );
$arr[0]->colour = 'red';
$arr[1]->colour = 'green';
$arr[1]->state  = 'enabled';

if (in_array_field('red', 'colour', $arr))
   echo 'Item exists with colour red.';
if (in_array_field('magenta', 'colour', $arr))
   echo 'Item exists with colour magenta.';
if (in_array_field('enabled', 'state', $arr))
   echo 'Item exists with enabled state.';
?>

Output:
--------
Item exists with colour red.
Item exists with enabled state.

<?php
function in_array_field($needle, $needle_field, $haystack, $strict = false) {
    if ($strict) {
        foreach ($haystack as $item)
            if (isset($item->$needle_field) && $item->$needle_field ===
$needle)
                return true;
    }
    else {
        foreach ($haystack as $item)
            if (isset($item->$needle_field) && $item->$needle_field == $needle)
                return true;
    }
    return false;
}
?>
Ray dot Paseur at Gmail dot com 01-Aug-2011 09:20
Be VERY careful about testing for strings in arrays that might also contain
integers.  In this snippet, the range() function turns the numeric values into
integers, and loose data typing finds a match with zero.

Outputs:
PHP in_array() FOUND @#%?!!
@#%?!! == 0 AT POSITION 26 BECAUSE OF LOOSE TYPE

<?php // RAY_temp_in_array.php
error_reporting(E_ALL);
echo "<pre>";

// THE ALLOWABLE SELECTIONS
$alpha = range('A','Z');
$alpha = array_merge($alpha, range('0', '9'));

// LOOK FOR A BOGUS SELECTION
$str = '@#%?!!';
if (in_array($str, $alpha))
{
    echo "PHP in_array() FOUND $str ";
}
else
{
    echo "$str IS NOT IN ARRAY";
}

// SEARCH THE ARRAY FOR THE KEY OF THE STRING
$key = array_search($str, $alpha);
echo "<br/>$str == $alpha[$key] AT POSITION $key";

if ($str == 0) echo " BECAUSE OF LOOSE TYPE";
?>
Anonymous 18-Jun-2011 12:16
known issue
when checking a string vs a integer

$testarray = array(0,1,2,3,4);

in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false

"bla" as a integer value returns the number zero
"bla6" as a integer value returns the number zero
 "6bla" returns the number six as its the only vaild part of that

if you checking for unknown types eg string vs integer
then you would need the strict value to be true.
Sascha Luedi 28-Feb-2011 09:33
strange behaviour of in_array:

If you have an array like:
<?php
$a = array(0,1,2,3,4,5);
in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false
?>

If you have an array like (without 0):
<?php
$a = array(1,2,3,4,5);
in_array("bla", $a) returns false
in_array("6bla", $a) returns false
in_array("5bla", $a) returns true
?>

so better use strict arg!
Joris Meijer 15-Feb-2011 05:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 08:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 12:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 01:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 11:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
Willian Gustavo Veiga 16-Jun-2010 07:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 11:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 08:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 13-Feb-2010 04:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 02:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 03:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 12:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 04:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 12:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 04:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 10:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 11:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 02:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 05:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 04:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 01:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 07:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 01:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 29-Oct-2008 09:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 02:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 12:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 08:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 02:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 03:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 11:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 03:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 10:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 20-May-2007 08:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 10:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 05:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 08-Apr-2006 08:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 07:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 06:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
13-Jan-2006 09:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 01:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 07:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 05:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 07-Jan-2003 05:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 06:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 09-Aug-2002 07:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 03:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 08:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Apr 2 20:21:11 2012 UTC
Received cookie: COUNTRY=JPN%2C111.188.59.120
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • その他の基本モジュール
  • JSON
  • JSON 関数
  • json_ decode
  • json_ encode
  • json_ last_ error

json_encode> <JSON 関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012

view this page in

[English             ] Change language
json_decode

(PHP 5 >= 5.2.0, PECL json >= 1.2.0)

json_decode — JSON 文字列をデコードする

説明

mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [,
int $options = 0 ]]] )

JSON エンコードされた文字列を受け取り、それを PHP の変数に変換します。

パラメータ

json

    デコード対象となる json 文字列。

    この関数は UTF-8 でエンコードされたデータでのみ動作します。

assoc

    TRUE の場合は、返されるオブジェクトが連想配列形式になります。

depth

    ユーザー指定の再帰の深さ。

options

    JSON デコードオプションのビットマスク。現在サポートしているオプションは
    JSON_BIGINT_AS_STRING のみです (デフォルトでは、大きな整数値を float に変換
    します)。

返り値

json でエンコードされたデータを、適切な PHP の型として返します。 true、false お
よび null (大文字小文字を区別しません) はそれぞれ TRUE、FALSE そして NULL とし
て返されます。 json のデコードに失敗したりエンコードされたデータが再帰制限を超
えていたりした場合は NULL を返します。

例

例1 json_decode() の例

<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>

上の例の出力は以下となります。

object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

例2 無効なオブジェクトプロパティへのアクセス

Accessing elements within an object that contain characters not permitted under
PHP's naming convention (e.g. the hyphen) can be accomplished by encapsulating
the element name within braces and the apostrophe.

<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>

例3 json_decode() でのありがちな間違い

<?php

// 以下の文字列は JavaScript としては有効ですが JSON としては無効です

// 名前と値はダブルクォートで囲む必要があります。
// シングルクォートは使えません
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// 名前をダブルクォートで囲まなければなりません
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// 最後にカンマをつけてはいけません
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>

例4 depth エラー

<?php
// データをエンコードします
$json = json_encode(
    array(
        1 => array(
            'English' => array(
                'One',
                'January'
            ),
            'French' => array(
                'Une',
                'Janvier'
            )
        )
    )
);

// エラーを定義します
$constants = get_defined_constants(true);
$json_errors = array();
foreach ($constants["json"] as $name => $value) {
    if (!strncmp($name, "JSON_ERROR_", 11)) {
        $json_errors[$value] = $name;
    }
}

// さまざまな深さのエラーを表示します
foreach (range(4, 3, -1) as $depth) {
    var_dump(json_decode($json, true, $depth));
    echo 'Last error: ', $json_errors[json_last_error()], PHP_EOL, PHP_EOL;
}
?>

上の例の出力は以下となります。

array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Last error: JSON_ERROR_NONE

NULL
Last error: JSON_ERROR_DEPTH

例5 json_decode() で大きな整数値を扱う例

<?php
$json = '12345678901234567890';

var_dump(json_decode($json));
var_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));

?>

上の例の出力は以下となります。

float(1.2345678901235E+19)
string(20) "12345678901234567890"

注意

    注意:

    JSON の仕様は JavaScript そのものではなく、JavaScript のサブセットです。

    注意:

    デコードに失敗した場合は、json_last_error() を使用すればエラーの正確な状態
    を知ることができます。

変更履歴

バージョ                                  説明
   ン
5.4.0    options パラメータが追加されました。
5.3.0    オプションの depth が追加されました。デフォルトの再帰の深さが 128 から
         512 に増えました。
5.2.3    ネストの制限が 20 から 128 に拡張されました。
5.2.1    基本型の JSON デコードに対応しました。

参考

  • json_encode() - 値を JSON 形式にして返す
  • json_last_error() - 直近に発生したエラーを返す



json_encode> <JSON 関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012
 
add a note add a note User Contributed Notes json_decode
aeternuslibertas at gmail dot com 14-Mar-2012 06:46
/*since json_decode() decodes json, it MUST check if the argument passed in is
json, so logically one can assume that json_decode() also functions as a json
checker*/
//thus....
if(json_decode($input_json) == NULL)
{
    echo("not valid json!");
}else
{
$my_json_object = json_decode($input_json);
}
hallo at die-tilde dot de 01-Mar-2012 02:54
You and this function saved my day. Thank you!
juanloman at hilfetech dot com 07-Jan-2012 12:38
I found that even though json_decode() takes UTF-8 strings, it won't parse if a
Byte-Order-Mark (BOM) is present.

Also, if you allow your users to edit JSON files, you end up with a mix of
ASCII, ISO-8859-1, UTF-8 with and without BOM.

This function prepares a string for the JSON parser by converting it to UTF-8
and removing the BOM if present.

<?php
function prepareJSON($input) {
   
    //This will convert ASCII/ISO-8859-1 to UTF-8.
    //Be careful with the third parameter (encoding detect list), because
    //if set wrong, some input encodings will get garbled (including UTF-8!)
    $imput = mb_convert_encoding($input, 'UTF-8', 'ASCII,UTF-8,ISO-8859-1');
   
    //Remove UTF-8 BOM if present, json_decode() does not like it.
    if(substr($input, 0, 3) == pack("CCC", 0xEF, 0xBB, 0xBF)) $input = substr
($input, 3);
   
    return $input;
}

//Usage:
$myFile = file_get_contents('somefile.json');
$myDataArr = json_decode(prepareJSON($myFile), true);

?>
sjungwirth at gmail dot com 01-Dec-2011 04:45
My way to replace single quotes around values

<?php
$json = <<<STR
{"key":'val',"key's":'O\\'Brian\'s', "key\"quotes\"" :  'Jimmy "the rock"
Michael\'s'}
STR;
$json = preg_replace('/:\s*\'(([^\']|\\\\\')*)\'\s*([},])/e', "':'.json_encode
(stripslashes('$1')).'$3'", $json);
print_r(json_decode($json, TRUE));
/**
 * Array
 * (
 *     [key] => val
 *     [key's] => O'Brian's
 *     [key"quotes"] => Jimmy "the rock" Michael's
 * )
 */
?>
combine this with previous posters way to enclose keys in double quotes and you
have a loose json_decode function that can handle javascript object syntax:
{key:'', ...}
rajeevroy1525 at gmail dot com 15-Nov-2011 05:38
To test the a string, is json encoded or not. we can use the following function

<?php

function IsJsonString($str){
    try{
        $jObject = json_decode($str);
    }catch(Exception $e){
        return false;
    }
    return (is_object($jObject)) ? true : false;
}
?>

Usage  :

<?php

$jArray = array("vars"=>array("a"=>"1", "b"=>"2"));

$jString = json_encode($jArray);
        if (IsJsonString($jString))
        {           
        echo "Its Json";   
        }
        else{
        echo "It isn't Json";   
        }
?>
The above code will return "Its Json" and in case wrong json string it will
return "Its isn't Json".
alexvonweiss at googlemail dot com 23-Sep-2011 08:49
Consider that JSON can differ between int and string. So

<?php
var_dump(json_decode('{"foo": 12}'));
// array(1) { ["foo"]=> int(12) }

var_dump(json_decode('{"foo": "12"}'));
// array(1) { ["foo"]=> string(12) }
?>

Numbers that cannot be handled by integer seems to become float casted. This
can be a problem if you transfer big numbers like facebook ids over JSON.
Either you avoid numbers by cast everything to string before JSON.stringify or
you have to use number_format if the value bacome a float value.

<?php
// test
$x = json_decode('{"foo": 123456789012345}');
echo sprintf('%1$f', $x->foo).PHP_EOL;
echo sprintf('%1$u', $x->foo).PHP_EOL;
echo sprintf('%1$s', $x->foo).PHP_EOL;
echo strval($x->foo).PHP_EOL;
echo (string) $x->foo.PHP_EOL;
echo number_format($x->foo, 0, '', '').PHP_EOL;

// output
123456789012345.000000  // printf %f
2249056121              // printf %u
1.2345678901234E+14     // printf %s
1.2345678901234E+14     // strval()
1.2345678901234E+14     // cast (string)
2249056121              // cast (int)
123456789012345         // number_format()
?>
Dragos.U 05-Aug-2011 06:52
Hmm, using eval without proper escaping of the input value  .. will not get you
anything good ;)

Here is my JSON decode function, it does not decode to PHP object/array but
only to an array (can be easily changed anyway).

<?php
  function jsonDecode ($json)
  {
      $json = str_replace(array("\\\\", "\\\""), array("&#92;", "&#34;"),
$json);
      $parts = preg_split("@(\"[^\"]*\")|([\[\]\{\},:])|\s@is", $json, -1,
PREG_SPLIT_NO_EMPTY | PREG_SPLIT_DELIM_CAPTURE);
      foreach ($parts as $index => $part)
      {
          if (strlen($part) == 1)
          {
              switch ($part)
              {
                  case "[":
                  case "{":
                      $parts[$index] = "array(";
                      break;
                  case "]":
                  case "}":
                      $parts[$index] = ")";
                      break;
                  case ":":
                    $parts[$index] = "=>";
                    break;   
                  case ",":
                    break;
                  default:
                      return null;
              }
          }
          else
          {
              if ((substr($part, 0, 1) != "\"") || (substr($part, -1, 1) != "\
""))
              {
                  return null;
              }
          }
      }
      $json = str_replace(array("&#92;", "&#34;", "$"), array("\\\\", "\\\"", "
\\$"), implode("", $parts));
      return eval("return $json;");
  }
?>

How it works:

it searches for the "..." (that can be a key or a value) so we need to make
sure we do not take into account something like ...\"... that is not the end of
the key/value but escaped value for the doublequote. That's why we first
replace \\ (escaped backslash) and then we can look for a ...\"... and be sure
it's not a ...\\" (the end of the key/value).

Next we split the string into chunks, any  other characters outside of the
"..." only need to be []{},: (and spaces, but those we can throw away).

Next we do a little bit of checking on the data, be sure we have valid JSON and
replace some of the characters on the way (so we can 'eval' as PHP code later).

Then we replace back the initial changed characters and escape $ (!!!) because
we will use 'eval' with values of the array (keys and values) in double quotes.

(http://php.net/manual/en/language.types.string.php)

The function will return NULL for invalid JSON.

;)
evengard at trioptimum dot com 13-Apr-2011 08:58
There is a problem when passing to json_decode a string with the "\" symbol. It
seems to identify it as an escape character and trying to follow it. So
sometimes it leads to failed parsing.

It seems that just replacing it with "\\" helps.
<?php
print_r(json_decode(str_replace('\\', '\\\\', '{"name":"/\"}')));
?>
where /\ is the string which doesn't worked.
contacto at hardcode dot com dot ar 25-Nov-2010 01:53
If you have a json encoded array that contains non UTF8 chars, this function
will do the trick:

<?php
$array = json_decode(safeJSON_chars($iso_8859_1_data));

function safeJSON_chars($data) {

    $aux = str_split($data);

    foreach($aux as $a) {

        $a1 = urlencode($a);

        $aa = explode("%", $a1);

        foreach($aa as $v) {

            if($v!="") {

                if(hexdec($v)>127) {

                $data = str_replace($a,"&#".hexdec($v).";",$data);

                }

            }

        }

    }

    return $data;

}
?>

Of course it works if you want to show this inside a HTML page, so entities
will be converted.
Hope this helps you as much as it helped me.
Anonymous 03-Nov-2010 01:22
to deal with escaped dbl-quotes this is required:
if ($json[$i] == '"' && $json[($i-1)]!="\\")    $comment = !$comment;
revision is as follows:

<?php
if ( !function_exists('json_decode') ){
function json_decode($json)
{
    $comment = false;
    $out = '$x=';
 
    for ($i=0; $i<strlen($json); $i++)
    {
        if (!$comment)
        {
            if (($json[$i] == '{') || ($json[$i] == '['))       $out .= ' array
(';
            else if (($json[$i] == '}') || ($json[$i] == ']'))   $out .= ')';
            else if ($json[$i] == ':')    $out .= '=>';
            else                         $out .= $json[$i];         
        }
        else $out .= $json[$i];
        if ($json[$i] == '"' && $json[($i-1)]!="\\")    $comment = !$comment;
    }
    eval($out . ';');
    return $x;
}
}
?>
Jestep 08-Sep-2010 01:26
I had a JSON string with multiple commas in it without any quotes, which was
causing the json_decode to return false.

Once the double quotes were added, everything worked out fine.

A quick:

while(strpos($contents, ',,') !== false) {
    $contents = str_replace(',,', ',"",', $contents);
}

solved the problem, and the function worked correctly. If you have tried
everything and are still a FALSE return, I suggest trying the JSON validator in
another post.
T erkif 10-Aug-2010 03:03
it seems, that some of the people are not aware, that if you are using
json_decode to decode a string it HAS to be a propper json string:

<?php
var_dump(json_encode('Hello'));

var_dump(json_decode('Hello'));  // wrong
var_dump(json_decode("Hello")); // wrong
var_dump(json_decode('"Hello"')); // correct
var_dump(json_decode("'Hello'")); // wrong

result:

string(7) ""Hello""
NULL
NULL
string(5) "Hello"
NULL
zgardner at allofe dot com 19-Jul-2010 10:23
There seems to be a difference in the way json_decode works between 5.2.9 and
5.2.6. Trying to run json_decode on a URL in 5.2.6 will return the URL, but in
5.2.9 it will return NULL.

5.2.6
var_dump(json_decode("http://www.php.net")); // Displays string(18) "http://
www.php.net"

5.2.9
var_dump(json_decode("http://www.php.net")); // Displays NULL

The servers I tested it on both had json version 1.2.1.
steveo at crecon dot com 23-Jun-2010 11:11
I was getting an array like:
  Array
  (
      [COLUMNS] => Array
          (
              [0] => ID
              [1] => FIRST
              [2] => LAST
           )
      [DATA] => Array
          (
              [0] => Array
                    (
                          [0] => 10
                          [1] => Mary
                          [2] => Smith
                     )
               [1] => Array
                     (
                          [0] => 11
                          [1] => Joe
                          [2] => Black
                     )
               [2] => Array
                     (
                          [0] => 12
                          [1] => Tom
                          [2] => Green
                     )
               [3] => Array
       . . .

With lots more columns and data from a json_decode call to a Cold Fusion .cfc
which returned a database query. This is easy to turn into a nice associative
array with the following code:

<?php
  foreach ($results['DATA'] as $rowcount => $row){
     foreach ($row as $colcount => $col){
       $lines[$rowcount][$results['COLUMNS'][$colcount]]=$col;
     }
  }
?>

to get:
Array
(
  [0] => Array
       (
          [ID]      => 10
          [FIRST] => Mary
          [LAST]  => Smith
        )
  [1] => Array
       (
         [ID]       => 11
         [FIRST]  => Joe
         [LAST]   => Black
       )
. . . etc.

I hope this helps someone.
majca J 05-Jun-2010 05:42
Noted in a comment below is that this function will return NULL when given a
simple string.

This is new behavior - see the result in PHP 5.2.4 :
php > var_dump(json_decode('this is a simple string'));
string(23) "this is a simple string"

in PHP 5.3.2 :
php > var_dump(json_decode('this is a simple string'));
NULL

I had several functions that relied on checking the value of a purported JSON
string if it didn't decode into an object/array. If you do too, be sure to be
aware of this when upgrading to PHP 5.3.
phpuser 20-May-2010 03:52
If you keep having problems, try removing "problematic" characters from the
json string:

$obj = json_decode(preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $json_string);
NemoStein 19-May-2010 10:43
Pass you URL encoded ( urlencode($json) ), then decode it ( urldecode($_GET
['json']) )...

Should do the trick...
Mitchell Simoens 05-May-2010 04:27
In my case, I was passing simple JSON in the URL...

eg myfile.php?test=["one", "two", "three"]

but I kept getting NULL no matter what I tried. I did a simple echo of
$_REQUEST["test"] and noticed that the browser added the "\" to the
double-quotes. I had to prepare the data first then do the decode:

<?php
$data = str_replace("\\", "", $_REQUEST["test"]);
$results = json_decode($data);
?>

This produced what was expected
php dot net at spam dot lublink dot net 02-Apr-2010 06:25
If the JSON is coming from javascript watch out for undefined variables :

Javascript ( using dojo ) returns this to me sometimes :

{ "index" : [undefined] }

When I pass this to json_decode, it returns null. Make sure that you check all
your javascript variables properly because this can break whatever it is you
are doing.
CraigHarris at gmail dot com 19-Feb-2010 12:55
Be aware that json_decode() will return null if you pass it a JSON encoded
string.

<?php echo json_encode('Some String'); ?>
"Some String"
<?php echo json_decode(json_encode('Some String')); ?>
NULL
<?php // expected output ?>
Some String
php at hm2k.org 11-Feb-2010 04:45
If var_dump produces NULL, you may be experiencing JSONP aka JSON with padding,
here's a quick fix...

<?php

//remove padding
$body=preg_replace('/.+?({.+}).+/','$1',$body);

// now, process the JSON string
$result = json_decode($body);

var_dump($result);
?>
nix 29-Jan-2010 03:39
Be aware, when decoding JSON strings, where an empty string is a key, this
library replaces the empty string with "_empty_".

So the following code gives an unexpected result:
<?php
var_dump(json_decode('{"":"arbitrary"}'));
?>

The result is as follows:
object(stdClass)#1 (1) {
  ["_empty_"]=>
  string(6) "arbitrary"
}

Any subsequent key named "_empty_" (or "" [the empty string] again) will
overwrite the value.
yohan dot widyakencana at kreators dot com 29-Jan-2010 12:37
When in php 5.2.3, I found that json_decode 4000000000 float value into integer
value resulting int(-294967296) from var_dump function

When in php 5.3.x, php correctly returning float(4000000000)

thank you for people creating & upgrading php

Yohan W.
colin.mollenhour.com 21-Jan-2010 10:51
For those of you wanting json_decode to be a little more lenient (more like
Javascript), here is a wrapper:

<?php
function json_decode_nice($json, $assoc = FALSE){
    $json = str_replace(array("\n","\r"),"",$json);
    $json = preg_replace('/([{,])(\s*)([^"]+?)\s*:/','$1"$3":',$json);
    return json_decode($json,$assoc);
}
?>

Some examples of accepted syntax:

<?php
$json = '{a:{b:"c",d:["e","f",0]}}';
$json =
'{
   a : {
      b : "c",
      "d.e.f": "g"
   }
}';
?>

If your content needs to have newlines, do this:

<?php
$string = "This
Text
Has
Newlines";
$json = '{withnewlines:'.json_encode($string).'}';
?>

Note: This does not fix trailing commas or single quotes.
wesgeek at gmx dot com 24-Dec-2009 10:22
If you are having issues with magic_quotes_gpc being turned on and can't
disable it use json_decode(stripslashes($json)).
benny at zami-nospam-nga dot com 16-Oct-2009 02:35
I pulled my hair off for hours trying to get rid of strange backslashes in my
incoming JSON-data in POST-pool, making it impossible to decode the incoming
JSON-data.

For those of you facing the same problem:

just make sure you disable 'magic_quotes_gpc' in your php.ini and the incoming
data will not be pseudo-escaped anymore. Now your incoming JSON-data should
just be decoded fine.

Maybe this will help.
simonKenyonShepard at trisis dot co dot uk 14-Oct-2009 11:23
BEWARE!

json_decode will NOT WORK if there ARE LINE BREAKS in the JSON!

Use str_replace to get rid of them.
confusioner at msn dot com 17-Jul-2009 05:33
if you can not decode unicode characters with json_decode, use addslashes()
while using json_encode. The problem comes from unicode chars starting with \
such as \u30d7

$json_data = addslashes(json_encode($unicode_string_or_array));
Nick Telford 25-Jun-2009 04:06
In PHP <= 5.1.6 trying to decode an integer value that's > PHP_INT_MAX will
result in an intger of PHP_INT_MAX.

In PHP 5.2+ decoding an integer > PHP_INT_MAX will cause a conversion to a
float.

Neither behaviour is perfect, capping at PHP_INT_MAX is marginally worse, but
the float conversion loses precision.

If you expect to deal with large numbers at all, let alone in JSON, ensure
you're using a 64-bit system.
premiersullivan at gmail dot com 21-Jun-2009 04:14
This function will remove trailing commas and encode in utf8, which might solve
many people's problems. Someone might want to expand it to also change single
quotes to double quotes, and fix other kinds of json breakage.

<?php
    function mjson_decode($json)
    {
        return json_decode(removeTrailingCommas(utf8_encode($json)));
    }
   
    function removeTrailingCommas($json)
    {
        $json=preg_replace('/,\s*([\]}])/m', '$1', $json);
        return $json;
    }
?>
www at walidator dot info 30-May-2009 07:16
Here's a small function to decode JSON. It might not work on all data, but it
works fine on something like this:

$json_data = '{"response": {
    "Text":"Hello there"
 },
 "Details": null, "Status": 200}
 ';

===== CUt HERE :) =====

<?php
if ( !function_exists('json_decode') ){
function json_decode($json)
{ 
    // Author: walidator.info 2009
    $comment = false;
    $out = '$x=';
   
    for ($i=0; $i<strlen($json); $i++)
    {
        if (!$comment)
        {
            if ($json[$i] == '{')        $out .= ' array(';
            else if ($json[$i] == '}')    $out .= ')';
            else if ($json[$i] == ':')    $out .= '=>';
            else                         $out .= $json[$i];           
        }
        else $out .= $json[$i];
        if ($json[$i] == '"')    $comment = !$comment;
    }
    eval($out . ';');
    return $x;
} 
}
?>
Gravis 09-May-2009 07:38
with two lines you can convert your string from JavaScript toSource() (see
http://www.w3schools.com/jsref/jsref_toSource.asp) output format to JSON
accepted format.  this works with subobjects too!
note: toSource() is part of JavaScript 1.3 but only implemented in Mozilla
based javascript engines (not Opera/IE/Safari/Chrome).

<?php
  $str = '({strvar:"string", number:40, boolvar:true, subobject:{substrvar:"sub
string", subsubobj:{deep:"deeply nested"}, strnum:"56"}, false_val:false,
false_str:"false"})'; // example javascript object toSource() output

  $str = substr($str, 1, strlen($str) - 2); // remove outer ( and )
  $str = preg_replace("/([a-zA-Z0-9_]+?):/" , "\"$1\":", $str); // fix variable
names

  $output = json_decode($str, true);
  var_dump($output);
?>

var_dump output:
array(6) {
  ["strvar"]=>
  string(6) "string"
  ["number"]=>
  int(40)
  ["boolvar"]=>
  bool(true)
  ["subobject"]=>
  array(3) {
    ["substrvar"]=>
    string(10) "sub string"
    ["subsubobj"]=>
    array(1) {
      ["deep"]=>
      string(13) "deeply nested"
    }
    ["strnum"]=>
    string(2) "56"
  }
  ["false_val"]=>
  bool(false)
  ["false_str"]=>
  string(5) "false"
}

hope this saves someone some time.
jan at hooda dot de 20-Dec-2008 08:20
This function will convert a "normal" json to an array.

<?php
   function json_code ($json) { 

      //remove curly brackets to beware from regex errors

      $json = substr($json, strpos($json,'{')+1, strlen($json));
      $json = substr($json, 0, strrpos($json,'}'));
      $json = preg_replace('/(^|,)([\\s\\t]*)([^:]*) (([\\s\\t]*)):(([\\s\\t]
*))/s', '$1"$3"$4:', trim($json));

      return json_decode('{'.$json.'}', true);
   } 

   $json_data = '{
      a: 1,
      b: 245,
      c with whitespaces: "test me",
      d: "function () { echo \"test\" }",
      e: 5.66
   }'; 

   $jarr = json_code($json_data);
?>
Aaron Kardell 13-Nov-2008 07:39
Make sure you pass in utf8 content, or json_decode may error out and just
return a null value.  For a particular web service I was using, I had to do the
following:

<?php
$contents = file_get_contents($url);
$contents = utf8_encode($contents);
$results = json_decode($contents);
?>

Hope this helps!
steven at acko dot net 07-Oct-2008 12:49
json_decode()'s handling of invalid JSON is very flaky, and it is very hard to
reliably determine if the decoding succeeded or not. Observe the following
examples, none of which contain valid JSON:

The following each returns NULL, as you might expect:

<?php
var_dump(json_decode('['));             // unmatched bracket
var_dump(json_decode('{'));             // unmatched brace
var_dump(json_decode('{}}'));           // unmatched brace
var_dump(json_decode('{error error}')); // invalid object key/value
notation
var_dump(json_decode('["\"]'));         // unclosed string
var_dump(json_decode('[" \x "]'));      // invalid escape code

Yet the following each returns the literal string you passed to it:

var_dump(json_decode(' [')); // unmatched bracket
var_dump(json_decode(' {')); // unmatched brace
var_dump(json_decode(' {}}')); // unmatched brace
var_dump(json_decode(' {error error}')); // invalid object key/value notation
var_dump(json_decode('"\"')); // unclosed string
var_dump(json_decode('" \x "')); // invalid escape code
?>

(this is on PHP 5.2.6)

Reported as a bug, but oddly enough, it was closed as not a bug.

[NOTE BY danbrown AT php DOT net: This was later re-evaluated and it was
determined that an issue did in fact exist, and was patched by members of the
Development Team.  See http://bugs.php.net/bug.php?id=45989 for details.]
jrevillini 26-Sep-2008 12:01
When decoding strings from the database, make sure the input was encoded with
the correct charset when it was input to the database.

I was using a form to create records in the DB which had a content field that
was valid JSON, but it included curly apostrophes.  If the page with the form
did not have

<meta http-equiv="Content-Type" content="text/html;charset=utf-8">

in the head, then the data was sent to the database with the wrong encoding. 
Then, when json_decode tried to convert the string to an object, it failed
every time.
soapergem at gmail dot com 23-Aug-2008 11:59
There have been a couple of comments now alerting us to the fact that certain
expressions that are valid JavaScript code are not permitted within
json_decode. However, keep in mind that JSON is ***not*** JavaScript, but
instead just a subset of JavaScript. As far as I can tell, this function is
only allowing whatever is explicitly outlined in RFC 4627, the JSON spec.

For instance, ganswijk, the reason you can't use single quotes to enclose
strings is because the spec makes no mention of allowing single quotes (and
therefore they are not allowed). And the issue of adding an extra comma at the
end of an array is likewise not technically permitted in strict JSON, even
though it will work in JavaScript.

And xris, while the example you provided with an unenclosed string key within
an object is valid JavaScript, JavaScript != JSON. If you read it closely,
you'll see that the JSON spec clearly does not allow this. All JSON object keys
must be enclosed in double-quotes.

Basically, if there's ever any question for what is permitted, just read the
JSON spec: http://tools.ietf.org/html/rfc4627
bizarr3_2006 at yahoo dot com 06-Aug-2008 07:47
If json_decode() failes, returns null, or returns 1, you should check the data
you are sending to decode...

Check this online JSON validator... It sure helped me a lot.

http://www.jsonlint.com/
ganswijk at xs4all dot nl 06-Jul-2008 07:42
It was quite hard to figure out the allowed Javascript formats. Some extra
remarks:

json_decode() doesn't seem to allow single quotes:
<?php
print_r(json_decode('[0,{"a":"a","b":"b"},2,3]'));  //works
print_r(json_decode("[0,{'a':'a','b':'b'},2,3]"));  //doesn't work
?>

json_decode() doesn't allow an extra comma in a list of entries:
<?php
print_r(json_decode('[0,1 ]'));  //works
print_r(json_decode('[0,1,]'));  //doesn't work
?>

(I like to write a comma behind every entry when the entries are spread over
several lines.)

json_decode() does allow linefeeds in the data!
?>
xris / a t/ basilicom.de 27-Jun-2008 08:48
Please note: in javascript, the following is a valid object:
<?php
   { bar: "baz" }
?>

While PHP needs double quotes:

<?php
  { "bar": "baz" }
?>
phpben 16-Apr-2008 12:18
Re requiring to escape the forward slash:

I think PHP 5.2.1 had that problem, as I remember it occurring here when I
posted that comment; but now I'm on 5.2.5 it doesn't, so it has obviously been
fixed. The JSON one gets from all the browsers escape the forward slashes
anyway.
steve at weblite dot ca 24-Jan-2008 03:25
For JSON support in older versions of PHP you can use the Services_JSON class,
available at http://pear.php.net/pepr/pepr-proposal-show.php?id=198

<?php
if ( !function_exists('json_decode') ){
    function json_decode($content, $assoc=false){
                require_once 'Services/JSON.php';
                if ( $assoc ){
                    $json = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
        } else {
                    $json = new Services_JSON;
                }
        return $json->decode($content);
    }
}

if ( !function_exists('json_encode') ){
    function json_encode($content){
                require_once 'Services/JSON.php';
                $json = new Services_JSON;
               
        return $json->encode($content);
    }
}
?>
yasarbayar at gmail dot com 26-Jul-2007 02:13
It took me a while to find the right JSON string format grabbed from mysql to
be used in json_decode(). Here is what i came up with:

Bad(s) (return NULL):
{30:'13',31:'14',32:'15'}
{[30:'13',31:'14',32:'15']}
{["30":"13","31":"14","32":"15"]}

Good :
[{"30":"13","31":"14","32":"15"}]

returns:
array(1) { [0]=>  array(3) { [30]=>  string(2) "13" [31]=>  string(2) "14" [32]
=>  string(2) "15" } }

hope this saves sometime..
nospam (AT) hjcms (DOT) de 22-Apr-2007 09:15
You can't transport Objects or serialize Classes, json_* replace it bei
stdClass!
<?php

$dom = new DomDocument( '1.0', 'utf-8' );
$body = $dom->appendChild( $dom->createElement( "body" ) );
$body->appendChild( $dom->createElement( "forward", "Hallo" ) );

$JSON_STRING = json_encode(
   array(
      "aArray" => range( "a", "z" ),
      "bArray" => range( 1, 50 ),
      "cArray" => range( 1, 50, 5 ),
      "String" => "Value",
      "stdClass" => $dom,
      "XML" => $dom->saveXML()
   )
);

unset( $dom );

$Search = "XML";
$MyStdClass = json_decode( $JSON_STRING );
// var_dump( "<pre>" , $MyStdClass , "</pre>" );

try {

   throw new Exception( "$Search isn't a Instance of 'stdClass' Class by
json_decode()." );

   if ( $MyStdClass->$Search instanceof $MyStdClass )
      var_dump( "<pre>instanceof:" , $MyStdClass->$Search , "</pre>" );

} catch( Exception $ErrorHandle ) {

   echo $ErrorHandle->getMessage();

   if ( property_exists( $MyStdClass, $Search ) ) {
      $dom = new DomDocument( "1.0", "utf-8" );
      $dom->loadXML( $MyStdClass->$Search );
      $body = $dom->getElementsByTagName( "body" )->item(0);
      $body->appendChild( $dom->createElement( "rewind", "Nice" ) );
      var_dump( htmlentities( $dom->saveXML(), ENT_QUOTES, 'utf-8' ) );
   }
}

?>
paul at sfdio dot com 20-Jan-2007 07:08
I've written a javascript function to get around this functions limitations and
the limitations imposed by IE's lack of native support for json serialization.
Rather than converting variables to a json formatted string to transfer them to
the server this function converts any javascript variable to a string
serialized for use as POST or GET data.

String js2php(Mixed);

js2php({foo:true, bar:false, baz: {a:1, b:2, c:[1, 2, 3]}}));

will return:

foo=true&bar=false&baz[a]=1&baz[b]=2&baz[c][0]=1&...etc

function js2php(obj,path,new_path) {
  if (typeof(path) == 'undefined') var path=[];
  if (typeof(new_path) != 'undefined') path.push(new_path);
  var post_str = [];
  if (typeof(obj) == 'array' || typeof(obj) == 'object') {
    for (var n in obj) {
      post_str.push(js2php(obj[n],path,n));
    }
  }
  else if (typeof(obj) != 'function') {
    var base = path.shift();
    post_str.push(base + (path.length > 0 ? '[' + path.join('][') + ']' : '') +
'=' + encodeURI(obj));
    path.unshift(base);
  }
  path.pop();
  return post_str.join('&');
}
Adrian Ziemkowski 13-Dec-2006 11:52
Beware when decoding JSON from JavaScript.  Almost nobody uses quotes for
object property names and none of the major browsers require it, but this
function does!   {a:1} will decode as NULL, whereas the ugly {"a":1} will
decode correctly.   Luckily the browsers accept the specification-style quotes
as well.
giunta dot gaetano at sea-aeroportimilano dot it 04-Sep-2006 08:16
Take care that json_decode() returns UTF8 encoded strings, whereas PHP normally
works with iso-8859-1 characters.

If you expect to receive json data comprising characters outside the ascii
range, be sure to use utf8_decode to convert them:

$php_vlaues = utf8_decode(json_decode($somedata))
giunta dot gaetano at sea-aeroportimilano dot it 04-Sep-2006 03:20
Please note that this function does NOT convert back to PHP values all strings
resulting from a call to json-encode.

Since the json spec says that "A JSON text is a serialized object or array",
this function will return NULL when decoding any json string that does not
represent either an object or an array.

To successfully encode + decode single php values such as strings, booleans,
integers or floats, you will have to wrap them in an array before converting
them.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Mar 26 19:21:09 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length = NULL [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、入力配列のポインタを、使用した後にリセット (reset()) しま
    す。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、配列の要素の中から最大でその数までの要素を返し
    ます。配列の要素数が length より少ない場合は、配列から取得できる要素だけを
    返します。length が指定され、負の場合、配列の末尾から連続する複数の要素が返
    されます。省略された場合、offset から配列の最後までの全ての要素が返されます
    。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する
  • array_chunk() - 配列を分割する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012
 
add a note add a note User Contributed Notes array_slice
gary at wits dot sg 10-Jun-2011 11:44
I've found this useful.
The following is a function used to shuffle a very specific part of the array,
by providing start and end index.

<?php
function array_shuffle_section(&$a, $s, $e) {
    $head = array_slice($a, 0, $s);
    $body = array_slice($a, $s, $e-$s+1);
    $tail = array_slice($a, $e+1);

    shuffle($body);
    $a = array_merge($head,$body,$tail);
}
?>
Nathan - thefiscster510 at gmail dot com 29-Mar-2011 10:38
If you want to remove a specified entry from an array i made this mwethod...

<?php
$array = array("Entry1","entry2","entry3");

$int = 3; //Number of entries in the array
$int2 = 0; //Starter array spot... it will begine its search at 0.
$del_num = 1; //Represents the second entry in the array... which is the one we
will happen to remove this time... i.e. 0 = first entry, 1 = second entry, 2 =
third...........

$newarray = array(); //Empty array that will be the new array minus the
specified entry...
print_r($array) . "<br>";    //print original array contents
print_r($newarray). "<br>"; //print the new empty array

do
{
$user = $array[$int2];
$key = array_search($user, $array);
if ($key == $del_num)
{

}
else
{
$newarray[] = $array[$int2];
}

$int2 = $int2 + 1;
} while ($int2 < $int);

print_r($newarray). "<br>"; //print the new array

?>
delew 11-Feb-2011 01:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 02-Feb-2011 07:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 05:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 03:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 06:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 04:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 10-Apr-2009 05:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 02:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 07:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 12:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 02-May-2008 09:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 12:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 10:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 08:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 02:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 12:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 05:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 07:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 03:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 08:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 01:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 15-Feb-2007 04:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 09:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 03:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 02:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 18-Oct-2006 08:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 01:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 12:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 02:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 09:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 07:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 03:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 23-Jun-2005 06:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 02:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 01:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 17-Sep-2004 09:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 09:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 02:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 21-Feb-2004 10:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 12-Nov-2002 04:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 06:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 08:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 09:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 15-Dec-2001 07:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Mar 24 22:21:04 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.170.253
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012

view this page in

[English             ] Change language
strstr

(PHP 4, PHP 5)

strstr — 文字列が最初に現れる位置を見つける

説明

string strstr ( string $haystack , mixed $needle [, bool $before_needle = false
] )

haystack の中で needle が最初に現れる場所を含めてそこから文字列の終わりまでを返
します。

    注意:

    この関数は大文字小文字を区別することに注意してください。大文字小文字を区別
    しない検索を行う場合は、stristr() を使用してください。

    注意:

    もし特定の haystack に needle があるかどうかを調べるだけの場合、より高速で
    メモリ消費も少ない strpos() を代わりに使用してください。

パラメータ

haystack

    入力文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

before_needle

    TRUE にすると、strstr() の返り値は、haystack の中で最初に needle があらわれ
    る箇所より前の部分となります (needle は含めません)。

返り値

部分文字列を返します。 needle が見つからない場合は FALSE を返します。

変更履歴

バージョン                          説明
5.3.0      オプションの before_needle パラメータが追加されました。
4.3.0      strstr() がバイナリセーフとなりました。

例

例1 strstr() の例

<?php
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // @example.com と表示します

$user = strstr($email, '@', true); // PHP 5.3.0 以降
echo $user; // name と表示します
?>

参考

  • stristr() - 大文字小文字を区別しない strstr
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • strpos() - 文字列内の部分文字列が最初に現れる場所を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • preg_match() - 正規表現によるマッチングを行う



strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012
 
add a note add a note User Contributed Notes strstr
peter at olds dot co 20-Feb-2012 10:16
I was in need of getting the first and last part of a string pre 5.3 so I wrote
this:

<?php
$fir = $first = explode( " ", $cmd[1] );
unset( $fir[0] );
$end = ltrim( implode( " ", $fir ) );
?>

I needed it split with a " " but can obviously change for your needs. But with
this format your output for the string:

"PHP is the best programming language out there"

Will give you the following results:

<?php
$first[0] \\ PHP
$end \\ is the best programming language out there
?>

Works really well :)
xydon1 at yahoo dot com 31-Aug-2011 03:03
I explained this to my newbies the difference though it would be good to
demonstrate this here. If you are evaluating a list you cannot use strstr as it
looks for any occurance. The correct way is the function which evaluates a true
or false on the exact value to check.

In the following example I have a list of promotion ids I want to evaluate
whether or not a promotion exists:

<?php
//Wrong
$promotion = strstr("25,56","2");
if($promotion){
  echo "found";
}else{
  echo "not found";
}

//right
function detectPromotion($string,$promotion){
  foreach(explode(",",$string) as $promotionToCheck){   
    echo "checkin ".$promotionToCheck."==".$promotion."<br/>";   
    if($promotionToCheck==$promotion){
      $promotionFound=true;
    }
  }
  return $promotionFound;
}

echo detectPromotion("2,56","2");
?>
gruessle at gmail dot com 20-Apr-2011 01:39
Been using this for years:

<?php
/**
*
* @author : Dennis T Kaplan
*
* @version : 1.0
* Date : June 17, 2007
* Function : reverse strstr()
* Purpose : Returns part of haystack string from start to the first occurrence
of needle
* $haystack = 'this/that/whatever';
* $result = rstrstr($haystack, '/')
* $result == this
*
* @access public
* @param string $haystack, string $needle
* @return string
**/

function rstrstr($haystack,$needle)
    {
        return substr($haystack, 0,strpos($haystack, $needle));
    }
?>

You could change it to:
rstrstr ( string $haystack , mixed $needle [, int $start] )
<?php

function rstrstr($haystack,$needle, $start=0)
    {
        return substr($haystack, $start,strpos($haystack, $needle));
    }

?>
w3b_monk3y at yahoo dot com 20-Jan-2009 12:28
If you want to emulate strstr's new before_needle parameter pre 5.3 strtok is
faster than using strpos to find the needle and cutting with substr. The amount
of difference varies with string size but strtok is always faster.
tim 25-Nov-2007 04:42
I simplified prafe at prafesplace dot com's function:

<?php
function strstrbi($haystack, $needle, $before_needle=FALSE, $include_needle=
TRUE, $case_sensitive=FALSE) {
 //Find the position of $needle
 if($case_sensitive) {
  $pos=strpos($haystack,$needle);
 } else {
  $pos=strpos(strtolower($haystack),strtolower($needle));
 }
 
 //If $needle not found, abort
 if($pos===FALSE) return FALSE;
 
 //Adjust $pos to include/exclude the needle
 if($before_needle==$include_needle) $pos+=strlen($needle);
 
 //get everything from 0 to $pos?
 if($before_needle) return substr($haystack,0,$pos);
 
 //otherwise, go from $pos to end
 return substr($haystack,$pos);
}
?>

It's now 600 bytes, down from 2k.

Also, here are replacements for strstr and stristr:

<?php
function strstr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos($haystack,$needle))===FALSE) return FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}

function stristr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos(strtolower($haystack),strtolower($needle)))===FALSE) return
FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}
?>
brett dot jr dot alton at gmail dot com 25-Nov-2007 08:02
For the needle_before (first occurance) parameter when using PHP 5.x or less,
try:

<?php
$haystack = 'php-homepage-20071125.png';
$needle = '-';
$result = substr($haystack, 0, strpos($haystack, $needle)); // $result = php
?>
prafe at prafesplace dot com 21-Nov-2007 09:14
If you want to use the $before_needle parameter that's only in PHP 5.3.0, I
found a way to use it in lower versions.

The code is a bit hefty, but it works. It also has added $include_needle and
$case_sensitive.

<?php
// ==== I don't guarantee this is faster than the PHP 6 before needle, ====
// ====  but it works for PHP below 6 atleast. ====
// ==== IT ALSO HAS INCLUDE NEEDLE BOOLEAN.. ====
function strstrbi($haystack,$needle,$before_needle,
$include_needle,$case_sensitive)
{
  $strstr = ($case_sensitive) ? 'strstr' : 'stristr';
  if($before_needle!=true && $before_needle!=false && isset($before_needle)){
      die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' :  parameter
'. chr(39).'$before_needle'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$before_needle'

  if($include_needle!=true && $include_needle!=false && isset($include_needle))
{
    die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' : parameter '.
chr(39).'$include_needle'.chr(39). ' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$include_needle'

  if($case_sensitive!=true && $case_sensitive!=false && isset($case_sensitive))
{
    die('PHP: Error in function '.chr(39).'$strstrbi' .chr(39).' : parameter '.
chr(39).'$case_sensitive'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$case_sensitive'

  if(!isset($before_needle)){
    $before_needle=false;
  }

  if(!isset($include_needle)){
    $include_needle=true;
  }

  if(!isset($case_sensitive)){
    $case_sensitive=false;
  }

  switch($before_needle){
    case true:
      switch($include_needle){
        case true:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),0));
          break;
        // END case true : $include_needle
        case false:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),1));
          break;
        // END case false : $include_needle
      }
      break;
    // END case true : $before_needle
    case false:
      switch($include_needle){
        case true:
          $ret=$strstr($haystack,$needle);
          break;
        // END case true: $include_needle
        case false:
          $ret=substr($strstr($haystack,$needle),1);
          break;
        // END case false: $include_needle
    }
    break;
    // END case false : $before_needle
  }

  if(!empty($ret)){
    return $ret;
  }else{
    return false;
  }
}
// === END FUNCTION 'strstrbi'

// Example

$email  = 'user@example.com';
$domain = strstrbi($email, '@', false, false, false);
echo $domain; // prints example.com

$user = strstrbi($email, '@', true, false, false);
echo $user; // prints user
?>
root at mantoru dot de 10-Nov-2007 03:22
Please note that $needle is included in the return string, as shown in the
example above. This ist not always desired behavior, _especially_ in the
mentioned example. Use this if you want everything AFTER $needle.

<?php
function strstr_after($haystack, $needle, $case_insensitive = false) {
    $strpos = ($case_insensitive) ? 'stripos' : 'strpos';
    $pos = $strpos($haystack, $needle);
    if (is_int($pos)) {
        return substr($haystack, $pos + strlen($needle));
    }
    // Most likely false or null
    return $pos;
}

// Example
$email = 'name@example.com';
$domain = strstr_after($email, '@');
echo $domain; // prints example.com
?>
gigaman2003 at halfempty dot co dot uk 24-Feb-2007 12:48
Often you will need to find all occurrences of a string (for security escapes
and such)

So I wrote this function to return an array with the locations of all the
occurrences. Almost like an advanced strstr.

<?php
function findall($needle, $haystack)
{
    //Setting up
    $buffer=''; //We will use a 'frameshift' buffer for this search
    $pos=0; //Pointer
    $end = strlen($haystack); //The end of the string
    $getchar=''; //The next character in the string
    $needlelen=strlen($needle); //The length of the needle to find (speeds up
searching)
    $found = array(); //The array we will store results in
   
    while($pos<$end)//Scan file
    {
        $getchar = substr($haystack,$pos,1); //Grab next character from pointer
        if($getchar!="\n" || buffer<$needlelen) //If we fetched a line break,
or the buffer is still smaller than the needle, ignore and grab next character
        {
            $buffer = $buffer . $getchar; //Build frameshift buffer
            if(strlen($buffer)>$needlelen) //If the buffer is longer than the
needle
            {
                $buffer = substr($buffer,-$needlelen);//Truncunate backwards to
needle length (backwards so that the frame 'moves')
            }
            if($buffer==$needle) //If the buffer matches the needle
            {
                $found[]=$pos-$needlelen+1; //Add the location of the needle to
the array. Adding one fixes the offset.
            }
        }
        $pos++; //Increment the pointer
    }
    if(array_key_exists(0,$found)) //Check for an empty array
    {
        return $found; //Return the array of located positions
    }
    else
    {
        return false; //Or if no instances were found return false
    }
}
?>

Haven't had the chance to speed test it, but many optimizations should be
possible. It just works enough for me. Hope it saves someone a lot of time.
06-Jun-2005 09:13
suggestion for [leo dot nard at free dot fr]:
to be able to cut the string without having the html entities being cut in
half, use this instead:

<?php

$oldstr = "F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller
skandinaviska (eller Franska, f&ouml;r den delen) tecken, kan man g&ouml;ra s&
aring;h&auml;r...";

$length = 50;

# First, first we want to decode the entities (to get them as usual chars),
then cut the string at for example 50 chars, and then encoding the result of
that again.

# Or, as I had it done, in one line:
$newstr = htmlentities(substr(html_entity_decode($oldstr), 0, $length));
$newstr2 = substr($oldstr, 0, $length);
# It's not quite as much code as the snippet you've coded to remove the
half-portions... ;)
# Hopefully somebody finds this useful!
echo "Without the decode-encode snippet:
$newstr2

With the decode-encode snippet:
$newstr";
?>

The above outputs this:

Without the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&ar

With the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller skandin

First post in this db ;)
Best regards, Mikael R nn, FIN
leo dot nard at free dot fr 24-May-2005 02:12
When encoding ASCII strings to HTML size-limited strings, sometimes some HTML
special chars were cut.

For example, when encoding "��" to a string of size 10, you would get: "à&a" =>
the second character is cut.

This function will remove any unterminated HTML special characters from the
string...

<?php
function cut_html($string)
{
    $a=$string;

    while ($a = strstr($a, '&'))
    {
        echo "'".$a."'\n";
        $b=strstr($a, ';');
        if (!$b)
        {
            echo "couper...\n";
            $nb=strlen($a);
            return substr($string, 0, strlen($string)-$nb);
        }
        $a=substr($a,1,strlen($a)-1);
    }
    return $string;
}
?>
Romuald Brunet 21-Jan-2004 12:25
Regarding the note of the manual concerning the speed of strstr against strpos,
for people who wants to check a needle occurs within haystack, it apprears that
strstr() is in facts faster than strpos().

Example:
<?php
// [VERY] Quick email check:
if ( strstr("email@domain.tld", "@") ) {
// Ok
}
?>

is faster than

<?php
if ( strpos("email@domain.tld", "@") !== FALSE ) {
// Ok
}

Without using the true equality with !==, strpos() is faster. But then if the
haystack starts with needle the condition whould not be met.
php at silisoftware dot com 14-Feb-2003 03:37
PHP versions before 4.3.0 (tested on 4.2.2 and 4.2.3) return the $haystack from
$needle only up to the first null character. So for example:

<?php
$string = strstr("one#two\x00three", "#");
// PHP 4.2.x:  $string contains "#two"
// PHP 4.3.0:  $string contains "#two\x00three"
?>

If you're trying to match nulls, you will probably get back an empty string:

<?php
$string = strstr("one#two\x00three", "\x00");
// PHP 4.2.x:  $string contains ""
// PHP 4.3.0:  $string contains "\x00three"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Mar 24 20:21:11 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.201.228
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

explode> <crypt
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012

view this page in

[English             ] Change language
echo

(PHP 4, PHP 5)

echo — 1 つ以上の文字列を出力する

説明

void echo ( string $arg1 [, string $... ] )

すべてのパラメータを出力します。

echo() は実際には関数ではありません (言語構造です)。このため、使用する際に括弧
は必要ありません。 (いくつかの他の言語構造と異なり) echo() は関数のように動作し
ません。そのため、関数のコンテキスト中では常に使用することができません。加えて
、複数のパラメータを指定して echo() をコールしたい場合、括弧の中にパラメータを
記述してはいけません。

echo() には、開始タグの直後に等号を付ける短縮構文もあります。この短縮構文は、設
定オプションshort_open_tag が有効な場合のみ使用可能です。
I have <?=$foo?> foo.

パラメータ

arg1

    出力したいパラメータ。

...

返り値

値を返しません。

例

例1 echo() の例

<?php
echo "Hello World";

echo "This spans
multiple lines. The newlines will be
output as well";

echo "This spans\nmultiple lines. The newlines will be\noutput as well.";

echo "Escaping characters is done \"Like this\".";

// echo 命令の中で変数を使用することが可能です
$foo = "foobar";
$bar = "barbaz";

echo "foo is $foo"; // foo is foobar

// 配列を使用することもできます
$baz = array("value" => "foo");

echo "this is {$baz['value']} !"; // this is foo !

// 値ではなく変数名を出力するシングルクオートを使用します
echo 'foo is $foo'; // foo is $foo

// 他の文字を全く使用しない場合、echo 変数を使用可能です
echo $foo;          // foobar
echo $foo,$bar;     // foobarbarbaz

// 複数のパラメータを結合してechoに渡そうとする人もいます
echo 'This ', 'string ', 'was ', 'made ', 'with multiple parameters.', chr(10);
echo 'This ' . 'string ' . 'was ' . 'made ' . 'with concatenation.' . "\n";

echo <<<END
This uses the "here document" syntax to output
multiple lines with $variable interpolation. Note
that the here document terminator must appear on a
line with just a semicolon. no extra whitespace!
END;

// echo は関数のように動作しないので、以下のコードは正しくありません
($some_var) ? echo 'true' : echo 'false';

// しかし、次の例は動作します
($some_var) ? print 'true' : print 'false'; // print も言語構造ですが、
                                            // 関数のように動作します。なので、
                                            // このコンテキスト中で使用できます
echo $some_var ? 'true': 'false'; // 命令を変更
?>

注意

    注意: これは、関数ではなく言語構造のため、可変関数を用いてコールすることは
    できません。

参考

  • print() - 文字列を出力する
  • printf() - フォーマット済みの文字列を出力する
  • flush() - 出力バッファをフラッシュする
  • ヒアドキュメント構文



explode> <crypt
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Mar 2012
 
add a note add a note User Contributed Notes echo
ximlabz at gmail dot com 05-Nov-2011 10:16
A remedy to the problems caused by different management of returns between
different platforms you can use the predefined constant PHP_EOF as the second
parameter:

<?php
$foo = "foo";
$bar = "bar";

echo "Foo is $foo", PHP_EOL;
echo "Bar is $bar";

// is the same as using:

echo "Foo is $foo\n";
echo "Bar is $bar";

// but here only for UNIX-like platforms
?>
fire at dls dot net 29-Jul-2011 11:01
Pay attention to this part of the documentation:
echo() (unlike some other language constructs) does not behave like a function,
so it cannot always be used in the context of a function

I was trying to make certain that I was detecting errors and was trying code
like this:

@alwaysFails() or echo('Surprise! It failed again');

This error was generated:
[29-Jul-2011 12:56:19] PHP Parse error:  syntax error, unexpected T_ECHO in /
Applications/MAMP/test.php on line 12

Changing to die(), print() or a function I defined worked fine. Beware of this
limitation of echo.
gbarros at yahoo-inc dot com 26-Jan-2010 02:10
just banged my head on this missing bits on the manual.
When using the <<< method, the array keys does not require any kind of quotes.

<?php
foreach ( $data as $i ){
echo <<< END
<tr>
  <td>$i[date]</td>
  <td>$i[name]</td>
 </tr>
END;
}
?>

Let's hope you don't have any <?php echo $klingonships['th\'bl][ath']?> kind of
array :)
Jakob Thomsen 23-Nov-2008 06:23
A way to color your echo output is to use shell_exec and the echo command (this
only works on Linux/bash) in the following way:

<?php
echo shell_exec('echo "\e[0;31m Red color \e[0;32mGreen color \e[0m No color
"');
?>

See http://wiki.archlinux.org/index.php/Color_Bash_Prompt for more colors and
other options.
sandaimespaceman at gmail dot com 31-Aug-2008 11:25
Outputting \n won't generate a line break in the browser, <br /> is required
for line break. Also,
<?php
echo "first line";
echo "second line";
?>
will like
first linesecond line
because you didn't insert spaces/line breaks.
the echo function can also be written like
<?php
echo ('text here')
?>
nikolaas dot mennega at links dot com dot au 31-Oct-2007 11:04
hemanman at gmail dot com, the problem is that func() doesn't actually return a
value (string or otherwise), so the result of echoing func() is null.

With the comma version, each argument is evaluated and echoed in turn: first
the literal string (simple), then func(). Evaluating a function call obviously
calls the function (and in this case executes its own internal echo), and the
result (null) is then echoed accordingly. So we end up with "outside func()
within func()" as we would expect.

Thus:

<?php
echo "outside func ()\n", func ();
?>

effectively becomes:

<?php
echo "outside func ()\n";
//func ()
{
echo "within func ()\n";
}
echo '';
?>

The dot version is different: there's only one argument here, and it has to be
fully evaluated before it can be echoed as requested. So we start at the
beginning again: a literal string, no problem, then a concatenator, then a
function call. Obviously the function call has to be evaluated before the
result can be concatenated with the literal string, and THAT has to happen
BEFORE we can complete the echo command. But evaluating func() produces its own
call to echo, which promptly gets executed.

Thus:

<?php
echo "outside func ()\n" . func ();
?>

effectively becomes:

<?php
//func ()
{
echo "within func ()\n";
}
echo "outside func ()\n" . '';
?>
Jason Carlson - SiteSanity 16-May-2005 10:28
In response to Ryan's post with his echobig() function, using str_split wastes
memory resources for what you are doing.

If all you want to do is echo smaller chunks of a large string, I found the
following code to perform better and it will work in PHP versions 3+

<?php
function echobig($string, $bufferSize = 8192)
{
  // suggest doing a test for Integer & positive bufferSize
  for ($chars=strlen($string)-1,$start=0;$start <= $chars;$start +=
$bufferSize) {
    echo substr($string,$start,$buffer_size);
  }
}
?>
ryan at wonko dot com 27-Feb-2005 12:56
Due to the way TCP/IP packets are buffered, using echo to send large strings to
the client may cause a severe performance hit. Sometimes it can add as much as
an entire second to the processing time of the script. This even happens when
output buffering is used.

If you need to echo a large string, break it into smaller chunks first and then
echo each chunk. The following function will do the trick in PHP5:

<?php
function echobig($string, $bufferSize = 8192)
{
    $splitString = str_split($string, $bufferSize);

    foreach($splitString as $chunk)
        echo $chunk;
}
?>
zombie)at(localm)dot(org) 25-Jan-2003 11:26
[Ed. Note: During normal execution, the buffer (where echo's arguments go) is
not flushed (sent) after each write to the buffer. To do that you'd need to use
the flush() function, and even that may not cause the data to be sent,
depending on your web server.]

Echo is an i/o process and i/o processes are typically time consuming. For the
longest time i have been outputting content by echoing as i get the data to
output. Therefore i might have hundreds of echoes in my document. Recently, i
have switched to concatenating all my string output together and then just
doing one echo at the end. This organizes the code more, and i do believe cuts
down on a bit of time. Likewise, i benchmark all my pages and echo seems to
influence this as well. At the top of the page i get the micro time, and at the
end i figure out how long the page took to process. With the old method of
"echo as you go" the processing time seemed to be dependent on the user's net
connection as well as the servers processing speed. This was probably due to
how echo works and the sending of packets of info back and forth to the user.
One an one script i was getting .0004 secs on a cable modem, and a friend of
mine in on dialup was getting .2 secs. Finally, to test that echo is slow; I
built strings of XML and XSLT and used the PHP sablotron functions to do a
transformation and return a new string. I then echoed the string. Before the
echo, the process time was around .025 seconds and .4 after the echo. So if you
are big into getting the actual processing time of your scripts, don't include
echoes since they seem to be user dependent. Note that this is just my
experience and it could be a fluke.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Mar 24 16:21:10 2012 UTC
Received cookie: COUNTRY=JPN%2C1.112.49.220
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length = NULL [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、入力配列のポインタを、使用した後にリセット (reset()) しま
    す。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、配列の要素の中から最大でその数までの要素を返し
    ます。配列の要素数が length より少ない場合は、配列から取得できる要素だけを
    返します。length が指定され、負の場合、配列の末尾から連続する複数の要素が返
    されます。省略された場合、offset から配列の最後までの全ての要素が返されます
    。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する
  • array_chunk() - 配列を分割する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012
 
add a note add a note User Contributed Notes array_slice
gary at wits dot sg 10-Jun-2011 11:44
I've found this useful.
The following is a function used to shuffle a very specific part of the array,
by providing start and end index.

<?php
function array_shuffle_section(&$a, $s, $e) {
    $head = array_slice($a, 0, $s);
    $body = array_slice($a, $s, $e-$s+1);
    $tail = array_slice($a, $e+1);

    shuffle($body);
    $a = array_merge($head,$body,$tail);
}
?>
Nathan - thefiscster510 at gmail dot com 29-Mar-2011 10:38
If you want to remove a specified entry from an array i made this mwethod...

<?php
$array = array("Entry1","entry2","entry3");

$int = 3; //Number of entries in the array
$int2 = 0; //Starter array spot... it will begine its search at 0.
$del_num = 1; //Represents the second entry in the array... which is the one we
will happen to remove this time... i.e. 0 = first entry, 1 = second entry, 2 =
third...........

$newarray = array(); //Empty array that will be the new array minus the
specified entry...
print_r($array) . "<br>";    //print original array contents
print_r($newarray). "<br>"; //print the new empty array

do
{
$user = $array[$int2];
$key = array_search($user, $array);
if ($key == $del_num)
{

}
else
{
$newarray[] = $array[$int2];
}

$int2 = $int2 + 1;
} while ($int2 < $int);

print_r($newarray). "<br>"; //print the new array

?>
delew 11-Feb-2011 01:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 02-Feb-2011 07:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 05:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 03:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 06:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 04:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 10-Apr-2009 05:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 02:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 07:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 12:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 02-May-2008 09:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 12:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 10:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 08:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 02:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 12:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 05:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 07:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 03:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 08:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 01:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 15-Feb-2007 04:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 09:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 03:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 02:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 18-Oct-2006 08:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 01:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 12:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 02:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 09:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 07:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 03:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 23-Jun-2005 06:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 02:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 01:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 17-Sep-2004 09:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 09:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 02:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 21-Feb-2004 10:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 12-Nov-2002 04:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 06:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 08:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 09:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 15-Dec-2001 07:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Mar 17 23:21:13 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length = NULL [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、入力配列のポインタを、使用した後にリセット (reset()) しま
    す。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、配列の要素の中から最大でその数までの要素を返し
    ます。配列の要素数が length より少ない場合は、配列から取得できる要素だけを
    返します。length が指定され、負の場合、配列の末尾から連続する複数の要素が返
    されます。省略された場合、offset から配列の最後までの全ての要素が返されます
    。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する
  • array_chunk() - 配列を分割する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012
 
add a note add a note User Contributed Notes array_slice
gary at wits dot sg 10-Jun-2011 11:44
I've found this useful.
The following is a function used to shuffle a very specific part of the array,
by providing start and end index.

<?php
function array_shuffle_section(&$a, $s, $e) {
    $head = array_slice($a, 0, $s);
    $body = array_slice($a, $s, $e-$s+1);
    $tail = array_slice($a, $e+1);

    shuffle($body);
    $a = array_merge($head,$body,$tail);
}
?>
Nathan - thefiscster510 at gmail dot com 29-Mar-2011 10:38
If you want to remove a specified entry from an array i made this mwethod...

<?php
$array = array("Entry1","entry2","entry3");

$int = 3; //Number of entries in the array
$int2 = 0; //Starter array spot... it will begine its search at 0.
$del_num = 1; //Represents the second entry in the array... which is the one we
will happen to remove this time... i.e. 0 = first entry, 1 = second entry, 2 =
third...........

$newarray = array(); //Empty array that will be the new array minus the
specified entry...
print_r($array) . "<br>";    //print original array contents
print_r($newarray). "<br>"; //print the new empty array

do
{
$user = $array[$int2];
$key = array_search($user, $array);
if ($key == $del_num)
{

}
else
{
$newarray[] = $array[$int2];
}

$int2 = $int2 + 1;
} while ($int2 < $int);

print_r($newarray). "<br>"; //print the new array

?>
delew 11-Feb-2011 01:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 02-Feb-2011 07:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 05:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 03:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 06:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 04:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 10-Apr-2009 05:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 02:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 07:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 12:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 02-May-2008 09:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 12:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 10:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 08:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 02:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 12:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 05:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 07:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 03:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 08:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 01:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 15-Feb-2007 04:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 09:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 03:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 02:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 18-Oct-2006 08:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 01:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 12:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 02:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 09:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 07:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 03:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 23-Jun-2005 06:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 02:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 01:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 17-Sep-2004 09:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 09:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 02:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 21-Feb-2004 10:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 12-Nov-2002 04:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 06:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 08:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 09:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 15-Dec-2001 07:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 14 18:21:12 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_pad> <array_merge
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012

view this page in

[English             ] Change language
array_multisort

(PHP 4, PHP 5)

array_multisort — 複数の多次元の配列をソートする

説明

bool array_multisort ( array &$arr [, mixed $arg = SORT_ASC [, mixed $arg =
SORT_REGULAR [, mixed $... ]]] )

array_multisort() は、複数の配列を一度に、または、多次元の配列をその次元の一つ
でソートする際に使用可能です。この関数は、ソートの際にキーの相関を維持します。

連想配列のキー (string) は不変ですが、数値添字は再度振り直されます。

パラメータ

arr

    ソートしたい配列。

arg

    オプションで指定する別の配列、あるいは先ほどの引数の配列のソート方法 (
    SORT_ASC, SORT_DESC, SORT_REGULAR, SORT_NUMERIC, SORT_STRING)。

...

    追加の引数。

返り値

成功した場合に TRUE を、失敗した場合に FALSE を返します。

例

例1 複数の配列をソートする

<?php
$ar1 = array(10, 100, 100, 0);
$ar2 = array(1, 3, 2, 4);
array_multisort($ar1, $ar2);

var_dump($ar1);
var_dump($ar2);
?>

この例では、ソートの後で、最初の配列は、0, 10, 100, 100 となります。 2番目の配
列は、4, 1, 2, 3 を有します。最初の配列 (100 および 100) の同じエントリに対応し
ている二番目の配列のエントリは、同時にソートされます。

array(4) {
  [0]=> int(0)
  [1]=> int(10)
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(4)
  [1]=> int(1)
  [2]=> int(2)
  [3]=> int(3)
}

例2 多次元の配列をソートする

<?php
$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1,  2, "2",   3,   1)
      );
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>

この例では、ソートされた後、最初の配列は "10", 100, 100, 11, "a" (文字列として
昇順でソートされています) に変換され、二番目の配列は、 1, 3, "2", 2, 1 (数値と
して降順にソートされています) となっています。

array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}

例3 データベースの結果をソートする

この例では、配列 data の個々の要素がテーブルのひとつの行を表しています。これは
、データベースのレコードの典型的な形式です。

データの例:

volume | edition
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7

データは data という名前の配列に格納します。これは、例えば mysql_fetch_assoc()
の結果をループさせたりすれば得られます。

<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);
?>

この例では、データを volume の降順、 edition の昇順に並べ替えます。

私たちが今もっているのは行方向の配列ですが、 array_multisort() で必要なのは列方
向の配列です。そこで、以下のコードで列方向の配列を得たあとでソートを行います。

<?php
// 列方向の配列を得る
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// データを volume の降順、edition の昇順にソートする。
// $data を最後のパラメータとして渡し、同じキーでソートする。
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>

データセットの行はソートされ、以下のようになります:

volume | edition
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7

例4 大文字・小文字を区別しないソート

SORT_STRING と SORT_REGULAR はどちらも大文字・小文字を区別し、大文字ではじまる
文字列が小文字で始まる文字列より前になります。

大文字・小文字を区別しないためには、元の配列の内容をすべて小文字に変換した配列
を用意し、それをソートの基準にします。

<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>

上の例の出力は以下となります。

Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)

参考

  • usort() - ユーザー定義の比較関数を使用して、配列を値でソートする
  • 配列ソート関数の比較



array_pad> <array_merge
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012
 
add a note add a note User Contributed Notes array_multisort
rnacken at gmail dot com 11-Feb-2012 11:59
When I was working on a search engine, that had to order the results in PHP by
multiple arguments, I got stuck on the issue of multisort erasing your
(numeral) indexes for a while. Sometimes, it is important to keep these indexes
intact. In my case, the indexes were IDs and the values were a percentage of
how relevant the object was, considering an earlier query.
e.g: $searchResult = (23 => 0.3,
                    102 => 0.5,
                    11 => 0.5,
                    340 => 0.5,
                    10 => 0.9);

I wanted to use array_multisort to first sort DESC on the IDs, and then on the
values DESC. i.e. I wanted to show the highest values first, but in case of two
(or more) objects with the same value, the higher ID would be shown first.
e.g: $searchResult = (10 => 0.9,
                   340 => 0.5,
                   102 => 0.5,
                   11 => 0.5,
                   23 => 0.3);

The easiest way to do this, I think, is:
<?php
    // create a 2-deep array with the values and keys of $searchResult
    $array = array(
               $searchResult,
               array_keys($searchResult)
    );
    // use multisort, first on the values, then on the keys. This will erase
the indexes in the $searchResult array
    array_multisort($array[0], SORT_DESC,  $array[1], SORT_DESC);
    // get the ordered keys back in the $searchResult array
    $searchResult = array_combine($array[1], $array[0]);
    unset($array); //clear some memory
?>
nick ([AT]) nickyost ([DOT]) com 15-Sep-2011 03:36
USort function can be used to sort multidimensional arrays with almost no work
whatsoever by using the individual values within the custom sort function.

This function passes the entire child element even if it is not a string. If it
is an array, as would be the case in multidimensional arrays, it will pass the
whole child array as one parameter.

Therefore, do something elegant like this:

<?php
     // Sort the multidimensional array
     usort($results, "custom_sort");
     // Define the custom sort function
     function custom_sort($a,$b) {
          return $a['some_sub_var']>$b['some_sub_var'];
     }
?>

This does in 4 lines what other functions took 40 to 50 lines to do. This does
not require you to create temporary arrays or anything. This is, for me, a
highly preferred solution over this function.

Hope it helps!
info at ichier dot de 28-Jul-2011 08:59
if you want to sort an array by columns, this is the function to do it.

<?php
function array_csort() {        //coded by Ichier2003
    $args = func_get_args();
    $marray = array_shift($args);
    $msortline = 'return(array_multisort(';
    foreach ($args as $arg) {
        $i++;
        if (is_string($arg)) {
            foreach ($marray as $row) {
                $sortarr[$i][] = $row[$arg];
            }
        } else {
            $sortarr[$i] = $arg;
        }
        $msortline .= '$sortarr['.$i.'],';
    }
    $msortline .= '$marray));';
    eval($msortline);
    return $marray;
}
?>
thierryzo at hotmail dot fr 29-Jun-2011 02:27
//A very simple way to sort arrays with this kind of structure.

<?php
    $myArray =array(
        array("NUMCIE" => "001","REF" => "RXL","COLOR" => "RED","L1" => 4),
        array("NUMCIE" => "001","REF" => "RXL","COLOR" => "BLUE","L1" => 6),
        array("NUMCIE" => "001","REF" => "RHQ","COLOR" => "RED","L1" => 4),
        array("NUMCIE" => "002","REF" => "RXL","COLOR" => "YELLOW","L1" => 8));
       
       
    foreach($myArray as $c=>$key) {
        $sort_numcie[] = $key['NUMCIE'];
        $sort_ref[] = $key['REF'];
        $sort_color[] = $key['COLOR'];
    }

    array_multisort($sort_numcie, SORT_ASC, $sort_ref, SORT_STRING, $myArray);
    print_r($myArray);
   
?>    

//Result array
   
Array
(
    [0] => Array
        (
            [NUMCIE] => 001
            [REF] => RHQ
            [COLOR] => RED
            [L1] => 4
        )

    [1] => Array
        (
            [NUMCIE] => 001
            [REF] => RXL
            [COLOR] => BLUE
            [L1] => 6
        )

    [2] => Array
        (
            [NUMCIE] => 001
            [REF] => RXL
            [COLOR] => RED
            [L1] => 4
        )

    [3] => Array
        (
            [NUMCIE] => 002
            [REF] => RXL
            [COLOR] => YELLOW
            [L1] => 8
        )

)
Jaak Tamre 22-Mar-2011 06:42
I had a problem with sorting SimpleXMLElement list. I found a nice short
solution.

I have an array of ticket objects: $ticketList = $xml->Tickets;

<?php
// Sort by ValidOnDate
$tickets = array();
$valid = array();
foreach ($ticketList as $row) {
    $tickets[] = $row;
    $valid[] = DateHandler::parseDate($row->ValidOnDate);
}
array_multisort($valid, SORT_DESC, $tickets);
?>

Just make an array of object items you want to sort by and a new array for the
same objects which will be reordered like the first array.

Ps: my own parseDate(date) returns unix timestamp for different date formats.
jimpoz at jimpoz dot com 21-Oct-2010 02:26
I came up with an easy way to sort database-style results. This does what
example 3 does, except it takes care of creating those intermediate arrays for
you before passing control on to array_multisort().

<?php
function array_orderby()
{
    $args = func_get_args();
    $data = array_shift($args);
    foreach ($args as $n => $field) {
        if (is_string($field)) {
            $tmp = array();
            foreach ($data as $key => $row)
                $tmp[$key] = $row[$field];
            $args[$n] = $tmp;
            }
    }
    $args[] = &$data;
    call_user_func_array('array_multisort', $args);
    return array_pop($args);
}
?>

The sorted array is now in the return value of the function instead of being
passed by reference.

<?php
$data[] = array('volume' => 67, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 1);
$data[] = array('volume' => 85, 'edition' => 6);
$data[] = array('volume' => 98, 'edition' => 2);
$data[] = array('volume' => 86, 'edition' => 6);
$data[] = array('volume' => 67, 'edition' => 7);

// Pass the array, followed by the column names and sort flags
$sorted = array_orderby($data, 'volume', SORT_DESC, 'edition', SORT_ASC);
?>
m__faraz at hotmail dot com 08-Jun-2010 08:10
The last example for multisort an array by a text field works well.
However, it is case sensitive.
So here is my version of the same with case insensitivity.

<?php
$tmp = Array();
foreach($aMultiArray as &$aSingleArray)    $tmp[] = &$aSingleArray["name"];
$tmp = array_map('strtolower', $tmp);
array_multisort($tmp, $aMultiArray);
?>

Hope this helps someone out there.
zequez at gmail dot com 06-May-2010 03:19
Easiest way I find out to sort an entire multidimensional array by one element
of it:

<?php
$multiArray = Array(
    Array("id" => 1, "name" => "Defg"),
    Array("id" => 2, "name" => "Abcd"),
    Array("id" => 3, "name" => "Bcde"),
    Array("id" => 4, "name" => "Cdef"));
$tmp = Array();
foreach($multiArray as &$ma)
    $tmp[] = &$ma["name"];
array_multisort($tmp, $multiArray);
foreach($multiArray as &$ma)
    echo $ma["name"]."<br/>";
               
/* Outputs
    Abcd
    Bcde
    Cdef
    Defg
*/
?>

^-^
alexander dot v at zend dot com 20-Jan-2010 03:42
array_multisort works normally in php 5.3, but it forces arguments to be
references.

It doesn't make differences for common array_multisort() usage, but makes
"problems" for sorting variable number of arrays where call_user_func_array()
function is involved.

So all sorting arrays have to be collected into new one as a references to
array variables:

<?php
$sortArgs = array();

for (...) {
    ...
    $sortArgs[] = &$valuesArray;
    ...
}

call_user_func_array('array_multisort', $sortArgs);
?>

This (requiring arguments to be a reference) is not actually a problem since
source array will not be sorted otherwise.

Important note!
Don't forget to destroy $valuesArray variable if you use it over each
array_multisort() argument processing iteration.
If you don't do it, all array_multisort() arguments will contain the same
array:

<?php
for (...) {
    ...
    $sortArgs[] = &$valuesArray;
    unset($valuesArray);
    ...
}
?>

And the last important thing :)
Collect sorting arrays somewhere. PHP 5.3 will transfer reference into value
(when $valuesArray is destroyed) and you will get "Parameter 1 to
array_multisort() expected to be a reference, value given" warning again
otherwise.

Final code should look like this:

<?php
$sortArgs = array();
$sortFieldValues = array();

for (...) {
    ...
    $sortFieldValues[] = &$valuesArray;
    $sortArgs[] = &$valuesArray;
    unset($valuesArray);
    ...
}

call_user_func_array('array_multisort', $sortArgs);
?>
d_inkubus at yahoo dot com 21-Dec-2009 03:33
Update to array_msort()--in PHP 5.3 it won't work.

The solution is to replace the array_merge($params, $order) with the following
code snippet:

<?php
$order=(array)$order;
foreach($order as $order_element)
{
    $params[]=&$order_element;
}
?>

Full code to array_msort():

<?php
function array_msort($array, $cols)
{
    $colarr = array();
    foreach ($cols as $col => $order)
    {
        $colarr[$col] = array();
        foreach ($array as $k => $row)
        {
            $colarr[$col]['_'.$k] = strtolower($row[$col]);
        }
    }
    $params = array();
    foreach ($cols as $col => $order)
    {
   
        $params[] =&$colarr[$col];
        $order=(array)$order;
        foreach($order as $order_element)
        {
            //pass by reference, as required by php 5.3
            $params[]=&$order_element;
        }
    }
    call_user_func_array('array_multisort', $params);
    $ret = array();
    $keys = array();
    $first = true;
    foreach ($colarr as $col => $arr)
    {
        foreach ($arr as $k => $v)
        {
            if ($first)
            {
                $keys[$k] = substr($k,1);
            }
            $k = $keys[$k];
           
            if (!isset($ret[$k]))
            {
                $ret[$k] = $array[$k];
            }
           
            $ret[$k][$col] = $array[$k][$col];
        }
        $first = false;
    }
    return $ret;
}
?>

For further reference, see these bug reports:
http://bugs.php.net/bug.php?id=49069
http://bugs.php.net/bug.php?id=49241
s dot i dot g at gmx dot com 10-Jul-2009 06:21
simple dns mx record sorting

<?php
//getting domain name
list($user, $domain) = split('[@]', $email);
getmxrr($domain, $mx_server, $mx_weight);

//sorting
for($i = 0; $i < count($mx_server); $i++)
{
    $mx[$i] = array
    (
      "server" => $mx_server[$i],
      "weight" => $mx_weight[$i],
    );
}
array_multisort($mx_weight, SORT_ASC, $mx_server, SORT_ASC, $mx);

//display result
print_r($mx);

//usage
$server = $mx[0]["server"];
?>
cagret at gmail dot com 21-Jun-2009 03:38
Update to array_msort(): instead of eval() using call_user_func_array(). If we
get column sorting via $_GET it would be a serious security hole.

Now it also accepts multiple options for each column:

<?php
$arr2 = array_msort($arr1, array('name'=>array(SORT_DESC,SORT_REGULAR), 'cat'=>
SORT_ASC));
?>

Btw. this function is automatically case-insensitive, as you can see use of
strtolower().

<?php
function array_msort($array, $cols)
{
    $colarr = array();
    foreach ($cols as $col => $order) {
        $colarr[$col] = array();
        foreach ($array as $k => $row) { $colarr[$col]['_'.$k] = strtolower
($row[$col]); }
    }
    $params = array();
    foreach ($cols as $col => $order) {
        $params[] =& $colarr[$col];
        $params = array_merge($params, (array)$order);
    }
    call_user_func_array('array_multisort', $params);
    $ret = array();
    $keys = array();
    $first = true;
    foreach ($colarr as $col => $arr) {
        foreach ($arr as $k => $v) {
            if ($first) { $keys[$k] = substr($k,1); }
            $k = $keys[$k];
            if (!isset($ret[$k])) $ret[$k] = $array[$k];
            $ret[$k][$col] = $array[$k][$col];
        }
        $first = false;
    }
    return $ret;

}
?>
cagret at gmail dot com 20-Jun-2009 12:16
A more inuitive way of sorting multidimensional arrays using array_msort() in
just one line, you don't have to divide the original array into
per-column-arrays:

<?php

$arr1 = array(
    array('id'=>1,'name'=>'aA','cat'=>'cc'),
    array('id'=>2,'name'=>'aa','cat'=>'dd'),
    array('id'=>3,'name'=>'bb','cat'=>'cc'),
    array('id'=>4,'name'=>'bb','cat'=>'dd')
);

$arr2 = array_msort($arr1, array('name'=>SORT_DESC, 'cat'=>SORT_ASC));

debug($arr1, $arr2);

arr1:
    0:
        id: 1 (int)
        name: aA (string:2)
        cat: cc (string:2)
    1:
        id: 2 (int)
        name: aa (string:2)
        cat: dd (string:2)
    2:
        id: 3 (int)
        name: bb (string:2)
        cat: cc (string:2)
    3:
        id: 4 (int)
        name: bb (string:2)
        cat: dd (string:2)
arr2:
    2:
        id: 3 (int)
        name: bb (string:2)
        cat: cc (string:2)
    3:
        id: 4 (int)
        name: bb (string:2)
        cat: dd (string:2)
    0:
        id: 1 (int)
        name: aA (string:2)
        cat: cc (string:2)
    1:
        id: 2 (int)
        name: aa (string:2)
        cat: dd (string:2)

function array_msort($array, $cols)
{
    $colarr = array();
    foreach ($cols as $col => $order) {
        $colarr[$col] = array();
        foreach ($array as $k => $row) { $colarr[$col]['_'.$k] = strtolower
($row[$col]); }
    }
    $eval = 'array_multisort(';
    foreach ($cols as $col => $order) {
        $eval .= '$colarr[\''.$col.'\'],'.$order.',';
    }
    $eval = substr($eval,0,-1).');';
    eval($eval);
    $ret = array();
    foreach ($colarr as $col => $arr) {
        foreach ($arr as $k => $v) {
            $k = substr($k,1);
            if (!isset($ret[$k])) $ret[$k] = $array[$k];
            $ret[$k][$col] = $array[$k][$col];
        }
    }
    return $ret;

}

?>
m dot michalczyk at gmail dot com 16-May-2009 03:45
Here is useful example based on za at byza dot it solution to sort
multidimensional objects by any dimension.
za at byza dot it
<?php
/* Example structure */
class person{
    function __construct($firstName, $lastName, $title, $position){
        $this->firstName = $firstName;
        $this->lastName = $lastName;
        $this->title = new title($title);
        $this->position = new position($position);
    }
}
class title{
    function __construct($name){
        $this->name = $name;
    }
   
}
class position{
    function __construct($name){
        $this->name = $name;
    }

}

$array[] = new person('Piotr', 'Sobiepanek', 'b', 'b');
$array[] = new person('Piotr', 'Kowalski', 'b', 'a');
$array[] = new person('Piotr', 'Michalski', 'a', 'a');
$array[] = new person('Jozef', 'Smietana', 'a', 'b');
$array[] = new person('Jozef', 'Cmietana', 'a', 'b');
$array[] = new person('Marcin', 'Kondraciuk', 'c', 'b');
$array[] = new person('Maksym', 'Kondraciuk', 'c', 'd');
$array[] = new person('Ambrozy', 'Kondraciuk', 'c', 'd');
$array[] = new person('Alojzy', 'Kondraciuk', 'c', 'd');

array_sort($array, 'title->name', 'position->name', 'lastName');
print_r($array);

/* Source */

function hod(&$base, $path){
    $keys = explode("->", $path);
    $keys[0] = str_replace('$', '', $keys[0]);
    $expression = '$ret = ';
    $expression.= '$';
    foreach ($keys as $key){
        if (++$licz == 1){
            $expression.= 'base->';           
        } else {
            $expression.= $key.'->';
        }
    }
    $expression = substr($expression, 0, -2);
    $expression.= ';';
    eval($expression);
    return $ret;
}

function array_sort_func($a,$b=NULL) {
   static $keys;
   if($b===NULL) return $keys=$a;
   foreach($keys as $k) {
      if($k[0]=='!') {
         $k=substr($k,1);
         if(hod($a, '$a->'.$k)!==hod($b, '$b->'.$k)) {
            return strcmp(hod($b, '$b->'.$k),hod($a, '$a->'.$k));
         }
      }
      else if(hod($a, '$a->'.$k)!==hod($b, '$b->'.$k)) {
         return strcmp(hod($a, '$a->'.$k),hod($b, '$b->'.$k));
      }
   }
   return 0;
}

function array_sort(&$array) {
   if(!$array) return $keys;
   $keys=func_get_args();
   array_shift($keys);
   array_sort_func($keys);
   usort($array,"array_sort_func");      
}
?>
za at byza dot it 27-Apr-2009 10:08
I wrote a function to sort a multidimensional array by multiple columns in
ascending and descending order.

Sample array:

<?php
$my_array=array(
   array('id'=>1, 'surname'=>'rossi', 'name'=>'mario', 'group'=>'admin'),
   array('id'=>2, 'surname'=>'rossi', 'name'=>'giovanni', 'group'=>'user'),
   array('id'=>3, 'surname'=>'verdi', 'name'=>'luigi', 'group'=>'user'),
   array('id'=>4, 'surname'=>'verdi', 'name'=>'franco', 'group'=>'guest'),
   array('id'=>5, 'surname'=>'bianchi', 'name'=>'mario', 'group'=>'guest')
);
?>

Example: <?php array_sort($my_array,'!group','surname'); ?>

Output: sort the array DESCENDING by group and then ASCENDING by surname.
Notice the use of ! to reverse the sort order. Rows order will be: 2,3,5,4,1

The function code:

<?php
function array_sort_func($a,$b=NULL) {
   static $keys;
   if($b===NULL) return $keys=$a;
   foreach($keys as $k) {
      if(@$k[0]=='!') {
         $k=substr($k,1);
         if(@$a[$k]!==@$b[$k]) {
            return strcmp(@$b[$k],@$a[$k]);
         }
      }
      else if(@$a[$k]!==@$b[$k]) {
         return strcmp(@$a[$k],@$b[$k]);
      }
   }
   return 0;
}

function array_sort(&$array) {
   if(!$array) return $keys;
   $keys=func_get_args();
   array_shift($keys);
   array_sort_func($keys);
   usort($array,"array_sort_func");       
}
?>
mech.cx 28-Mar-2009 12:04
I was (as near everyone here :-) looking to sort 2-dimensional arrays by
certain fields in the associative sub-arrays.
What I didn't like about the documentation examples is that you need to loop
through the input array to create sub arrays first, then use those in the
function call.

"php a-t-the-r-a-t-e chir.ag" (http://www.php.net/manual/en/
function.array-multisort.php#60401) wrote a quite cunning wrapper function, I
rewrote it slightly, changing variable names and adding comments (for my sanity
:-) mostly.
One snag I found: the input array is passed to array_multisort as last
argument, but the changed array is not the one that is returned. Passing it by
reference fixed that. This seems to be caused by the whole thing sitting inside
the call_user_func_array, as shown below.

<?php

$points = array(1, 5, 2, 2);
$names  = array('peter', 'mike', 'john Zoo', 'john Ab');

$source = array (
  array ( 'points' => 1, 'name' => 'Peter'),
  array ( 'points' => 5, 'name' => 'Mike'),
  array ( 'points' => 2, 'name' => 'John Zoo'),
  array ( 'points' => 2, 'name' => 'John Ab')
);

call_user_func_array('array_multisort', array($points, SORT_DESC, SORT_NUMERIC,
$names, SORT_ASC, SORT_STRING, $source)); // doesn't work
print_r($source);
call_user_func_array('array_multisort', array($points, SORT_DESC, SORT_NUMERIC,
$names, SORT_ASC, SORT_STRING, &$source)); // works!
print_r($source);

// Call like arrayColumnSort('points', SORT_DESC, SORT_NUMERIC, 'name',
SORT_ASC, SORT_STRING, $source);

// Slightly adapted from http://www.php.net/manual/en/
function.array-multisort.php#60401

// arrayColumnSort(string $field, [options, ], string $field2, [options, ],
.... , $array) /

//____________________
// arrayColumnSort() /
function arrayColumnSort() {
  $args  = func_get_args();
  $array = array_pop($args);
  if (! is_array($array)) return false;
  // Here we'll sift out the values from the columns we want to sort on, and
put them in numbered 'subar' ("sub-array") arrays.
  //   (So when sorting by two fields with two modifiers (sort options) each,
this will create $subar0 and $subar3)
  foreach($array as $key => $row) // loop through source array
    foreach($args as $akey => $val) // loop through args (fields and modifiers)
      if(is_string($val))             // if the arg's a field, add its value
from the source array to a sub-array
        ${"subar$akey"}[$key] = $row[$val];
  // $multisort_args contains the arguments that would (/will) go into
array_multisort(): sub-arrays, modifiers and the source array
  $multisort_args = array();
  foreach($args as $key => $val)
    $multisort_args[] = (is_string($val) ? ${"subar$key"} : $val);
  $multisort_args[] = &$array;   // finally add the source array, by reference
  call_user_func_array("array_multisort", $multisort_args);
  return $array;
}

?>
frank at overdrunk dot net 14-Jan-2009 02:38
I had a function to make a sort on a 2D array and I wanted to sort an array
using a column that usualy contains numeric values but also strings.

Lets say we have this array :

Array (
  [0] => Array ( "name" = "12000" ),
  [1] => Array ( "name" = "113" ),
  [2] => Array ( "name" = "test 01" ),
  [3] => Array ( "name" = "15000 tests" ),
  [4] => Array ( "name" = "45" ),
  [5] => Array ( "name" = "350" ),
  [6] => Array ( "name" = "725" ),
  [7] => Array ( "name" = "hello" )
}

SORT_STRING whould have returned me this :

Array ( // Numeric values are not correctly sorted
  [0] => Array ( "name" = "113" ),
  [1] => Array ( "name" = "12000" ),
  [2] => Array ( "name" = "15000 tests" ),
  [3] => Array ( "name" = "350" ),
  [4] => Array ( "name" = "45" ),
  [5] => Array ( "name" = "725" ),
  [6] => Array ( "name" = "hello" ),
  [7] => Array ( "name" = "test 01" )
}

SORT_NUMERIC would have returned me this :

Array ( // String values are not sorted, just in the same order
  [0] => Array ( "name" = "test 01" ),
  [1] => Array ( "name" = "hello" ),
  [2] => Array ( "name" = "45" ),
  [3] => Array ( "name" = "113" ),
  [4] => Array ( "name" = "350" ),
  [5] => Array ( "name" = "725" ),
  [6] => Array ( "name" = "12000" ),
  [7] => Array ( "name" = "15000 tests" ),
}

So I've made this hybrid code which combines the best of both worlds by merging
content sorted either way according to the first caracter of the string:

<?php
/**
 * Sorts an array according to a specified column
 * Params : array  $table
 *          string $colname
 *          bool   $numeric
 **/
function sort_col($table, $colname) {
  $tn = $ts = $temp_num = $temp_str = array();
  foreach ($table as $key => $row) {
    if(is_numeric(substr($row[$colname], 0, 1))) {
      $tn[$key] = $row[$colname];
      $temp_num[$key] = $row;
    }
    else {
      $ts[$key] = $row[$colname];
      $temp_str[$key] = $row;
    }
  }
  unset($table);

  array_multisort($tn, SORT_ASC, SORT_NUMERIC, $temp_num);
  array_multisort($ts, SORT_ASC, SORT_STRING, $temp_str);
  return array_merge($temp_num, $temp_str);
}
?>

It would return something like this :

Array (
  [2] => Array ( "name" = "45" ),
  [3] => Array ( "name" = "113" ),
  [4] => Array ( "name" = "350" ),
  [5] => Array ( "name" = "725" ),
  [6] => Array ( "name" = "12000" ),
  [7] => Array ( "name" = "15000 tests" ),
  [1] => Array ( "name" = "hello" ),
  [0] => Array ( "name" = "test 01" ),
}
Zbigniew Heintze http://bigweb.pl 26-Nov-2008 11:36
<?php
/**
 * Sort DB result
 *
 * @param array $data Result of sql query as associative array
 *
 * Rest of parameters are optional
 * [, string $name  [, mixed $name or $order  [, mixed $name or $mode]]]
 * $name string - column name i database table
 * $order integer - sorting direction ascending (SORT_ASC) or descending
(SORT_DESC)
 * $mode integer - sorting mode (SORT_REGULAR, SORT_STRING, SORT_NUMERIC)
 *
 * <code>
 * <?php
 * // You can sort data by several columns e.g.
 * $data = array();
 * for ($i = 1; $i <= 10; $i++) {
 *     $data[] = array( 'id' => $i,
 *                      'first_name' => sprintf('first_name_%s', rand(1, 9)),
 *                      'last_name' => sprintf('last_name_%s', rand(1, 9)),
 *                      'date' => date('Y-m-d', rand(0, time()))
 *                  );
 * }
 * $data = sortDbResult($data, 'date', SORT_DESC, SORT_NUMERIC, 'id');
 * printf('<pre>%s</pre>', print_r($data, true));
 * $data = sortDbResult($data, 'last_name', SORT_ASC, SORT_STRING,
'first_name', SORT_ASC, SORT_STRING);    
 * printf('<pre>%s</pre>', print_r($data, true));
 * ?>
 * </code>
 *
 * @return array $data - Sorted data
 */
function sortDbResult(array $data /*$name, $order, $mode*/) {
    $_argList = func_get_args();
    $_data = array_shift($_argList);
    if (empty($_data)) {
        return $_data;
    }
    $_max = count($_argList);
    $_params = array();
    $_cols = array();
    $_rules = array();
    for ($_i = 0; $_i < $_max; $_i += 3)
    {
        $_name = (string) $_argList[$_i];
        if (!in_array($_name, array_keys(current($_data)))) {
            continue;
        }
        if (!isset($_argList[($_i + 1)]) || is_string($_argList[($_i + 1)])) {
            $_order = SORT_ASC;
            $_mode = SORT_REGULAR;
            $_i -= 2;
        } else if (3 > $_argList[($_i + 1)]) {
            $_order = SORT_ASC;
            $_mode = $_argList[($_i + 1)];
            $_i--;
        } else {
            $_order = $_argList[($_i + 1)] == SORT_ASC ? SORT_ASC : SORT_DESC;
            if (!isset($_argList[($_i + 2)]) || is_string($_argList[($_i +
2)])) {
                $_mode = SORT_REGULAR;
                $_i--;
            } else {
                $_mode = $_argList[($_i + 2)];
            }
        }
        $_mode = $_mode != SORT_NUMERIC
                    ? $_argList[($_i + 2)] != SORT_STRING ? SORT_REGULAR :
SORT_STRING
                    : SORT_NUMERIC;
        $_rules[] = array('name' => $_name, 'order' => $_order, 'mode' =>
$_mode);
    }
    foreach ($_data as $_k => $_row) {
        foreach ($_rules as $_rule) {
            if (!isset($_cols[$_rule['name']])) {
                $_cols[$_rule['name']] = array();
                $_params[] = &$_cols[$_rule['name']];
                $_params[] = $_rule['order'];
                $_params[] = $_rule['mode'];
            }
            $_cols[$_rule['name']][$_k] = $_row[$_rule['name']];
        }
    }
    $_params[] = &$_data;
    call_user_func_array('array_multisort', $_params);
    return $_data;
}
?>
oOo at OoO dot com 10-Nov-2008 12:58
Since the manual doesn't specify so, I want to point out that the SORT_NUMERIC
flag does also work correctly if the values are floating point numbers.
Just don't forget to also add the respective SORT_ASC or SORT_DESC flag :)
matt at idizinc dot com 23-Oct-2008 11:47
I looked on some forms for an answer to this simple problem and couldn't find
one so I came up with a solution that may help in some situations.

How do you sort an array by a field in that array and resolve numeric ties
randomly?

Code:
<?php

foreach($list as $temp_list)
{
   $sort_aux[] = ($temp_list['column_to_sort_by']+(rand(1, 9)/10));
}
array_multisort($sort_aux, SORT_NUMERIC, $list);

?>

Example:

$list[]=array('name'=>'Tom', 'score'=>3);
$list[]=array('name'=>'Sam', 'score'=>3);
$list[]=array('name'=>'Joey', 'score'=>1);

Explanation:
I took an existing example found above that shows how to sort an array by one
of it's columns/fields.
I just added: "+(rand(1,9)/10)" To randomly add .1 through .9 to their score to
resolve the tie. (Obviously this specific example only works if you're sorting
by an integer... so you may need to modify it to suit your needs.)

Hope this helps someone.
isp dot php at spspft dot de 19-Oct-2008 05:44
I would like to report a kind of confusion that arose with the message

Warning: Call-time pass-by-reference has been deprecated; If you would like to
pass it by reference, modify the declaration of array_multisort(). If you would
like to enable call-time pass-by-reference, you can set
allow_call_time_pass_reference to true in your INI file...

from a line like this:

array_multisort (&$keyarr, &$arr );// sort against this keys

This message is not easily switched off by changing the error reporting level
because it's produced at parsinig time -- not execution time.

I think this message is misleading because the arguments are passed by
reference ANYWAY in array_multisort.

Anybody encountering this message should know that nothing has to be done,
except deleting the ampersands (&).
I was tricked by this message because of couse I wanted to have the *sorted*
array back. And couldn't find the ini file nor the declaration of
array_multisort.
I think in this description of array_multisort the call by reference should be
listed in the definition.

Hope this helps someone
seiffs_at_centrum-dot-cz 18-Aug-2008 08:53
There have to be two corrections to the php_multisort($data,$keys)

    // Sort Expression
    $i=0;
    $sort='';  //here
    foreach ($keys as $k){
      if($i>0){$sort.=',';}
      $sort.='$cols[\''.$k['key'].'\']'; //and here
      if($k['sort']){$sort.=',SORT_'.strtoupper($k['sort']);}
      if($k['type']){$sort.=',SORT_'.strtoupper($k['type']);}
      $i++;
    }
php {dot} net [arrt] sebble.com 11-May-2008 02:16
I was requiring a PHP function a sort my array data as part of an SQL
interpreter for PHP arrays. This is the code I came up with. and works
wonderfully.

I hope this helps somebody. If anyone uses this, let me know what you think, if
there are any problems with it...

<?

##                ##
##  PHPMultiSort  ##
##                ##
// Takes:
//        $data,  multidim array
//        $keys,  array(array(key=>col1, sort=>desc), array(key=>col2, type=>
numeric))

function php_multisort($data,$keys){
 
 
 
  // List As Columns
  foreach ($data as $key => $row) {
    foreach ($keys as $k){
      $cols[$k['key']][$key] = $row[$k['key']];
    }
  }
  // List original keys
  $idkeys=array_keys($data);
  // Sort Expression
  $i=0;
  foreach ($keys as $k){
    if($i>0){$sort.=',';}
    $sort.='$cols['.$k['key'].']';
    if($k['sort']){$sort.=',SORT_'.strtoupper($k['sort']);}
    if($k['type']){$sort.=',SORT_'.strtoupper($k['type']);}
    $i++;
  }
  $sort.=',$idkeys';
  // Sort Funct
  $sort='array_multisort('.$sort.');';
  eval($sort);
  // Rebuild Full Array
  foreach($idkeys as $idkey){
    $result[$idkey]=$data[$idkey];
  }
  return $result;
}

###############

// Example Data

$_DATA['table1'][] = array("name" => "Sebastian", "age" => 18, "male" => true);
$_DATA['table1'][] = array("name" => "Lawrence",  "age" => 16, "male" => true);
$_DATA['table1'][] = array("name" => "Olivia",    "age" => 10, "male" =>
false);
$_DATA['table1'][] = array("name" => "Dad",       "age" => 50, "male" => true);
$_DATA['table1'][] = array("name" => "Mum",       "age" => 40, "male" =>
false);
$_DATA['table1'][] = array("name" => "Sebastian", "age" => 56, "male" => true);
$_DATA['table1'][] = array("name" => "Lawrence",  "age" => 19, "male" => true);
$_DATA['table1'][] = array("name" => "Olivia",    "age" => 24, "male" =>
false);
$_DATA['table1'][] = array("name" => "Dad",       "age" => 10, "male" => true);
$_DATA['table1'][] = array("name" => "Mum",       "age" => 70, "male" =>
false);

###############

$res=php_multisort($_DATA['table1'], array(array('key'=>'name'),array('key'=>
'age','sort'=>'desc')))
var_dump($res);

/*
array(10) {
  [8]=>
  array(3) {
    ["name"]=>
    string(3) "Dad"
    ["age"]=>
    int(10)
    ["male"]=>
    bool(true)
  }
  [3]=>
  array(3) {
    ["name"]=>
    string(3) "Dad"
    ["age"]=>
    int(50)
    ["male"]=>
    bool(true)
  }
  [1]=>
  array(3) {
    ["name"]=>
    string(8) "Lawrence"
    ["age"]=>
    int(16)
    ["male"]=>
    bool(true)
  }
  [6]=>
  array(3) {
    ["name"]=>
    string(8...
*/
?>
No Spam 23-Apr-2008 03:02
To sort the array returned e.g. by oci_fetch_all you must divide it in seperate
arrays.
Example:
<?php
$rows=oci_fetch_all($stmt,$results);
?>
now you have several arrays each named by the key name in the sql result.
E.g. array of names, array of streets, array of towns.
To sort the result by e.g. towns you would do the following:
<?php
array_multisort($results[towns],$results[names],$results[streets]);
?>
Done.
To display the result sorted by towns you could use this:
<?php
print_r(array("names"=>$results[names],"streets"=>$results[streets],
"towns"=>$result[towns]));
?>
joopm at hotmail dot com 10-Apr-2008 04:50
@ scott at bartoncomputer dot com

You could also reference the array (if you wanted the original array in the
object sorted):

array_multisort($position, SORT_DESC, &$clsVar->data);

Regards, Chr.
nickl at hamiltontampa dot com 24-Feb-2008 11:02
I believe this should read:

foreach($firstarray as $sortarray){
      $column[] = $sortarray['email'];
}

//sort arrays after loop
array_multisort($column, SORT_ASC, $firstarray);

Otherwise you will get an array is inconsistent err because $column array won't
equal $firstarray until the loop completes.

It was the only way I got it to work, then it was fine. If I am wrong please
post a correction.
glenn at freebsd dot nl 29-Nov-2007 10:49
To sort a nested array by column (key/index):

Example: two entries in the nested array:

firstarray[0]['adres'] = "adres1"
firstarray[0]['email'] = "email2"

firstarray[1]['adres'] = "adres2"
firstarray[1]['email'] = "email1"

-----------------------------------------

Without code: output would put adres1/email2 on top

-----------------------------------------

foreach($firstarray as $sortarray)
{
$column[] = $sortarray['email'];
array_multisort($column, SORT_ASC, $firstarray);
}

-----------------------------------------

With code: output would put adres2/email1 on top
scott at bartoncomputer dot com 03-May-2007 10:18
I didn't see this noted anywhere, so I figured I'd put in a little comment
regarding arrays located inside classes. For instance:

class abc
{
   var $data;
}

The following code does not act as expected:

$clsVar =& new abc();

foreach ($clsVar->data as $key => $row)
{
   $position[$key]  = $key;       
}

array_multisort($position, SORT_DESC, $clsVar->data);

While I realize this could much easily be acheived using ksort(), this is
merely a much more simple example of this behaviour. The exerpt above comes
from a much more complicated sort using multi-scripted arrays.

Anyway the only way I could find to get around the behaviour of multisort not
sorting the referenced class-array was to make a copy of it as below:

$clsVar =& new abc();
$newData = $clsVar->data;

foreach ($newData as $key => $row)
{
   $position[$key]  = $key;       
}

array_multisort($position, SORT_DESC, $newData);

Now newData will contain the sorted array as expected. 

Hopefully this helps someone else!
10-Apr-2007 03:01
<?php

    $strDeger = 'aaaa|bbbb|cccc';

    $arrBol = explode('|',$strDeger);

    array_multisort($arrBol, SORT_DESC);

    for($i = 0; $i <= count($arrBol); $i++) {

        echo $arrBol[$i].'<br />';

    }

?>
vermon7 27-Feb-2007 01:23
When using array_multisort() on copies of arrays, it is changing all the
copies, even if you modify the copy before using array_multisort().

I've avoided this bug by serializing a copy of array before calling
array_multisort, and unserializg it after array_multisort() Look at the code:

<?php

$records_copy = serialize($records) ;
array_multisort ( $records[$sort_field] , $records[$sort2_field] ) ;
$records_copy = unserialize($records_copy) ;

?>
Jon L. -- intel352 [AT] gmail [DOT] com 26-Feb-2007 08:27
This is my solution for a dynamic multisort, using POST values. This doesn't
account for a need to sort by multiple columns at once, but could be modified
for that purpose.

<?php
    /**
    * @desc You really should validate the posted sort direction against a list
of valid possibilities.
    *         Options are SORT_ASC, SORT_DESC, etc, as shown in the
documentation for array_multisort
    */
    $sort['direction'] = $_POST['sort_direction'] ? $_POST['sort_direction'] :
'SORT_ASC';
    $sort['field']       = $_POST['sort_field'] ? $_POST['sort_field'] :
'value';

    $array_to_sort = array();   
    $array_to_sort['TestCase1'] = array('name'=>'Test1','value'=>'218');
    $array_to_sort['TestCase2'] = array('name'=>'Test2','value'=>'10');
    $array_to_sort['TestCase3'] = array('name'=>'Test3','value'=>'64');
   
    /**
    * @desc Build columns using the values, for sorting in php
    */
    $sort_arr = array();
    foreach($array_to_sort AS $uniqid => $row){
        foreach($row AS $key=>$value){
            $sort_arr[$key][$uniqid] = $value;
        }
    }
   
    print '<b>Before sorting</b>: <br> <pre>';
    print_r($array_to_sort);
    print '</pre>';
   
    if($sort['direction']){
        array_multisort($sort_arr[$sort['field']], constant($sort
['direction']), $array_to_sort);
    }

    print '<b>After sorting</b>: <br> <pre>';
    print_r($array_to_sort);
    print '</pre>';
   
?>

This example prints out:

Before sorting:

Array
(
    [TestCase1] => Array
        (
            [name] => Test1
            [value] => 218
        )

    [TestCase2] => Array
        (
            [name] => Test2
            [value] => 10
        )

    [TestCase3] => Array
        (
            [name] => Test3
            [value] => 64
        )

)

After sorting:

Array
(
    [TestCase2] => Array
        (
            [name] => Test2
            [value] => 10
        )

    [TestCase3] => Array
        (
            [name] => Test3
            [value] => 64
        )

    [TestCase1] => Array
        (
            [name] => Test1
            [value] => 218
        )

)
01-Dec-2006 06:58
casting the parameter arrays for array_multisort seem to make the sorting
ineffective?

for example:-
<?
        foreach((array)$report_files as $report_files_i)
        {
            $file_stat = stat($report_files_i);
            $report_files_x[] = array(
                'filename'      => $report_files_i
                ,'basename'     => basename($report_files_i)
                ,'ctime'        => date("D, M j, Y",$file_stat['ctime'])
                ,'size'         => $file_stat['size']
                );

            $basename_i[] = strtolower(basename($report_files_i)); // case
insensitive

        }
        array_multisort($basename_i, SORT_ASC, $report_files_x);
?>
The above works but if you change the last time to :-
<?
        array_multisort((array)$basename_i, SORT_ASC, (array)$report_files_x);
?>
...adding the (array) cast doesn't sort the main array ...
brettz9 throu gh yah 14-Sep-2006 12:04
Often, one may have a group of arrays which have parallel data that need to be
kept associated with each other (e.g., the various attribute values of a group
of elements might be stored in their own arrays). Using array_multisort as is,
by specifying additional fields, it is possible, as in the documentation
example cited below, that this association will be lost.

To take this example set of data from the documentation:
<?php
$ar1 = array("10", 100, 100, "a");
$ar2 = array(1, 3, "2", 1);
?>

The example goes on to sort it this way:
<?php
array_multisort($ar1, $ar2);
?>

In this case, although the "10" remains associated with the first '1' after
being sorted, the "2" and '3' are reversed from their original order.

In order to sort by one field only (yet still have the other array(s) being
correspondingly sorted), one can use array_keys (which makes an array out of
the keys) to ensure that no further sub-sorting is performed. This works
because array_keys is making an array for which no duplicates can exist (since
keys will be unique), and thus, the subsequent fields will have no relevance as
far as subsorting.

So, using the above data, we can perform this sort instead:
<?php
$ar3 = array_keys($ar1);
array_multisort($ar1, $ar3, $ar2);
?>

which, when $ar1 and $ar2 are dumped gives:

array(4) {
  [0]=> string(2) "10"
  [1]=> string(1) "a"
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=>  int(1)
  [1]=>  int(1)
  [2]=>  int(3)
  [3]=>  string(1) "2"
}
ricardo 04-Sep-2006 05:47
Hi,

Modded the function from KES,
goals:
- Object oriented
- string comparision using naturalordening

code:
<?
class HtmlTable{
    var $sortorder;
    var $rows;

//row adding stuf and constructor removed

    function sort($sortorder){
        if(is_array($sortorder)){
            $this->sortorder=$sortorder;
            usort($this->rows,array(&$this,'sort_compare'));
        }
    }
    function sort_compare($a,$b){//sort function
        $result=0;
        foreach($this->sortorder as $key=>$value){
            $result=strnatcmp($a[$key],$b[$key]);
            if($result==0)continue;
            if($value=='desc')$result=$result*-1;
            break;
        }
        return $result;
    }
}
?>
LPChip 28-Aug-2006 06:04
I was looking for a way to dynamically multisort my array.

By dynamically I mean that its not static what column will be sorted and if its
ASC or DESC, and the ability to have more than one sorts.

This is the way a database would allow you to do.

The best way to dynamically do this, is by using eval.

The code below is partly what I used. (eg, I left out where the arrays were
made and stuff, but the important part is here.)

<?

$orderby_arr = array("col1 ASC";"col2 DESC");

// prepare multisort using eval
        $eval_sort  = "array_multisort(";

        if ($orderby !="") {

            $orderby_arr_c = count($orderby_arr);

            for ($orderby_walk=0; $orderby_walk < $orderby_arr_c;
$orderby_walk++) {
                $pos = strpos($orderby_arr[$orderby_walk], " ");
                $orderby_col = substr($orderby_arr[$orderby_walk], 0, $pos);
                $orderby_type = substr($orderby_arr[$orderby_walk], $pos+1);

                $eval_sort .= "\$this->OrderBy[$orderby_col]" . ",
SORT_$orderby_type,";
            }
        }
       
        $eval_sort .= " \$this->Current_Query);";

        // if there's an array, sort it.
        if ($this->Current_Query_m != -1) eval($eval_sort);
?>
RQuadling at GMail dot com 07-Aug-2006 05:53
Extending KES's example (http://www.php.net/manual/en/
function.array-multisort.php#68452) to look like array_multisort().

NOTE: Fully commented code is available at http://rquadling.php1h.com (sorry
for the ads).

The syntax is the same as array_multisort().

You also have 3 additional parameters you can use:

AMC_SORT_STRING_CASELESS to sort the strings case insensitively.
AMC_LOSE_ASSOCIATION (the default behaviour) to lose the associations for the
array.
AMC_KEEP_ASSOCIATION to keep the associations for the array.

Other than that, these function work together JUST like array_multisort but
sorts using column(s) without the need to first extract the columns into
individual arrays.

<?php
define ('AMC_SORT_STRING_CASELESS', SORT_STRING + 1);
define ('AMC_LOSE_ASSOCIATION', 1001);
define ('AMC_KEEP_ASSOCIATION', 1002);
define ('AMC_SORT_ORDER', 1003);
define ('AMC_SORT_TYPE', 1004);

function array_multisort_column(array &$a_data, $m_mixed1)
    {
    $a_Args = func_get_args();
    $i_Args = func_num_args();
    $GLOBALS['a_AMC_ordering'] = array();
    $a_Columns = array_keys(reset($a_data));
    $b_KeepAssociation = False;
    for($i_Arg = 1 ; $i_Arg < $i_Args ; )
        {
        if (in_array($a_Args[$i_Arg], $a_Columns))
            {
            $s_Column = $a_Args[$i_Arg];
            $GLOBALS['a_AMC_ordering'][$a_Args[$i_Arg]] = array
                (
                AMC_SORT_ORDER => SORT_ASC,
                AMC_SORT_TYPE => SORT_REGULAR,
                );
            while
                (
                isset($a_Args[$i_Arg + 1]) &&
                in_array
                    (
                    $a_Args[$i_Arg + 1],
                    array
                        (
                        AMC_KEEP_ASSOCIATION,
                        AMC_LOSE_ASSOCIATION,
                        AMC_SORT_STRING_CASELESS,
                        SORT_ASC,
                        SORT_DESC
                        SORT_NUMERIC,
                        SORT_REGULAR,
                        SORT_STRING,
                        ),
                    True
                    )
                )
                {
                if (in_array($a_Args[$i_Arg + 1], array(SORT_ASC, SORT_DESC),
True))
                    {
                    $GLOBALS['a_AMC_ordering'][$s_Column][AMC_SORT_ORDER] =
$a_Args[$i_Arg + 1];
                    }
                elseif (in_array($a_Args[$i_Arg + 1], array(SORT_REGULAR,
SORT_NUMERIC, SORT_STRING, AMC_SORT_STRING_CASELESS), True))
                    {
                    $GLOBALS['a_AMC_ordering'][$s_Column][AMC_SORT_TYPE] =
$a_Args[$i_Arg + 1];
                    }
                elseif (AMC_KEEP_ASSOCIATION == $a_Args[$i_Arg + 1])
                    {
                    $b_KeepAssociation = True;
                    }
                ++$i_Arg;
                }   
            }
        ++$i_Arg;
        }
    $s_Sorter = ($b_KeepAssociation ? 'uasort' : 'usort');
    $b_Result = $s_Sorter($a_data, 'array_multisort_column_cmp');
    unset($GLOBALS['a_AMC_ordering']);
    return $b_Result;
    }

function array_multisort_column_cmp(array &$a_left, array &$a_right)
    {
    $i_Result = 0;
    foreach($GLOBALS['a_AMC_ordering'] as $s_Column => $a_ColumnData)
        {
        switch ($a_ColumnData[AMC_SORT_TYPE])
            {
            case SORT_NUMERIC :
                $i_ColumnCompareResult =
                    ((intval($a_left[$s_Column]) == intval($a_right
[$s_Column]))
                    ?
                        0
                    :
                        ((intval($a_left[$s_Column]) < intval($a_right
[$s_Column]))
                        ?
                            -1
                        :
                            1
                        )
                    );
                break;
            case SORT_STRING :
                $i_ColumnCompareResult = strcmp((string)$a_left[$s_Column],
(string)$a_right[$s_Column]);
                break;
            case AMC_SORT_STRING_CASELESS :
                $i_ColumnCompareResult = strcasecmp((string)$a_left[$s_Column],
(string)$a_right[$s_Column]);
                break;
            case SORT_REGULAR :
            default :
                $i_ColumnCompareResult =
                    (($a_left[$s_Column] == $a_right[$s_Column])
                    ?
                        0
                    :
                        (($a_left[$s_Column] < $a_right[$s_Column])
                        ?
                            -1
                        :
                            1
                        )
                    );
                break;
            }
        if (0 == $i_ColumnCompareResult)
            {
            continue;
            }
        $i_Result = $i_ColumnCompareResult * (($a_ColumnData[AMC_SORT_ORDER] ==
SORT_DESC) ? -1 : 1);
        break;
        }
    return $i_Result;
    }
?>
KES http://kes.net.ua 27-Jul-2006 05:30
<?
//sort by second column then first one
$orderBy=array('0'=>'desc', 'first'=>'asc');

function KES_cmp($a, $b) {
  global $orderBy;
  $result= 0;
  foreach( $orderBy as $key => $value ) {
    if( $a[$key] == $b[$key] ) continue;
    $result= ($a[$key] < $b[$key])? -1 : 1;
    if( $value=='desc' ) $result= -$result;
    break;
    }
  return $result;
  }

$result= array();
$result[]= array( 'first'=>6, 2);
$result[]= array( 'first'=>3, 2);
$result[]= array( 'first'=>1, 3);
$result[]= array( 'first'=>1, 2);
$result[]= array( 'first'=>6, 1);

print "<b>Source</b>";
print_r($result);

usort($result, 'KES_cmp');
print "<b>Result</b>";
print_r($result);
?>
KES 27-Jul-2006 04:35
It is very handy to have function, which sort like this:

$arrayToSort[]= array(0 => ".",               "type" => "dir");
$arrayToSort[]= array(0 => "qf",              "type" => "file");
$arrayToSort[]= array(0 => "..",              "type" => "dir");
$arrayToSort[]= array(0 => "text.txt",      "type" => "file");
$arrayToSort[]= array(0 => "hello",          "type" => "dir");

//first sort by the column 'type', then sort by the column '0'
$howToSort= array('type'=> 'asc', 0=> 'desc');

multisort($arrayToSort, $howToSort);

The result:
0           |       type
----------------------------
.           | dir
..           | dir
hello       | dir
text.txt    | file
qf          | file
Cesar Sirvent 17-May-2006 09:43
There is a problem with array_multisort in languages other than English.
For special chars, as A with accent (Á), the sorting does not correspond to
what might expect from a MySQL SELECT with ORDER BY.

For example

<?php
 
       foreach ($students as $key => $row){
          $surname[$key] = $row['surname'];
       }
       array_multisort($surname, SORT_ASC, $students);
?>

will sort the array in this way: ABADIA, ALVAREZ, BUÑUEL, ZUBIETA, ÁLVARES

while a MySQL SELECT with ORDER BY nombre ASC will yield

ABADIA, ÁLVARES, ALVEREZ, BUÑUEL, ZUBIETA

as A and Á are considered two different representations of the same letter.
scott - evolove - net - work it out 22-Mar-2006 07:51
A very simple way to sort an array of associative arrays by some value is to
use usort.

I needed to sort an array of 20 data structures by their 'distance' value:

Array
(
    [0] => Array
        (
            [blahblah] => blahblah
            [distance] => 6
        )

    [1] => Array
        (
          you get the idea....

Here's the code:

--------------------
usort($results, "distributor_compare");

/**
 * usort callback
 */
function distributor_compare($a, $b) {
    $adist = intval($a['distance']);
    $bdist = intval($b['distance']);
   
    if ($adist == $bdist) {
     return 0;
     }
     return ($adist < $bdist) ? -1 : 1;   
}
--------------------
peter dot graham at tcat dot ac dot uk 16-Feb-2006 07:16
Many thanks to  AlberT at SuperAlberT dot it  for his useful and elegant
function. I have made some small alterations so it doesn t use
pass-by-reference as this throws up warnings in newer versions of php4.

<?php

function array_key_multi_sort($arr, $l , $f='strnatcasecmp')
{
    usort($arr, create_function('$a, $b', "return $f(\$a['$l'], \$b['$l']);"));
    return($arr);
}

?>
mail at theopensource dot com 31-Jan-2006 11:34
I wanted to share with you a function that I created to make the
array_multisort process much easier for myself... There was some interesting
things that I encountered and I will post that in the comments.

I created this function so that all I have to do is tell it what column I want
to sort through in a one level deep multidimensional array.  You can Try this
code in your browser to view the results

ex/
<?php

//Here is an array example
$test[0]['name'] = "David";
$test[0]['age'] = 28;
$test[1]['name'] = "Dennis";
$test[1]['age'] = 23;
$test[2]['name'] = "Joseph";
$test[2]['age'] = 42;

//Here is the Function

function sortmddata($array, $by, $order, $type){

//$array: the array you want to sort
//$by: the associative array name that is one level deep
////example: name
//$order: ASC or DESC
//$type: num or str
       
$sortby = "sort$by"; //This sets up what you are sorting by

$firstval = current($array); //Pulls over the first array

$vals = array_keys($firstval); //Grabs the associate Arrays

foreach ($vals as $init){
    $keyname = "sort$init";
    $$keyname = array();
}
//This was strange because I had problems adding
//Multiple arrays into a variable variable
//I got it to work by initializing the variable variables as arrays
//Before I went any further

foreach ($array as $key => $row) {
   
foreach ($vals as $names){
    $keyname = "sort$names";
    $test = array();
    $test[$key] = $row[$names];
    $$keyname = array_merge($$keyname,$test);
   
}

}

//This will create dynamic mini arrays so that I can perform
//the array multisort with no problem
//Notice the temp array... I had to do that because I
//cannot assign additional array elements to a
//varaiable variable           

if ($order == "DESC"){   
if ($type == "num"){
array_multisort($$sortby,SORT_DESC, SORT_NUMERIC,$array);
} else {
array_multisort($$sortby,SORT_DESC, SORT_STRING,$array);
}
} else {
if ($type == "num"){
array_multisort($$sortby,SORT_ASC, SORT_NUMERIC,$array);
} else {
array_multisort($$sortby,SORT_ASC, SORT_STRING,$array);
}
}

//This just goed through and asks the additional arguments
//What they are doing and are doing variations of
//the multisort

return $array;
}

//Now to test it

$test = sortmddata($test,'age','ASC','num');

print_r ($test);

//This will return
//Array (
//[0] => Array ([name] => Dennis [age] => 23 )
//[1] => Array ( [name] => David [age] => 28 )
//[2] => Array ( [name] => Joseph [age] => 42 )
//)

?>

There you go... please let me know what you think if you like.
php a-t-the-r-a-t-e chir.ag 05-Jan-2006 02:10
Re: phu at kungphu, 19-Dec-2005 11:36

asort($test) will not let me specify which columns to sort ASC/DESC, NUMERIC/
STRING etc.

I have data similar to what you specified. Now I want to sort $test by points
DESC and name ASC. Here's my function that does it, based on suggestions on
this page. It uses array_multisort (and hence acts just like it: preserving
string-keys etc.)

<?php

  function arrayColumnSort()
  {
    $n = func_num_args();
    $ar = func_get_arg($n-1);
    if(!is_array($ar))
      return false;

    for($i = 0; $i < $n-1; $i++)
      $col[$i] = func_get_arg($i);

    foreach($ar as $key => $val)
      foreach($col as $kkey => $vval)
        if(is_string($vval))
          ${"subar$kkey"}[$key] = $val[$vval];

    $arv = array();
    foreach($col as $key => $val)
      $arv[] = (is_string($val) ? ${"subar$key"} : $val);
    $arv[] = $ar;

    call_user_func_array("array_multisort", $arv);
    return $ar;
  }

  $test["pete"]['points']=1;
  $test["pete"]['name']='Peter';

  $test["mike"]['points']=5;
  $test["mike"]['name']='Mike';

  $test["zoo"]['points']=2;
  $test["zoo"]['name']='John Zoo';

  $test["ab"]['points']=2;
  $test["ab"]['name']='John Ab';

  $test1 = $test;

  asort($test1);

  $test2 = arrayColumnSort("points", SORT_DESC, SORT_NUMERIC, "name", SORT_ASC,
SORT_STRING, $test);

  print_r($test1); // asort
  print_r($test2); // arrayColumnSort

?>

Output from asort:

Array
(
    [pete] => Array
        (
            [points] => 1
            [name] => Peter
        )

    [ab] => Array
        (
            [points] => 2
            [name] => John Ab
        )

    [zoo] => Array
        (
            [points] => 2
            [name] => John Zoo
        )

    [mike] => Array
        (
            [points] => 5
            [name] => Mike
        )

)

Output from arrayColumnSort:

Array
(
    [mike] => Array
        (
            [points] => 5
            [name] => Mike
        )

    [ab] => Array
        (
            [points] => 2
            [name] => John Ab
        )

    [zoo] => Array
        (
            [points] => 2
            [name] => John Zoo
        )

    [pete] => Array
        (
            [points] => 1
            [name] => Peter
        )

)
phu at kungphu 19-Dec-2005 11:36
Notepad's example using asort/arsort will -not- work unless 'points' is defined
-before- 'name'.

Running the posted code sorts by 'name', which was not the point of the
previous posts.  Defining 'points' as 'apoints' also did not work; however,
defining 'points' first yields correct sorting:

$test[0]['points']=1;
$test[0]['name']='Peter';

$test[1]['points']=5;
$test[1]['name']='Mike';

$test[2]['points']=2;
$test[2]['name']='John';

asort($test);

It appears asort uses the first defined element to sort a multidimensional
array.
notepad at codewalkers dot com 09-Dec-2005 04:33
for you guys trying to sort scores on an associative multi-dimensional array,
why are you creating your own functions?

<?php

$test[0]['name']='Peter';
$test[0]['points']=1;

$test[1]['name']='Mike';
$test[1]['points']=5;

$test[2]['name']='John';
$test[2]['points']=2;

asort($test);
// or even arsort();

?>

the above seems to work for me...
Shmee 30-Sep-2005 06:46
RWC s code works very well until you get a  point  value greater then ten. 
This is because the strcmp() function will return that 2 > 10 and 2 > 11   2 >
19 and so on. To compare number values over ten try a sort like this:

$test = multi_sort($test, $key = 'points');

function multi_sort($array, $akey)
{
  function compare($a, $b)
  {
     global $key;
     if ($a[$key]>$b[$key]){
         $varcmp = "1";
         return $varcmp;
     }
     elseif ($a[$key]<$b[$key]){
         $varcmp = "-1";
         return $varcmp;
     }
     elseif ($a[$key]==$b[$key]){
         $varcmp = "0";
         return $varcmp;
     }
  }
  usort($array, "compare");
  return $array;
}
RWC 25-Sep-2005 01:45
This is the simpler version of the function by AlberT.

A lot of times you have got an array like this:

$test[0]['name']='Peter';
$test[0]['points']=1;

$test[1]['name']='Mike';
$test[1]['points']=5;

$test[2]['name']='John';
$test[2]['points']=2;

You just want to sort on the index in the second dimension, ie. on points in
the above example.
 
You can use the function below and call it like this:

$test = multi_sort($test, $key = 'points');

function multi_sort($array, $akey)
{ 
  function compare($a, $b)
  {
     global $key;
     return strcmp($a[$key], $b[$key]);
  }
  usort($array, "compare");
  return $array;
}

Note: to be able to use $key in the compare function, it can not simply be
passed as a parameter. It has to be declared global and set somewhere outside
of compare().
AlberT at SuperAlberT dot it 18-Jul-2005 06:59
a nice piece of code to do an "array_key_multi_sort()" is the following:

<?php
/**
 * orders a multidimentional array on the base of a label-key
 *
 * @param $arr, the array to be ordered
 * @param $l the "label" identifing the field
 * @param $f the ordering function to be used,
 *    strnatcasecmp() by default
 * @return  TRUE on success, FALSE on failure.
 */
function array_key_multi_sort(&$arr, $l , $f='strnatcasecmp') {
        return usort($arr, create_function('$a, $b', "return $f(\$a['$l'], \$b
['$l']);"));
}
?>
kencomer at kencomer dot com 12-Jun-2005 11:48
If your data is in an associative array that you would need to separate into
columns such as those retrieved with your favorite flavor of _fetch_array() in
order to be able to use multisort(), you should consider using uasort() or
usort() as an alternative. Here is an example of how this could be beneficial:

(key is employee number which remains intact; rows are sorted by surname,
firstname)

<?php
function namecmp( $row1,$row2 )
{
    $first = strcmp($row1['surname'], $row2['surname']) ;
    if ( $first )
        return $first ;
    else
        return strcmp($row1['name'], $row2['name']) ;
}

      $test = array( '11122202' => array('empno'=>11122202,'name'=>'geezer'
                ,'surname'=>'schmidt','age'=>96,'sex'=>'male')
            ,'11122204' => array('empno'=>11122204,'name'=>'coed'
                ,'surname'=>'beaujolais','age'=>18,'sex'=>'female')
            ,'11122206' => array('empno'=>11122206,'name'=>'immortal'
                ,'surname'=>'ramos','age'=>21,'sex'=>'male')
            ,'11122208' => array('empno'=>11122208,'name'=>'babyface'
                ,'surname'=>'brown','age'=>1,'sex'=>'male')
            ,'11122210' => array('empno'=>11122210,'name'=>'exjock'
                ,'surname'=>'gatti','age'=>48,'sex'=>'male')
            ,'11122212' => array('empno'=>11122212,'name'=>'jailbait'
                ,'surname'=>'muhammed','age'=>15,'sex'=>'female') )
            ;
echo "<pre>" ;
print_r( $test ) ;
uasort($test,'namecmp') ;
echo "----sorting----<br \>";
print_r( $test ) ;
echo "</pre>" ;

?>

Array
(
    [11122202] => Array
        (
            [empno] => 11122202
            [name] => geezer
            [surname] => schmidt
            [age] => 96
            [sex] => male
        )

    [11122204] => Array
        (
            [empno] => 11122204
            [name] => coed
            [surname] => beaujolais
            [age] => 18
            [sex] => female
        )

    [11122206] => Array
        (
            [empno] => 11122206
            [name] => immortal
            [surname] => ramos
            [age] => 21
            [sex] => male
        )

    [11122208] => Array
        (
            [empno] => 11122208
            [name] => babyface
            [surname] => brown
            [age] => 1
            [sex] => male
        )

    [11122210] => Array
        (
            [empno] => 11122210
            [name] => exjock
            [surname] => gatti
            [age] => 48
            [sex] => male
        )

    [11122212] => Array
        (
            [empno] => 11122212
            [name] => jailbait
            [surname] => muhammed
            [age] => 15
            [sex] => female
        )

)
----sorting----
Array
(
    [11122204] => Array
        (
            [empno] => 11122204
            [name] => coed
            [surname] => beaujolais
            [age] => 18
            [sex] => female
        )

    [11122208] => Array
        (
            [empno] => 11122208
            [name] => babyface
            [surname] => brown
            [age] => 1
            [sex] => male
        )

    [11122210] => Array
        (
            [empno] => 11122210
            [name] => exjock
            [surname] => gatti
            [age] => 48
            [sex] => male
        )

    [11122212] => Array
        (
            [empno] => 11122212
            [name] => jailbait
            [surname] => muhammed
            [age] => 15
            [sex] => female
        )

    [11122206] => Array
        (
            [empno] => 11122206
            [name] => immortal
            [surname] => ramos
            [age] => 21
            [sex] => male
        )

    [11122202] => Array
        (
            [empno] => 11122202
            [name] => geezer
            [surname] => schmidt
            [age] => 96
            [sex] => male
        )

)
Michael Oelze at  M (myname)  T GMXdotDE 25-Apr-2005 09:15
I try array_multisort at first and it seems to work well. But then I program a
page with cached datas (the arrays were saved in a session). Suddenly the sort
function doesn't seem to work. There was no error in my script, so I try the
reference on the variables. Then he manage to sort the arrays again.

So it seems that if you save your Arrays in a session your arrays are global
variables and then 'array_multisort' doesn't sort the arrays despite it gives
back 'true'.
 You must reference your variables and all work well:

session_start(); // restore variables (Arrays etc.)
.....
.....
array_multisort(&$Array1,&$Array2,&$Array3,...);
....
$_SESSION["Array1"]=$Array1;//
$_SESSION["Array2"]=$Array2;//Save Arrays in Session Data
$_SESSION["Array3"]=$Array3;//
......

Now you can store your Data Arrays in your Session and are able to sort them as
you like...
stevec at NO-/ dot /-SPAM dot qiguang dot net 13-Apr-2005 08:19
Be careful when using array_multisort() on copies of arrays, as you might end
up changing the original array.  Given the following code:

<?php
    $test1 = array(4,3,2,1);
    $test2 = $test1;
    $test3 = array('a', 'b', 'c', 'd');

    array_multisort($test2, SORT_ASC, $test3);

    echo 'test1:';
    print_r($test1);
    echo 'test2:';
    print_r($test2);
    echo 'test3:';
    print_r($test3);
?>

You would expect:

test1:Array
(
    [0] => 4
    [1] => 3
    [2] => 2
    [3] => 1
)
test2:Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
)
test3:Array
(
    [0] => d
    [1] => c
    [2] => b
    [3] => a
)

However, if you run the code, you actually get:

test1:Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
)
test2:Array
(
    [0] => 1
    [1] => 2
    [2] => 3
    [3] => 4
)
test3:Array
(
    [0] => d
    [1] => c
    [2] => b
    [3] => a
)

Note that the original ($test1) ends up being sorted even though it was never
called by array_multisort().  To work around this, insert a statement to modify
the copy ($test2) before calling array_multisort() on it.  The following code
will produce the expected "correct" results:

<?php
    $test1 = array(4,3,2,1);
    $test2 = $test1;
    $test3 = array('a', 'b', 'c', 'd');

    $test2[0] = $test2[0];                // fix
    array_multisort($test2, SORT_ASC, $test3);
       
    echo 'test1:';
    print_r($test1);
    echo 'test2:';
    print_r($test2);
    echo 'test3:';
    print_r($test3);
?>

This seems to be a resurrection of the closed bug #8130.  Also, someone
reported this behavior in bug #32031, but it was incorrectly labeled "bogus" in
reference to bug #25359, which is a different issue.
joao at intrasystems dot com dot br 07-Apr-2005 12:27
Exemple of sorting multi-dimensional arrays by one of it's fields:

$result[0]['nome']='Joao';
$result[0]['order']=5;
$result[1]['nome']='Pedro';
$result[1]['order']=1;
$result[2]['nome']='Marcelo';
$result[2]['order']=3;

foreach($result as $res)
     $sortAux[] = $res['order'];

array_multisort($sortAux, SORT_ASC, $result);

print_r($result);

produces:

Array
(
    [0] => Array
        (
            [nome] => Pedro
            [order] => 1
        )

    [1] => Array
        (
            [nome] => Marcelo
            [order] => 3
        )

    [2] => Array
        (
            [nome] => Joao
            [order] => 5
        )

)
Toni 10-Nov-2004 03:30
An example to sort an array by 3 criteria:

$recordset is an array of results from a query to a database, that I sort using
$matrix as auxiliary array. First numeric, Second and Third alphabetically.

<?php
for($idx=0;$idx<$toShow;$idx++){
    $matrix[0][$id]=$recordset[$id][0];
    $matrix[1][$id]=$recordset[$id][1];
    $matrix[2][$id]=$recordset[$id][10];   
}

array_multisort($matrix[0], SORT_DESC, SORT_NUMERIC,$matrix[1], SORT_STRING,
SORT_ASC,$matrix[2], SORT_STRING, SORT_ASC);
?>
meddle at dzygn.com 05-Oct-2004 07:40
If you want to sort a multidomensional array by key name you cannot use
array_multisort. ie: for an array named $archivos that prints like this:

Array
(
    [0] => Array
        (
            [index] => 0
            [name] => test
        )

    [1] => Array
        (
            [index] => 0
            [name] => watertaxi.jpg
        )

    [2] => Array
        (
            [index] => 0
            [name] => 2_0003.JPG
        )

    [3] => Array
        (
            [index] => 0
            [name] => 24A_0025.JPG
        )

    [4] => Array
        (
            [index] => 1
            [name] => _CIMG3501.JPG
        )

)

If I wanted to order by "name" I'd use:

function comparar($a, $b) {
        return strnatcasecmp($a["name"], $b["name"]);
}
usort($archivos, "comparar");

This function performs a case insensitive string comparison using a "natural
order" algorithm (strnatcasecmp), resulting in:

Array
(
    [0] => Array
        (
            [index] => 0
            [name] => 2_0003.JPG
        )

    [1] => Array
        (
            [index] => 0
            [name] => 24A_0025.JPG
        )

    [2] => Array
        (
            [index] => 0
            [name] => test
        )

    [3] => Array
        (
            [index] => 0
            [name] => watertaxi.jpg
        )

    [4] => Array
        (
            [index] => 1
            [name] => _CIMG3501.JPG
        )

)
kat dot n0spam at audiogalaxy dot com 23-Aug-2001 10:25
If you're having problems with array_multisort changing variables in global
space when it is called inside a function and you're not passing in the
function parameters by reference you can alleviate the problem by calling
array_multisort with its parameters by reference.

array_multisort(&$a, SORT_DESC, &$b);

More details here in my bug report:
http://www.php.net/bugs.php?id=12936
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 14 18:21:12 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012

view this page in

[English             ] Change language
array_keys

(PHP 4, PHP 5)

array_keys — 配列のキーすべて、あるいはその一部を返す

説明

array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict =
false ]] )

array_keys() は、配列 input から全てのキー (数値および文字列) を返します。

オプション search_value が指定された場合、指定した値に関するキーのみが返されま
す。指定されない場合は、 input から全てのキーが返されます。

パラメータ

input

    返すキーを含む配列。

search_value

    指定した場合は、これらの値を含むキーのみを返します。

strict

    検索時に厳密な比較 (===) を行うかどうか。

返り値

input のすべてのキーを配列で返します。

変更履歴

バージョン                説明
5.0.0      strict パラメータが追加されました。

例

例1 array_keys() の例

<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>

上の例の出力は以下となります。

Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)

参考

  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す



array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012
 
add a note add a note User Contributed Notes array_keys
Na&#39;ven Enigma 10-Mar-2012 07:41
I was trying to figure out how to normalize an array with numerical keys. 
Since I was doing for() for a lot of things, but only replacing it if the
conditions were right, I wound up with off ball arrays I couldn't access.  That
being said, I looked for a method of normalizing the array and couldn't find
one, so I built my own.  I'm not sure how to go about making it recursive, but
I didn't need that feature for my own, so I just went without recursion.

//This will take array([5] => "test1", [4] => "test2", [9] => "test3") into
array([0] => "test1", [1] => "test2", [2] => "test3") so you can access it
easier.
        function normalize_array($array){
          $newarray = array();
          $array_keys = array_keys($array);
          $i=0;
          foreach($array_keys as $key){
           $newarray[$i] = $array[$key];
          
          $i++;
          }
          return $newarray;
        }
qeremy [atta] gmail [dotta] com 05-Mar-2012 05:50
Simple ways to prefixing arrays;

<?php
function array_keys_prefix($arr, $pref = "") {
    $rarr = array();
    foreach ($arr as $key => $val) {
        $rarr[$pref.$key] = $val;
    }
    return $rarr;
}

function array_keys_prefix_multi($arr, $pref = "") {
    $rarr = array();
    foreach ($arr as $key => $val) {
        $rarr[] = array_keys_prefix($val, $pref);
    }
    return $rarr;
}

// $a = array("foo" => "FOO", "bar" => "BAR", "baz" => "BAZ"); // or
$a = array("foo" => "FOO", "bar" => "BAR", "baz" => array(1,2,3));
print_r(array_keys_prefix($a, "my_"));

// db fetch...
$products = array(
    array("id" => 1, "name" => "Foo"),
    array("id" => 2, "name" => "Bar")
);
print_r(array_keys_prefix_multi($products, "product_"));
?>

Array
(
    [my_foo] => FOO
    [my_bar] => BAR
    [my_baz] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

)
Array
(
    [0] => Array
        (
            [product_id] => 1
            [product_name] => Foo
        )

    [1] => Array
        (
            [product_id] => 2
            [product_name] => Bar
        )

)
izzecold at live dot de 10-Jan-2012 09:21
<?php

/* A Function created by myself for checking multiple array keys
For Example u got an Array like $_SESSION and u wanna know if the keys
'user','pass','email' and 'type' exists.

*/

function mKeyChecker($arr,$keys=array()) {
    if(count($keys) > 1) {
        $valid_keys = 0;
        foreach($keys as $key) {
            if(array_key_exists($key,$arr)) $valid_keys++;
        }
        if($valid_keys == count($keys)) {
            return true;
        } else {
            return false;
        }
    } else if(count($keys) == 1) {
        if(array_key_exists($key[0],$arr)) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

// Execution Example

if(mKeyChecker($_SESSION,array('id','user','email','type'))) {
    echo "is!";
} else {
    echo "not!";   
}

?>
craig1231 at hotmail dot com 22-Dec-2011 03:41
A needed a function to find the keys which contain part of a string, not
equalling a string...

<?php
function array_keys_contain($input, $search_value, $strict = false)
    {
        $tmpkeys = array();

        $keys = array_keys($input);

        foreach ($keys as $k)
        {
            if ($strict && strpos($k, $search_value) !== FALSE)
                $tmpkeys[] = $k;
            elseif (!$strict && stripos($k, $search_value) !== FALSE)
                $tmpkeys[] = $k;
        }

        return $tmpkeys;
    }
?>
el dot quick at gmail dot com 23-Sep-2011 08:23
Sorry for my english...

I wrote a function to get keys of arrays recursivelly...

<?php
    function recursive_keys($input, $search_value = null){

        $output = ($search_value !== null ? array_keys($input, $search_value) :
array_keys($input)) ;
        foreach($input as $sub){
            if(is_array($sub)){
                $output = ($search_value !== null ? array_merge($output,
recursive_keys($sub, $search_value)) : array_merge($output, recursive_keys
($sub))) ;
            }
        }
        return $output ;
    }
?>

I hope it will be usefull

Regards
pat dot leblanc at gmail dot com 29-Aug-2011 02:05
It's worth noting that if you have keys that are long integer, such as
'329462291595', they will be considered as such on a 64bits system, but will be
of type string on a 32 bits system.

for example:
<?php

$importantKeys = array('329462291595' =>null, 'ZZ291595' => null);

foreach(array_keys($importantKeys) as $key){
    echo gettype($key)."\n";
}

?>

will return on a 64 bits system:
<?php
    integer
    string
?>

but on a 32 bits system:
<?php
    string
    string
?>

I hope it will save someone the huge headache I had :)
rarioj at gmail dot com 04-Oct-2009 06:38
Sometimes we want to find out the last added numerical key right after we use "
array_push($array, $value) " or " $array[] = $value ". This can be achieved by
calling:

<?php
return array_pop(array_keys($array));
?>
ferrerna at gmail dot com 23-Jan-2009 09:14
Here's a function I needed to collapse an array, in my case from a database
query.  It takes an array that contains key-value pairs and returns an array
where they are actually the key and value.

<?php

function array_collapse($arr, $x, $y) {
    $carr = array();
    while ($el = current($arr)) {
        $carr[ $el[$x] ] = $el[$y];
        next($arr);
    }
    return $carr;
}

?>

Example usage (pseudo-database code):

<?php

$query = db_query('SELECT name, value FROM properties');

$result = db_returnAll($query);

/* This will return an array like so:

[
   ['name' -> 'color', 'value' -> 'blue'],
   ['name' -> 'style', 'value' -> 'wide-format'],
   ['name' -> 'weight', 'value' -> 3.6],
   ['name' -> 'name', 'value' -> 'Waerdthing']
]

*/

$propArr = array_collapse($result, 'name', 'value');

/* Now this array looks like:

[
   ['color' -> 'blue'],
   ['style' -> 'wide-format'],
   ['weight' -> 3.6],
   ['name' -> 'Waerdthing'],

*/

?>

I found this handy for using with json_encode and am using it for my project
http://squidby.com
nodarinodo at mail dot ru 03-Dec-2008 11:35
<?php
    //It's a way to get keys from values )
    $es = array("is My FullName"=>"nodar chkuaselidze (nodarinodo)", "You Are"
=> "I don't know", "Is My Friend" => "ruxadze");
    foreach(array_values($es) as $ess){
        echo $ess." =>";
           
    for($i =0; $i < count(array_keys($es, $ess)); $i++){
            echo reset(array_keys($es, $ess))."<BR>";
        } }
?>
neil at 11 out of 10 24-Jul-2008 12:10
<?php

/*
 * This function will return the keys of elements in the
 * haystack where the value is found in array needle
 */

function array_value_intersect_keys( $array_haystack, $array_needle ){
    $intersected = array_intersect( $array_haystack, $array_needle );
    return array_keys( $intersected );
}

// usage

$array_haystack = array( 1 => 2, 2 => 5, 'red' => 8, 9 => 14 );

$array_needle = array( 2, 8 );

$array_keys_of_intersecting_values = array_value_intersect_keys(
$array_haystack, $array_needle );

print_r( $array_keys_of_intersecting_values );
?>

returns
Array
(
    [0] => 1
    [1] => red
)
edsongarrido at gmail dot com 12-Jun-2008 05:46
/*
*
*This function will return a .csv from a given array inside the $_SESSION
['my_array']
*
*$csv_name -> the name we want the csv has to
*$download -> true or false to download the csv file after done
*
*/

<?php

function createCSV($csv_name, $download) {

        $i = 1;
        $csv = "";

        /* erase the old file, if it exists */
        @unlink("../../csv/" . $csv_name . ".csv");

        /* array is in a session variable
         * this may be useful to avoid many db queries if it is the case */
        $my_array = $_SESSION['my_array'];

        /* how many fields has the given array */
        $fields = count(array_keys($my_array[0]));

        /* extracting the titles from the array */
        foreach(array_keys($my_array[0]) as $title)
        {
            /* array_keys percurs the title of each vector */
            $csv .= $title;

            /* while it is not the last field put a semi-colon ; */
            if($i < $fields)
                $csv .= ";";

            $i++;
        }

        /* insert an empty line to better visualize the csv */
        $csv .= chr(10).chr(13);
                $csv .= chr(10).chr(13);

        /* get the values from the extracted keys */
        foreach (array_keys($my_array) as $tipo)
        {

            $i = 1;

            foreach(array_keys($my_array[$tipo]) as $sub)
            {

                $csv .= $my_array[$tipo][$sub];

                if ($i < $fields)
                    $csv .= ";";

                $i++;
            }

            $csv .= chr(10).chr(13);

        }

        /* export the csv */
        $export_csv=fopen("../../csv/". $csv_name .".csv", "w+");
        fwrite($export_csv, $csv);
        fclose($export_csv);

        /* download the csv */
        if ($download == true)
            header('Location:' . "../../csv/" . $csv_name . ".csv");

        exit();

    }

?>
Hayley Watson 04-Oct-2007 06:43
An alternative to RQuadling at GMail dot com's array_remove() function:

<?php
function array_remove(array $array, $value, $strict=false)
{
    return array_diff_key($array, array_flip(array_keys($array, $value,
$strict)));
}
?>
RQuadling at GMail dot com 28-Mar-2007 05:31
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
creator at mindcreations dot com 20-Mar-2007 02:12
This function will extract keys from a multidimensional array

<?php
function multiarray_keys($ar) {
           
    foreach($ar as $k => $v) {
        $keys[] = $k;
        if (is_array($ar[$k]))
            $keys = array_merge($keys, multiarray_keys($ar[$k]));
    }
    return $keys;
}
?>

Example code:

<?php
$array = array("color" => array("1stcolor" => "blue", "2ndcolor" => "red",
"3rdcolor" => "green"),
               "size"  => array("small", "medium", "large"));

echo "<pre>";
print_r($array);
echo "</pre>";

echo "<pre>";
print_r(multiarray_keys($array));
echo "</pre>";
?>

Example output:

Array
(
    [color] => Array
        (
            [1stcolor] => blue
            [2ndcolor] => red
            [3rdcolor] => green
        )

    [size] => Array
        (
            [0] => small
            [1] => medium
            [2] => large
        )

)

Array
(
    [0] => color
    [1] => 1stcolor
    [2] => 2ndcolor
    [3] => 3rdcolor
    [4] => size
    [5] => 0
    [6] => 1
    [7] => 2
)
Ray.Paseur sometimes uses GMail 21-Dec-2006 04:38
Replace a key in an associative array, preserving the original order of keys
and elements:

<?php
if (!function_exists('array_combine')) { // ONLY EXISTS IN PHP5
    function array_combine($keys, $values) {
        if (count($keys) != count($values)) {
    return false; }
        foreach($keys as $key) { $array[$key] = array_shift($values); }
    return $array; }   
} // END IF FUNCTION EXISTS

$keys = array_keys($array);
$values = array_values($array);
foreach ($keys as $k => $v) {
    if ($v == "MANAGEMENT FEE CHARGE") { $keys[$k] = "MANAGEMENT FEES"; }
}
$array = array_combine($keys, $values);
?>
jochem 17-Feb-2006 04:13
might be worth noting in the docs that not all associative (string) keys are a
like, output of the follow bit of code demonstrates - might be a handy
introduction to automatic typecasting in php for some people (and save a few
headaches):

<?php
$r = array("0"=>"0","1"=>"1","" =>"2"," "=>"3");
echo 'how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")',"\
n-----------\n";
var_dump($r); print_r($r); var_export($r);
echo "\n-----------\n",'var_dump("0","1",""," ") = ',"\n-----------\n";
var_dump("0","1",""," ");
?>

OUTPUTS:

how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")
-----------
array(4) {
  [0]=>
  string(1) "0"
  [1]=>
  string(1) "1"
  [""]=>
  string(1) "2"
  [" "]=>
  string(1) "3"
}
Array
(
    [0] => 0
    [1] => 1
    [] => 2
    [ ] => 3
)
array (
  0 => '0',
  1 => '1',
  '' => '2',
  ' ' => '3',
)
-----------
var_dump("0","1",""," ") =
-----------
string(1) "0"
string(1) "1"
string(0) ""
string(1) " "
Sven (bitcetera.com) 19-Dec-2005 06:43
Here's how to get the first key, the last key, the first value or the last
value of a (hash) array without explicitly copying nor altering the original
array:

<?php
  $array = array('first'=>'111', 'second'=>'222', 'third'=>'333');

  // get the first key: returns 'first'
  print array_shift(array_keys($array));

  // get the last key: returns 'third'
  print array_pop(array_keys($array));

  // get the first value: returns '111'
  print array_shift(array_values($array));

  // get the last value: returns '333'
  print array_pop(array_values($array));
?>
vesely at tana dot it 09-Dec-2005 01:56
The position of an element.

One can apply array_keys twice to get the position of an element from its key.
(This is the reverse of the function by cristianDOTzuddas.) E.g., the following
may output "yes, we have bananas at position 0".

<?php
$a = array("banana" => "yellow", "apple" = "red");
$k = get_some_fruit();
if (isset($a[$k]))
{
   list($pos) = array_keys(array_keys($a), $k);
   print "yes, we have {$k}s at position $pos\n";
}
?>

Not amazingly efficient, but I see no better alternative.
ru dot dy at gmx dot net 14-Aug-2005 09:20
I was looking for a function that simply unset a variable amout of values from
a one-dimensional array by key. I ended up with this (returns the array itself
if no further parameter than the array is given, false with no params - does
not change the source array)

usage: array_remove(array $input [, mixed key ...])

<?php

  function array_remove() {
    if ($stack = func_get_args()) {
      $input = array_shift($stack);
      foreach ($stack as $key) {
        unset($input[$key]);
      }
      return $input;
    }
    return false;
  }

?>

Test:

<?php
  $a = array('a'=>'fun', 'b'=>3.14, 'sub'=> array('1', '2', '3'), 'd'=>'what',
'e' => 'xample', 5 => 'x');
  print_r($a);
  print_r(array_remove($a, 'd', 'b', 5, 'sub'));
?>

Output:

Array
(
    [a] => fun
    [b] => 3.14
    [sub] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [d] => what
    [e] => xample
    [5] => x
)
Array
(
    [a] => fun
    [e] => xample
)

Hope this helps someone.
alex [@T] d-sn [D@T] com / Alex Galisteo 07-Aug-2005 02:46
My version of PHP does not support the strict parameter. Moreover, I need a
function that could make other comparsion different than equals and stricktly
equals.

The funcition array_keys_advanced can make the following comparsions: equal,
not equal, strictly greater than, equal or greater than, strictly less than,
equal or less than.

<?php
if (!function_exists('array_keys_advanced')) {
    //{{{ array_keys_advanced
    /**
     * Returns an array with the matching keys as values. A comparsion type can
     * be spcified, even if it should be a strict comparsion or not.
     * Note: It is not recursive.
     *
     * @param    array    $input
     * @param    string   $search_value
     * @param    bool     $strict
     * @param    string   $comparison: {EQ | NEQ | GT | EGT | LT | ELT}
     * @return   Returns an array with the matching keys as values.
     * @author   alex [@T] d-sn [D@T] com // Alex Galisteo
     */
    function array_keys_advanced() {
        $nargs = func_num_args();
        $arr = array();
        $input = null;
        $search_value = null;
        $strict = (bool) false;
        $comparison  = "EQ";
        $comparsion_types = array("EQ", "NEQ", "GT", "EGT", "LT", "ELT");
        switch ($nargs) {
        case 1:
            $input = func_get_arg(0);
            return array_keys($input);
            break;
        case 2:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            return array_keys($input, $search_value);
            break;
        case 3:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion  = "EQ";
            break;
        case 4:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion = strtoupper((string) func_get_arg(3));
            $comparsion = (in_array($comparsion, $comparsion_types))?
                            $comparsion : "EQ";
            break;
        default:
            return $arr;
            break;
        }
        foreach ($input as $key => $val) {
            if ($strict) {
                if ($comparsion == "EQ" && $search_value === $val) {
                    $arr[] = $key;
                }
                elseif ($comparsion == "NEQ" && $search_value !== $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            } else {
                if ($comparsion == "EQ" && $search_value == $val)
                    $arr[] = $key;
                elseif ($comparsion == "NEQ" && $search_value != $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            }
        }
        return $arr;
    }
    //}}}
} //endif function_exists
?>
webmaster [at] baz-x [dot] at 29-Jul-2005 03:43
I was looking for a function that deletes either integer keys or string keys
(needed for my caching).
As I didn't find a function I came up with my own solution.
I didn't find the propiest function to post to so I will post it here, hope you
find it useful.

<?php

function array_extract($array, $extract_type = 1)
{
    foreach ( $array as $key => $value )
    {
        if ( $extract_type == 1 && is_string($key) )
        {
            // delete string keys
            unset($array[$key]);
        }
        elseif ( $extract_type == 2 && is_int($key) )
        {
            // delete integer keys
            unset($array[$key]);
        }
    }

    return $array;
}

?>

You can of course define constants to have a nicer look, I have chosen these:
EXTR_INT = 1; EXTR_STRING = 2
EXTR_INT will return an array where keys are only integer while
EXTR_STRING will return an array where keys are only string

Have fun with it.
sip at email dot ee 22-Aug-2003 05:33
Note, that using array_key_exists() is rather inefficient. The overhead
associated with calling a function makes it slower, than using isset($array
[$key]), instead of array_key_exists($key, $array)
using isset() is usually about 1.3 times faster, according to my tests.
rodrigo at NOSPAM dot dhweb dot com dot br 04-Feb-2003 04:39
[Editor's note: For a complete solution to the printing of complex structures
or hashes, see the PEAR::Var_Dump package: http://pear.php.net/
package-info.php?pacid=103 , use "pear install Var_Dump" to get it]

This function will print all the keys of a multidimensional array in html
tables.
It will help to debug when you don t have control of depths.

<?php
function show_keys($ar){

   echo "<table width='100%' border='1' bordercolor='#6699CC' cellspacing='0'
cellpadding='5'><tr valign='top'>";

      foreach ($ar as $k => $v ) {

         echo "<td align='center' bgcolor='#EEEEEE'>
           <table border='2' cellpadding='3'><tr><td bgcolor='#FFFFFF'><font
face='verdana' size='1'>
              " . $k . "
           </font></td></tr></table>";

           if (is_array($ar[$k])) {
              show_keys ($ar[$k]);
         }

         echo "</td>";

      }

   echo "</tr></table>";

}

// Multidimensional array ->
$arvore = array();
$arvore['1'] = array();
$arvore['1']['1.1'] = array('1.1.1', '1.1.2', '1.1.3');
$arvore['1']['1.2'] = array('1.2.1', '1.2.2', '1.2.3');
$arvore['1']['1.3'] = array('1.3.1', '1.3.2', '1.3.3');
$arvore['2'] = array();
$arvore['2']['2.1'] = array('2.1.1', '2.1.2', '2.1.3');
$arvore['2']['2.2'] = array('2.2.1', '2.2.2', '2.2.3');
$arvore['2']['2.3'] = array('2.3.1', '2.3.2', '2.3.3');
$arvore['3'] = array();
$arvore['3']['3.1'] = array('3.1.1', '3.1.2', '3.1.3');
$arvore['3']['3.2'] = array('3.2.1', '3.2.2', '3.2.3');
$arvore['3']['3.3'] = array('3.3.1', '3.3.2'=>array('3.3.2.1', '3.3.2.2'),
'3.3.3');
// <-

show_keys($arvore);
?>
michielbakker at msn dot com 13-Nov-2002 09:45
If you receive a bunch of variables and like to change most of them (or all of
them for that matter), you can do something like this: (data has been sent to a
page with POST)

<?php
$allKeys = array_keys($HTTP_POST_VARS);

for ($i=0;$i<count($allKeys);$i++)
{
      $$allKeys[$i] = strtoupper($HTTP_POST_VARS[$allKeys[$i]]);
}
?>

This makes caracters (a-z) uppercase. This is just one way to use it, ofcourse.

Hope this helps someone understand the way to use array_keys() or give any
ideas. :)
glennh at webadept dot net 13-Nov-2002 04:03
All the cool notes are gone from the site.

Here's an example of how to get all the variables passed to your program using
the method on this page. This prints them out so you can see what you are
doing.

<?php
while (list($key, $value) = each
(${"HTTP_".$REQUEST_METHOD."_VARS"}))
{
        echo $key." = ".$value." ";
}
?>
jacob at keystreams dot com 20-Aug-2002 11:05
Here is a way to use array_intersect on array keys rather than values:

<?php
$a = array("apple" => "red", "banana" => "yellow");
$z = array("apple" => "green", "peach" => "orange", "banana" => "rotten");

$intersected_keys = array_intersect(array_keys($a), array_keys($z));

print_r($intersected_keys);
?>

This will print:

Array ( [0] => apple [1] => banana )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 14 17:21:11 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.19.30
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length = NULL [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、入力配列のポインタを、使用した後にリセット (reset()) しま
    す。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、配列の要素の中から最大でその数までの要素を返し
    ます。配列の要素数が length より少ない場合は、配列から取得できる要素だけを
    返します。length が指定され、負の場合、配列の末尾から連続する複数の要素が返
    されます。省略された場合、offset から配列の最後までの全ての要素が返されます
    。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する
  • array_chunk() - 配列を分割する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Mar 2012
 
add a note add a note User Contributed Notes array_slice
gary at wits dot sg 10-Jun-2011 11:44
I've found this useful.
The following is a function used to shuffle a very specific part of the array,
by providing start and end index.

<?php
function array_shuffle_section(&$a, $s, $e) {
    $head = array_slice($a, 0, $s);
    $body = array_slice($a, $s, $e-$s+1);
    $tail = array_slice($a, $e+1);

    shuffle($body);
    $a = array_merge($head,$body,$tail);
}
?>
Nathan - thefiscster510 at gmail dot com 29-Mar-2011 10:38
If you want to remove a specified entry from an array i made this mwethod...

<?php
$array = array("Entry1","entry2","entry3");

$int = 3; //Number of entries in the array
$int2 = 0; //Starter array spot... it will begine its search at 0.
$del_num = 1; //Represents the second entry in the array... which is the one we
will happen to remove this time... i.e. 0 = first entry, 1 = second entry, 2 =
third...........

$newarray = array(); //Empty array that will be the new array minus the
specified entry...
print_r($array) . "<br>";    //print original array contents
print_r($newarray). "<br>"; //print the new empty array

do
{
$user = $array[$int2];
$key = array_search($user, $array);
if ($key == $del_num)
{

}
else
{
$newarray[] = $array[$int2];
}

$int2 = $int2 + 1;
} while ($int2 < $int);

print_r($newarray). "<br>"; //print the new array

?>
delew 11-Feb-2011 01:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 02-Feb-2011 07:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 05:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 03:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 06:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 04:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 10-Apr-2009 05:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 02:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 07:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 12:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 02-May-2008 09:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 12:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 10:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 08:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 02:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 12:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 05:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 07:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 03:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 08:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 01:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 15-Feb-2007 04:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 09:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 03:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 02:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 18-Oct-2006 08:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 01:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 12:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 02:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 09:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 07:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 03:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 23-Jun-2005 06:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 02:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 01:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 17-Sep-2004 09:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 09:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 02:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 21-Feb-2004 10:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 12-Nov-2002 04:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 06:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 08:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 09:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 15-Dec-2001 07:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 14 16:21:05 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.101.60
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 変数操作
  • 変数操作関数
  • debug_ zval_ dump
  • doubleval
  • empty
  • floatval
  • get_ defined_ vars
  • get_ resource_ type
  • gettype
  • import_ request_ variables
  • intval
  • is_ array
  • is_ bool
  • is_ callable
  • is_ double
  • is_ float
  • is_ int
  • is_ integer
  • is_ long
  • is_ null
  • is_ numeric
  • is_ object
  • is_ real
  • is_ resource
  • is_ scalar
  • is_ string
  • isset
  • print_ r
  • serialize
  • settype
  • strval
  • unserialize
  • unset
  • var_ dump
  • var_ export

print_r> <is_string
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 02 Mar 2012

view this page in

[English             ] Change language
isset

(PHP 4, PHP 5)

isset — 変数がセットされていること、そして NULL でないことを検査する

説明

bool isset ( mixed $var [, mixed $... ] )

変数がセットされており、それが NULL でないことを調べます。

変数が、unset() により割当を解除された場合、何も値が設定されていない状態になり
ます。 NULLに設定されている変数を調べた場合、 isset() はFALSEを返します。 NULL
バイト("\0")はPHPの定数 NULLと等価ではないことにも注意してください。

複数のパラメータを渡した場合は、isset() はそれらすべてがセットされている場合に
のみ TRUE を返します。左から順に評価を行い、セットされていない変数があった時点
で処理を終了します。

パラメータ

var

    調べたい変数。

...

    別の変数。

返り値

var が存在して NULL 以外の値をとれば TRUE、そうでなければ FALSE を返します。

変更履歴

バージョ                                  説明
   ン
5.4.0     文字列のオフセットに非数値を指定した場合は FALSE を返すようになりまし
          た。

例

例1 isset() の例

<?php

$var = '';

// これは TRUE と評価されるので、テキストが出力される
if (isset($var)) {
    echo "This var is set so I will print.";
}

// 次の例では、isset() の戻り値を出力するため var_dump を
// 使用している

$a = "test";
$b = "anothertest";

var_dump(isset($a));      // TRUE
var_dump(isset($a, $b)); // TRUE

unset ($a);

var_dump(isset($a));     // FALSE
var_dump(isset($a, $b)); // FALSE

$foo = NULL;
var_dump(isset($foo));   // FALSE

?>

この関数は配列の要素に対しても動作します:
<?php

$a = array ('test' => 1, 'hello' => NULL, 'pie' => array('a' => 'apple'));

var_dump(isset($a['test']));            // TRUE
var_dump(isset($a['foo']));             // FALSE
var_dump(isset($a['hello']));           // FALSE

// キー 'hello' は NULL と等しいのでセットされていないと見なされる。
// もし NULL なキー値に対してチェックを行いたい場合、次を試してみること:
var_dump(array_key_exists('hello', $a)); // TRUE

// 配列の深い要素の値のチェック
var_dump(isset($a['pie']['a']));        // TRUE
var_dump(isset($a['pie']['b']));        // FALSE
var_dump(isset($a['cake']['a']['b']));  // FALSE

?>

例2 文字列のオフセットに対する isset()

PHP 5.4 以降では、文字列内でのオフセット指定を渡したときの isset() の挙動が変わ
りました。

<?php
$expected_array_got_string = 'somestring';
var_dump(isset($expected_array_got_string['some_key']));
var_dump(isset($expected_array_got_string[0]));
var_dump(isset($expected_array_got_string['0']));
var_dump(isset($expected_array_got_string[0.5]));
var_dump(isset($expected_array_got_string['0.5']));
var_dump(isset($expected_array_got_string['0 Mostel']));
?>

上の例の PHP 5.3 での出力は、このようになります。

bool(true)
bool(true)
bool(true)
bool(true)
bool(true)
bool(true)

上の例の PHP 5.4 での出力は、このようになります。

bool(false)
bool(true)
bool(true)
bool(true)
bool(false)
bool(false)

注意

警告

isset() は何らかの値が渡された変数の場合のみ動作します。そうでない場合、パース
エラーとなります。もし定数が設定されているかどうかをチェックする場合は、
defined() を使用してください。

    注意: これは、関数ではなく言語構造のため、可変関数を用いてコールすることは
    できません。

    注意:

    オブジェクトのアクセス不能なプロパティに対して isset() を使用した場合は、も
    しオーバーロードメソッド __isset() が宣言されていればそれをコールします。

参考

  • empty() - 変数が空であるかどうかを検査する
  • __isset()
  • unset() - 指定した変数の割当を解除する
  • defined() - 指定した名前の定数が存在するかどうかを調べる
  • PHP 型の比較表
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • is_null() - 変数が NULL かどうか調べる
  • エラー制御演算子 @



print_r> <is_string
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 02 Mar 2012
 
add a note add a note User Contributed Notes isset
Dr. McKay 09-Feb-2012 05:18
It's worth noting that if a GET variable is passed without a variable, isset
will return true on it.

http://www.example.com/?somevar

<?php
if(isset($_GET['somevar'])) {
    // this is true and will be executed
}
?>
dfugi9488 at yahoo dot com 08-Jan-2012 07:56
it is also worth noting that isset() will return FALSE when its argument is a
class attribute that is simply defined with no value given. e.g.

<?php

class Test
{
    public static $set;
   
    public static function setTest() {
        if(!isset(self::$set)) {
            return "not set";
        }else {
            return "set";
        }
    }
}

echo Test::setTest(); //returns "not set"

?>
john at darven dot co dot uk 14-Nov-2011 02:37
It is worth noting that in order to check for the existence of a key within an
array, regardless of it's contents one should use array_key_exists() not isset
(). 

isset() will (correctly) return false if the value of your array key is null,
which may be a perfectly valid condition.
gonchalox at gmail dot com 25-Jun-2011 04:33
Useful to check if the variable have some value...specially for GET POST
variables

<?php
function isset_or(&$check, $alternate = NULL)
{
    return (isset($check)) ? (empty($check) ? $alternate : $check) :
$alternate;
}

function getGETPOST($var)
{
      return isset_or($_GET[$var],isset_or($_POST[$var],"Empty"));
}
?>

Example
echo getGETPOST('na'); //Find the na varriabl by get and post
benallfree at gmail dot com 21-Apr-2011 06:21
isset() returns TRUE if a value is NULL. That seems wrong to me as there is no
way to distinguish between a value set to NULL and a truly undefined value.

If you have this problem inside a class, there is a fix:

<?php
class T
{
  function __isset($att)
  {
    $props = get_object_vars($this);
    return array_key_exists($att, $props);
  }
}

$x = new T();
$x->foo_exists = 4;

var_dump(isset($x->foo_exists)); // TRUE
var_dump(isset($x->bar_exists)); // FALSE
?>
[EDITOR thiago NOTE: This snippet has improvements by "Paul Lashbrook"]
Cuong Huy To 23-Mar-2011 05:08
1) Note that isset($var) doesn't distinguish the two cases when $var is
undefined, or is null. Evidence is in the following code.

<?php
unset($undefined);
$null = null;
if (true === isset($undefined)){echo 'isset($undefined) === true'} else {echo
'isset($undefined) === false'); // 'isset($undefined) === false'
if (true === isset($null)){echo 'isset($null) === true'} else {echo 'isset
($null) === false');              // 'isset($null)      === false'
?>

2) If you want to distinguish undefined variable with a defined variable with a
null value, then use array_key_exist

<?php
unset($undefined);
$null = null;

if (true !== array_key_exists('undefined', get_defined_vars())) {echo
'$undefined does not exist';} else {echo '$undefined exists';} // '$undefined
does not exist'
if (true === array_key_exists('null', get_defined_vars())) {echo '$null
exists';} else {echo '$null does not exist';}                // '$null exists'
?>
francois vespa 22-Dec-2010 07:21
Now this is how to achieve the same effect (ie, having isset() returning true
even if variable has been set to null) for objects and arrays

<?php

// array

$array=array('foo'=>null);

return isset($array['foo']) || array_key_exists('foo',$array)
  ? true : false ; // return true

return isset($array['inexistent']) || array_key_exists('inexistent',$array)
  ? true : false ; // return false

// static class

class bar

{
  static $foo=null;
}

return isset(bar::$foo) || array_key_exists('foo',get_class_vars('bar'))
  ? true : false ; // return true

return isset(bar::$inexistent) || array_key_exists('inexistent',get_class_vars
('bar'))
  ? true : false ; // return false

// object

class bar
{
    public $foo=null;
}

$bar=new bar();

return isset($bar->foo) || array_key_exists('foo',get_object_vars($bar))
  ? true : false ; // return true

return isset($bar->inexistent) || array_key_exists('inexistent',get_object_vars
($bar))
  ? true : false ; // return true

// stdClass

$bar=new stdClass;
$bar->foo=null;

return isset($bar->foo) || array_key_exists('foo',get_object_vars($bar))
  ? true : false ; // return true

return isset($bar->inexistent) || array_key_exists('inexistent',get_object_vars
($bar))
  ? true : false ; // return true

?>
Raphael Campos 06-Jul-2010 04:10
Keep in mind that an empty string is not null, and an empty GET or POST field
returns an empty string instead of NULL, thus...

file.php?foo

<?php
$a = '';
$b = NULL;

isset($a); // => TRUE
isset($b); // => FALSE
(isset($a) && $a === ''); // => TRUE
?>

With that in mind, one probably would use isset() to check if a variable has
been declared somehow and it's value is not the special value NULL. If you want
to check if the value is an empty string, it's probably a better idea to check
it literally:

<?php
(isset($a) && $a == '') // => TRUE
?>
i [at] nemoden [dot] com 14-Jun-2010 11:48
Simple, but very useful:

<?php
function issetOr($var, $or = false) {
  return isset($var) ? $var : $or;
}
?>

Some examples:
<?php
$a = '1';
$b = '2';
echo issetOr($a,issetOr($b,3)); // 1
?>
<?php
$b = '2';
echo issetOr($a,issetOr($b,3)); // 2
?>
<?php
echo issetOr($a,issetOr($b,3)); // 3
?>
senthil sent222 at gmail dot com 26-May-2010 07:14
just as note: if you want to check isset() with string variables
<?php
$var='string value';
if(isset($var['somekey']){          //it will be treated as true
echo 'This will be printed';
}
?>
mohd at bahrain dot bz 10-Jan-2010 04:02
HTML table to displays how different variables are evaluated ..
<?php
$TEST_VAR = array(
'|NULL' => NULL,
'|"NULL"' => "NULL",
'|false' => false,
'|true' => true,
'|FALSE' => FALSE,
'|TRUE' => TRUE,
'|"false"' => "false",
'|"true"' => "true",
'|0' => 0,
'|1' => 1,
'|"0"' => "0",
'|"1"' => "1",
'|NotExsist' => $notexist,
'|""' => "",
'|array()' => array(),
'|array("A", "B")' => array("A", "B"),
'|$_GET' => $_GET,
'|$_POST' => $_POST,
'|count($_GET)' => count($_GET),
'|count($_POST)' => count($_POST),
'|1.5' => 1.5,
'|1e7' => 1e7,
'|-14' => -14,
'|005' => 005,
'|(object) "Halo"' => (object) "Halo",
'|fopen("php://stdin")' => fopen("php://stdin", "r")
);
$CASE = array(
'$var != ""',
'!isset($var)',
'!is_null($var)',
'$var != NULL',
'$var !== NULL',
'!empty($var)',
'$var != true',
'$var !== true',
'$var != false',
'$var !== false',
'!is_bool($var)',
'!is_numeric($var)',
'!is_int($var)',
'!is_float($var)',
'!is_array($var)',
'!is_object($var)',
'!is_resource($var)',
);

$T = 'TRUE'; $F = 'FALSE';

/* CSS */
$lf = "\r\n"; $ds = "  "; $gt = '>'; $q = '"'; $ac = ' align="center"';
$t = ' style='; $b = 'background-'; $c = 'color:'; $c1 = $t.$q.$b.$c.'#
EBEBEB'.$q;
$w = 'white-space:nowrap;';
$br = '<br />'; $s1 = '<span'; $s2 = '</span>';
$T = $s1.$t.$q.$c.'#0000FF'.$q.$gt.$T.$s2; $F = $s1.$t.$q.$c.'#
FF0000'.$q.$gt.$F.$s2;
$t1 = '<table border="1" cellspacing="2" cellpadding="5"'.$t.$q;
$t1 .= 'font-weight:bold; font-size:9px; font-family:Tahoma,Arial;'.$q.$gt;
$t2 = '</table>'; $r1 = '<tr'; $r2 = '</tr>'; $d1 = '<td'; $d2 = '</td>';

$K = array_keys($TEST_VAR); $n = count($K); $m = count($CASE);

$da = $ds.$ds.$d1.$ac.$gt;
$dz = $d2.$lf;

echo $t1.$lf;

$v = 14;
for ($i=0; $i<$n; $i++) {
if ( ($i != ($n-1)) && ($v > 13) ) {
    echo $ds.$r1.$t.$q.$b.$c.'#CCCCCC'.$q.$gt.$lf;
    echo $ds.$ds.$d1.$ac.$gt
    .'$VAR/IF NOT'
    .$dz;
    for ($j=0; $j<$m; $j++) {
        echo $ds.$ds.$d1.$ac.$t.$q.$w.$q.$gt
        .htmlspecialchars($CASE[$j],ENT_QUOTES)
        .$dz;   
    }
    echo $ds.$ds.$d1.$ac.$gt
    .'$VAR/IF NOT'
    .$dz;
    echo $ds.$r2.$lf;
    $v = 0;
}
$v += 1;

echo $ds.$r1.(($ch=(($ch)?false:true))?'':$c1).$gt.$lf;

echo $ds.$ds.$d1.$ac.$t.$q.$w.$q.$gt
.(htmlspecialchars(trim($K[$i],"|"),ENT_QUOTES))
.$dz;

/* ($var != "")? */
echo $da
.(( $TEST_VAR[($K[$i])] != "" ) ? $T:$F)
.$dz;
/* (!isset($var))? */
echo $da
.(( !isset($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_null($var))? */
echo $da
.(( !is_null($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* ($var != NULL)? */
echo $da
.(( $TEST_VAR[($K[$i])] != NULL ) ? $T:$F)
.$dz;
/* ($var !== NULL)? */
echo $da
.(( $TEST_VAR[($K[$i])] !== NULL ) ? $T:$F)
.$dz;
/* (!empty($var))? */
echo $da
.(( !empty($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* ($var != true)? */
echo $da
.(( $TEST_VAR[($K[$i])] != true ) ? $T:$F)
.$dz;
/* ($var !== true)? */
echo $da
.(( $TEST_VAR[($K[$i])] !== true ) ? $T:$F)
.$dz;
/* ($var != false)? */
echo $da
.(( $TEST_VAR[($K[$i])] != false ) ? $T:$F)
.$dz;
/* ($var !== false)? */
echo $da
.(( $TEST_VAR[($K[$i])] !== false ) ? $T:$F)
.$dz;
/* (!is_bool($var))? */
echo $da
.(( !is_bool($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_numeric($var))? */
echo $da
.(( !is_numeric($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_int($var))? */
echo $da
.(( !is_int($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_float($var))? */
echo $da
.(( !is_float($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_array($var))? */
echo $da
.(( !is_array($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_object($var))? */
echo $da
.(( !is_object($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
/* (!is_resource($var))? */
echo $da
.(( !is_resource($TEST_VAR[($K[$i])]) ) ? $T:$F)
.$dz;
echo $ds.$ds.$d1.$ac.$t.$q.$w.$q.$gt
.(htmlspecialchars(trim(trim($K[$i],"|")),ENT_QUOTES))
.$dz;

echo $ds.$r2.$lf;

}
echo $t2.$lf;
@fclose($file_handle);

function n0t($var=false) {
    return (( (!isset($var)) || ((!$var) && ($var !== "0")) )? true: false);
}
?>
Robert dot VanDell at cbs dot com 08-Jan-2010 02:19
Here's a nice little function that I use everywhere that'll help with setting
alternate values so you don't have a bunch of situations like:

<?php
if(isset($a))
{
    $b = $a;
}
else
{
    $b = "default";
}

function isset_or(&$check, $alternate = NULL)
{
    return (isset($check)) ? $check : $alternate;
}

// Example usage:
$first_name = isset_or($_POST['first_name'], "Empty");
$total        = isset_or($row['total'], 0);

?>
Anl zselgin 14-Aug-2009 03:30
Note: Because this is a language construct and not a function, it cannot be
called using variable functions.

So why it is under "Variable handling Functions". Maybe there should be some
good documentation field for language constructs.
alexander dot holmback at gmail dot com 23-Mar-2009 02:48
<?php
$abc = 'test';
?>

$abc is not an array, but you can use the brackets to reach a single byte in
the string using numbers.

<?php
$abc[0] = 't'        //first letter in 'test'
$abc[1] = 'e'        //second letter in 'test'
$abc[2] = 's'        //third letter in 'test'
$abc[3] = 't'        //fourth letter in 'test'
?>

When using $abc['astring'], php will cast any string to 0 (see type juggling)
which result in the letter 't' which indeed is set.

isset($abc['astring'] = isset($abc[0]) = true.
yarco dot w at gmail dot com 18-Mar-2009 12:30
just following what edsko said, it is very amazing when you use isset to check
a string. look at what i found:

[yarco@localhost ~]$ php -a
Interactive shell

php > $abc = 'test';
php > print isset($abc['e']) ? 'yes' : 'no';
yes
php > print isset($abc['d']) ? 'yes' : 'no';
yes
php > print isset($abc['aaaaaaa']) ? 'yes' : 'no';
yes
php > print isset($abc[23]) ? 'yes' : 'no';
no

If you use string as index, isset would always return true.
(but i don't think it should return true)
Ashus 08-Dec-2008 01:05
Note that array keys are case sensitive.

<?php
$ar['w'] = true;

var_dump(isset($ar['w']),
      isset($ar['W']));
?>

will report:
bool(true) bool(false)
jwvdveer at gmail dot com 10-Nov-2008 10:29
Here a short note on the function tomek wrote:
Don't use it, because it is still better to use !$var than !is($var).

Some comments on the body of the function:
<?php
function is($var)
{
if (!isset($var)) return false; # Variable is always set... Otherwise PHP would
have thrown an error on call.
if ($var!==false) return true; # So, 0, NULL, and some other values may not
behave like isNot? And what about the difference between a class and NULL?
return false;
}
?>

The reason why you shall not use this function:
Notice: Undefined variable: {variablename} in {file} on line {__LINE__}

It's me as plain as the nose on your face that the piece of code hasn't been
tested with E_NOTICE.

So my advice in this case is: don't use the above function, but simply use !,
and functions such like is_null in the situation they are made for.
tomek 26-Oct-2008 06:48
Here's a simple function to test if the variable is set:

<?php
function is($var)
{
if (!isset($var)) return false;
if ($var!==false) return true;
return false;
}
?>

Now instead of very popular (but invalid in many situations):

if (!$var) $var=5;

you can write:

if (!is($var)) $var=5;
a dot schaffhirt at sedna-soft dot de 12-Oct-2008 08:01
You can safely use isset to check properties and subproperties of objects
directly. So instead of writing

    isset($abc) && isset($abc->def) && isset($abc->def->ghi)

or in a shorter form

    isset($abc, $abc->def, $abc->def->ghi)

you can just write

    isset ($abc->def->ghi)

without raising any errors, warnings or notices.

Examples
<?php
    $abc = (object) array("def" => 123);
    var_dump(isset($abc));                // bool(true)
    var_dump(isset($abc->def));           // bool(true)
    var_dump(isset($abc->def->ghi));      // bool(false)
    var_dump(isset($abc->def->ghi->jkl)); // bool(false)
    var_dump(isset($def));                // bool(false)
    var_dump(isset($def->ghi));           // bool(false)
    var_dump(isset($def->ghi->jkl));      // bool(false)

    var_dump($abc);                       // object(stdClass)#1 (1) { ["def"]
=> int(123) }
    var_dump($abc->def);                  // int(123)
    var_dump($abc->def->ghi);             // null / E_NOTICE: Trying to get
property of non-object
    var_dump($abc->def->ghi->jkl);        // null / E_NOTICE: Trying to get
property of non-object
    var_dump($def);                       // null / E_NOTICE: Trying to get
property of non-object
    var_dump($def->ghi);                  // null / E_NOTICE: Trying to get
property of non-object
    var_dump($def->ghi->jkl);             // null / E_NOTICE: Trying to get
property of non-object
?>
edsko 05-Oct-2008 04:13
It has been remarked by various people that isset is the opposite of is_null
"in all but buggy cases". This is not true:

<?php
  $str = "hi";
  var_dump(isset($str[1]));
  var_dump(@!is_null($str[1]));
  var_dump(isset($str[2]));
  var_dump(@!is_null($str[2]));
?>

outputs

bool(true)
bool(true)
bool(false)
bool(true)
mark dot fabrizio at gmail dot com 15-Sep-2008 07:01
I know this is probably not the recommended way to do this, but it seems to
work fine for me. Instead of the normal isset check to extract variables from
arrays (like $_REQUEST), you can use the @ prefix to squelch any errors.

For example, instead of:
<?php
$test = isset($_REQUEST['test']) ? $_REQUEST['test'] : null;
?>
you can use:
<?php
$test = @$_REQUEST['test'];
?>

It saves some typing, but doesn't give the opportunity to provide a default
value. If 'test' is not an assigned key for $_REQUEST, the assigned value will
be null.
mandos78 AT mail from google 29-Jul-2008 02:40
Careful with this function "ifsetfor" by soapergem, passing by reference means
that if, like the example $_GET['id'], the argument is an array index, it will
be created in the original array (with a null value), thus causing posible
trouble with the following code. At least in PHP 5.

For example:

<?php
$a = array();
print_r($a);
ifsetor($a["unsetindex"], 'default');
print_r($a);
?>

will print

Array
(
)
Array
(
    [unsetindex] =>
)

Any foreach or similar will be different before and after the call.
soapergem at gmail dot com 02-Jul-2008 01:34
It is possible to encapsulate isset() calls inside your own functions if you
pass them by reference (note the ampersand in the argument list) instead of by
value. A prime example would be the heavily-requested "ifsetor" function, which
will return a value when it is set, otherwise a default value that the user
specifies is used.

<?php

function ifsetor(&$val, $default = null)
{
    return isset($val) ? $val : $default;
}

//    example usage
$id = intval(ifsetor($_GET['id'], 0));

?>
soapergem at gmail dot com 04-Jun-2008 02:19
Below a user by the name of Scott posted an isval() function; I just wanted to
point out a revision to his method since it's a bit lengthy for what it does.
The trick is to realize that a boolean AND clause will terminate with false as
soon as it encounters anything that evaluates to false, and will skip over any
remaining checks.

Instead of taking up the space to define isval(), you could just run inline
commands for each variable you need to check this:

<?php

$isval = isset($_POST['var']) && !empty($_POST['var']);

?>

Also be warned that if you try to encapsulate this into a function, you might
encounter problems. It's meant to stand alone.
John A. Bilicki III 10-Mar-2008 11:08
I was attempting to use isset to detect if a class existed or not and kept
having an error...

Call to a member function get() on a non-object...

For example I have some pages where I want to disable my own error reporting
for non-existent HTTP queries. The HTTP query error handling file was merely
included in my templates though now I can declare a class that uses that
template system, declare an error class, and have the template system not serve
the error handling when I will be using a large array of queries that I will
not be tracking...
<?php if (!class_exists('error')) {include("includes.php");} ?>
anonymousleaf at gmail dot com 25-Feb-2008 10:16
isset expects the variable sign first, so you can't add parentheses or
anything.

<?php
    $foo = 1;
    if(isset(($foo))) { // Syntax error at isset((
        $foo = 2;
    }
?>
muratyaman at gmail dot com 07-Feb-2008 04:40
To organize some of the frequently used functions..

<?php

/**
 * Returns field of variable (arr[key] or obj->prop), otherwise the third
parameter
 * @param array/object $arr_or_obj
 * @param string $key_or_prop
 * @param mixed $else
 */
function nz($arr_or_obj, $key_or_prop, $else){
  $result = $else;
  if(isset($arr_or_obj)){
    if(is_array($arr_or_obj){
      if(isset($arr_or_obj[$key_or_prop]))
        $result = $arr_or_obj[$key_or_prop];
    }elseif(is_object($arr_or_object))
      if(isset($arr_or_obj->$key_or_prop))
        $result = $arr_or_obj->$key_or_prop;
    }
  }
  return $result;
}

/**
 * Returns integer value using nz()
 */
function nz_int($arr_or_obj, $key_or_prop, $else){
  return intval(nz($arr_or_obj, $key_or_prop, $else));
}

$my_id = nz_int($_REQUEST, 'id', 0);
if($my_id > 0){
  //why?
}
?>
packard_bell_nec at hotmail dot com 25-Dec-2007 11:18
Note: isset() only checks variables as anything else will result in a parse
error. In other words, the following will not work: isset(trim($name)).

isset() is the opposite of is_null($var) , except that no warning is generated
when the variable is not set.
sam b 13-Nov-2007 10:51
Check out this ifsetor function. If $var is set, do nothing, otherwise $var =
$default.

<?php

$name = ifsetor($name, 'default name') ;

function ifsetor(&$var, $default)
    {
        return isset($var) ? $var : $default) ;
    }
   
?>
contact at scottbyrns dot com 07-Nov-2007 05:51
If you have for example a variable in your URL say url.php?var= and some one
types in %00 the variable will pass isset. For post and get variables I wrote
this function to filter out varables that are set but empty.

function isval($inp){
    if(isset($inp)){
        $len = strlen($inp);
        if($len > 0){
            return true;
        }
        else{
            return false;
        }
    }
    else{
        return false;
    }
}
petruzanauticoyahoo?com!ar 14-Oct-2007 11:22
I've come up with a little not-so-clean but useful function to avoid checking
if a variable is set before reading its value, specially useful for $_REQUEST
and the like:

<?php
function toLocal( $source, &$dest, $default = null )
{
    if( isset( $source ) )
        $dest = $source;
    else
        $dest = $default;
}
?>

and then call it this way:
<?php
@toLocal( $_REQUEST['item_id'], $item_id, 0 );
?>

It checks wether the variable is set, copies it to a local variable, and if it
wasn't set, it assigns the new variable a default value, all in one line,
preventing you to have to always check for isset() before trying to read its
value.
Gotta call it with @ because if the variable is not set, then trying to pass it
as an argument will yield a warning.

Petruza.
phpnotes dot 20 dot zsh at spamgourmet dot com 22-Sep-2007 02:50
Note that isset is lazy -- the first undefined variable causes it to return.
Have a look at this example:

<?php
class Foo {
    public function __isset($varname) {
        echo "ZOMG! isset was called on my $varname!\n";
    }
}
$foo = new Foo;
// bar will never get checked
var_dump(isset($foo->foo, $foo->bar));

// Output:
// ZOMG! isset was called on my foo!
// bool(false)
?>
codeslinger at compsalot dot com 13-Aug-2007 08:31
The behavior of isset is complex and the results are sometimes not what people
expected -- to their peril.

After dealing with isset() for awhile and peppering my code with additional
checks for edge cases.  I eventually got to know and love  empty()

Most of the places that you are using isset(), empty() would do a better job.

And when you are dealing with arrays what you probably want to use instead of
isset() is   array_key_exists()

These days, I almost never use isset() and I write a lot of code.
talbutt(at)mail(dot)med(dot)upenn(edu) 13-Aug-2007 08:30
In PHP 5.2.3, really returns true if the variable is set to null.
black__ray at myway dot com 03-Jul-2007 04:40
if(isset($_POST['in_qu']))
          {

          include("qanda/in_qu.php");
          $content.=$message;
          include("qanda/view_qanda.php");
    }
elseif(isset($_GET['rq']))
          {
          include("qanda/add_answer.php");
    }
elseif(isset($_POST['add_answer']))
          {
          include("qanda/in_an.php");
          $content.=$message;
          include("qanda/view_qanda.php");
    }
elseif($_GET['act']== 'v_qanda' && !(isset($_GET['rq'])))
{
include("qanda/view_qanda.php");
}
/*
if(isset($_POST['add_answer']))
beuc at beuc dot net 01-Jan-2007 01:56
Beware that the chk() function below creates the variable or the array index if
it didn't existed.

<?php
function chk(&$var) {
  if (!isset($var))
    return NULL;
  else
    return $var;
}

echo '<pre>';
$a = array();
var_dump($a);
chk($a['b']);
var_dump($a);
echo '</pre>';

// Gives:
// array
//   empty
//
// array
//   'b' => null
?>
beuc at beuc dot net 16-Dec-2006 12:35
"empty() is the opposite of (boolean) var, except that no warning is generated
when the variable is not set."

So essentially
<?php
if (isset($var) && $var)
?>
is the same as
<?php
if (!empty($var))
?>
doesn't it? :)

!empty() mimics the chk() function posted before.
roberto at spadim dot com dot br 03-Dec-2006 10:04
test:

<?php
$qnt=100000;
$k=array();
for ($i=0;$i<$qnt;$i++)
$k[$i]=1;

echo microtime()."\n";
for ($i=0;$i<$qnt;$i++)if(isset($k[$i]));
echo microtime()."\n";
for ($i=0;$i<$qnt;$i++)if(array_key_exists($i,$k));
echo microtime()."\n";
for ($i=0;$i<$qnt;$i++)if($k[$i]==1);
echo microtime()."\n";

?>

the interesting result:
isset is the fastest
php at bagnara dot org 29-Nov-2006 03:14
See also property_exists() which allows detection of protected variables
existing in a class even if they are NULL.
randallgirard at hotmail dot com 27-Sep-2006 11:51
The unexpected results of isset has been really frustrating to me. Hence, it
doesn't work how you'd think it would, (as documented) a var currently in the
scope with a null value will return false.

Heres a quick solution, perhaps there are better ways of going about this, but
heres my solution...

<?php
function is_set( $varname, $parent=null ) {
  if ( !is_array( $parent ) && !is_object($parent) ) {
    $parent = $GLOBALS;
  }
  return array_key_exists( $varname, $parent );
}
?>

Hence, $varname should be a mixed value of var's to check for, and $parent can
be an array or object, which will default to the GLOBAL scope. See the
documentation of array_key_exists for further information.

This will allow to check if a var is in the current scope, object, or array...
Whether it's a null, false, true, or any value. It depends on ARRAY_KEY_EXISTS
for it's functionality which also works with Objects. Feel free to improve on
this anyone ;D
DerSpezialist at Hotmail dot com 29-Aug-2006 10:09
Note that isset() doesnt recognize $_FILES - Arrays.. additionally, i think it
doesnt recognize Arrays in general at all (untested, but logical)!
Checking $_FILES will always result in Boolean FALSE i think, at least it
caused my Script to calculate false Positives / Negatives... Solution: Use
empty() or !empty() :-)
Tee Cee 20-Aug-2006 05:20
In response to 10-Feb-2006 06:02, isset($v) is in all (except possibly buggy)
cases equivalent to !is_null($v). And no, it doesn't actually test if a
variable is set or not by my definition "$v is set if unset($v) has no effect".

<?php
unset($c); //force $c to be unset
var_dump($a=&$c); // NULL, but this actually sets $a and $c to the 'same' NULL.
var_dump(isset($c)); // bool(false)
var_dump($a = 5); // int(5)
var_dump($c); // int(5)

unset($c);
var_dump($a=&$c); // NULL
var_dump(isset($c)); // bool(false)
unset($c);
var_dump($a = 5); // int(5)
var_dump($c); // NULL
?>

In the following example, we see an alternate method of testing if a variable
is actually set or not:
<?php
var_dump(array_key_exists('c',get_defined_vars())); // false
var_dump(isset($c));                                // also false
var_dump($c);                                       // manipulate $c a bit...
var_dump((string)$c);
var_dump(print_r($c,true));
var_dump($a=$c);
var_dump(array_key_exists('c',get_defined_vars())); // ... still false
var_dump($c = NULL);                                // this sets $c
var_dump(array_key_exists('c',get_defined_vars())); // true!
var_dump(isset($c));                                // false; isset() still
says it's unset
unset($c);                                          // actually unset it
var_dump(array_key_exists('c',get_defined_vars())); // false
var_dump($a=&$c);                                          
var_dump(array_key_exists('c',get_defined_vars())); // true!
unset($c);                                          // unset it again
var_dump(&$c);                                      // &NULL
var_dump(array_key_exists('c',get_defined_vars())); // true!
?>

Obviously, null values take up space (or they wouldn't show up in
get_defined_vars). Also, note that &$v sets $v to NULL if it is unset.
purpleidea 17-Aug-2006 12:13
fyi:
you *cannot* do assignments inside of the isset() function. although you *can*
while inside of other functions such as is_null().

<?php
if (isset($var = $_GET['key'])) echo 'whatever'; //this will throw an error :(

if (is_null($var = $_GET['key'])) echo 'whatever'; //this will not :)
?>

hope someone finds this useful.
ludie-at-vibage-punkt-kom 16-Aug-2006 05:26
If you don't want to bother checking every single var with isset or empty, use
this function on every var you use:

<?php

function chk( & $var )
{
    if ( !isset($var) )
    {
        return NULL;
    }
    else
    {
        return $var;
    }
}

?>

It takes ANYTHING as argument, and returns the exact same thing, but without
Notice if the var doesn't actually exist
21-Jul-2006 07:08
I tried the example posted previously by Slawek:

$foo = 'a little string';
echo isset($foo)?'yes ':'no ', isset($foo['aaaa'])?'yes ':'no ';

He got yes yes, but he didn't say what version of PHP he was using.

I tried this on PHP 5.0.5 and got:  yes no

But on PHP 4.3.5 I got:  yes yes

Apparently, PHP4 converts the the string 'aaaa' to zero and then returns the
string character at that position within the string $foo, when $foo is not an
array. That means you can't assume you are dealing with an array, even if you
used an expression such as isset($foo['aaaa']['bbb']['cc']['d']), because it
will return true also if any part is a string.

PHP5 does not do this. If $foo is a string, the index must actually be numeric
(e.g. $foo[0]) for it to return the indexed character.
soywiz at php dot net 14-Apr-2006 06:12
Sometimes you have to check if an array has some keys. To achieve it you can
use "isset" like this: isset($array['key1'], $array['key2'], $array['key3'],
$array['key4'])
You have to write $array all times and it is reiterative if you use same array
each time.

With this simple function you can check if an array has some keys:

<?php
function isset_array() {
    if (func_num_args() < 2) return true;
    $args = func_get_args();
    $array = array_shift($args);
    if (!is_array($array)) return false;
    foreach ($args as $n) if (!isset($array[$n])) return false;
    return true;
}
?>

Use: isset_array($array, 'key1', 'key2', 'key3', 'key4')
First parameter has the array; following parameters has the keys you want to
check.
kariedoo 09-Mar-2006 10:27
Before:

//ask, if is set
$number = isset($_GET['number']) ? $_GET['number'] : '';
$age = isset($_GET['age']) ? $_GET['age'] : '';
$street = isset($_GET['street']) ? $_GET['street'] : '';

After: --> it's easier to read

//ask, if is set
 $parameter = array('number', 'age', 'street');
 foreach($parameter as $name)
 {
    $$name = isset($_GET[$name]) ? $_GET[$name] : '';
 }
red at iklanumum dot com 09-Feb-2006 10:02
This could be viewed as a philosophy. I wonder why a NULL variabel is being
considered FALSE rather than TRUE while in isset, because if the variable has
been unset it becomes undefined but a NULL variabel is still defined although
it has no value. Or, perhaps, it's based on the memory usage, if it is how
about $x="" ? Is empty value use memory too? This leads me to another thinking
that the isset isn't have family relationship with unset although both of it
are a language construct and have 'set' word :)
Slawek Petrykowski 29-Nov-2005 03:06
<?php
$foo = 'a little string';
echo isset($foo)?'yes ':'no ', isset($foo['aaaa'])?'yes ':'no ';
>

results with unexpected values:
yes yes

Well, it is necessary to check type of $foo first !
Peter Beckman <beckman at purplecow dot com> 21-Sep-2005 12:16
Based on the previous post, I've found this code even more useful:

<?php
function isset_sum(&$var, $val) {
    if (isset($var))  $var += $val;
    else              $var  = $val;
}
?>

Now instead of:

<?php
if (isset($foo[$bar][$baz][$fooz])) $foo[$bar][$baz][$fooz] += $count;
else                                $foo[$bar][$baz][$fooz] = $count;
?>

No more "Undefined variable" warnings, and you save your fingers and sanity! 
Thanks to the previous poster for inspiration.
14-Sep-2005 03:41
I don't know if you guys can use this but i find this piece of code pretty
useful (for readabillity at least):

function isset_else( $&v, $r )
{
    if( isset( $v ))
        return $v;
    else
        return $r;
}

This way you can go:

$a = 4;

$c += isset_else( $a, 0 );
$c += isset_else( $b, 0 );

echo $c;

Of course, this code would work anyway, but you get the point.
onno at itmaze dot com dot au ##php==owh 12-Aug-2005 12:33
In PHP4, the following works as expected:

if (isset($obj->thing['key'])) {
  unset($obj->thing['key']) ;
}

In PHP5 however you will get a fatal error for the unset().

The work around is:

if (is_array($obj->thing) && isset($obj->thing['key'])) {
  unset($obj->thing['key']) ;
}
richard william lee AT gmail 10-Jun-2005 11:38
Just a note on the previous users comments. isset() should only be used for
testing if the variable exists and not if the variable containes an empty ""
string. empty() is designed for that.

Also, as noted previosuly !empty() is the best method for testing for set
non-empty variables.
darkstar_ae at hotmail dot com 25-May-2005 01:03
isset doesn't reliably evaluate variables with blank strings (not necessarily
NULL).
i.e.
$blankvar = ""; // isset will return true on this.

This is a very common pitfall when handling HTML forms that return blank text
fields to the script. You're better off doing this:

if ($var != "")
return true;
else
return false;

This more of a programming practice rather than the function's shortcomings. So
if you have a habit of initializing variables you're likely to run into
problems with isset() if your code or php project become very large.
Andrew Penry 11-May-2005 08:17
The following is an example of how to test if a variable is set, whether or not
it is NULL. It makes use of the fact that an unset variable will throw an
E_NOTICE error, but one initialized as NULL will not.

<?php

function var_exists($var){
    if (empty($GLOBALS['var_exists_err'])) {
        return true;
    } else {
        unset($GLOBALS['var_exists_err']);
        return false;
    }
}

function var_existsHandler($errno, $errstr, $errfile, $errline) {
   $GLOBALS['var_exists_err'] = true;
}

$l = NULL;
set_error_handler("var_existsHandler", E_NOTICE);
echo (var_exists($l)) ? "True " : "False ";
echo (var_exists($k)) ? "True " : "False ";
restore_error_handler();

?>

Outputs:
True False

The problem is, the set_error_handler and restore_error_handler calls can not
be inside the function, which means you need 2 extra lines of code every time
you are testing. And if you have any E_NOTICE errors caused by other code
between the set_error_handler and restore_error_handler they will not be dealt
with properly. One solution:

<?php

function var_exists($var){
   if (empty($GLOBALS['var_exists_err'])) {
       return true;
   } else {
       unset($GLOBALS['var_exists_err']);
       return false;
   }
}

function var_existsHandler($errno, $errstr, $errfile, $errline) {
    $filearr = file($errfile);
    if (strpos($filearr[$errline-1], 'var_exists') !== false) {
        $GLOBALS['var_exists_err'] = true;
        return true;
    } else {
        return false;
    }
}

$l = NULL;
set_error_handler("var_existsHandler", E_NOTICE);
echo (var_exists($l)) ? "True " : "False ";
echo (var_exists($k)) ? "True " : "False ";
is_null($j);
restore_error_handler();

?>

Outputs:
True False
Notice: Undefined variable: j in filename.php on line 26

This will make the handler only handle var_exists, but it adds a lot of
overhead. Everytime an E_NOTICE error happens, the file it originated from will
be loaded into an array.
phpnet dot 5 dot reinhold2000 at t spamgourmet dot com 10-Apr-2005 08:33
if you want to check whether the user has sent post vars from a form, it is a
pain to write something like the following, since isset() does not check for
zero-length strings:

if(isset($form_name) && $form_name != '') [...]

a shorter way would be this one:

if($form_name && $form_message) [...]

but this is dirty since you cannot make sure these variables exist and php will
echo a warning if you refer to a non-existing variable like this. plus, a
string containing "0" will evaluate to FALSE if casted to a boolean.

this function will check one or more form values if they are set and do not
contain an empty string. it returns false on the first empty or non-existing
post var.

<?
function postvars() {
    foreach(func_get_args() as $var) {
        if(!isset($_POST[$var]) || $_POST[$var] === '') return false;
    }
    return true;
}
?>

example: if(postvars('form_name','form_message')) [...]
yaogzhan at gmail dot com 20-Mar-2005 04:52
in PHP5, if you have

<?PHP
class Foo
{
    protected $data = array('bar' => null);

    function __get($p)
    {
        if( isset($this->data[$p]) ) return $this->data[$p];
    }
}
?>

and
<?PHP
$foo = new Foo;
echo isset($foo->bar);
?>
will always echo 'false'. because the isset() accepts VARIABLES as it
parameters, but in this case, $foo->bar is NOT a VARIABLE. it is a VALUE
returned from the __get() method of the class Foo. thus the isset($foo->bar)
expreesion will always equal 'false'.
dubmeier aaattt Y! daht calm 01-Mar-2005 03:13
Here are some handy wrappers to isset that I use when I need to do common
evaluations like: this variable is set and has a length greater than 0, or: I
want the variables value, or a blank, if not set.

/**
 * isset_echo()
 *
 * Accomplishes the following w/o warnings:
 *    echo $x;
 *    echo $x[$y];
 *    echo $x[$y][$z];
 *
 * FIXME: make this recursive so it works for N args?
 */
function isset_echo($x, $y=Null, $z=Null)
{
    if (is_array($x)) {
        if (array_key_exists($y, $x)) {
            if (is_array($x[$y])) {
                if (array_key_exists($z, $x[$y])) { echo $x[$y][$z]; }
            }
            else { echo $x[$y]; }
        }
    }
    else { echo $x; }
}

/**
 * isset_value()
 *
 * As above, but returns value instead of echoing
 */
function isset_value(&$x, $y=Null)
{
    if (is_array($x)) {
        if (array_key_exists($y, $x)) { return $x[$y]; }
    }
    else { return $x; }
}

/**
 * isset_and_equals()
 *
 * As above, but ...
 * Returns true if variable (or array member) is set and equaL to the first
parameter
 */
function isset_equals($val, $w, $x=null, $y=null, $z=null) {
    if (is_array($w)) {
                if (array_key_exists($x, $w)) {
                if (is_array($w[$x])) {
                        if (array_key_exists($y, $w[$x])) {
                                    if (is_array($w[$x][$y])) {
                                        if(array_key_exists($z, $w[$x][$y])) {
                                                return ($w[$x][$y][$z] == $val)
? true : false;
                                        }
                                    } else {
                                        return ($w[$x][$y] == $val) ? true :
false;
                                    }
                            }
                    } else {
                        return ($w[$x] == $val) ? true : false;
                    }
        }
    } else {
                return ($w == $val) ? true : false;
        }
}

/**
 * isset_gt0()
 *
 * As above, but returns true only if var is set and it's length is > 0
 */
function isset_gt0(&$x)
{
    if (isset($x) && strlen($x) > 0) { return true; }
    else { return false; }
}
codeslinger at compsalot dot com 06-Feb-2005 10:21
according to the docs -- "isset() will return FALSE if testing a variable that
has been set to NULL."

That statment is not always correct, sometimes isset() returns TRUE for a NULL
value.  But the scenarios are obtuse.  There are a tons of bugs on this
subject, all marked as bogus.

Problems occur when NULLs are in named fields of arrays and also when vars are
passed by reference.

do lots of testing and code defensively.

is_null()   is your friend...
pianistsk8er at gmail dot com 09-Dec-2004 06:23
This function is very useful while calling to the URL to specify which template
to be used on certain parts of your application.

Here is an example...

<?php

    $cat = $_GET['c'];
    $id = $_GET['id'];   
    $error = 'templates/error.tpl';

    if( isset($cat))
    {
        if( isset($id))
        {
            $var = 'templates/pics/' . $cat . '-' . $id . '.tpl';
            if (is_file($var))
            {
                include($var);
            }
            else
            {
                include($error);
            }
        }
        else
        {
            $var = 'templates/pics/' . $cat . '.tpl';       
            if (is_file($var))
            {
                include($var);
            }
            else
            {
                include($error);
            }
        }
    }
    else
    {
        include('templates/alternative.'.tpl);
    }

?>

You can see several uses of the isset function being used to specify wheter a
template is to be called upon or not.  This can easily prevent other generic
PHP errors.
jc dot michel at symetrie dot com 15-Nov-2004 02:35
Using
  isset($array['key'])
is useful, but be careful!
using
  isset($array['key']['subkey'])
doesn't work as one could expect, if $array['key'] is a string it seems that
'subkey' is converted to (integer) 0 and $array['key']['subkey'] is evaluated
as the first char of the string.
The solution is to use
  is_array($array['key']) && isset($array['key']['subkey'])

Here is a small code to show this:

<?php
$ex = array('one' => 'val1','two' => 'val2');
echo '$ex = ';print_r($ex);
echo "<br />";

echo " isset(\$ex['one']['three']) : ";
if (isset($ex['one']['three']))
    echo 'true';
else
    echo 'false';

echo "<br />";
echo "is_array(\$ex['one']) &&  isset(\$ex['one']['three']) : ";
if (is_array($ex['one']) && isset($ex['one']['three']))
    echo 'true';
else
    echo 'false';
?>

shows:
$ex = Array ( [one] => val1 [two] => val2 )
isset($ex['one']['three']) : true
is_array($ex['one']) && isset($ex['one']['three']) : false
jon 07-Dec-2003 10:19
Since PHP will check cases in order, I often end up using this bit of code:

<?php
if (isset($var) && $var) {
    // do something
}
?>

In short, if you have error reporting on, and $var is not set, PHP will
generate an error if you just have:

<?php
if ($var) { // do something }
?>

...but, as noted elsewhere, will return True if set to False in this case:
<?php
if (isset($var)) { // do something }
?>

Checking both to see if $var is set, and that it equals something other than
Null or False is something I find very useful a lot of times.  If $var is not
set, PHP will never execute the second part of "(isset($var) && $var)", and
thus never generate an error either.

This also works very nice for setting variable as well, e.g.:
<?php
$var = (isset($var) && $var) ? $var : 'new value';
?>
flobee at gmx dot net 08-Sep-2003 02:16
just as note: if you want to check variables by boolean value: true or false ,
"isset" has a different meaning!
<?php
$var=null;
// sample 1
if($var) {
   // if true or another value exept "false" , "null": go on here
   echo "1. var is true or has a value $var<br>";
} else {
   echo "1. var is &quot;false&quot; or &quot;null&quot;<br>";
}

if(!$var) {
   // if false or "null": go on here
   echo "2. var has no value $var<br>";
} else {
   echo "2. var is &quot;false&quot; or &quot;null&quot;<br>";
}

// sample 2
$var =false;
if(isset($var)) {
  // $var is false so it is set to a value and the execution goes here
   echo "3. var has value: $var<br>";
}

$var=null;
if(!isset($var)) {
  // $var is null (does not exist at this time) and the execution goes here
   echo "4. var was not set $var<br>";
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 7 19:21:24 2012 UTC
Received cookie: COUNTRY=JPN%2C114.49.42.139
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 02 Mar 2012

view this page in

[English             ] Change language
array_keys

(PHP 4, PHP 5)

array_keys — 配列のキーすべて、あるいはその一部を返す

説明

array array_keys ( array $input [, mixed $search_value = NULL [, bool $strict =
false ]] )

array_keys() は、配列 input から全てのキー (数値および文字列) を返します。

オプション search_value が指定された場合、指定した値に関するキーのみが返されま
す。指定されない場合は、 input から全てのキーが返されます。

パラメータ

input

    返すキーを含む配列。

search_value

    指定した場合は、これらの値を含むキーのみを返します。

strict

    検索時に厳密な比較 (===) を行うかどうか。

返り値

input のすべてのキーを配列で返します。

変更履歴

バージョン                説明
5.0.0      strict パラメータが追加されました。

例

例1 array_keys() の例

<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>

上の例の出力は以下となります。

Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)

参考

  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す



array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 02 Mar 2012
 
add a note add a note User Contributed Notes array_keys
izzecold at live dot de 10-Jan-2012 09:21
<?php

/* A Function created by myself for checking multiple array keys
For Example u got an Array like $_SESSION and u wanna know if the keys
'user','pass','email' and 'type' exists.

*/

function mKeyChecker($arr,$keys=array()) {
    if(count($keys) > 1) {
        $valid_keys = 0;
        foreach($keys as $key) {
            if(array_key_exists($key,$arr)) $valid_keys++;
        }
        if($valid_keys == count($keys)) {
            return true;
        } else {
            return false;
        }
    } else if(count($keys) == 1) {
        if(array_key_exists($key[0],$arr)) {
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

// Execution Example

if(mKeyChecker($_SESSION,array('id','user','email','type'))) {
    echo "is!";
} else {
    echo "not!";   
}

?>
craig1231 at hotmail dot com 22-Dec-2011 03:41
A needed a function to find the keys which contain part of a string, not
equalling a string...

<?php
function array_keys_contain($input, $search_value, $strict = false)
    {
        $tmpkeys = array();

        $keys = array_keys($input);

        foreach ($keys as $k)
        {
            if ($strict && strpos($k, $search_value) !== FALSE)
                $tmpkeys[] = $k;
            elseif (!$strict && stripos($k, $search_value) !== FALSE)
                $tmpkeys[] = $k;
        }

        return $tmpkeys;
    }
?>
el dot quick at gmail dot com 23-Sep-2011 08:23
Sorry for my english...

I wrote a function to get keys of arrays recursivelly...

<?php
    function recursive_keys($input, $search_value = null){

        $output = ($search_value !== null ? array_keys($input, $search_value) :
array_keys($input)) ;
        foreach($input as $sub){
            if(is_array($sub)){
                $output = ($search_value !== null ? array_merge($output,
recursive_keys($sub, $search_value)) : array_merge($output, recursive_keys
($sub))) ;
            }
        }
        return $output ;
    }
?>

I hope it will be usefull

Regards
pat dot leblanc at gmail dot com 29-Aug-2011 02:05
It's worth noting that if you have keys that are long integer, such as
'329462291595', they will be considered as such on a 64bits system, but will be
of type string on a 32 bits system.

for example:
<?php

$importantKeys = array('329462291595' =>null, 'ZZ291595' => null);

foreach(array_keys($importantKeys) as $key){
    echo gettype($key)."\n";
}

?>

will return on a 64 bits system:
<?php
    integer
    string
?>

but on a 32 bits system:
<?php
    string
    string
?>

I hope it will save someone the huge headache I had :)
rarioj at gmail dot com 04-Oct-2009 06:38
Sometimes we want to find out the last added numerical key right after we use "
array_push($array, $value) " or " $array[] = $value ". This can be achieved by
calling:

<?php
return array_pop(array_keys($array));
?>
ferrerna at gmail dot com 23-Jan-2009 09:14
Here's a function I needed to collapse an array, in my case from a database
query.  It takes an array that contains key-value pairs and returns an array
where they are actually the key and value.

<?php

function array_collapse($arr, $x, $y) {
    $carr = array();
    while ($el = current($arr)) {
        $carr[ $el[$x] ] = $el[$y];
        next($arr);
    }
    return $carr;
}

?>

Example usage (pseudo-database code):

<?php

$query = db_query('SELECT name, value FROM properties');

$result = db_returnAll($query);

/* This will return an array like so:

[
   ['name' -> 'color', 'value' -> 'blue'],
   ['name' -> 'style', 'value' -> 'wide-format'],
   ['name' -> 'weight', 'value' -> 3.6],
   ['name' -> 'name', 'value' -> 'Waerdthing']
]

*/

$propArr = array_collapse($result, 'name', 'value');

/* Now this array looks like:

[
   ['color' -> 'blue'],
   ['style' -> 'wide-format'],
   ['weight' -> 3.6],
   ['name' -> 'Waerdthing'],

*/

?>

I found this handy for using with json_encode and am using it for my project
http://squidby.com
nodarinodo at mail dot ru 03-Dec-2008 11:35
<?php
    //It's a way to get keys from values )
    $es = array("is My FullName"=>"nodar chkuaselidze (nodarinodo)", "You Are"
=> "I don't know", "Is My Friend" => "ruxadze");
    foreach(array_values($es) as $ess){
        echo $ess." =>";
           
    for($i =0; $i < count(array_keys($es, $ess)); $i++){
            echo reset(array_keys($es, $ess))."<BR>";
        } }
?>
neil at 11 out of 10 24-Jul-2008 12:10
<?php

/*
 * This function will return the keys of elements in the
 * haystack where the value is found in array needle
 */

function array_value_intersect_keys( $array_haystack, $array_needle ){
    $intersected = array_intersect( $array_haystack, $array_needle );
    return array_keys( $intersected );
}

// usage

$array_haystack = array( 1 => 2, 2 => 5, 'red' => 8, 9 => 14 );

$array_needle = array( 2, 8 );

$array_keys_of_intersecting_values = array_value_intersect_keys(
$array_haystack, $array_needle );

print_r( $array_keys_of_intersecting_values );
?>

returns
Array
(
    [0] => 1
    [1] => red
)
edsongarrido at gmail dot com 12-Jun-2008 05:46
/*
*
*This function will return a .csv from a given array inside the $_SESSION
['my_array']
*
*$csv_name -> the name we want the csv has to
*$download -> true or false to download the csv file after done
*
*/

<?php

function createCSV($csv_name, $download) {

        $i = 1;
        $csv = "";

        /* erase the old file, if it exists */
        @unlink("../../csv/" . $csv_name . ".csv");

        /* array is in a session variable
         * this may be useful to avoid many db queries if it is the case */
        $my_array = $_SESSION['my_array'];

        /* how many fields has the given array */
        $fields = count(array_keys($my_array[0]));

        /* extracting the titles from the array */
        foreach(array_keys($my_array[0]) as $title)
        {
            /* array_keys percurs the title of each vector */
            $csv .= $title;

            /* while it is not the last field put a semi-colon ; */
            if($i < $fields)
                $csv .= ";";

            $i++;
        }

        /* insert an empty line to better visualize the csv */
        $csv .= chr(10).chr(13);
                $csv .= chr(10).chr(13);

        /* get the values from the extracted keys */
        foreach (array_keys($my_array) as $tipo)
        {

            $i = 1;

            foreach(array_keys($my_array[$tipo]) as $sub)
            {

                $csv .= $my_array[$tipo][$sub];

                if ($i < $fields)
                    $csv .= ";";

                $i++;
            }

            $csv .= chr(10).chr(13);

        }

        /* export the csv */
        $export_csv=fopen("../../csv/". $csv_name .".csv", "w+");
        fwrite($export_csv, $csv);
        fclose($export_csv);

        /* download the csv */
        if ($download == true)
            header('Location:' . "../../csv/" . $csv_name . ".csv");

        exit();

    }

?>
Hayley Watson 04-Oct-2007 06:43
An alternative to RQuadling at GMail dot com's array_remove() function:

<?php
function array_remove(array $array, $value, $strict=false)
{
    return array_diff_key($array, array_flip(array_keys($array, $value,
$strict)));
}
?>
RQuadling at GMail dot com 28-Mar-2007 05:31
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
creator at mindcreations dot com 20-Mar-2007 02:12
This function will extract keys from a multidimensional array

<?php
function multiarray_keys($ar) {
           
    foreach($ar as $k => $v) {
        $keys[] = $k;
        if (is_array($ar[$k]))
            $keys = array_merge($keys, multiarray_keys($ar[$k]));
    }
    return $keys;
}
?>

Example code:

<?php
$array = array("color" => array("1stcolor" => "blue", "2ndcolor" => "red",
"3rdcolor" => "green"),
               "size"  => array("small", "medium", "large"));

echo "<pre>";
print_r($array);
echo "</pre>";

echo "<pre>";
print_r(multiarray_keys($array));
echo "</pre>";
?>

Example output:

Array
(
    [color] => Array
        (
            [1stcolor] => blue
            [2ndcolor] => red
            [3rdcolor] => green
        )

    [size] => Array
        (
            [0] => small
            [1] => medium
            [2] => large
        )

)

Array
(
    [0] => color
    [1] => 1stcolor
    [2] => 2ndcolor
    [3] => 3rdcolor
    [4] => size
    [5] => 0
    [6] => 1
    [7] => 2
)
Ray.Paseur sometimes uses GMail 21-Dec-2006 04:38
Replace a key in an associative array, preserving the original order of keys
and elements:

<?php
if (!function_exists('array_combine')) { // ONLY EXISTS IN PHP5
    function array_combine($keys, $values) {
        if (count($keys) != count($values)) {
    return false; }
        foreach($keys as $key) { $array[$key] = array_shift($values); }
    return $array; }   
} // END IF FUNCTION EXISTS

$keys = array_keys($array);
$values = array_values($array);
foreach ($keys as $k => $v) {
    if ($v == "MANAGEMENT FEE CHARGE") { $keys[$k] = "MANAGEMENT FEES"; }
}
$array = array_combine($keys, $values);
?>
jochem 17-Feb-2006 04:13
might be worth noting in the docs that not all associative (string) keys are a
like, output of the follow bit of code demonstrates - might be a handy
introduction to automatic typecasting in php for some people (and save a few
headaches):

<?php
$r = array("0"=>"0","1"=>"1","" =>"2"," "=>"3");
echo 'how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")',"\
n-----------\n";
var_dump($r); print_r($r); var_export($r);
echo "\n-----------\n",'var_dump("0","1",""," ") = ',"\n-----------\n";
var_dump("0","1",""," ");
?>

OUTPUTS:

how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")
-----------
array(4) {
  [0]=>
  string(1) "0"
  [1]=>
  string(1) "1"
  [""]=>
  string(1) "2"
  [" "]=>
  string(1) "3"
}
Array
(
    [0] => 0
    [1] => 1
    [] => 2
    [ ] => 3
)
array (
  0 => '0',
  1 => '1',
  '' => '2',
  ' ' => '3',
)
-----------
var_dump("0","1",""," ") =
-----------
string(1) "0"
string(1) "1"
string(0) ""
string(1) " "
Sven (bitcetera.com) 19-Dec-2005 06:43
Here's how to get the first key, the last key, the first value or the last
value of a (hash) array without explicitly copying nor altering the original
array:

<?php
  $array = array('first'=>'111', 'second'=>'222', 'third'=>'333');

  // get the first key: returns 'first'
  print array_shift(array_keys($array));

  // get the last key: returns 'third'
  print array_pop(array_keys($array));

  // get the first value: returns '111'
  print array_shift(array_values($array));

  // get the last value: returns '333'
  print array_pop(array_values($array));
?>
vesely at tana dot it 09-Dec-2005 01:56
The position of an element.

One can apply array_keys twice to get the position of an element from its key.
(This is the reverse of the function by cristianDOTzuddas.) E.g., the following
may output "yes, we have bananas at position 0".

<?php
$a = array("banana" => "yellow", "apple" = "red");
$k = get_some_fruit();
if (isset($a[$k]))
{
   list($pos) = array_keys(array_keys($a), $k);
   print "yes, we have {$k}s at position $pos\n";
}
?>

Not amazingly efficient, but I see no better alternative.
ru dot dy at gmx dot net 14-Aug-2005 09:20
I was looking for a function that simply unset a variable amout of values from
a one-dimensional array by key. I ended up with this (returns the array itself
if no further parameter than the array is given, false with no params - does
not change the source array)

usage: array_remove(array $input [, mixed key ...])

<?php

  function array_remove() {
    if ($stack = func_get_args()) {
      $input = array_shift($stack);
      foreach ($stack as $key) {
        unset($input[$key]);
      }
      return $input;
    }
    return false;
  }

?>

Test:

<?php
  $a = array('a'=>'fun', 'b'=>3.14, 'sub'=> array('1', '2', '3'), 'd'=>'what',
'e' => 'xample', 5 => 'x');
  print_r($a);
  print_r(array_remove($a, 'd', 'b', 5, 'sub'));
?>

Output:

Array
(
    [a] => fun
    [b] => 3.14
    [sub] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [d] => what
    [e] => xample
    [5] => x
)
Array
(
    [a] => fun
    [e] => xample
)

Hope this helps someone.
alex [@T] d-sn [D@T] com / Alex Galisteo 07-Aug-2005 02:46
My version of PHP does not support the strict parameter. Moreover, I need a
function that could make other comparsion different than equals and stricktly
equals.

The funcition array_keys_advanced can make the following comparsions: equal,
not equal, strictly greater than, equal or greater than, strictly less than,
equal or less than.

<?php
if (!function_exists('array_keys_advanced')) {
    //{{{ array_keys_advanced
    /**
     * Returns an array with the matching keys as values. A comparsion type can
     * be spcified, even if it should be a strict comparsion or not.
     * Note: It is not recursive.
     *
     * @param    array    $input
     * @param    string   $search_value
     * @param    bool     $strict
     * @param    string   $comparison: {EQ | NEQ | GT | EGT | LT | ELT}
     * @return   Returns an array with the matching keys as values.
     * @author   alex [@T] d-sn [D@T] com // Alex Galisteo
     */
    function array_keys_advanced() {
        $nargs = func_num_args();
        $arr = array();
        $input = null;
        $search_value = null;
        $strict = (bool) false;
        $comparison  = "EQ";
        $comparsion_types = array("EQ", "NEQ", "GT", "EGT", "LT", "ELT");
        switch ($nargs) {
        case 1:
            $input = func_get_arg(0);
            return array_keys($input);
            break;
        case 2:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            return array_keys($input, $search_value);
            break;
        case 3:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion  = "EQ";
            break;
        case 4:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion = strtoupper((string) func_get_arg(3));
            $comparsion = (in_array($comparsion, $comparsion_types))?
                            $comparsion : "EQ";
            break;
        default:
            return $arr;
            break;
        }
        foreach ($input as $key => $val) {
            if ($strict) {
                if ($comparsion == "EQ" && $search_value === $val) {
                    $arr[] = $key;
                }
                elseif ($comparsion == "NEQ" && $search_value !== $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            } else {
                if ($comparsion == "EQ" && $search_value == $val)
                    $arr[] = $key;
                elseif ($comparsion == "NEQ" && $search_value != $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            }
        }
        return $arr;
    }
    //}}}
} //endif function_exists
?>
webmaster [at] baz-x [dot] at 29-Jul-2005 03:43
I was looking for a function that deletes either integer keys or string keys
(needed for my caching).
As I didn't find a function I came up with my own solution.
I didn't find the propiest function to post to so I will post it here, hope you
find it useful.

<?php

function array_extract($array, $extract_type = 1)
{
    foreach ( $array as $key => $value )
    {
        if ( $extract_type == 1 && is_string($key) )
        {
            // delete string keys
            unset($array[$key]);
        }
        elseif ( $extract_type == 2 && is_int($key) )
        {
            // delete integer keys
            unset($array[$key]);
        }
    }

    return $array;
}

?>

You can of course define constants to have a nicer look, I have chosen these:
EXTR_INT = 1; EXTR_STRING = 2
EXTR_INT will return an array where keys are only integer while
EXTR_STRING will return an array where keys are only string

Have fun with it.
sip at email dot ee 22-Aug-2003 05:33
Note, that using array_key_exists() is rather inefficient. The overhead
associated with calling a function makes it slower, than using isset($array
[$key]), instead of array_key_exists($key, $array)
using isset() is usually about 1.3 times faster, according to my tests.
rodrigo at NOSPAM dot dhweb dot com dot br 04-Feb-2003 04:39
[Editor's note: For a complete solution to the printing of complex structures
or hashes, see the PEAR::Var_Dump package: http://pear.php.net/
package-info.php?pacid=103 , use "pear install Var_Dump" to get it]

This function will print all the keys of a multidimensional array in html
tables.
It will help to debug when you don t have control of depths.

<?php
function show_keys($ar){

   echo "<table width='100%' border='1' bordercolor='#6699CC' cellspacing='0'
cellpadding='5'><tr valign='top'>";

      foreach ($ar as $k => $v ) {

         echo "<td align='center' bgcolor='#EEEEEE'>
           <table border='2' cellpadding='3'><tr><td bgcolor='#FFFFFF'><font
face='verdana' size='1'>
              " . $k . "
           </font></td></tr></table>";

           if (is_array($ar[$k])) {
              show_keys ($ar[$k]);
         }

         echo "</td>";

      }

   echo "</tr></table>";

}

// Multidimensional array ->
$arvore = array();
$arvore['1'] = array();
$arvore['1']['1.1'] = array('1.1.1', '1.1.2', '1.1.3');
$arvore['1']['1.2'] = array('1.2.1', '1.2.2', '1.2.3');
$arvore['1']['1.3'] = array('1.3.1', '1.3.2', '1.3.3');
$arvore['2'] = array();
$arvore['2']['2.1'] = array('2.1.1', '2.1.2', '2.1.3');
$arvore['2']['2.2'] = array('2.2.1', '2.2.2', '2.2.3');
$arvore['2']['2.3'] = array('2.3.1', '2.3.2', '2.3.3');
$arvore['3'] = array();
$arvore['3']['3.1'] = array('3.1.1', '3.1.2', '3.1.3');
$arvore['3']['3.2'] = array('3.2.1', '3.2.2', '3.2.3');
$arvore['3']['3.3'] = array('3.3.1', '3.3.2'=>array('3.3.2.1', '3.3.2.2'),
'3.3.3');
// <-

show_keys($arvore);
?>
michielbakker at msn dot com 13-Nov-2002 09:45
If you receive a bunch of variables and like to change most of them (or all of
them for that matter), you can do something like this: (data has been sent to a
page with POST)

<?php
$allKeys = array_keys($HTTP_POST_VARS);

for ($i=0;$i<count($allKeys);$i++)
{
      $$allKeys[$i] = strtoupper($HTTP_POST_VARS[$allKeys[$i]]);
}
?>

This makes caracters (a-z) uppercase. This is just one way to use it, ofcourse.

Hope this helps someone understand the way to use array_keys() or give any
ideas. :)
glennh at webadept dot net 13-Nov-2002 04:03
All the cool notes are gone from the site.

Here's an example of how to get all the variables passed to your program using
the method on this page. This prints them out so you can see what you are
doing.

<?php
while (list($key, $value) = each
(${"HTTP_".$REQUEST_METHOD."_VARS"}))
{
        echo $key." = ".$value." ";
}
?>
jacob at keystreams dot com 20-Aug-2002 11:05
Here is a way to use array_intersect on array keys rather than values:

<?php
$a = array("apple" => "red", "banana" => "yellow");
$z = array("apple" => "green", "peach" => "orange", "banana" => "rotten");

$intersected_keys = array_intersect(array_keys($a), array_keys($z));

print_r($intersected_keys);
?>

This will print:

Array ( [0] => apple [1] => banana )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Mar 2 18:21:37 2012 UTC
Received cookie: COUNTRY=JPN%2C114.49.53.126
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • ファイルシステム
  • ファイルシステム
  • ファイルシステム関数
  • basename
  • chgrp
  • chmod
  • chown
  • clearstatcache
  • copy
  • delete
  • dirname
  • disk_ free_ space
  • disk_ total_ space
  • diskfreespace
  • fclose
  • feof
  • fflush
  • fgetc
  • fgetcsv
  • fgets
  • fgetss
  • file_ exists
  • file_ get_ contents
  • file_ put_ contents
  • file
  • fileatime
  • filectime
  • filegroup
  • fileinode
  • filemtime
  • fileowner
  • fileperms
  • filesize
  • filetype
  • flock
  • fnmatch
  • fopen
  • fpassthru
  • fputcsv
  • fputs
  • fread
  • fscanf
  • fseek
  • fstat
  • ftell
  • ftruncate
  • fwrite
  • glob
  • is_ dir
  • is_ executable
  • is_ file
  • is_ link
  • is_ readable
  • is_ uploaded_ file
  • is_ writable
  • is_ writeable
  • lchgrp
  • lchown
  • link
  • linkinfo
  • lstat
  • mkdir
  • move_ uploaded_ file
  • parse_ ini_ file
  • parse_ ini_ string
  • pathinfo
  • pclose
  • popen
  • readfile
  • readlink
  • realpath_ cache_ get
  • realpath_ cache_ size
  • realpath
  • rename
  • rewind
  • rmdir
  • set_ file_ buffer
  • stat
  • symlink
  • tempnam
  • tmpfile
  • touch
  • umask
  • unlink

chgrp> <ファイルシステム関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 24 Feb 2012

view this page in

[English             ] Change language
basename

(PHP 4, PHP 5)

basename — パスの最後にある名前の部分を返す

説明

string basename ( string $path [, string $suffix ] )

ファイルあるいはディレクトリへのパスを含む文字列を受け取って、最後にある名前の
部分を返します。

パラメータ

path

    パス。

    Windows では、スラッシュ(/) とバックスラッシュ (\) の両方がディレクトリ区切
    り文字として使われます。その他の環境ではスラッシュ(/)になります。

suffix

    名前の部分が suffix で終了する場合、この部分もカットされます。

返り値

指定した path のベース名を返します。

変更履歴

バージョン                 説明
4.1.0      パラメータ suffix が追加されました。

例

例1 basename() の例

<?php
echo "1) ".basename("/etc/sudoers.d", ".d").PHP_EOL;
echo "2) ".basename("/etc/passwd").PHP_EOL;
echo "3) ".basename("/etc/").PHP_EOL;
echo "4) ".basename(".").PHP_EOL;
echo "5) ".basename("/");
?>

上の例の出力は以下となります。

1) sudoers
2) passwd
3) etc
4) .
5)

注意

    注意:

    basename() は、入力文字列を単純にそのまま処理します。実際のファイルシステム
    を確認したり ".." のようなパスを気にしたりすることはありません。

    注意:

    basename() はロケールに依存します。マルチバイト文字を含むパスで正しい結果を
    得るには、それと一致するロケールを setlocale() で設定しておかなければなりま
    せん。

参考

  • dirname() - 親ディレクトリのパスを返す
  • pathinfo() - ファイルパスに関する情報を返す



chgrp> <ファイルシステム関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 24 Feb 2012
 
add a note add a note User Contributed Notes basename
tamar at atarplpl dot co dot il 08-Nov-2011 02:00
If you have problem with this function and UTF8 charset, you only have to
upgrade php version to 5.2 or higher
noemail at nosite dot com 26-Feb-2010 01:00
you could use this function when you need basename to work with cyrillic
filenames

<?php
    function pcgbasename($param, $suffix=null) {
        if ( $suffix ) {
            $tmpstr = ltrim(substr($param, strrpos($param, DIRECTORY_SEPARATOR)
), DIRECTORY_SEPARATOR);
            if ( (strpos($param, $suffix)+strlen($suffix) )  ==  strlen($param)
) {
                return str_ireplace( $suffix, '', $tmpstr);
            } else {
                return ltrim(substr($param, strrpos($param,
DIRECTORY_SEPARATOR) ), DIRECTORY_SEPARATOR);
            }
        } else {
            return ltrim(substr($param, strrpos($param, DIRECTORY_SEPARATOR) ),
DIRECTORY_SEPARATOR);
        }
    }
?>
swedish boy 12-Oct-2009 03:43
Here is a quick way of fetching only the filename (without extension)
regardless of what suffix the file has.

<?php

// your file
$file = 'image.jpg';

$info = pathinfo($file);
$file_name =  basename($file,'.'.$info['extension']);

echo $file_name; // outputs 'image'

?>
leelu123 at gmail dot com 13-Apr-2009 05:45
To get the inner most dir of a path

<?php

$DirPath = '/var/www/fruits/apple/';

//To get the innermost dir 'apple'

$InnermostDir = basename(rtrim($DirPath, '/'));

echo $InnermostDir; //will display 'apple'

?>
info at smaartweb dot com 23-Feb-2009 08:38
here are two good functions to extract the filename and extension part from any
given path or url.

<?php
    function ShowFileExtension($filepath)
    {
        preg_match('/[^?]*/', $filepath, $matches);
        $string = $matches[0];
     
        $pattern = preg_split('/\./', $string, -1, PREG_SPLIT_OFFSET_CAPTURE);

        # check if there is any extension
        if(count($pattern) == 1)
        {
            echo 'No File Extension Present';
            exit;
        }
       
        if(count($pattern) > 1)
        {
            $filenamepart = $pattern[count($pattern)-1][0];
            preg_match('/[^?]*/', $filenamepart, $matches);
            echo $matches[0];
        }
    }
   
    function ShowFileName($filepath)
    {
        preg_match('/[^?]*/', $filepath, $matches);
        $string = $matches[0];
        #split the string by the literal dot in the filename
        $pattern = preg_split('/\./', $string, -1, PREG_SPLIT_OFFSET_CAPTURE);
        #get the last dot position
        $lastdot = $pattern[count($pattern)-1][1];
        #now extract the filename using the basename function
        $filename = basename(substr($string, 0, $lastdot-1));
        #return the filename part
        return $filename;
    }
?>

usage

<?php
   //$string = 'C:\My Documents\My Name\filename.ext';
    //$string = 'http://php.net/manual/add-note.php?
&redirect=http://php.net/function.basename.php';
   
    echo ShowFileName($string);
    echo ShowFileExtension($string);
?>
Joel Franusic 12-Nov-2008 03:30
The results of the basename() function are dependent on your locale setting.

If basename() is returning blank results for strings with multibyte characters,
you can try including the following in your script:

<?php

setlocale(LC_ALL, 'en_US.UTF8'); # or any other locale that can handle
multibyte characters.

?>

However, the best solution to do this would be to change the locale setting on
your system or webserver. For example, on Debian systems, this is done in /etc/
init.d/apache
hello at haroonahmad dot co dot uk 18-Sep-2008 08:13
I got a blank output from this code

$cur_dir = basename(dirname($_SERVER[PHP_SELF]))

suggested earlier by a friend here.

So anybody who wants to get the current directory path can use another
technique that I use as

//suppose you're using this in pageitself.php page

$current_dir=dirname(realpath("pageitself.php"));

I hope it helps.
zandor_zz at yahoo dot it 08-Sep-2008 01:34
It might be useful to have a version of the function basename working with
arrays too.

<?php
function a_basename( $file, $exts )
{
    $onlyfilename = end( explode( "/", $file ) );

    if( is_string( $exts ) )
    {
        if ( strpos( $onlyfilename, $exts, 0 ) !== false )
        $onlyfilename = str_replace( $exts, "", $onlyfilename );
    }
    else if ( is_array( $exts ) )
    {
        // works with PHP version <= 5.x.x
        foreach( $exts as $KEY => $ext )
        {
            $onlyfilename = str_replace( $ext, "", $onlyfilename );
        }
    }

    return $onlyfilename ;
}
?>
(remove) dot nasretdinov at (remove) dot gmail dot com 27-Aug-2008 08:20
There is only one variant that works in my case for my Russian UTF-8 letters:

function mb_basename($file)
{
return end(explode('/',$file));
}

It is intented for UNIX servers
pai dot ravi at yahoo dot com 15-Aug-2008 08:44
once you have extracted the basename from the full path and want to separate
the extension from the file name, the following function will do it
efficiently:

<?php
function splitFilename($filename)
{
    $pos = strrpos($filename, '.');
    if ($pos === false)
    { // dot is not found in the filename
        return array($filename, ''); // no extension
    }
    else
    {
        $basename = substr($filename, 0, $pos);
        $extension = substr($filename, $pos+1);
        return array($basename, $extension);
    }
}
?>
clothohk at gmail dot com 14-Apr-2008 08:15
Adding a space is not a solution to my Chinese UTF-8 characters. I guess it
will not work for Japanese and Korean too.

I use this instead:
$filename = mb_substr($path, mb_strrpos($path, '/')+1);
adrian at foeder dot de 20-Dec-2007 12:33
On windows systems, filenames are case-insensitive. If you have to make sure
the right case is used when you port your application to an unix system, you
may use a combination of the following:

<?php
//assume the real filename is mytest.JPG:

$name_i_have = "mytest.jpg";
$realfilename = basename(realpath($name_i_have));
?>

basename itself does not check the filesystem for the given file, it does, so
it seems, only string-manipulation.
With realpath() you can "extend" this functionality.
mike at mike-griffiths dot co dot uk 10-Sep-2007 03:20
If you are trying to get the file extension of a given file then you should see
the function pathinfo(), exploding by '.' on basename() is also possible (as
long as you use the last array entry).

<?PHP
// Make an array of the various attributes
$path_parts = pathinfo('/www/htdocs/index.html');

$extension = $path_parts['extension'];

echo $extension; // 'html'

?>

Hope this helps someone.
stephane dot fidanza at gmail dot com 11-Apr-2007 04:33
Support of the $suffix parameter has changed between PHP4 and PHP5:
in PHP4, $suffix is removed first, and then the core basename is applied.
conversely, in PHP5, $suffix is removed AFTER applying core basename.

Example:
<?php
  $file = "path/to/file.xml#xpointer(/Texture)";
  echo basename($file, ".xml#xpointer(/Texture)");
?>

Result in PHP4: file
Result in PHP5: Texture)
phdwight at yahoo dot com 21-Mar-2007 06:41
Pulled my hair out for this.

Just like most functions, this does not play well with Japanese characters.

When you call basename with some Japanese characters, it will return nothing
(truncates it) .
thoughts at highermind dot org 30-Jan-2007 05:45
Basename without query string:

<?php
$filename    = array_shift(explode('?', basename($url_path)));
?>
jonmsawyer at gmail dot com 09-Jan-2007 12:23
@antrik at users dot sf dot net
> 15-Nov-2004 10:40
> When using basename() on a path to a directory
> ('/bar/foo/'), the last path component ('foo') is returned,
> instead of the empty string one would expect. (Both PHP
> 4.1.2 and 4.3.8 on GNU/Linux.) No idea whether this is
> considered a bug or a feature -- I found it extremely
> annoying. Had to work around using: <?php
> $file=substr($path, -1)=='/'?'':basename($path)
> ?> Watch out!

There is a reason behind this -- and it has nothing to do with being a feature.
PHP was heavily modeled off of the POSIX model. Many of the same functions you
see in PHP are also in C, C++, and Java. These languages are modeled on POSIX
as well.

The directory '/bar/foo/', when passed into the function basename(), will
output 'foo' because *everything*, including directories, in the POSIX model,
is a _file_. Most unix platforms, and all Windows platforms are (some Linux
distributions are not) fully compliant to the POSIX model.

For example, the device file that contains information about your harddisk, in
Linux, is probably stored in the _file_ /dev/hda.

Another example is that when you want to list information about your CPU or
Memory using the Linux kernel, you might read the _file_ /proc/cpu/info.

Directories are no exception. Directories are no more different than your
regular text file -- other than the fact that they describe a _file_-list of
all files under it, and where the OS can access them. This means that even
directories treat other directories as files.

The reason why we are made to think that directories are not files is because
the kernel (the OS) simply treats these culprits differently. Your OS is lying
to you! When you try to open up c:\windows in Notepad, you simply get a
runaround because the Windows operating system knows it is a directory and
knows how to treat it -- and knowing this it will not let you open it up for
editing. For if you did that, you would probably lose the data in that
directory. If you are familiar with C programming, you will know that if you
lose information about a pointer to an object, the object gets lost in memory.
The same would happen if you modified a directory in the wrong way. This is why
the operating system protects its directories with the upmost care. (Some do
anyway, hehe)

So when doing any kind of programming in PHP, C/++, Java, Ada, Perl, Python,
Ruby, FORTRAN, and yes, even RPG IV (for all of you AS/400 folks out there
working on the IFS), you must treat directories as files well.

This is why 'foo' is returned. For more information on POSIX, see http://
en.wikipedia.org/wiki/POSIX

I hope this helps. Cheers.
thovan at gmx dot net 02-Jan-2007 07:24
After reading all of the earlier comments, I made my own function file_basename
():

<?php
function file_basename($file= null) {
    if($file=== null || strlen($file)<= 0) {
        return null;
    }
   
    $file= explode('?', $file);
    $file= explode('/', $file[0]);
    $basename= $file[count($file)-1];

    return $basename;   
}

?>
18-Sep-2006 11:28
lazy lester is just confirming what icewind said.
And yes it is correct! unlike what the following comment after icewind says, as
that example is the same with the line order reversed! as poniestail at gmail
dot com says.

But poniestail at gmail dot com missed the point that if the url is coming from
a log file it will not have its value in $_SERVER["QUERY_STRING"] or $_SERVER
["SCRIPT_NAME"] but in a LOG FILE or a DATABASE
lazy lester 17-Feb-2006 04:19
If your path has a query string appended, and if the query string contains a "/
" character, then the suggestions for extracting the filename offered below
don't work.

For instance if the path is like this:
http://www.ex.com/getdat.php?dep=n/a&title=boss

Then both the php basename() function, and also
the $_SERVER[QUERY_STRING] variables get confused.

In such a case, use:

<php
$path_with_query="http://www.ex.com/getdat.php?dep=n/a&title=boss";
$path=explode("?",$path_with_query);
$filename=basename($path[0]);
$query=$path[1];
?>
support at rebootconcepts dot com 17-Feb-2006 11:55
works on windows and linux, faster/easier than amitabh's...

<?php
$basename = preg_replace( '/^.+[\\\\\\/]/', '', $filename );

// Optional; change any non letter, hyphen, or period to an underscore.
$sterile_filename = preg_replace( "/[^\w\.-]+/", "_", $basename );
?>
poniestail at gmail dot com 04-Jan-2006 04:18
examples from "icewind" and "basname" seem highly overdone... not to mention
example from "basename" is exactly the same as one from "icewind"...

possibly a more logical approach?
<?
   //possible URL = http://domain.com/path/to/file.php?var=foo
   $filename = substr( $_SERVER["SCRIPT_NAME"], 1 ); //substr( ) used for
optional removal of initial "/"
   $query = $_SERVER["QUERY_STRING"];
?>

to see the entire $_SERVER variable try this:
<?
   echo "<pre>
      ".print_r( $_SERVER, true )."
      </pre>
   ";
?>
15-Nov-2005 04:57
icewinds exmaple wouldn't work, the query part would contain the second char of
the filename, not the query part of the url.
<?
$file = "path/file.php?var=foo";
$file = explode("?", basename($file));
$query = $file[1];
$file = $file[0];
?>

That works better.
icewind 02-Nov-2005 12:44
Because of filename() gets "file.php?var=foo", i use explode in addition to
basename like here:

$file = "path/file.php?var=foo";
$file = explode("?", basename($file));
$file = $file[0];
$query = $file[1];

Now $file only contains "file.php" and $query contains the query-string (in
this case "var=foo").
www.turigeza.com 24-Oct-2005 12:47
simple but not said in the above examples

echo basename('somewhere.com/filename.php?id=2', '.php');
will output
filename.php?id=2

which is not the filename in case you expect!
crash at subsection dot org dot uk 22-Sep-2005 12:38
A simple way to return the current directory:
$cur_dir = basename(dirname($_SERVER[PHP_SELF]))

since basename always treats a path as a path to a file, e.g.

/var/www/site/foo/ indicates /var/www/site as the path to file
foo
b_r_i_a__n at locallinux dot com 22-Aug-2005 05:47
I was looking for a way to get only the filename whether or not I had received
the full path to it from the user.  I came up with a much simpler (and probably
more robust) method by using the power of basename in reverse:

$infile = "/usr/bin/php";
$filename = stristr ($infile,basename ($infile));

This even works on those _wacky_ filenames like "/usr/lib/libnetsnmp.so.5.0.9"
which are not factored when exploding the full path and taking out only the
last segment after "."
pvollma at pcvsoftware dot net 14-Jul-2005 09:28
Note that in my example below, I used the stripslashes function on the target
string first because I was dealing with the POST array $_FILES. When creating
this array, PHP will add slashes to any slashes it finds in the string, so
these must be stripped out first before processing the file path. Then again,
the only reason I can think of that basename() would fail is when dealing with
Windows paths on a *nix server -- and the file upload via POST is the only
situation I can think of that would require this. Obviously, if you are not
dealing with these additional slashes, invoking stripslashes() first would
remove the very separators you need extract the file name from the full path.
amitabh at NOSPAM dot saysnetsoft dot com 14-Jul-2005 01:55
The previous example posted by "pvollma" didn't work out for me, so I modified
it slightly:
<?php
function GetFileName($file_name)
{
        $newfile = basename($file_name);
        if (strpos($newfile,'\\') !== false)
        {
                $tmp = preg_split("[\\\]",$newfile);
                $newfile = $tmp[count($tmp) - 1];
                return($newfile);
        }
        else
        {
                return($file_name);
        }
}
?>
pvollma at pcvsoftware dot net 13-Jul-2005 11:43
There is a real problem when using this function on *nix servers, since it does
not handle Windows paths (using the \ as a separator). Why would this be an
issue on *nix servers? What if you need to handle file uploads from MS IE? In
fact, the manual section "Handling file uploads" uses basename() in an example,
but this will NOT extract the file name from a Windows path such as C:\My
Documents\My Name\filename.ext. After much frustrated coding, here is how I
handled it (might not be the best, but it works):

<?php
$filen = stripslashes($_FILES['userfile']['name']);
$newfile = basename($filen);
if (strpos($newfile,'\\') !== false) {
  $tmp = preg_split("[\\\]",$newfile);
  $newfile = $tmp[count($tmp) - 1];
}
?>

$newfile will now contain only the file name and extension, even if the POSTed
file name included a full Windows path.
KOmaSHOOTER at gmx dot de 30-Jan-2005 06:18
if you want the name of the parent directory
<?php
$_parenDir_path = join(array_slice(split( "/" ,dirname($_SERVER
['PHP_SELF'])),0,-1),"/").'/'; // returns the full path to the parent dir
$_parenDir =  basename ($_parenDir_path,"/"); // returns only the name of the
parent dir
// or
$_parenDir2 = array_pop(array_slice(split( "/" ,dirname($_SERVER
['PHP_SELF'])),0,-1)); // returns also only the name of the parent dir
echo('$_parenDir_path  = '.$_parenDir_path.'<br>');
echo('$_parenDir  = '.$_parenDir.'<br>');
echo('$_parenDir2  = '.$_parenDir2.'<br>');
?>
KOmaSHOOTER at gmx dot de 29-Jan-2005 04:24
If you want the current path where youre file is and not the full path then use
this :)

<?php
echo('dir = '.basename (dirname($_SERVER['PHP_SELF']),"/"));   
// retuns the name of current used directory
?>

Example:

www dir: domain.com/temp/2005/january/t1.php

<?php
echo('dirname <br>'.dirname($_SERVER['PHP_SELF']).'<br><br>');   
// returns: /temp/2005/january
?>

<?php
echo('file = '.basename ($PHP_SELF,".php"));   
// returns: t1
?>

if you combine these two you get this
<?php
echo('dir = '.basename (dirname($_SERVER['PHP_SELF']),"/"));   
// returns: january
?>

And for the full path use this
<?php
echo(' PHP_SELF <br>'.$_SERVER['PHP_SELF'].'<br><br>');
// returns: /temp/2005/january/t1.php   
?>
antrik at users dot sf dot net 15-Nov-2004 10:40
When using basename() on a path to a directory ('/bar/foo/'), the last path
component ('foo') is returned, instead of the empty string one would expect.
(Both PHP 4.1.2 and 4.3.8 on GNU/Linux.) No idea whether this is considered a
bug or a feature -- I found it extremely annoying. Had to work around using: <?
php $file=substr($path, -1)=='/'?'':basename($path) ?> Watch out!
osanim at cidlisuis dot org 17-Apr-2004 11:12
If you want know the real directory of the include file, you have to writte:

<?php
dirname(__FILE__)
?>
KOmaSHOOTER at gmx dot de 28-Nov-2003 02:33
Exmaple for exploding ;) the filename to an array

<?php
echo(basename ($PHP_SELF)."<br>");  // returnes filename.php
$file = basename ($PHP_SELF);
$file = explode(".",$file);
print_r($file);    // returnes Array ( [0] => filename [1] => php )
echo("<br>");
$filename = basename(strval($file[0]),$file[1]);
echo($filename."<br>");  // returnes  filename
echo(basename ($PHP_SELF,".php")."<br>");  // returnes  filename
echo("<br>");
echo("<br>");
//show_source(basename ($PHP_SELF,".php").".php")
show_source($file[0].".".$file[1])
?>
giovanni at giacobbi dot net 08-Nov-2003 07:52
No comments here seems to take care about UNIX system files, which typically
start with a dot, but they are not "extensions-only".
The following function should work with every file path. If not, please let me
know at my email address.

<?php

function remove_ext($str) {
  $noext = preg_replace('/(.+)\..*$/', '$1', $str);
  print "input: $str\n";
  print "output: $noext\n\n";
}

remove_ext("/home/joh.nny/test.php");
remove_ext("home/johnny/test.php");
remove_ext("weirdfile.");
remove_ext(".hiddenfile");
remove_ext("../johnny.conf");
daijoubu_NOSP at M_videotron dot ca 15-Oct-2003 10:22
An faster alternative to:

<?php
array_pop(explode('.', $fpath));
?>

would be:

<?php
substr($fpath, strrpos($fpath, '.')); // returns the dot
?>

If you don't want the dot, simply adds 1 to the position

<?php
substr($fpath, strrpos($fpath, '.') + 1); // returns the ext only
?>
Richard at Lyders dot Net 01-Apr-2003 01:53
you can also make use of the basename() function's second parameter:

<?PHP
$fpath = "/blah/file.name.has.lots.of.dots.ext";
$fext  = array_pop(explode('.', $fpath));
$fname = basename($fpath, '.'.$fext);

print "fpath: $fpath\n<br>";
print "fext: $fext\n<br>";
print "fname: $fname\n<br>";
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue Feb 28 20:21:10 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.171.48
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Jan 2012

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列内の部分文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れる位置を探します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    指定すると、文字列内での検索開始位置がその位置になります。 strrpos() や
    strripos() と異なり、負の数は指定できません。

返り値

needle が見つかった位置を、 haystack 文字列の先頭 (offset の値とは無関係) から
の相対位置で返します。文字列の開始位置は 0 であり、1 ではないことに注意しましょ
う。

needle が見つからない場合は FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される値を返す
可能性もあります。詳細については論理値のセクションを参照してください。この関数
の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strstr() - 文字列が最初に現れる位置を見つける
  • strpbrk() - 文字列の中から任意の文字を探す
  • substr() - 文字列の一部分を返す
  • preg_match() - 正規表現によるマッチングを行う



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 27 Jan 2012
 
add a note add a note User Contributed Notes strpos
rjeggens at ijskoud dot org 24-Jan-2012 07:38
I lost an hour before I noticed that strpos only returns FALSE as a boolean,
never TRUE.. This means that

strpos() !== false

is a different beast then:

strpos() === true

since the latter will never be true. After I found out, The warning in the
documentation made a lot more sense.
gjh42 - simonokewode at hotmail dot com 07-Nov-2011 07:59
A pair of functions to replace every nth occurrence of a string with another
string, starting at any position in the haystack. The first works on a string
and the second works on a single-level array of strings, treating it as a
single string for replacement purposes (any needles split over two array
elements are ignored).

Can be used for formatting dynamically-generated HTML output without touching
the original generator: e.g. add a newLine class tag to every third item in a
floated list, starting with the fourth item.
 
<?php
/* String Replace at Intervals   by Glenn Herbert (gjh42)    2010-12-17
 */
 
//(basic locator by someone else - name unknown)
//strnposr() - Find the position of nth needle in haystack.
function strnposr($haystack, $needle, $occurrence, $pos = 0) {
    return ($occurrence<2)?strpos($haystack, $needle, $pos):strnposr
($haystack,$needle,$occurrence-1,strpos($haystack, $needle, $pos) + 1);
}

//gjh42
//replace every nth occurrence of $needle with $repl, starting from any
position
function str_replace_int($needle, $repl, $haystack, $interval, $first=1, $pos=
0) {
  if ($pos >= strlen($haystack) or substr_count($haystack, $needle, $pos) <
$first) return $haystack;
  $firstpos = strnposr($haystack, $needle, $first, $pos);
  $nl = strlen($needle);
  $qty = floor(substr_count($haystack, $needle, $firstpos + 1)/$interval);
  do { //in reverse order
    $nextpos = strnposr($haystack, $needle, ($qty * $interval) + 1, $firstpos);
    $qty--;
    $haystack = substr_replace($haystack, $repl, $nextpos, $nl);
  } while ($nextpos > $firstpos);
  return $haystack;
}
  //$needle = string to find
  //$repl = string to replace needle
  //$haystack = string to do replacing in
  //$interval = number of needles in loop
  //$first=1 = first occurrence of needle to replace (defaults to first)
  //$pos=0 = position in haystack string to start from (defaults to first)
 
//replace every nth occurrence of $needle with $repl, starting from any
position, in a single-level array
function arr_replace_int($needle, $repl, $arr, $interval, $first=1, $pos=0,
$glue='|+|') {
  if (!is_array($arr))  return $arr;
  foreach($arr as $key=>$value){
    if (is_array($arr[$key])) return $arr;
  }
  $haystack = implode($glue, $arr);
  $haystack = str_replace_int($needle, $repl, $haystack, $interval, $first,
$pos);
  $tarr = explode($glue, $haystack);
  $i = 0;
  foreach($arr as $key=>$value){
    $arr[$key] = $tarr[$i];
    $i++;
  }
  return $arr;
}
?>
If $arr is not an array, or a multilevel array, it is returned unchanged.
Mark Oates 25-Oct-2011 08:36
When using GLOB_BRACE to find files on a local computer, note that including
the drive lettername within the braces may cause the behavior to not work as
expected:

<?php

$location = "{c:/foo/*.txt,c:/foo/bar/*.txt}"; // < will NOT work

$location = "c:{/foo/*.txt,/foo/bar/*.txt}"; // < works

$location = "c:/{foo/*.txt,foo/bar/*.txt}"; // < works

$location = "{/foo/*.txt,/foo/bar/*.txt}"; // < works

print_r(glob($location, GLOB_BRACE));

?>
jim at terrys dot net 29-Sep-2011 11:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 08:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 04:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 02:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 02:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 03:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 05:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 04:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 07:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 02:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 02:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 09:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 30-Sep-2009 08:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 01:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 09:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 01:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 11:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 06:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 12:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 09:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 11:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 27-Dec-2008 04:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 17-Nov-2008 05:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 22-Oct-2008 06:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 27-Sep-2008 11:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 11:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 12:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 03:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 06:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 01-Apr-2008 04:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 03:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 04:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 01:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 02:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 08:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 05:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 09:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 12:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 02:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 10:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 26-Sep-2006 07:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 07:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 06:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 02:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 05:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 06:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 20-Jan-2005 06:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 09:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 03:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 10:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 03:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 09:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 09-Mar-2004 05:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 10:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 09:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2012 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jan 29 13:21:05 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_rand> <array_product
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012

view this page in

[English             ] Change language
array_push

(PHP 4, PHP 5)

array_push — 一つ以上の要素を配列の最後に追加する

説明

int array_push ( array &$array , mixed $var [, mixed $... ] )

array_push()は、array をスタックとして処理し、渡された変数を array の最後に加え
ます。配列 array の長さは渡された変数の数だけ増加します。各 var 毎に以下を繰り
返すことと同じ効果があります。
<?php
$array[] = $var;
?>
各 var で繰り返されます。

    注意: もし配列にひとつの要素を加えるために array_push() を使用するなら、関
    数を呼ぶオーバーヘッドがないので、$array[] = を使用するほうがいいです。

    注意: 最初の引数が配列でない場合、array_push() は警告を発生させます。これは
    新規配列を生成する場合における $var[] の動作と異なります。

パラメータ

array

    入力の配列。

var

    追加する値。

返り値

処理後の配列の中の要素の数を返します。

例

例1 array_push() の例

<?php
$stack = array("orange", "banana");
array_push($stack, "apple", "raspberry");
print_r($stack);
?>

上の例の出力は以下となります。

Array
(
    [0] => orange
    [1] => banana
    [2] => apple
    [3] => raspberry
)

参考

  • array_pop() - 配列の末尾から要素を取り除く
  • array_shift() - 配列の先頭から要素を一つ取り出す
  • array_unshift() - 一つ以上の要素を配列の最初に加える



array_rand> <array_product
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012
 
add a note add a note User Contributed Notes array_push
Szorstki 27-Dec-2011 10:35
With multidimensional arrays it's easy too (somebody posted a sample, but it
isn't useful for beginners). Here is a piece of code that should explain
everything and much more:

<?php
//two classes of objects which will be in multidimensional array
class Org {
    public $name;
    public function __construct($name) {
        $this->name = $name;
    }
}
class Org2 {
    public $name;
    public function __construct($name) {
        $this->name = $name;
    }
}

//main array
$arr = array();

//creating first subarray manually
//the subarray name must be like first class above
$arr['Org'] = array();

//creating second subarray for objects of selected class
//in another way
$x=2222;        //only for creating the sample object
$arr[get_class(new Org2("wtf".$x))] = array();

//pushing some new objects to (sub)arrays in (main)array
for ($i=0; $i<3; $i++) {
    $org1 = new Org("tst".$i);
    $org2 = new Org2("wtf".$i);
    array_push($arr[get_class($org1)], $org1);
    array_push($arr[get_class($org2)], $org2);
}

//printing everything
foreach ($arr as $key=>$value) {
    $counter = 0;
    echo "=====".$key." (key) | value: ".$value."<br/>";
    foreach ($value as $key2=>$value2) {
        if($value2 == null) {
            //echo "counter: ".$counter." | key: ".$key2;
            unset($arr[$key][$key2]);
        } else {
            print_r($value2);
            echo " [".$counter."]  [".$key2."]<br/>";
        }
        $counter++;
    }
}

//the additional, second part
echo "<br/>--------<br/><br/>";
//deleting one of the objects from selected (sub)array
unset($arr['Org'][1]);

//printing everything again (look at the counter values)
foreach ($arr as $key=>$value) {
    $counter = 0;
    echo "=====".$key." (key) | value: ".$value."<br/>";
    foreach ($value as $key2=>$value2) {
        if($value2 == null) {
            //echo "counter: ".$counter." | key: ".$key2;
            unset($arr[$key][$key2]);
        } else {
            print_r($value2);
            echo " [".$counter."]  [".$key2."]<br/>";
        }
        $counter++;
    }
}
?>

What we get in browser/console:
=====Org (key) | value: Array
Org Object ( [name] => tst0 ) [0] [0]
Org Object ( [name] => tst1 ) [1] [1]
Org Object ( [name] => tst2 ) [2] [2]
=====Org2 (key) | value: Array
Org2 Object ( [name] => wtf0 ) [0] [0]
Org2 Object ( [name] => wtf1 ) [1] [1]
Org2 Object ( [name] => wtf2 ) [2] [2]

--------

=====Org (key) | value: Array
Org Object ( [name] => tst0 ) [0] [0]
Org Object ( [name] => tst2 ) [1] [2]
=====Org2 (key) | value: Array
Org2 Object ( [name] => wtf0 ) [0] [0]
Org2 Object ( [name] => wtf1 ) [1] [1]
Org2 Object ( [name] => wtf2 ) [2] [2]
yuri 30-Nov-2011 06:00
If you want to put an element to a specific position in an array, try this
function.

<?php

function array_put_to_position(&$array, $object, $position, $name = null)
{
        $count = 0;
        $return = array();
        foreach ($array as $k => $v)
        {  
                // insert new object
                if ($count == $position)
                {  
                        if (!$name) $name = $count;
                        $return[$name] = $object;
                        $inserted = true;
                }  
                // insert old object
                $return[$k] = $v;
                $count++;
        }  
        if (!$name) $name = $count;
        if (!$inserted) $return[$name];
        $array = $return;
        return $array;
}
?>

Example :

<?php
$a = array(
 'a' => 'A',
 'b' => 'B',
 'c' => 'C',
);
           
print_r($a);
array_put_to_position($a, 'G', 2, 'g');
print_r($a);

/*
Array
(
    [a] => A
    [b] => B
    [c] => C
)
Array
(
    [a] => A
    [b] => B
    [g] => G
    [c] => C
)
*/
?>
aosojnik at gmail dot com 23-Nov-2009 10:56
If you want to preserve the keys in the array, use the following:

<?php
function array_pshift(&$array) {
    $keys = array_keys($array);
    $key = array_shift($keys);
    $element = $array[$key];
    unset($array[$key]);
    return $element;
}
?>
rarioj at gmail dot com 05-Oct-2009 01:44
This function "Returns the new number of elements in the array."

To find out the last index, use:

<?php
$count = array_push($array, $value);
$last_index = array_pop(array_keys($array));
?>
Anonymous 20-Sep-2009 09:00
If you need to push the elements of an array onto the end of another, simply
use array_splice():

array_splice($array, count($array), 0, $otherArray);
helpmepro1 at gmail dot com 13-Jan-2009 09:43
elegant php array combinations algorithm

<?

//by Shimon Dookin

function get_combinations(&$lists,&$result,$stack=array(),$pos=0)
{
 $list=$lists[$pos];
 if(is_array($list))
  foreach($list as $word)
  {
   array_push($stack,$word);
   if(count($lists)==count($stack))
    $result[]=$stack;
   else
    get_combinations($lists,$result,$stack,$pos+1);
   array_pop($stack);
  }
}

$wordlists= array( array("shimon","doodkin") , array("php programmer","sql
programmer","mql metatrader programmer") );

get_combinations($wordlists,$combinations);

echo '<xmp>';
print_r($combinations);

?>
wesleys at opperschaap dot net 10-Oct-2008 07:58
A function which mimics push() from perl, perl lets you push an array to an
array: push(@array, @array2, @array3). This function mimics that behaviour.

<?php

function array_push_array(&$arr) {
    $args = func_get_args();
    array_shift($args);

    if (!is_array($arr)) {
        trigger_error(sprintf("%s: Cannot perform push on something that isn't
an array!", __FUNCTION__), E_USER_WARNING);
        return false;
    }

    foreach($args as $v) {
        if (is_array($v)) {
            if (count($v) > 0) {
                array_unshift($v, &$arr);
                call_user_func_array('array_push',  $v);
            }
        } else {
            $arr[] = $v;
        }
    }
    return count($arr);
}

$arr = array(0);
$arr2  = array(6,7,8);
printf("%s\n", array_push_array($arr, array(),array(1,2,3,4,5), $arr2));
print_r($arr);

# error..
$arr = "test";
printf("%s\n", array_push_array($arr, array(),array(1,2,3,4,5), $arr2));

?>
willdemaine at gmail dot com 07-Aug-2008 02:00
If you're adding multiple values to an array in a loop, it's faster to use
array_push than repeated [] = statements that I see all the time:

<?php
class timer
{
        private $start;
        private $end;

        public function timer()
        {
                $this->start = microtime(true);
        }

        public function Finish()
        {
                $this->end = microtime(true);
        }

        private function GetStart()
        {
                if (isset($this->start))
                        return $this->start;
                else
                        return false;
        }

        private function GetEnd()
        {
                if (isset($this->end))
                        return $this->end;
                else
                        return false;
        }

        public function GetDiff()
        {
                return $this->GetEnd() - $this->GetStart();
        }

        public function Reset()
        {
                $this->start = microtime(true);
        }

}

echo "Adding 100k elements to array with []\n\n";
$ta = array();
$test = new Timer();
for ($i = 0; $i < 100000; $i++)
{
        $ta[] = $i;
}
$test->Finish();
echo $test->GetDiff();

echo "\n\nAdding 100k elements to array with array_push\n\n";
$test->Reset();
for ($i = 0; $i < 100000; $i++)
{
        array_push($ta,$i);
}
$test->Finish();
echo $test->GetDiff();

echo "\n\nAdding 100k elements to array with [] 10 per iteration\n\n";
$test->Reset();
for ($i = 0; $i < 10000; $i++)
{
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
        $ta[] = $i;
}
$test->Finish();
echo $test->GetDiff();

echo "\n\nAdding 100k elements to array with array_push 10 per iteration\n\n";
$test->Reset();
for ($i = 0; $i < 10000; $i++)
{
        array_push($ta,$i,$i,$i,$i,$i,$i,$i,$i,$i,$i);
}
$test->Finish();
echo $test->GetDiff();
?>

Output

$ php5 arraypush.php
X-Powered-By: PHP/5.2.5
Content-type: text/html

Adding 100k elements to array with []

0.044686794281006

Adding 100k elements to array with array_push

0.072616100311279

Adding 100k elements to array with [] 10 per iteration

0.034690141677856

Adding 100k elements to array with array_push 10 per iteration

0.023932933807373
Ariz Jacinto 27-Jun-2008 11:41
if you're going to use array_push() to insert a "$key" => "$value" pair into an
array, it can be done using the following example:

    array_push($data[$key], $value);
    ...
    array_push($data[$key], $value);
bxi at apparoat dot nl 23-May-2008 11:29
I've done a small comparison between array_push() and the $array[] method and
the $array[] seems to be a lot faster.

<?php
$array = array();
for ($x = 1; $x <= 100000; $x++)
{
    $array[] = $x;
}
?>
takes 0.0622200965881 seconds

and

<?php
$array = array();
for ($x = 1; $x <= 100000; $x++)
{
    array_push($array, $x);
}
?>
takes 1.63195490837 seconds

so if your not making use of the return value of array_push() its better to use
the $array[] way.

Hope this helps someone.
alexander dot williamson at gmail dot com 27-Mar-2008 12:06
This will work to solve the associative array issues:

$aValues[$key] = $value;

Where $key is a unique identifier and $value is the value to be stored. Since
the $key works off a string or number, if you already have a $key with the same
value as an existing $key, the element will be overwritten.

e.g.

$aValues["one"] = "value of one";
$aValues["two"] = "different value of two!";

gives:
array([one] => "value of one", [two] => "value of two");

but will be overwritten when using the same key (one):

$aValues["one"] = "value of one";
$aValues["one"] = "different value of two!";

will give:

array([one] => "different value of two!");

3686
darkimmortal at dkimmortal dot com 18-Feb-2008 07:31
I wrote this function for use with 'latest scores' on a quiz site, but it has
many potential uses.

<?php
/**
* @desc array_push and removes elements from the beginning of the array until
it is within limit
* @param    array   Array to push on to
* @param    mixed   Passed to array push as 2nd parameter
* @param    int     Limit (default = 10)
*
* @return   array   New array
*/
function array_push_limit($array,$add,$limit=10){
    array_push($array, $add);   
    do {       
        array_shift($array);
        $size=count($array);       
    } while($size > $limit);
       
    return $array;
}
?>
----------
EXAMPLE:
----------
<?php
    $array=array(1, -5, 23, -66, 33, 54, 3);   
    print_r(array_push_limit($array, "HELLO", 4));
?>
----------
OUTPUT:
----------
Array
(
    [0] => 33
    [1] => 54
    [2] => 3
    [3] => HELLO
)
rob AT rate for the cure dot com 15-Aug-2007 04:09
I had a problem with .htaccess and some tricky encrypted paths (for protecting
true dir names of images and files) and created this quick function to auto
correct paths for the document root using regex and array_diff
<?
function fixPath($path){
        $temp = trim($path);
        $temp = eregi_replace("(\./|\.\./)","/",$temp);
        $temp = eregi_replace("([^/]+(\.htm|\.php))","",$temp);
        if(!eregi($_SERVER['DOCUMENT_ROOT'],$temp,$regs)){
            $partsA = explode("/",substr($temp,0,-1));
            $partsB = explode("/",$_SERVER['DOCUMENT_ROOT']);
            //if the path does not match the dir structure diff the array and
reconstruct on the TRUE doc root
            $tHolder = array_diff($partsA,$partsB);
                foreach($tHolder as $k=>$v){
                    array_push($partsB,$v);
                }
                       
            $temp =  implode("/",$partsB)."/";
        }
        return $temp;
    }
$correctPath = fixPath('.som/phpEncrypted/Path/class/class.QMI.php');
?>

The function strips out filename, checks to see if the path resolves to the doc
root, and if it does not it takes the difference in the paths and returns a
path that translates to the true path. This is useful for encoding paths where
you want to obfuscate the true server path (such as creating external api
functions)
zbde00 at hotmail dot com 20-Jul-2007 12:59
A very good function to remove a element from array
function array_del($str,&$array)
{
    if (in_array($str,$array)==true)
    {
   
        foreach ($array as $key=>$value)
        {
            if ($value==$str) unset($array[$key]);
        }
    }
}
antido at gmail dot com 03-Aug-2006 08:04
Simple data object implementation:

<?php

/**
 * Data object
 *
 * @version 0.6
 * @author Tom Reitsma <antido@gmail.com>
 */
Class DataObject
{
    /**
     * @var int $ptr
     */
    private $ptr = 0;
   
    /**
     * @var array $data
     */
    private $data = array();
   
    /**
     * Class constructor
     */
    public function __construct($anArray=false)
    {
        if($anArray != false)
        {
            if(is_array($anArray))
            {
                $this->data[] = $anArray;
            }
        }
    }
   
    /**
     * Fetches the data under the pointer
     *
     * @return String if there is still data left under the pointer, false if
the end has been reached
     */
    public function fetch()
    {
        if(isset($this->data[$this->ptr]))
        {
            return $this->data[$this->ptr++];
        }
       
        return false;
    }
   
    /**
     * Moves to the next row in the data object
     *
     * @return boolean
     */
    public function moveNext()
    {
        $newPtr = $this->ptr + 1;
       
        if(isset($this->data[$newPtr]))
        {
            $this->ptr = $newPtr;
            return true;
        }
       
        return false;
    }
   
    /**
     * Moves to the previous row in the data object
     *
     * @return boolean
     */
    public function movePrevious()
    {
        $newPtr = $this->ptr - 1;
       
        if(isset($this->data[$newPtr]))
        {
            return $this->data[$newPtr];
        }
       
        return false;
    }
   
    /**
     * Pushes an element onto the array
     *
     * @param String or an array $input
     * @return number of elements
     */
    public function push($input)
    {
        if($this->getNumRows() > 0)
        {
            return array_push($this->data, $input);
        }
        else
        {
            return $this->data[] = $input;
        }
    }
   
    /**
     * Counts the number of rows
     */
    public function getNumRows()
    {
        return count($this->data);
    }
}

?>
Marc Bernet 15-May-2006 04:18
A small and basic implementation of a stack without using an array.

class node
{
        var $elem;
        var    $next;
}
class stack
{
    var $next;
    function pop()
    {
        $aux=$this->next->elem;
        $this->next=$this->next->next;
        return $aux;
    }
    function push($obj)
    {
        $nod=new node;
        $nod->elem=$obj;
        $nod->next=$this->next;
        $this->next=$nod;
    }
    function stack()
    {
        $this->next=NULL;
    }    
}
richard dot udo at gmail dot com 09-Feb-2006 11:05
Just a typo i think but the code below will actually produce

Array
(
    [0] => a
    [1] => b
    [2] => c
    [3] => Array
        (
            [0] => d
            [1] => e
            [2] => f
        )
)
egingell at sisna dot com 28-Jan-2006 02:06
If you push an array onto the stack, PHP will add the whole array to the next
element instead of adding the keys and values to the array. If this is not what
you want, you're better off using array_merge() or traverse the array you're
pushing on and add each element with $stack[$key] = $value.

<?php

$stack = array('a', 'b', 'c');
array_push($stack, array('d', 'e', 'f'));
print_r($stack);

?>
The above will output this:
Array (
  [0] => a
  [1] => b
  [2] => c
  [3] => Array (
     [0] => a
     [1] => b
     [2] => c
  )
)
steve at webthoughts d\ot ca 13-Nov-2005 12:02
Further Modification on the array_push_associative function
1.  removes seemingly useless array_unshift function that generates php warning
2.  adds support for non-array arguments

<?
// Append associative array elements
function array_push_associative(&$arr) {
   $args = func_get_args();
   foreach ($args as $arg) {
       if (is_array($arg)) {
           foreach ($arg as $key => $value) {
               $arr[$key] = $value;
               $ret++;
           }
       }else{
           $arr[$arg] = "";
       }
   }
   return $ret;
}

$items = array("here" => "now");
$moreitems = array("this" => "that");

$theArray = array("where" => "do we go", "here" => "we are today");
echo array_push_associative($theArray, $items, $moreitems, "five") . ' is the
size of $theArray.<br />';
   
echo "<pre>";
print_r($theArray);
echo "</pre>";

?>

Yields:

4 is the size of $theArray.
Array
(
    [where] => do we go
    [here] => now
    [this] => that
    [five] =>
)
ludvig dot ericson at gmail dot com 31-Oct-2005 01:32
Previous comment was not fully imitating the array_push behaviour,
1) does not return number of items pushed
2) can only handle one array to push

> Revised associative_push function with absolute reference of arg1 array; left
unchanged if arg2 is empty.

<?php
// Append associative array elements
function array_push_associative(&$arr) {
    $args = func_get_args();
    array_unshift($args); // remove &$arr argument
    foreach ($args as $arg) {
        if (is_array($arg)) {
            foreach ($arg as $key => $value) {
                $arr[$key] = $value;
                $ret++;
            }
        }
    }
   
    return $ret;
}

$theArray = array();
echo array_push_associative($theArray, $items, $moreitems) . ' items added to
$theArray.';
?>
john 19-Oct-2005 08:33
A variation of kamprettos' associative array push:

// append associative array elements
function associative_push($arr, $tmp) {
  if (is_array($tmp)) {
    foreach ($tmp as $key => $value) {
      $arr[$key] = $value;
    }
    return $arr;
  }
  return false;
}

$theArray = array();
$theArray = associative_push($theArray, $items);
kamprettos at yahoo dot com Teguh Iskanto 19-Sep-2005 12:33
Looking for a way to push data into an associative array and frustrated to know
that array_push() can't do the job ?

here's my Scenario :
-------------------
I need to relate system command output into an associative array like these :

[sge@digital_db work]$ /usr/local/apache/htdocs/work/qhost.sh -h t1 -F | awk '
{if(NR>4) print $1}' | sed  's/hl://g'
arch=lx24-amd64
num_proc=2.000000
mem_total=3.808G
swap_total=3.907G
virtual_total=7.715G
load_avg=0.000000
load_short=0.000000
load_medium=0.000000
load_long=0.000000
mem_free=3.510G
swap_free=3.907G
virtual_free=7.417G
mem_used=305.242M
swap_used=0.000
virtual_used=305.242M
cpu=0.000000
np_load_avg=0.000000
np_load_short=0.000000
np_load_medium=0.000000
np_load_long=0.000000

how I did it :
<? php

# get into the system command output
$assoc_cmd =`$work_dir/qhost.sh -h $host_resource -F | awk '{if(NR>4) print $1}
'| sed  's/hl://g' ` ;

# split the "\n" character
$assoc_row = explode("\n", chop($assoc_cmd));

# get the index row
$idx_row  = count($assoc_row) - 1 ;

# initialize the associative array
$host_res_array = array();

for ($i = 0 ; $i<= $idx_row ; $i++)
        {      
                # get params & values
                list($host_param,$host_val) = explode("=",$assoc_row[$i]);

                # populate / push data to assoc array
                $host_res_array[$host_param]= $host_val ;
        }   

echo "<pre> Architecture : </pre>\n" ;
echo $host_res_array['arch'] ;
echo "<pre> Mem Total    : </pre>\n" ;
echo $host_res_array['mem_tot'];

?>

Hope this helps ! :)
bk at quicknet dot nl 04-Sep-2005 08:51
Add elements to an array before or after a specific index or key:

<?php

/**
 * @return array
 * @param array $src
 * @param array $in
 * @param int|string $pos
*/
function array_push_before($src,$in,$pos){
    if(is_int($pos)) $R=array_merge(array_slice($src,0,$pos), $in, array_slice
($src,$pos));
    else{
        foreach($src as $k=>$v){
            if($k==$pos)$R=array_merge($R,$in);
            $R[$k]=$v;
        }
    }return $R;
}

/**
 * @return array
 * @param array $src
 * @param array $in
 * @param int|string $pos
*/
function array_push_after($src,$in,$pos){
    if(is_int($pos)) $R=array_merge(array_slice($src,0,$pos+1), $in,
array_slice($src,$pos+1));
    else{
        foreach($src as $k=>$v){
            $R[$k]=$v;
            if($k==$pos)$R=array_merge($R,$in);
        }
    }return $R;
}

// Examples:

$src=array("A","B","C");
$in=array("X","Y");

var_dump(array_push_before($src,$in,1));
/* array_push_before, no-key array
array(5) {
  [0]=>
  string(1) "A"
  [1]=>
  string(1) "X"
  [2]=>
  string(1) "Y"
  [3]=>
  string(1) "B"
  [4]=>
  string(1) "C"
}*/

var_dump(array_push_after($src,$in,1));
/* array_push_after, no-key array
array(5) {
  [0]=>
  string(1) "A"
  [1]=>
  string(1) "B"
  [2]=>
  string(1) "X"
  [3]=>
  string(1) "Y"
  [4]=>
  string(1) "C"
}*/

$src=array('a'=>"A",'b'=>"B",'c'=>"C");
$in=array('x'=>"X",'y'=>"Y");

var_dump(array_push_before($src,$in,1));
/* array_push_before, key array, before index insert
array(5) {
  ["a"]=>
  string(1) "A"
  ["x"]=>
  string(1) "X"
  ["y"]=>
  string(1) "Y"
  ["b"]=>
  string(1) "B"
  ["c"]=>
  string(1) "C"
}*/

var_dump(array_push_before($src,$in,'b'));
/* array_push_before, key array, before key insert
array(5) {
  ["a"]=>
  string(1) "A"
  ["x"]=>
  string(1) "X"
  ["y"]=>
  string(1) "Y"
  ["b"]=>
  string(1) "B"
  ["c"]=>
  string(1) "C"
}*/

var_dump(array_push_after($src,$in,1));
/* array_push_after, key array, after index insert
array(5) {
  ["a"]=>
  string(1) "A"
  ["b"]=>
  string(1) "B"
  ["x"]=>
  string(1) "X"
  ["y"]=>
  string(1) "Y"
  ["c"]=>
  string(1) "C"
}*/

var_dump(array_push_after($src,$in,'b'));
/* array_push_after, key array, after key insert
array(5) {
  ["a"]=>
  string(1) "A"
  ["b"]=>
  string(1) "B"
  ["x"]=>
  string(1) "X"
  ["y"]=>
  string(1) "Y"
  ["c"]=>
  string(1) "C"
}*/

?>
ciprian dot amariei at gmail com 30-Aug-2005 09:47
regarding the speed of oneill's solution to insert a value into a
non-associative array,  I've done some tests and I found that it behaves well
if you have a small array and more insertions, but for a huge array and a
little insersions I sugest  using this function:

function array_insert( &$array, $index, $value ) {
   $cnt = count($array);
 
   for( $i = $cnt-1; $i >= $index; --$i ) {
       $array[ $i + 1 ] = $array[ $i ];
   }
   $array[$index] = $value;
}

or if you are a speed adicted programmer (same situation: big array, few
insertions) use this:

array_splice ( $array, $offset, 0, $item );

item may also be an array of values ;).
Phil Davies 18-Jul-2005 10:51
As someone pointed out the array_push() function returns the count of the array
not the key of the new element. As it was the latter function i required i
wrote this very simple replacement.

function array_push2(&$array,$object,$key=null){
    $keys = array_keys($array);
    rsort($keys);
    $newkey = ($key==null)?$keys[0]+1:$key;
    $array[$newkey] = $object;
    return $newkey;
}
oneill at c dot dk 03-Jun-2005 08:50
To insert a value into a non-associative array, I find this simple function
does the trick:

function insert_in_array_pos($array, $pos, $value)
{
  $result = array_merge(array_slice($array, 0 , $pos), array($value),
array_slice($array,  $pos));
  return $result;
}

Seems an awful lot simpler than the iterative solutions given above...
aaron dot hawley at uvm dot edu 27-May-2005 06:36
Skylifter notes on 20-Jan-2004 that the [] empty bracket notation does not
return the array count as array_push does.  There's another difference between
array_push and the recommended empty bracket notation.

Empy bracket doesn't check if a variable is an array first as array_push does. 
If array_push finds that a variable isn't an array it prints a Warning message
if E_ALL error reporting is on.

So array_push is safer than [], until further this is changed by the PHP
developers.
josh at digitalfruition dot com 14-Feb-2005 06:17
Note that array_push() will, as described, return the COUNT of the array after
adding a new item, not necessarily the INDEX of that new item:

<?php
$array = array(3 => 'three', 5 => 'five');

echo "\$array = ";
print_r($array);
echo "\n\n";

$to_push = array(1,2,4,);
foreach($to_push as $var)
{
    echo "calling array_push(\$array,$var); retval is ";
    echo array_push($array,$var);
    echo "\n";
}

echo "\$array = ";
print_r($array);
?>

The output of above is:

$array = Array
(
    [3] => three
    [5] => five
)

calling array_push($array,1); retval is 4
calling array_push($array,2); retval is 5
calling array_push($array,4); retval is 6
$array = Array
(
    [3] => three
    [5] => five
    [7] => seven
    [8] => 1
    [9] => 2
    [10] => 4
)

Notice how when array_push($array,1) was called, the new element has a key of 8
but array_push() returns 4.
andrew at cgipro dot com 02-Feb-2005 11:18
Need a real one-liner for adding an element onto a new array name?

$emp_list_bic = $emp_list + array(c=>"ANY CLIENT");

CONTEXT...
drewdeal: this turns out to be better and easier than array_push()
patelbhadresh: great!... so u discover new idea...
drewdeal: because you can't do:   $emp_list_bic = array_push($emp_list, c=>"ANY
CLIENT");
drewdeal: array_push returns a count and affects current array.. and does not
support set keys!
drewdeal: yeah. My one-liner makes a new array as a derivative of the prior
array
aron 24-Feb-2004 10:48
The problem with array_push is that it is pass by value.  If you are dealing
with objects whose inner state may change at any time, you need a push and pop
who return the actual objects, rather than copies of them. 
After some difficulty and board assistance, I have these methods.  I've tested
them, and they seem to work fine.

<?php
function push(&$array, &$object){   
    $array[] =& $object;   
}
function & pop(&$array){
    return array_pop($array);
}

// [Test Code]
class TestObject{
    var $value = 0;
    function getValue(){
        return $this->value;
    }
    function setValue($mixed){
        $this->value = $mixed;
    }
}
$myarr = array();
$tmp =& new TestObject();
$tmp2 =& new TestObject();
$tmp->setValue(2);
$tmp2->setValue(3);

push($myarr, $tmp);
push($myarr, $tmp2);
$tmp->setValue(4);
$tmp2->setValue(6);
$val = pop($myarr);
print "popped value: ".$val->getValue()."<br />";

print "values in internal array: <br />";
foreach ($myarr as $key=>$value){
    print "key: $key, object: $value, value: ";
    print  $value->getValue()."<br />";
}
// [/TestCode]
?>
skiflyer 21-Jan-2004 12:05
However, don't forget that array_push() does more than [], it also performs a
count and returns the value.

Modifying your code ever so slightly (see below), this puts array_push in the
lead (not suprisingly).  So my conclusion would be that if I care about the
number of elements in the array, then I'd use array_push(), if I don't (which
is usually the case), then I'd use the [] method.

Results...
[] method: 0.34943199
push method: 0.31505919
difference: -0.03437280

Modified section of code...
$s_test_begin = FullMicroTime();
for($i = 0; $i <= 50000; $i++) { $num_tot = array_push($test2, $i); }
$s_test_end = FullMicroTime();

$f_test_begin = FullMicroTime();
for($i = 0; $i <= 50000; $i++) { $test[] = $i; $num_tot = count($test); }
$f_test_end = FullMicroTime();
daevid at daevid dot com 17-Feb-2003 04:38
Sadly, array_push() does not create an array if the array doesn't exist.  So if
you're pushing the first element onto an array, you need to check and create it
manually...

<?php
if ( !is_array($myArray) ) $myArray= array();
array_push($myArray, $myElement);
?>
bart at framers dot nl 27-Sep-2001 11:16
Array_push also works fine with multidimensional arrays. Just make sure the
element is defined as an array first.

<?php
$array["element"][$element]["element"] = array();
array_push ($array["element"][$element]["element"], "banana");
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Jan 9 21:41:28 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.85.172
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012
 
add a note add a note User Contributed Notes substr
munirsunni(at)gmail(dot)com 23-Nov-2011 10:30
<?php

//Here is the function created for strip tags with sub string

function displaySubStringWithStrip($string, $length=NULL)
{
    if ($length == NULL)
            $length = 50;
  
    $stringDisplay = substr(strip_tags($string), 0, $length);
    if (strlen(strip_tags($string)) > $length)
        $stringDisplay .= ' ...';
    return $stringDisplay;
}

?>
leon weidauer 08-Jul-2011 08:07
When using a value of a wrong type as second parameter , substr() does not
return FALSE but NULL although the docs say, it should return FALSE on error.

Prior to PHP 5.3, substr() tries to cast the second parameter to int and
doesn't throw any errors. Since PHP 5.3 a warning is thrown.
Quicker 06-May-2011 11:17
If you need to parse utf-8 strings char by char, try this one:

<?php
     $utf8marker=chr(128);
     $count=0;
     while(isset($string{$count})){
       if($string{$count}>=$utf8marker) {
         $parsechar=substr($string,$count,2);
         $count+=2;
       } else {
         $parsechar=$string{$count};
         $count++;
       }
       /* do what you like with parsechar ... , eg.:*/  echo $parsechar."<BR>\r
\n";
     }
?>

- it works without mb_substr
- it is fast, because it grabs characters based on indexes  when possible and
avoids any count and split functions
slow at acedsl dot com 28-Mar-2011 09:47
Anyone coming from the Python world will be accustomed to making substrings by
using a "slice index" on a string.  The following function emulates basic
Python string slice behavior. (A more elaborate version could be made to
support array input as well as string, and the optional third "step" argument.)

<?php

function py_slice($input, $slice) {
    $arg = explode(':', $slice);
    $start = intval($arg[0]);
    if ($start < 0) {
        $start += strlen($input);
    }
    if (count($arg) === 1) {
        return substr($input, $start, 1);
    }
    if (trim($arg[1]) === '') {
        return substr($input, $start);
    }
    $end = intval($arg[1]);
    if ($end < 0) {
        $end += strlen($input);
    }
    return substr($input, $start, $end - $start);
}

print py_slice('abcdefg', '2') . "\n";
print py_slice('abcdefg', '2:4') . "\n";
print py_slice('abcdefg', '2:') . "\n";
print py_slice('abcdefg', ':4') . "\n";
print py_slice('abcdefg', ':-3') . "\n";
print py_slice('abcdefg', '-3:') . "\n";

?>

The $slice parameter can be a single character index, or a range separated by a
colon. The start of the range is inclusive and the end is exclusive, which may
be  counterintuitive. (Eg, py_slice('abcdefg', '2:4') yields 'cd' not 'cde'). A
negative range value means to count from the end of the string instead of the
beginning. Both the start and end of the range may be omitted; the start
defaults to 0 and the end defaults to the total length of the input.

The output from the examples:
c
cd
cdefg
abcd
abcd
efg
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Jan 9 20:41:31 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.3.84
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 変数操作
  • 変数操作関数
  • debug_ zval_ dump
  • doubleval
  • empty
  • floatval
  • get_ defined_ vars
  • get_ resource_ type
  • gettype
  • import_ request_ variables
  • intval
  • is_ array
  • is_ bool
  • is_ callable
  • is_ double
  • is_ float
  • is_ int
  • is_ integer
  • is_ long
  • is_ null
  • is_ numeric
  • is_ object
  • is_ real
  • is_ resource
  • is_ scalar
  • is_ string
  • isset
  • print_ r
  • serialize
  • settype
  • strval
  • unserialize
  • unset
  • var_ dump
  • var_ export

is_object> <is_null
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012

view this page in

[English             ] Change language
is_numeric

(PHP 4, PHP 5)

is_numeric — 変数が数字または数値形式の文字列であるかを調べる

説明

bool is_numeric ( mixed $var )

指定した変数が数値であるかどうかを調べます。数値形式の文字列は以下の要素からな
ります。（オプションの）符号、任意の数の数字、（オプションの）小数部、そして（
オプションの）指数部。つまり、+0123.45e6 は数値として有効な値です。16 進表記（
0xFF）も認められますが、この場合は符号や小数部、指数部を含めることはできません
。

パラメータ

var

    評価する変数。

返り値

var が数値または数値形式の文字列である場合に TRUE、それ以外の場合に FALSE を返
します。

例

例1 is_numeric() の例

<?php
$tests = array(
    "42", 
    1337, 
    "1e4", 
    "not numeric", 
    array(), 
    9.1
);

foreach ($tests as $element) {
    if (is_numeric($element)) {
        echo "'{$element}' is numeric", PHP_EOL;
    } else {
        echo "'{$element}' is NOT numeric", PHP_EOL;
    }
}
?>

上の例の出力は以下となります。

'42' is numeric
'1337' is numeric
'1e4' is numeric
'not numeric' is NOT numeric
'Array' is NOT numeric
'9.1' is numeric

参考

  • ctype_digit() - 数字かどうかを調べる
  • is_bool() - 変数が boolean であるかを調べる
  • is_null() - 変数が NULL かどうか調べる
  • is_float() - 変数の型が float かどうか調べる
  • is_int() - 変数が整数型かどうかを検査する
  • is_string() - 変数の型が文字列かどうかを調べる
  • is_object() - 変数がオブジェクトかどうかを検査する
  • is_array() - 変数が配列かどうかを検査する



is_object> <is_null
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012
 
add a note add a note User Contributed Notes is_numeric
holdoffhunger at gmail dot com 30-Dec-2011 05:20
I wanted an Is_hex function that does the same as is_numeric, except for hex. 
Here's one with decent efficiency that uses direct iteration.  $result stores
the result as a TRUE/FALSE string (which can be changed to bool, depending on
how you want to implement it), and $string_to_test is the string of
possible-hex values you want to test.

<?php

    // Released Under Affero General Public License, Version 3 (AGPL3)
    // Author: holdoffhunger@gmail.com

$result = "TRUE";

$testable_string = strtolower($string_to_test);
$testable_string_length = strlen($string_to_test);

for($i_string = 0; $i_string < $testable_string_length; $i_string++)
{
    $current_value_to_test = $testable_string[$i_string];
   
    if(    ($current_value_to_test != "0")        &&
        ($current_value_to_test != "1")        &&
        ($current_value_to_test != "2")        &&
        ($current_value_to_test != "3")        &&
        ($current_value_to_test != "4")        &&
        ($current_value_to_test != "5")        &&
        ($current_value_to_test != "6")        &&
        ($current_value_to_test != "7")        &&
        ($current_value_to_test != "8")        &&
        ($current_value_to_test != "9")        &&
        ($current_value_to_test != "a")        &&
        ($current_value_to_test != "b")        &&
        ($current_value_to_test != "c")        &&
        ($current_value_to_test != "d")        &&
        ($current_value_to_test != "e")        &&
        ($current_value_to_test != "f")        )
    {
        $result = "FALSE";
        $i_string = $testable_string_length;
    }
}

?>
sobolanx at gmail dot com 22-Jan-2011 11:55
Note that the function accepts extremely big numbers and correctly evaluates
them.

For example:

<?php
    $v = is_numeric
('58635272821786587286382824657568871098287278276543219876543') ? true : false;
   
    var_dump ($v);
?>

The above script will output:

bool(true)

So this function is not intimidated by super-big numbers. I hope this helps
someone.

PS: Also note that if you write is_numeric (45thg), this will generate a parse
error (since the parameter is not enclosed between apostrophes or double
quotes). Keep this in mind when you use this function.
Martyn Ranyard 10-Jan-2011 12:14
The documentation does not clarify what happens if you the input is an empty
string - it correctly returns false in my experience.  Useful to state these
odd cases, for when you see code that checks for an empty string and
is_numeric, you can tell it's a waste of a comparison.
Nitrogen 12-Sep-2010 05:40
I find it a little weird that people are having issues with ordinal numbers,
it's pretty easy..
Notes are in the commenting, check out the example outputs.

<?php

function ordinal($i='') {
  // a temporary value we can change, and keep the original value.
  $o=$i;

  // suffixes = 0th, 1st, 2nd, third == zeroth, first, second, third
  $s=array('th','st','nd','rd');

  // if input just so happens to be a string, we check to make sure it
  // still holds a numeric value and only acquire the last 2 numbers.
  // if it's not a string, nor an integer, we freak out and say no.
  if(!is_int($o))
    if(ctype_digit($o))
      $o=(int)substr($o,-2,2);
    else
      return(false);

  // basically, if $o is between 11 and 19, we use 'th'
  // otherwise we use the last digit and if it's over
  // 4 then we use 0 (for the $s array index).
  return($i.$s[($o%100>10&&$o%100<20)?0:($o%10<4?$o%10:0)]);
}

var_dump(ordinal(5));

/* Example Outputs of ordinal():
  0th, 1st, 2nd, 3rd, 4th, ..., 9th,
  10th, 11th, 12th, 13th, 14th, ..., 19th,
  110th, 111th, ..., 199th, 200th, 201st.

  ordinal('-1'); returns false because ctype_digit hates anything that
  isn't strictly 0 through 9 and '-' trips it to false.

  ordinal('asdf'); returns false for the exact same reason.

  ordinal(); returns false because it's blank.

  signed integers on a 32-bit system (and the same issue on a 64-bit
  system using 0x7FFFFFFFFFFFFFFF because of two's compliment,
  anything higher will become a negative number):
  ordinal(0x7FFFFFFF  ); returns 2147483647th (which is correct)
  ordinal(0x7FFFFFFF+1); returns false.
*/

?>
derek dot p dot moore at gmail dot com 22-Jul-2010 04:39
To verify large hex numbers or hexadecimal strings use:
http://php.net/ctype_xdigit
purdue at nc dot rr dot com 18-May-2010 11:57
I see a lot of examples below to get the ordinal string for a given number
("1st", "2nd", "3rd", "4th", etc).  If you only need small ordinals (up to
"31st" at most), this one-line trick works:

<?php

function ordinal ($i) {
   return date("jS", strtotime("Jan $i"));
}

?>
dustout at gmail dot com 03-Mar-2010 02:38
I had troubles when using this as an is_hex function, if anyone else runs into
troubles here is an alternative approach. Not a very efficient one, but it
worked quite well for what i needed it for.

<?php
function is_hex($hexValue){
if($hexValue == dechex(hexdec($hexValue)))
        return true;
    return false;
}
?>
Kiam 23-Jul-2009 06:02
empty(trim($test, '+-.,0123456789')) doesn't assure you $test contains a
number. It returns TRUE also for a string containing ".+1234.56", which is not
a valid number.
codeslinger at compsalot dot com 15-Jul-2009 08:34
if speed is important, the liberal use of regex should be avoided, especially
complex ones like those here.

For most purposes, this will be sufficient and has the advantages of both speed
and clarity.

$BoolResult = empty(trim($Test, '+-.,0123456789'));

If the $Test contains any character that is not a valid part of a number the
remaining string will not be empty.

if you want to be more restrictive of the '+-'  then you can use a separate
trim for that and nest it.  Keep in mind that some notations pt the sign to the
right of the number instead of to the left.  Depending upon your specific
application you can also choose to ignore spaces and allow for 'e' notation.

I also use this approach when testing for other character sets such as Hex.
info at DriaConsulting dot Com 05-Jul-2009 06:34
is_numeric() does not escape the string. It validates it's numeric nature with
true/false.

However, (int) before the string, converts the string to numeric.
Magnus Deininger, dma05 at web dot de 07-Jan-2009 02:01
regarding the global vs. american numeral notations, it should be noted that at
least in japanese, numbers aren't grouped with an extra symbol every three
digits, but rather every four digits (for example 1,0000 instead of 10.000).
also nadim's regexen are slightly suboptimal at one point having an unescaped
'.' operator, and the whole thing could easily be combined into a single regex
(speed and all).

adjustments:

<?php
$eng_or_world = preg_match
  ('/^[+-]?'. // start marker and sign prefix
  '(((([0-9]+)|([0-9]{1,4}(,[0-9]{3,4})+)))?(\\.[0-9])?([0-9]*)|'. // american
  '((([0-9]+)|([0-9]{1,4}(\\.[0-9]{3,4})+)))?(,[0-9])?([0-9]*))'. // world
  '(e[0-9]+)?'. // exponent
  '$/', // end marker
  $str) == 1;
?>

i'm sure this still isn't optimal, but it should also cover japanese-style
numerals and it fixed a couple of other issues with the other regexen. it also
allows for an exponent suffix, the pre-decimal digits are optional and it
enforces using either grouped or ungrouped integer parts. should be easier to
trim to your liking too.
nadim (nadim at alienworkers dot com) 04-Nov-2008 09:53
Using SpT_King James example, i've re-wrote to cater for digits starting with
'+', commas ',' or period '.'

<?php
function is_numeric_regex($str)
{
    $str    = "{$str}";

    if (in_array($str[0], array('-', '+')))    $str = "{$str[0]}0" . substr
($str, 1);
    else $str = "0{$str}";

    $eng    = preg_match ("/^[+,-]{0,1}([0-9]+)(,[0-9][0-9][0-9])*([.][0-9])
{0,1}([0-9]*)$/" , $str) == 1;
    $world    = preg_match ("/^[+,-]{0,1}([0-9]+)(.[0-9][0-9][0-9])*([,][0-9])
{0,1}([0-9]*)$/" , $str) == 1;

    return ($eng or $world);
}
?>
jbezorg at gmail dot com 07-Oct-2008 11:50
"$e = (int) substr( $n , -2 );"

What the heck am I thinking.

<?php
function number_suffix2($n)
{
    $s = array( 1->'st' , 2=>'nd' , 3=>'rd' );
    $e = $n % 100;
    $x = $n % 10;
  
    return $n.( ( $x > 0 && $x < 4 && ( $e < 11 || $e > 13 ) ) ? $s[$x] : 'th'
);
}
?>
vezquex at gmail dot com 28-Jul-2008 01:13
I needed a number_suffix function that was really sweet.
<?php
function number_suffix($n){
{
    $suffix = 'th';
    if(!($n >= 10 && $n < 20));
    {
        $s = ['st','nd','rd'];
        $s = $s[$n % 10 - 1];
        $suffix = $s ? $s : 'th';
    }
    return $n . $suffix;
}
?>
SpT_King James (tiagovix2000 (at) gmail) 11-Jan-2008 06:31
To Elwin van Huissteden, by his answer at 27-Mar-2007 05:05.

Your code didnt work (you said not tested it). So i fixed it:

<?
function my_is_numeric($value)  {
    $american = preg_match ("/^(-){0,1}([0-9]+)(,[0-9][0-9][0-9])*([.][0-9])
{0,1}([0-9]*)$/" ,$value) == 1;
    $world = preg_match ("/^(-){0,1}([0-9]+)(.[0-9][0-9][0-9])*([,][0-9]){0,1}
([0-9]*)$/" ,$value) == 1;
   return ($american or $world);
}
?>

-the English/American way of writing a float million number: 1,000,000.00
-the global way of writing a float million number: 1.000.000,02
kendsnyder at gmail dot com 29-Jun-2007 05:49
Be careful when using is_numeric() to escape SQL strings.  is_numeric('0123')
returns true but 0123 without quotes cannot be inserted into SQL.  PHP
interprets 0123 without quotes as a literal octal number; but SQL just throws a
syntax error.

<?php
is_numeric('0123'); // true
is_numeric(0.123); // true
is_numeric('0.123'); // true
is_numeric(123); // true
is_numeric('123'); // true
is_numeric('foo'); // false
?>

Casting a value to float then string and comparing it to the original value
cast as string as the same effect as is_numeric but returns false for numeric
strings that begin with zero and have no decimal point.  Examples:
<?php
function isDecimalNumber($n) {
  return (string)(float)$n === (string)$n;
}

isDecimalNumber('0123'); // false
isDecimalNumber(0.123); // true
isDecimalNumber('0.123'); // true
isDecimalNumber(123); // true
isDecimalNumber('123'); // true
isDecimalNumber('foo'); // true

?>
Carlos Madeira 02-Jun-2007 05:46
If I may, i think there is a simpler way to determine if a number is odd or
even:

if( $number & 1 ) //Just check the last bit!
  echo 'It's odd!';
else
  echo 'It's even!';
Kenn 11-May-2007 06:45
A side note, finding out if an integer is even or odd, given the integer = $i
...

if (($i % 2) == 0) // This will test TRUE if the integer is even.
   {
xxx insert code here xxx
   }
Q1712 at online dot ms 24-Apr-2007 08:33
a regex doing the same as is_numeric() is:
"^((-?[0-9]*\.[0-9]+|[[:space:]]*[+-]?[0-9]+(\.[0-9]*)?)
([eE][+-]?[0-9]+)?|0x[0-9a-fA-F]+)$" (took me some testing to figure this out)
regex: "^(decimal|hex)$"
  decimal: "(base1|base2)(exponent)?"
    base1: "-?[0-9]*\.[0-9]+"
           if there are no prepanded spaces and no "+" the
           base may be any of "0", ".0", "0.0".
    base2: "[[:space:]]*[+-]?[0-9]+(\.[0-9]*)?"
           if there are empty spaces or a "+" prepanded the
           base may only be "0" or "0.0" (no idea why)
    exponent: "[eE][+-]?[0-9]+"
              the exponent is opional
  hex: "0x[0-9a-fA-F]+"
usage: preg_match("/regex/D", $str); or ereg("regex", $str);

Just to know what is_numeric() is doing. Of cause the regex should be much
slower and is_numeric() also returns false if the number would be to big to fit
into a double.
Elwin van Huissteden 27-Mar-2007 12:05
To James holwell:

Maybe your function was more strickt, but profides FALSE to any numeric string
that wasnt written in the English/American notition. To enable a person to use
the both the English/American and the rest of the world's way:

<?php
  function my_is_numeric($value)
  {
   return (preg_match ("/\A(-){0, 1}([0-9]+)((,|.)[0-9]{3, 3})*((,|.)[0-9]){0,
1}([0-9]*)\z/" ,$value) == 1);
  }
?>

Other than that, i'd recommend using yours, if it works (i havent tested either
yours or mine)
By using mine, there might be a slight chance to not being able to do
calculations with the numeric string if it's not the English/American way.

(*Note:
-the E/A way of writing 1 million (with decimal for 1/50): 1,000,000.02
-the global way of writing 1 million (with decimal for 1/50): 1.000.000,02
james.holwell( at )exeter.ox.ac.uk 20-Mar-2007 10:07
In reply to www.kigoobe.com, a more strict expression is

<?php
  function my_is_numeric($value)
  {
    return (preg_match ("/^(-){0,1}([0-9]+)(,[0-9][0-9][0-9])*([.][0-9]){0,1}
([0-9]*)$/", $value) == 1);
  }
?>

This will not match strings like -6,77.8,8 which are matched by the below
expression, and instead requires a single decimal point, with at least one
character following, and only permits comma-separation when the right hand side
is a triplet.
Stephen 25-Jan-2007 05:31
The documentation is not completely precise here. is_numeric will also return
true if the number begins with a decimal point  and/or a space, provided a
number follows (rather than a letter or punctuation). So, it doesn't
necessarily have to start with a digit.
mariusads::at::helpedia.com 19-Jan-2007 09:56
Test if a number is positive and contains only 0-9:

function is_number($number)
{
    $text = (string)$number;
    $textlen = strlen($text);
    if ($textlen==0) return 0;
    for ($i=0;$i < $textlen;$i++)
    { $ch = ord($text{$i});
       if (($ch<48) || ($ch>57)) return 0;
    }
    return 1;
}

returns

0 : number contain character outside 0-9
1 : valid number.
meagar at gmail dot com 14-Jan-2007 03:52
Miero: Your function doesn't match some special cases: '+1', '-0', '+0', all of
which are valid integers.  The easiest and most reliable way to get a definite
integer match is with a regular expression:

function is_intval($value) {
     return 1 === preg_match('/^[+-]?[0-9]+$/', $value);
}

This has two "problems" based on your input:  it matches both '00' and
'999999999999999999999999999999999' as valid integers.

I'm not sure why you wouldn't want to match "00".  Regardless of whether
somebody entered it in a form by accident or on purpose, it /is/ a valid
integer, and in most instances you should accept it.

The second value, "999..." is also a valid integer, even if PHPs internal int
type isn't precise enough to represent it.
alexander dot j dot summers at imperial dot ac dot uk 23-Oct-2006 04:05
Note that the even simpler functions for checking if a variable contains an odd
or even number below don't produce good results if you apply them to arguments
which aren't numeric; I guess that was the idea of the originals.

e.g. using the functions defined in two posts below..

IS_ODD(null)  returns false
IS_EVEN(null) returns true
is_odd(null)    returns false
is_even(null)  returns false
ja at krystof dot org 02-Sep-2006 01:10
Here is a simple function to recognize whether the value is a natural number:
(Zero is often exclude from the natural numbers, that's why there's the second
parameter.)

<?php
function is_natural($val, $acceptzero = false) {
 $return = ((string)$val === (string)(int)$val);
 if ($acceptzero)
  $base = 0;
 else
  $base = 1;
 if ($return && intval($val) < $base)
  $return = false;
 return $return;
}
?>
moskalyuk at gmail dot com 21-Aug-2006 05:18
is_numeric fails on the hex values greater than LONG_MAX, so having a large hex
value parsed through is_numeric would result in FALSE being returned even
though the value is a valid hex number
rontarrant at NO_SPAMsympatico dot ca 24-Jul-2006 02:15
Here's an even simpler pair of functions for finding out if a number is odd or
even:

function IS_ODD($number) { return($number & 1); }

function IS_EVEN($number) { return(!($number & 1)); }

Test:
$myNumber = 151;

if(IS_ODD($myNumber))
    echo("number is odd\n");
else
    echo("number is NOT odd\n");

if(IS_even($myNumber))
    echo("number is even\n");
else
    echo("number is NOT even\n");

Results:
number is odd
number is NOT even
Miero 08-Jul-2006 04:31
function is_intval($a) {
    return ((string)$a === (string)(int)$a);
}

true for ("123", "0", "-1", 0, 11, 9011, 00, 0x12, true)
false for (" ", "", 1.1, "123.1", "00", "0x123", "123a", "ada", "--1",
"999999999999999999999999999999999", false, null, '1 ')
andrea dot vacondio at gmail dot com 13-Dec-2005 03:52
Two simple functions using is_numeric:

<?php

 function is_odd($num){
     return (is_numeric($num)&($num&1));
 }
 
 function is_even($num){
     return (is_numeric($num)&(!($num&1)));
 }

 //examples
echo "1: odd? ".(is_odd(1)? "TRUE": "FALSE")."<br />";
//is_numeric(0) returns true
echo "0: odd? ".(is_odd(0)? "TRUE": "FALSE")."<br />";
echo "6: odd? ".(is_odd(6)? "TRUE": "FALSE")."<br />";
echo "\"italy\": odd? ".(is_odd("italy")? "TRUE": "FALSE")."<br />";
echo "null: odd? ".(is_odd(null)? "TRUE": "FALSE")."<br /><br />";
echo "1: even? ".(is_even(1)? "TRUE": "FALSE")."<br />"; 
echo "0: even? ".(is_even(0)? "TRUE": "FALSE")."<br />";
echo "6: even? ".(is_even(6)? "TRUE": "FALSE")."<br />";
echo "\"italy\": even? ".(is_even("italy")? "TRUE": "FALSE")."<br />"; 
echo "null: even? ".(is_even(null)? "TRUE": "FALSE")."<br />";

?>
And here is the result:
1: odd? TRUE
0: odd? FALSE
6: odd? FALSE
"italy": odd? FALSE
null: odd? FALSE

1: even? FALSE
0: even? TRUE
6: even? TRUE
"italy": even? FALSE
null: even? FALSE
jamespam at hotmail dot com 08-Aug-2005 09:31
Here's a function to determine if a variable represents a whole number:

function is_whole_number($var){
  return (is_numeric($var)&&(intval($var)==floatval($var)));
}

just simple stuff...
is_whole_number(2.00000000001); will return false
is_whole_number(2.00000000000); will return true
namik at hub-cafe dot net 30-Jul-2005 01:11
I needed a number_suffix function that takes numbers with thousand seperators
(using number_format() function).  Note that this doesn't properly handle
decimals.

Example:
<?= number_suffix('1,021') ?> returns: 1,021st

Also, increasing the range above the condition statements increases
efficiency.  That's almost 20% of the numbers between 0 and 100 that get to end
early.

<?
  function number_suffix($number)
  {
    // Validate and translate our input
    if ( is_numeric($number) )
    {
      // Get the last two digits (only once)
      $n = $number % 100;
    } else {
     // If the last two characters are numbers
     if ( preg_match( '/[0-9]?[0-9]$/', $number, $matches ) )
     {
       // Return the last one or two digits
       $n = array_pop($matches);
     } else {
       // Return the string, we can add a suffix to it
       return $number;
     }
    }
    // Skip the switch for as many numbers as possible.
    if ( $n > 3 && $n < 21 )
      return $number . 'th';

    // Determine the suffix for numbers ending in 1, 2 or 3, otherwise add a
'th'
    switch ( $n % 10 )
    {
      case '1': return $number . 'st';
      case '2': return $number . 'nd';
      case '3': return $number . 'rd';
      default:  return $number . 'th';
    }
  }
?>
maninblack00 at mail dot ru 29-Jul-2005 11:23
blazatek at wp dot pl wrote a function to check POST inputs for ASCII-keys or
smth like that. there was an error while filtering $varvalue (it was only the
value of the last filter 'addslashes')

here's the corrected function:
<?

function is_num ($num) {
      // .....
}

function test_post($tab) {
   $post = array();
   $post = $tab;
   foreach ($post as $varname => $varvalue) {
       echo $tab[$varname];
       if (empty($varvalue)) {
                 $post[$varname] = null;
       }
       elseif (is_num($varvalue)) {
                 $varvalue=trim($varvalue);
                 $varvalue=strip_tags($varvalue);   
                 $varvalue=intval($varvalue);
                 $post[$varname]=addslashes($varvalue);   
       }
       else {   
                 $post[$varname]=NULL;
       }
   }//forech   
    return $post;
}
?>

hope that correction is correct ;)
sebu 28-Jul-2005 11:37
Referring to previous post "Be aware if you use is_numeric() or is_float()
after using set_locale(LC_ALL,'lang') or set_locale(LC_NUMERIC,'lang')":

This is totally wrong!

This was the example code:

-----
  set_locale(LC_NUMERIC,'fr');
  is_numeric(12.25); // Return False
  is_numeric(12,25); // Return True
  is_float(12.25); //Return False
  is_float(12,25); //Return True
-----

This is nonsense!

- set_locale() does not exist, you must use setlocale() instead
- you have to enclose 12,25 with quotes; otherwise PHP will think that
the function gets _two_ arguments: 12 and 25 (depending on PHP version and
setup you may additionally get a PHP warning)
- if you don't enclose 12,25 with quotes the first argument will be the
inspected value (12), the second value (25) is discarded. And is_numeric(12)
and is_float(12) is always TRUE

Corrected Example:

----
  setlocale(LC_NUMERIC,'fr');
  is_numeric(12.25); // Return True
  is_numeric("12,25"); // Return False
  is_float(12.25); //Return True
  is_float("12,25"); //Return False
----

Remarks:
- is_float(12.25) is _always_ TRUE, 12.25 is a PHP language construct (a
"value") and the way PHP interpretes files is definitely _not_ affected by the
locale
- is_float("12,25") is _always_ FALSE, since is_float (other than is_numeric):
if the argument is a string then is_float() always returns FALSE since it does
a strict check for floats

And the corrected example shows: you get the _same_ results for every possible
locale, is_numeric() does not depend on the locale.
ishmaelmakitla at yahoo dot com 20-May-2005 12:05
//hello mates I just wanted to bring this forth so that you may see what I have
been to
I tried to validate a certain field (name ) on my project web site design so
that the only field acceptable is alphabetic the problem was that it has to
include a space as in "Makitla M.I"
now ctype_alpha returned false as this includes a space
the same with
<?
  if(!ctype_alpha($name)||!ctype_space($name))
?>

now this is what I did
<?
    $name=explode(" ",$name);//to get rid of space charecter
   $name=explode(".",$name)//to get rid of the dod
//finally I tested if the resulting $name is purely alphabetic
if(!ctype_alpha($name))
     {
        echo"the name entered contained some   unacceptable      
charecters...please reenter";
     exit;
    }
//this solved my problem...hope this helps some of you!!
?>
Gregory Boshoff 14-May-2005 10:01
As mentioned above use the ctype character type functions to determine a
strings type as ctype is faster. ctype_digit has far better benchmarks than
is_numeric.

// Example:
$num = '888';
if(ctype_digit($num) === TRUE):
echo 'The string variable $num contains the decimal value '.$num;
endif;
Titouthat 27-Apr-2005 07:47
This function converts an input string into bool, int or float depending on its
content.

<?php
function convert_type( $var )
{
    if( is_numeric( $var ) )
    {
        if( (float)$var != (int)$var )
        {
            return (float)$var;
        }
        else
        {
            return (int)$var;
        }
    }
   
    if( $var == "true" )    return true;
    if( $var == "false" )    return false;
   
    return $var;
}
?>

'90' return an int
'90.9' return a float
'true' return a bool
'90.0' return a int
lukesneeringer at gmail dot com 19-Mar-2005 04:32
Regarding renimar at yahoo's function to yield ordinal numbers, the function
lacks one thing. It accounts for numbers in the teens only if the number is
below 100. If you used this function and gave 212 as the input, it would give
212nd, and not 212th. (Also, checking for numbers between 11 and 13 is
sufficient, since 14-19 yield th either way.)

Therefore,
<?php if ($num >= 11 and $num <= 19) ?>
should be changed to...
<?php if ($num % 100>= 11 and $num % 100 <= 13) ?>

It will then work perfectly all the time.

Here's the entire function with the one line changed:
<?php
function ordinalize($num) {
       if (!is_numeric($num))
               return $num;

       if ($num % 100 >= 11 and $num % 100 <= 13)
               return $num."th";
       elseif ( $num % 10 == 1 )
               return $num."st";
       elseif ( $num % 10 == 2 )
               return $num."nd";
       elseif ( $num % 10 == 3 )
               return $num."rd";
       else // $num % 10 == 0, 4-9
               return $num."th";
}
?>
codeslinger at compsalot dot com 18-Feb-2005 05:00
in version 4.3.10  I find the following

".73"  TRUE
"0.73"  TRUE
"+0.73"  TRUE

"+.73"   FALSE

I would not call it a bug, just something to be aware of.

-----

Also be aware that if you give php a huge number and then you convert it to a
string you get  

"INF"

if you pass that to mySQL etc. you could have a problem...
mdallaire at virtuelcom dot com 18-Nov-2004 12:23
Sometimes, we need to have no letters in the number and is_numeric does not
quit the job.
You can try it this ways to make sure of the number format:

    function new_is_unsigned_float($val) {
        $val=str_replace(" ","",trim($val));
        return eregi("^([0-9])+([\.|,]([0-9])*)?$",$val);
    }

    function new_is_unsigned_integer($val) {
        $val=str_replace(" ","",trim($val));
        return eregi("^([0-9])+$",$val);
    }

    function new_is_signed_float($val) {
        $val=str_replace(" ","",trim($val));
        return eregi("^-?([0-9])+([\.|,]([0-9])*)?$",$val);
    }

    function new_is_signed_integer($val) {
        $val=str_replace(" ","",trim($val));
        return eregi("^-?([0-9])+$",$val);
    }

It returns 1 if okay and returns nothing "" if it's bad number formating.
php at thefriedmans dot net 13-Oct-2004 05:19
is_numeric() in php5 returns false for strings with a leading decimal point:

<?php
is_numeric('5'); // true
is_numeric('5.5'); // true
is_numeric('.5'); // false

// but...

is_numeric('.0.5'); // true
?>

In certain situations, it may be useful to prepend a '0' to the string you're
verifying with is_numeric():

<?php
if (is_numeric('0' . $user_input)) // ...
?>
renimar no spam at nospam yahoo dot com 03-May-2004 07:54
A little function to ordinalize numbers using is_numeric() and accounting for
the numbers in the teens.

<?php
function ordinalize($num) {

        if (!is_numeric($num))
                return $num;

        if ($num >= 11 and $num <= 19)
                return $num."th";
        elseif ( $num % 10 == 1 )
                return $num."st";
        elseif ( $num % 10 == 2 )
                return $num."nd";
        elseif ( $num % 10 == 3 )
                return $num."rd";
        else
                return $num."th";

}

// Demo
for ($i=1; $i<=25; $i++) {
        print ordinalize($i) . " ";
}

// The loop returns:
// 1st 2nd 3rd 4th 5th 6th 7th 8th 9th 10th 11th 12th
// 13th 14th 15th 16th 17th 18th 19th 20th 21st 22nd
// 23rd 24th 25th

?>
joe at kewlmail dot net 16-Jan-2004 11:12
Here is a simple function that I found usefull for filtering user input into
numbers. Basically, it attempts to fix fat fingering. For example:

$userString = "$654.4r5";

function numpass_filter($userString){ 
    $money = explode(".", $userString);
    //now $money[0] = "$645" and $money[1] = "4r5"

    //next remove all characters save 0 though 9
    //in both elements of the array
    $dollars = eregi_replace("[^0-9]", null, $money[0]);
    $cents = eregi_replace("[^0-9]", null, $money[1]);

    //if there was a decimal in the original string, put it back
    if((string)$cents!=null){
        $cents = "." . $cents;
    }

   $result = $dollars . $cents;

    return($result);
}

The output in this case would be '654.45'.
Please note that this function will work properly unless the user fat fingers
an extra decimal in the wrong place.
kouber at saparev dot com 24-Nov-2003 11:05
Note that this function is not appropriate to check if "is_numeric" for very
long strings. In fact, everything passed to this function is converted to long
and then to a double. Anything greater than approximately 1.8e308 is too large
for a double, so it becomes infinity, i.e. FALSE. What that means is that, for
each string with more than 308 characters, is_numeric() will return FALSE, even
if all chars are digits.

However, this behaviour is platform-specific.

http://www.php.net/manual/en/language.types.float.php

In such a case, it is suitable to use regular expressions:

function is_numeric_big($s=0) {
  return preg_match('/^-?\d+$/', $s);
}
blazatek at wp dot pl 21-Oct-2003 03:05
the best way to check whether
variable is numeric is to check its ascii code :)

function is_num($var)
{
    for ($i=0;$i<strlen($var);$i++)
    {
        $ascii_code=ord($var[$i]);
       
        if ($ascii_code >=49 && $asci_code <=57)
            continue;
        else
            return false;
    }
   
        return true;
}
this function can be usefull if you wont to chec eg $_POST

function test_post($tab)
{
       
        $post = array();
        $post=$tab;
        echo $tab["user_name"];
        foreach ($post as $varname => $varvalue)
        {
        if (empty($varvalue))
        {
            $post[$varname] = null;
      
        }elseif (is_num($varvalue))
        {
                        $post[$varname]=trim($varvalue);
    $post[$varname]=strip_tags($varvalue);   
    $post[$varname]=intval($varvalue);
    $post[$varname]=addslashes($varvalue);   
    }else
    {   
                  $post[$varname]=NULL;
    }
            }
        }//forech    
    return $post;
}
stew_wilde at hotmail dot com 07-Aug-2003 08:25
When using the exec() function in php to execute anther php script, any command
line arguments passed the script will lose their type association, regardless
of whether they are numeric or not, the same seems to hold true for strings as
well.

ie : two scripts test.php:

<?php
$val = trim($argv[1]);
echo is_string($val);
?>

and testwrapper.php:

<?php
$tmp = 5;
exec("php ./test.php ".$tmp);
?>

Executing testwrapper.php on the command line will echo nothing (ie false), and
false will be returned regardless of any escaping of parameters or other such
attempts to overcome this.  The solution then is to explicitly cast $val in
test.php to be an int and then is_numeric will work.  But as stated the same
test was performed using a string for $val and the is_string() function and the
same thing occurs.  Not the end of the world, but something to be aware of :)
andi_nrw at hotmail dot com 12-Feb-2003 04:25
<?php
/* This function is not useful if you want
to check that someone has filled in only
numbers into a form because for example
4e4 and 444 are both "numeric".

I used a regular expression for this problem
and it works pretty good. Maybe it is a good
idea to write a function and then to use it.

$input_number = "444"; // Answer 1
$input_number = "44 "; // Answer 2
$input_number = "4 4"; // Answer 2
$input_number = "4e4"; // Answer 2
$input_number = "e44"; // Answer 2
$input_number = "e4e"; // Answer 2
$input_number = "abc"; // Answer 2
*/
$input_number = "444";

if (preg_match ("/^([0-9]+)$/", $input_number)) {
     print "Answer 1";
} else {
     print "Answer 2";
}
?>
php dot net at davidmcarthur dot com 17-Jan-2003 08:02
This is a little more explicit and won't break when the value can't be legally
cast as an int

function is_intValued($var)
{
    // Determines if a variable's value is an integer regardless of type
    // meant to be an analogy to PHP's is_numeric()
    if (is_int($var)) return TRUE;
    if (is_string($var) and $var === (string)(int) $var) return TRUE;
    if (is_float($var) and $var === (float)(int) $var) return TRUE;
    else return FALSE;
}
redy dot r at madagascan dot com 11-Dec-2002 12:54
Be aware if you use is_numeric() or is_float() after using set_locale
(LC_ALL,'lang') or set_locale(LC_NUMERIC,'lang')

Example :
If at the beginning of your script, you declare :

<?php
set_locale(LC_NUMERIC,'fr');
?>

and after, you will get this :

<?php
is_numeric(12.25); // Return False
is_numeric(12,25); // Return True
is_float(12.25); //Return False
is_float(12,25); //Return True
?>

Because, for french language the decimal separator is ',' (Comma) instead of
'.' (Dot).
martijnt at dataserve dot nl 02-Dec-2002 01:21
If you want to make sure that a variable contains only one or more numbers as
in the range 0-9, you could use this:

eregi("[^0-9]",$var)

This checks your variable for anything that is NOT in the range 0-9.

If you use is_numeric() while checking an IP address, you should not be
surprised if the following is accepted as a valid IP: 1e13.3.4.12e3 ->
is_numeric() considers 1e13 and 12e3 as valid numeric values (which is
correct).

Have fun.

Martijn Tigchelaar,
DataServe.
eagleflyer2 at lycos dot com 06-Sep-2002 08:02
Hi !
Many of you may have experienced that the 'is_numeric' function seems to fail
always when form entries are checked against their variable type. So the
function seems to return  'false' even if the form entry was aparently a number
or numeric string.

The solution is pretty simple and no subroutines or fancy operations are
necessary to make the 'is_numeric' function usable for form entry checks:

Simply strip off all (invisible) characters that may be sent along with the
value when submitting a form entry.

Just use the 'trim' function before 'is_numeric'.

Example:

$variable = trim($variable);
if (is_numeric($variable)
{...#do something#...}
else
{...#do something else#...}
mjbraca at NOSPAM dot hotmail dot com 24-Oct-2001 05:36
Some examples. Note that leading white space is OK, but not trailing white
space, and there can't be white space between the "-" and the number.

is_numeric("1,000") = F
is_numeric("1e2")   = T
is_numeric("-1e-2") = T
is_numeric("1e2.3") = F
is_numeric("1.")    = T
is_numeric("1.2")   = T
is_numeric("1.2.3") = F
is_numeric("-1")    = T
is_numeric("- 1")   = F
is_numeric("--1")   = F
is_numeric("1-")    = F
is_numeric("1A")    = F
is_numeric(" 1")    = T
is_numeric("1 ")    = F
tvali at email dot ee 10-Oct-2001 07:53
I changed function sent by
"ealma@hotmail.com 18-May-2001 12:02"
a little bit (it should be faster now).

Here is some code that will detect large values for numeric and for PHP3.

function is_num($s) {
  for ($i=0; $i<strlen($s); $i++) {
    if (($s[$i]<'0') or ($s[$i]>'9')) {return false;}
  }
return true;
}

You can also check only the first char in string (($s[0])<'9')and($s[0]>'0')),
since php converts string to numeric only from beginning to the last digit.
aulbach at unter dot franken dot de 17-Sep-2001 06:07
If you want to check, if a string will be converted into the exactly same
number, you have to test the following:

if ( (string)(int)$val === (string)$val ) ...

This is not the same as

if ( is_numeric($val) ) ...

cause

<?php

$a="0000001";
if ( is_numeric($a) ) echo "a is numeric";
if ( (string)(float)$a !== (string)$a) echo "a cannot be converted
100%-correctly";
?>

will output:
a is numeric
a cannot be converted 100%-correctly

Ok, ok, I know. This is a hysteric type-check. It depends on the type of
application, if you use it. The aim should always be, that the user could be
warned, if the value cannot be stored in the way, the user types it into.

Why? Therefore is the following example:
If you set
$a="1E+17";
the above script says that it is all right.

But then we want to convert to INT, not FLOAT. is_numeric() doesn't distinct
between INT and FLOAT, so a is_numeric('1E+17') is true, but the Integer of it
returns 1, which isn't perhaps, what the user expects.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jan 8 13:41:44 2012 UTC
Received cookie: COUNTRY=JPN%2C1.113.51.124
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012

view this page in

[English             ] Change language
strstr

(PHP 4, PHP 5)

strstr — 文字列が最初に現れる位置を見つける

説明

string strstr ( string $haystack , mixed $needle [, bool $before_needle = false
] )

haystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。

    注意:

    この関数は大文字小文字を区別することに注意してください。大文字小文字を区別
    しない検索を行う場合は、stristr() を使用してください。

    注意:

    もし特定の haystack に needle があるかどうかを調べるだけの場合、より高速で
    メモリ消費も少ない strpos() を代わりに使用してください。

パラメータ

haystack

    入力文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

before_needle

    TRUE にすると、strstr() の返り値は、haystack の中で最初に needle があらわれ
    る箇所より前の部分となります。

返り値

部分文字列を返します。 needle が見つからない場合は FALSE を返します。

変更履歴

バージョン                          説明
5.3.0      オプションの before_needle パラメータが追加されました。
4.3.0      strstr() がバイナリセーフとなりました。

例

例1 strstr() の例

<?php
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // @example.com と表示します

$user = strstr($email, '@', true); // PHP 5.3.0 以降
echo $user; // name と表示します
?>

参考

  • preg_match() - 正規表現によるマッチングを行う
  • stristr() - 大文字小文字を区別しない strstr
  • strpos() - 文字列内の部分文字列が最初に現れる場所を見つける
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す



strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 06 Jan 2012
 
add a note add a note User Contributed Notes strstr
xydon1 at yahoo dot com 31-Aug-2011 10:03
I explained this to my newbies the difference though it would be good to
demonstrate this here. If you are evaluating a list you cannot use strstr as it
looks for any occurance. The correct way is the function which evaluates a true
or false on the exact value to check.

In the following example I have a list of promotion ids I want to evaluate
whether or not a promotion exists:

<?php
//Wrong
$promotion = strstr("25,56","2");
if($promotion){
  echo "found";
}else{
  echo "not found";
}

//right
function detectPromotion($string,$promotion){
  foreach(explode(",",$string) as $promotionToCheck){   
    echo "checkin ".$promotionToCheck."==".$promotion."<br/>";   
    if($promotionToCheck==$promotion){
      $promotionFound=true;
    }
  }
  return $promotionFound;
}

echo detectPromotion("2,56","2");
?>
gruessle at gmail dot com 20-Apr-2011 08:39
Been using this for years:

<?php
/**
*
* @author : Dennis T Kaplan
*
* @version : 1.0
* Date : June 17, 2007
* Function : reverse strstr()
* Purpose : Returns part of haystack string from start to the first occurrence
of needle
* $haystack = 'this/that/whatever';
* $result = rstrstr($haystack, '/')
* $result == this
*
* @access public
* @param string $haystack, string $needle
* @return string
**/

function rstrstr($haystack,$needle)
    {
        return substr($haystack, 0,strpos($haystack, $needle));
    }
?>

You could change it to:
rstrstr ( string $haystack , mixed $needle [, int $start] )
<?php

function rstrstr($haystack,$needle, $start=0)
    {
        return substr($haystack, $start,strpos($haystack, $needle));
    }

?>
w3b_monk3y at yahoo dot com 20-Jan-2009 08:28
If you want to emulate strstr's new before_needle parameter pre 5.3 strtok is
faster than using strpos to find the needle and cutting with substr. The amount
of difference varies with string size but strtok is always faster.
tim 26-Nov-2007 12:42
I simplified prafe at prafesplace dot com's function:

<?php
function strstrbi($haystack, $needle, $before_needle=FALSE, $include_needle=
TRUE, $case_sensitive=FALSE) {
 //Find the position of $needle
 if($case_sensitive) {
  $pos=strpos($haystack,$needle);
 } else {
  $pos=strpos(strtolower($haystack),strtolower($needle));
 }
 
 //If $needle not found, abort
 if($pos===FALSE) return FALSE;
 
 //Adjust $pos to include/exclude the needle
 if($before_needle==$include_needle) $pos+=strlen($needle);
 
 //get everything from 0 to $pos?
 if($before_needle) return substr($haystack,0,$pos);
 
 //otherwise, go from $pos to end
 return substr($haystack,$pos);
}
?>

It's now 600 bytes, down from 2k.

Also, here are replacements for strstr and stristr:

<?php
function strstr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos($haystack,$needle))===FALSE) return FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}

function stristr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos(strtolower($haystack),strtolower($needle)))===FALSE) return
FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}
?>
brett dot jr dot alton at gmail dot com 25-Nov-2007 04:02
For the needle_before (first occurance) parameter when using PHP 5.x or less,
try:

<?php
$haystack = 'php-homepage-20071125.png';
$needle = '-';
$result = substr($haystack, 0, strpos($haystack, $needle)); // $result = php
?>
prafe at prafesplace dot com 22-Nov-2007 05:14
If you want to use the $before_needle parameter that's only in PHP 5.3.0, I
found a way to use it in lower versions.

The code is a bit hefty, but it works. It also has added $include_needle and
$case_sensitive.

<?php
// ==== I don't guarantee this is faster than the PHP 6 before needle, ====
// ====  but it works for PHP below 6 atleast. ====
// ==== IT ALSO HAS INCLUDE NEEDLE BOOLEAN.. ====
function strstrbi($haystack,$needle,$before_needle,
$include_needle,$case_sensitive)
{
  $strstr = ($case_sensitive) ? 'strstr' : 'stristr';
  if($before_needle!=true && $before_needle!=false && isset($before_needle)){
      die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' :  parameter
'. chr(39).'$before_needle'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$before_needle'

  if($include_needle!=true && $include_needle!=false && isset($include_needle))
{
    die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' : parameter '.
chr(39).'$include_needle'.chr(39). ' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$include_needle'

  if($case_sensitive!=true && $case_sensitive!=false && isset($case_sensitive))
{
    die('PHP: Error in function '.chr(39).'$strstrbi' .chr(39).' : parameter '.
chr(39).'$case_sensitive'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$case_sensitive'

  if(!isset($before_needle)){
    $before_needle=false;
  }

  if(!isset($include_needle)){
    $include_needle=true;
  }

  if(!isset($case_sensitive)){
    $case_sensitive=false;
  }

  switch($before_needle){
    case true:
      switch($include_needle){
        case true:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),0));
          break;
        // END case true : $include_needle
        case false:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),1));
          break;
        // END case false : $include_needle
      }
      break;
    // END case true : $before_needle
    case false:
      switch($include_needle){
        case true:
          $ret=$strstr($haystack,$needle);
          break;
        // END case true: $include_needle
        case false:
          $ret=substr($strstr($haystack,$needle),1);
          break;
        // END case false: $include_needle
    }
    break;
    // END case false : $before_needle
  }

  if(!empty($ret)){
    return $ret;
  }else{
    return false;
  }
}
// === END FUNCTION 'strstrbi'

// Example

$email  = 'user@example.com';
$domain = strstrbi($email, '@', false, false, false);
echo $domain; // prints example.com

$user = strstrbi($email, '@', true, false, false);
echo $user; // prints user
?>
root at mantoru dot de 10-Nov-2007 11:22
Please note that $needle is included in the return string, as shown in the
example above. This ist not always desired behavior, _especially_ in the
mentioned example. Use this if you want everything AFTER $needle.

<?php
function strstr_after($haystack, $needle, $case_insensitive = false) {
    $strpos = ($case_insensitive) ? 'stripos' : 'strpos';
    $pos = $strpos($haystack, $needle);
    if (is_int($pos)) {
        return substr($haystack, $pos + strlen($needle));
    }
    // Most likely false or null
    return $pos;
}

// Example
$email = 'name@example.com';
$domain = strstr_after($email, '@');
echo $domain; // prints example.com
?>
gigaman2003 at halfempty dot co dot uk 24-Feb-2007 08:48
Often you will need to find all occurrences of a string (for security escapes
and such)

So I wrote this function to return an array with the locations of all the
occurrences. Almost like an advanced strstr.

<?php
function findall($needle, $haystack)
{
    //Setting up
    $buffer=''; //We will use a 'frameshift' buffer for this search
    $pos=0; //Pointer
    $end = strlen($haystack); //The end of the string
    $getchar=''; //The next character in the string
    $needlelen=strlen($needle); //The length of the needle to find (speeds up
searching)
    $found = array(); //The array we will store results in
   
    while($pos<$end)//Scan file
    {
        $getchar = substr($haystack,$pos,1); //Grab next character from pointer
        if($getchar!="\n" || buffer<$needlelen) //If we fetched a line break,
or the buffer is still smaller than the needle, ignore and grab next character
        {
            $buffer = $buffer . $getchar; //Build frameshift buffer
            if(strlen($buffer)>$needlelen) //If the buffer is longer than the
needle
            {
                $buffer = substr($buffer,-$needlelen);//Truncunate backwards to
needle length (backwards so that the frame 'moves')
            }
            if($buffer==$needle) //If the buffer matches the needle
            {
                $found[]=$pos-$needlelen+1; //Add the location of the needle to
the array. Adding one fixes the offset.
            }
        }
        $pos++; //Increment the pointer
    }
    if(array_key_exists(0,$found)) //Check for an empty array
    {
        return $found; //Return the array of located positions
    }
    else
    {
        return false; //Or if no instances were found return false
    }
}
?>

Haven't had the chance to speed test it, but many optimizations should be
possible. It just works enough for me. Hope it saves someone a lot of time.
06-Jun-2005 04:13
suggestion for [leo dot nard at free dot fr]:
to be able to cut the string without having the html entities being cut in
half, use this instead:

<?php

$oldstr = "F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller
skandinaviska (eller Franska, f&ouml;r den delen) tecken, kan man g&ouml;ra s&
aring;h&auml;r...";

$length = 50;

# First, first we want to decode the entities (to get them as usual chars),
then cut the string at for example 50 chars, and then encoding the result of
that again.

# Or, as I had it done, in one line:
$newstr = htmlentities(substr(html_entity_decode($oldstr), 0, $length));
$newstr2 = substr($oldstr, 0, $length);
# It's not quite as much code as the snippet you've coded to remove the
half-portions... ;)
# Hopefully somebody finds this useful!
echo "Without the decode-encode snippet:
$newstr2

With the decode-encode snippet:
$newstr";
?>

The above outputs this:

Without the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&ar

With the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller skandin

First post in this db ;)
Best regards, Mikael R nn, FIN
leo dot nard at free dot fr 24-May-2005 09:12
When encoding ASCII strings to HTML size-limited strings, sometimes some HTML
special chars were cut.

For example, when encoding "��" to a string of size 10, you would get: "à&a" =>
the second character is cut.

This function will remove any unterminated HTML special characters from the
string...

<?php
function cut_html($string)
{
    $a=$string;

    while ($a = strstr($a, '&'))
    {
        echo "'".$a."'\n";
        $b=strstr($a, ';');
        if (!$b)
        {
            echo "couper...\n";
            $nb=strlen($a);
            return substr($string, 0, strlen($string)-$nb);
        }
        $a=substr($a,1,strlen($a)-1);
    }
    return $string;
}
?>
Romuald Brunet 21-Jan-2004 08:25
Regarding the note of the manual concerning the speed of strstr against strpos,
for people who wants to check a needle occurs within haystack, it apprears that
strstr() is in facts faster than strpos().

Example:
<?php
// [VERY] Quick email check:
if ( strstr("email@domain.tld", "@") ) {
// Ok
}
?>

is faster than

<?php
if ( strpos("email@domain.tld", "@") !== FALSE ) {
// Ok
}

Without using the true equality with !==, strpos() is faster. But then if the
haystack starts with needle the condition whould not be met.
php at silisoftware dot com 14-Feb-2003 11:37
PHP versions before 4.3.0 (tested on 4.2.2 and 4.2.3) return the $haystack from
$needle only up to the first null character. So for example:

<?php
$string = strstr("one#two\x00three", "#");
// PHP 4.2.x:  $string contains "#two"
// PHP 4.3.0:  $string contains "#two\x00three"
?>

If you're trying to match nulls, you will probably get back an empty string:

<?php
$string = strstr("one#two\x00three", "\x00");
// PHP 4.2.x:  $string contains ""
// PHP 4.3.0:  $string contains "\x00three"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Jan 7 17:41:45 2012 UTC
Received cookie: COUNTRY=JPN%2C114.48.251.110
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • その他の基本モジュール
  • その他
  • その他の関数
  • connection_ aborted
  • connection_ status
  • connection_ timeout
  • constant
  • define
  • defined
  • die
  • eval
  • exit
  • get_ browser
  • _ _ halt_ compiler
  • highlight_ file
  • highlight_ string
  • ignore_ user_ abort
  • pack
  • php_ check_ syntax
  • php_ strip_ whitespace
  • show_ source
  • sleep
  • sys_ getloadavg
  • time_ nanosleep
  • time_ sleep_ until
  • uniqid
  • unpack
  • usleep

exit> <die
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Dec 2011

view this page in

[English             ] Change language
eval

(PHP 4, PHP 5)

eval — 文字列を PHP コードとして評価する

説明

mixed eval ( string $code )

指定した code を PHP コードとして評価します。

警告

eval() は非常に危険な言語構造です。というのも、任意の PHP コードを実行できてし
まうからです。これを使うことはおすすめしません。いろいろ検討した結果どうしても
使わざるを得なくなった場合は、細心の注意を払って使いましょう。ユーザから受け取
ったデータをそのまま渡してはいけません。渡す前に、適切な検証が必要です。

パラメータ

code

    有効な PHP コード。これを評価します。

    PHP 開始タグを含めてはいけません。つまり、 '<? echo "Hi!"; >' ではなく
    'echo "Hi!";' を渡さなければならないということです。適切に PHP タグを使えば
    、PHP モードからいったん抜けてもう一度 PHP モードに戻るということも可能です
    。たとえば、このようになります。 'echo "PHP モード!"; ?>HTML モード!<? echo
    "ふたたび PHP モード!";'

    それはさておき、渡すコードは PHP として有効な形式でなければなりません。つま
    り、すべての文はセミコロンで終了する必要があるということです。たとえば
    'echo "やあ!"' はパースエラーになりますが、 'echo "やあ!";' は動作します。

    return 文は、コードの評価をただちに終了します。

    コードの実行は、eval() を呼び出したスコープ内で行われます。したがって、eval
    () の中で定義したり変更したりした変数は eval() を抜けた後でも参照可能です。

返り値

評価されるコードの中で return がコールされない限り、eval() は NULL を返します。
return がコールされた場合は、その値を返します。評価されるコードの中でパースエラ
ーが発生した場合は、 eval() は FALSE を返します。それ以降のコードは通常通り実行
されます。 eval() の中でのパースエラーを set_error_handler() で捕捉することはで
きません。

例

例1 eval() の例 - 簡単なテキストのマージ

<?php
$string = 'cup';
$name = 'coffee';
$str = 'This is a $string with my $name in it.';
echo $str. "\n";
eval("\$str = \"$str\";");
echo $str. "\n";
?>

上の例の出力は以下となります。

This is a $string with my $name in it.
This is a cup with my coffee in it.

注意

    注意: これは、関数ではなく言語構造のため、可変関数を用いてコールすることは
    できません。

ヒント

ブラウザに直接結果を出力するすべてのものと同様に、出力制御関数を使用してこの関
数の出力をキャプチャーし、(例えば)文字列 (string)に保存することが可能です。

    注意:

    評価されるコードの中で致命的なエラーが発生した場合は、スクリプト全体が終了
    します。

参考

  • call_user_func() - 最初の引数で指定したコールバック関数をコールする



exit> <die
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Dec 2011
 
add a note add a note User Contributed Notes eval
socram8888 at gmail dot com 12-Nov-2011 08:18
It may be a bit obvious, but if you don't want eval'd code to interfere with
main code variables, all you have to do is to call an eval from another
function like this:

<?php
function localeval($code) {
    return eval($code);
};

$a = "a";
echo '$a before eval code: ' . $a . "\n"; // prints "a"
localeval('$a = \'b\';');
echo '$a after localeval: ' . $a . "\n"; // still prints "a"
eval('$a = \'b\';');
echo '$a after eval: ' . $a . "\n"; // prints "b"
?>
kevin at NOSPAM dot schinkenbraten dot de 20-Oct-2011 12:23
Hey guys.
With the eval()-function it is possible to create functions with specific
names.

Imagine if you have an Array and want to create some function of these names.

<?php

// Setting up the names for the functions.
$names = Array ( "foo", "bar", "test", "foobar");
$prefix = "func_";

// Running a loop for the names and setting up the functions.
foreach ($names as $j) {
    $function = $prefix.$j;
    $code = "function ".$function." () {
                     echo '".$j."<br />';
                 }";
    eval($code);
}

// Now we can run the functions easily now.
func_foo();
func_bar();
func_test();
func_foobar();

?>

Output will be:
foo
bar
test
foobar

--------
The point is that you don't have to run the function from a variable
[create_function()].
I hope this is helpful for someone. ;) Kevin
sfinktah at php dot spamtrak dot org 09-Apr-2011 11:17
If you really want a bullet-proof eval, you can use a socket_pair and fork(). 
(Not tested under windows).

<?php

function lookupErrorCode($errno) { static $lookup = false;
        if ($lookup == false) foreach (array("E_ERROR", "E_WARNING", "E_PARSE",
"E_NOTICE",
                "E_CORE_ERROR", "E_CORE_WARNING", "E_COMPILE_ERROR",
"E_COMPILE_WARNING",
                "E_USER_ERROR", "E_USER_WARNING", "E_USER_NOTICE", "E_STRICT",
"E_RECOVERABLE_".
                "ERROR", "E_DEPRECATED", "E_USER_DEPRECATED") as $k => $v)
$lookup[1<<$k] = $v;
        return (!empty($lookup[$errno]) ? $lookup[$errno] : "UNKNOWN"); }

function child_exit_handler($socket = NULL) {
        static $paired_socket = false;
        if ($socket || $socket === false) return $paired_socket = $socket;
        if ($paired_socket) {
                $e = error_get_last();
                $result = "ERROR_" . lookupErrorCode($e["type"]) . ":  {$e
["message"]}";
                if (socket_write($paired_socket, $result, strlen($result)) ===
false)
                        echo "socket_write() failed. Reason: ".socket_strerror
(socket_last_error($sockets[0]));
                socket_close($sockets[0]);
        }
        exit(2);        # Child Process Dies, writing an error to it's paired
socket.
}

function forked_eval($eval) {
        $sockets = array();

        /* On Windows we need to use AF_INET */
        $domain = (strtoupper(substr(PHP_OS, 0, 3)) == 'WIN' ? AF_INET :
AF_UNIX);

        /* Setup socket pair */
        if (socket_create_pair($domain, SOCK_STREAM, 0, $sockets) === false) {
                echo "socket_create_pair failed. Reason: ".socket_strerror
(socket_last_error());
        }

        switch ($child = pcntl_fork()) {
        case -1:
                throw new Exception("Could not fork");
        case 0:
                # Child Thread
                register_shutdown_function("child_exit_handler");
                child_exit_handler($sockets[0]); # Register the socket
                $result = serialize(eval($eval));
                child_exit_handler(false);                      # We didn't
crash
                if (socket_write($sockets[0], $result, strlen($result)) ===
false)
                        echo "socket_write() failed. Reason: ". socket_strerror
(socket_last_error($sockets[0]));
                socket_close($sockets[0]);
                exit(3);
        default :
                # Parent Thread
                if (($nread = socket_recv($sockets[1], $data, 1<<16, 0)) < 1)
                        echo "socket_read() failed. Reason: ".socket_strerror
(socket_last_error($sockets[1]));
                if (!strncmp($data, "ERROR_", 6)) {
                        return substr($data, 6); # throw new Exception(substr
($data, 6));
                }

                socket_close($sockets[1]);
                return unserialize($data);
        }
}

function safe_eval($cmd, $str = false, $file = false, $line = false, $context =
false) {
        static $err_strings = array();
        if ($cmd === true) return count($err_strings) ? $err_strings : false;
        if ($str !== false)
                return ($err_strings[] = lookupErrorCode($cmd) . ":  $str in
$file on line $line") && true;
        $err_strings = array(); $old_error_handler = set_error_handler
(__FUNCTION__, E_ALL);
        $rv = @eval("return true; $cmd") ? forked_eval($cmd)
                : ($or = error_get_last()) && call_user_func_array
(__FUNCTION__, $or);
        restore_error_handler(); return $rv;
}

foreach (array( "return sleep(2) && foobar();"
        , "return date('Y-m-d');" , "return touch('/error/error/error') ? 'OK'
: 'Failed';"
        , "return ==" , "return 2 + array();" , "return foobar();" , "return 2;
") as $cmd) {
                printf("\nAttempting to evaluate: $cmd\n"); $rv = safe_eval
($cmd);
                printf("%s\n", ($e = safe_eval(true)) ? "ERROR: $e" : "Result:
$rv"); }
?>
Mark Simon 01-Mar-2011 11:29
I have looked for a simple way of forcing PHP to interpolate strings after the
event (that is, after they have already been assigned, say from a text file).

The following seems to work:

<?php
    $text='$a + $b = $c';
    $a=2; $b=3; $c=$a+$b;
    print eval("return<<<END\n$text\nEND;\n");
?>

I have even tried it with some potentially evil code, but the context seems to
preclude interpreting it as anything other than a string.

Mark
Jordan Rutty 28-Feb-2011 03:52
This function is to automatically sort a 2 dimensional array (like that from
mysql fetches) into unlimited dimension array's

<?php
/*
@param $array mysql fetch array
@param $row_key array of rowkeys to be used ex array('country', 'state',
'city');
*/

    function LoopRowKey($array, $row_key, &$result=null){
        foreach($array as $key => $value){
            $i='';
            $row_key = (array)$row_key;
                foreach($row_key as $var){
                    if(isset($value[$var])){
                        $var = $value[$var];
                        $i .= "['$var']";
                    }
                }
                eval("\$result$i".'[]'." = \$value;");
        }
        return $result;
    }

//this function will turn:
$array = array{
    array{
        'id' => '1',
        'country' => 'canada',
        'state' => 'QC',
        'city' => 'montreal',
    }
    array{
        'id' => '2',
        'country' => 'canada',
        'state' => 'ON',
        'city' => 'toronto',
    }
    array{
        'id' => '3',
        'country' => 'canada',
        'state' => 'QC',
        'city' => 'quebec',
    }
};

$row_key = array('country', 'state');

$result = LoopRowKey($array, $row_key);

//will give

$result = array{
    'canada' => array{
        'QC' => {
                '0' => array{
                    'id' => '1',
                    'country' => 'canada',
                    'state' => 'QC',
                    'city' => 'montreal',
                }
                '1' => array{
                    'id' => '3',
                    'country' => 'canada',
                    'state' => 'QC',
                    'city' => 'quebec',
                }
            }
        }
        'ON'    => {
            '0' => array{
                'id' => '2',
                'country' => 'canada',
                'state' => 'ON',
                'city' => 'toronto',
            }
        }
};
?>
piyush25378 at gmail dot com 26-Nov-2010 09:18
When using the eval() function like
eval('?>' . $data['content'] . '<?');

Please be sure to check that the short_open_tag is on in php.ini. Otherwise it
will append the opening tag to the string.

If you are using eval function like
eval('?>' . $data['content'] . '<?php'); and you have short_open_tag on there
will be parse error. So if it is required to use function like this turn off
short_open_tags.
Also it is advisable to put a space after <?php to avoid any accidental error.
jason at joeymail dot net 21-Sep-2010 07:03
An alternative to using eval to mimic include - is to just use include on an
in-memory stream. This allows a user-cooked class to pretend it is a stream, so
methods which expect a stream or URL will be happy (like include)

i) register a global variable stream wrapper using stream_wrapper_register().
(search the man page for "Example class registered as stream wrapper")

ii) use file_get_contents (or db read or...) to read your php script into a
global variable.
eg
$GLOBALS['yourvar']=file_get_contents('somefile.php');

iii) call include with the URL you registered. Using the example wrapper above:
include 'var://yourvar';

Easy as. Not a magic regexp in sight!  Enjoy.
php at rijkvanwel dot nl 13-Sep-2010 02:41
To catch a parse error in eval()'ed code with a custom error handler, use
error_get_last() (PHP >= 5.2.0).

<?php
$return = eval( 'parse error' );

if ( $return === false && ( $error = error_get_last() ) ) {
    myErrorHandler( $error['type'], $error['message'], $error['file'], $error
['line'], null );

    // Since the "execution of the following code continues normally", as
stated in the manual,
    // we still have to exit explicitly in case of an error
    exit;
}
?>
php at dynamicplus dot it 02-Jul-2010 10:53
Please note that using
eval( 'return TRUE;?>' . $sPhpCode );

is not safe to check if syntax is correct... as this will procuce a fatal error
(uncatchable)....

eval( 'return TRUE;?><?php empty( function($var) ); ?>' );

using empty() on a non-pure variable will produce a
compilation error!
darkhogg (foo) gmail (bar) com 30-Mar-2010 06:33
The following code

<?php
    eval( '?> foo <?php' );
?>

does not throw any error, but prints the opening tag.
Adding a space after the open tag fixes it:

<?php
    eval( '?> foo <?php ' );
?>
vladimiroski at gmail dot com 25-Feb-2010 11:18
Please note that when you do something like this:

<?php
eval('?>' . $code . '<?');
?>

You must end it with '<?' because the following will give you a parse error:
<?php
eval('?>' . $code . '<?php');
?>

Somehow eval() only likes PHP opening short-tag AKA '<?' but fails with '<?php'
john dot risken at gmail dot com 25-Feb-2010 06:35
A simple use of eval:

Sometimes you want to know both the value of a variable being passed to a
function and its name. Passing by reference can get you there, but only through
a lot of convolutions (as far as I can tell!)

But by using the stem of a variable's name, there are two methods to achieve
this.

Say that

<?php
$emailName="me@example.com";
?>

You can pass this information thusly:

First, if you have the stem, "emailName', in a string var

<?php
$theVarStem="emailName";
?>

you can recover the value of the original variable like this:

<?php
$theVarValue=eval("return \$$theVarStem;");
?>

Using 'return' inside the eval is the trick that makes it work - something
inherent in the documentation  but not at all obvious to me.

Unless $emailName has global scope, this method won't work inside a function.
For that purpose, you can do the following:

<?php
myFunction(compact("emailName"))

function myFunction($theInfo)
{
   $theVarStem=key($theInfo);
   $theVarValue=current($theInfo);
   //...
}
?>

I apologize if all this seems too obvious: it took me a lotta sloggin' to
figure it out.
ajo at NO dot SPAM dot mydevnull dot net 05-Jan-2010 09:15
Inspired from the users microvalen at NOSPAM dot microvalen dot com and javis,
i combined their notes and came up with a very simple "template engine", for
testing purposes (to save the time and trouble of downloading and including a
real template engine like the Smarty):

<?php
$var = 'dynamic content';
echo eval('?>' . file_get_contents('template.phtml') . '<?');
?>

and the  template.phtml:
<html>
    <head>
    <!-- ... -->
    </head>
    <body>
        <!-- ... -->
        <?=$var?>
        <!-- ... -->
    </body>
</html>

This is something i use a lot (specially when studying new PHP Libraries or
trying new jQuery plugins) and i think it might help others too.
Nico 11-Aug-2009 10:27
eval and namespace

For those who wonder: since eval executes the code in another context than the
current script, it is possible to evaluate code that uses a particular
namespace without changing the current one (and it does not trigger an error if
there is no namespace and the evaluated one is not at the top of the script).
Exemple:

<?php
namespace Foo;

echo 'namespace 1: '.__NAMESPACE__."\n";
eval('namespace Bar;
      class BarClass {}
      echo \'namespace 2: \'.__NAMESPACE__."\n";');
echo 'namespace 1 again: '.__NAMESPACE__."\n";
?>

output:
namespace 1: Foo
namespace 2: Bar
namespace 1 again: Foo

And it will create the class Bar\BarClass.

Also, the eval code will not belong to the namespace of the code that do the
eval:

<?php
namespace Foo;

echo 'namespace 1: '.__NAMESPACE__."\n";
eval('class BarClass {}
       echo \'namespace 2: \'.__NAMESPACE__."\n";');
?>

output:
namespace 1: Foo
namespace 2: // global namespace
cmr at expansys dot com 31-Jul-2009 07:20
Fixed matheval function when percentage is less than 10:

<?php
function matheval($equation)
  {
    $equation = preg_replace("/[^0-9+\-.*\/()%]/","",$equation);
    // fix percentage calcul when percentage value < 10
    $equation = preg_replace("/([+-])([0-9]{1})(%)/","*(1\$1.0\$2)",$equation);
    // calc percentage
    $equation = preg_replace("/([+-])([0-9]+)(%)/","*(1\$1.\$2)",$equation);
    // you could use str_replace on this next line
    // if you really, really want to fine-tune this equation
    $equation = preg_replace("/([0-9]+)(%)/",".\$1",$equation);
    if ( $equation == "" )
    {
      $return = 0;
    }
    else
    {
      eval("\$return=" . $equation . ";" );
    }
    return $return;
  }
?>
webmaster at drakkofox dot net 29-May-2009 04:08
Never, Never ever forget the ";" on the end of the eval string, if you are
adding it to eval a variable attribuition;
<?php
  $data = "$key"."_$sequence";
  eval("\$idct=\$idedit_$data;");
?>

we took a long time to discover that the problem was a ";" missing in the end.
JURGEN AT PERSON DOT BE 12-Mar-2009 09:46
I updated my code because there are many abuses of the function eval() in
phpscripts to break security, privacy, to perform callbacks, to execute
commands on the server by remote.  This could not be allowed in a professional
environment which often deals with sensitive, important or financial data.

Code obfuscation is not a safe solution to protect Your source at all. As I do
disagree with some programmers to use any ( ! ) solution to encrypt php code. I
advocate to not scramble code and to not implement call home events (which hit
the firewall or reverse proxy anyway).   Call backs do violate privacy of the
user.  It can be considered as spyware, theft of information.  All serverside
code should be readable to to verify if no sensitive information is transfered
to the vendor or to verify it is not malware.  Running scrambled code is as
dangerous as to run a server without any security measures. That's why some
hosting providers refuse to run scrambled code on their servers. As programmer,
the best way You can do is to create many revisions of Your code,  as to
provide additional plugins, services and support for registered users.  So do
not encrypt a single line of code at all, do follow the opensource standard and
do respect privacy and the right of verification of the user of your scripts. 

So here is an updated version, to use with PHP-CLI  If it fails in the process,
You can invoke with the verbose option so You can follow the process and alter
this code.

----- snippet denest.php.sh -----------
#!/usr/bin/php
<?php
    // FILE: denest.php.sh
    // perform chmod +x denest.php.sh    

    echo "\nDECODE nested eval(gzinflate()) by DEBO Jurgen
<webmaster@purechocolates.com>\n\n";

    /* invokation php-cli:  #php denest.php <your_nested_script.php> <verbose
empty,0=OFF 1=ON> */                     

    $filename_full = $argv[1];
    $verbose       = (bool) $argv[2];
       
    $filename_base = basename ($filename_full,'.php');
    $content       = "";
  
    echo "Using: ".$filename_base.".php\n";   
    echo "Read...\n";
    $fp1      = fopen ($filename_full, "r");
    $content  = fread ($fp1, filesize ($filename_full));
    fclose($fp1);
  
    echo "Decode...\n";
    while ( is_nested($content) ) $content=denest($content);
    dump($content,TRUE);
   
    function is_nested ($text) {
    return preg_match("/eval\(gzinflate/",$text);
    }

    function denest ($text) {

    global $verbose;

        $text=preg_replace("/<\?php|<\?|\?>/", "", $text);
    if ($verbose) dump ($text,FALSE);
        eval(preg_replace("/eval/", "\$text=", $text));
    if ($verbose) dump ($text,FALSE);
    return $text;
    }       

    function dump ($text,$final) {
   
    static $counter = 0 ;
    global $filename_base;
   
    $filename_new = ($final) ? ($filename_base.".done.php") :
($filename_base.".".sprintf("%04d", ++$counter).".php");

    echo "Writing ".$filename_new."\n";
    $fp2 = fopen($filename_new,"w");
        fwrite($fp2, trim($text));
        fclose($fp2);
    }
?>
----- snippet denest.php.sh -----------
microvalen at NOSPAM dot microvalen dot com 22-Feb-2009 06:44
very simple example to includea html file:

<?php

$simple_var = 'This is a simple var';

eval("\$file=\"" . addslashes(implode("", file("test.html"))) . "\";");
print $file;

?>

and the html:
<body>
$simple_var
</body>
javis 09-Feb-2009 09:54
you can actually run strings with html and php code. To do that you need to
append ?> and <? simbols like this:

<?php eval("?>" . $code . "<?"); ?>
php at stock-consulting dot com 28-Nov-2008 04:16
Magic constants like __FILE__ may not return what you expect if used inside
eval()'d code. Instead, it'll answer something like "c:\directory\filename.php
(123) : eval()'d code" (under Windows, obviously, checked with PHP5.2.6) -
which can still be processed with a function like preg_replace to receive the
filename of the file containing the eval().

Example:

<?php
$filename = preg_replace('@\(.*\(.*$@', '', __FILE__);
echo $filename;
?>
maurice at chandoo dot de 07-Nov-2008 11:20
<?php
function safe_eval($code,&$status) { //status 0=failed,1=all clear
    //Signs
        //Can't assign stuff
    $bl_signs = array("=");

    //Language constructs
    $bl_constructs = array("print","echo","require","include","if","else",
"while","for","switch","exit","break");   

    //Functions
    $funcs = get_defined_functions();
    $funcs = array_merge($funcs['internal'],$funcs['user']);

    //Functions allowed       
        //Math cant be evil, can it?
    $whitelist = array("pow","exp","abs","sin","cos","tan");
   
    //Remove whitelist elements
    foreach($whitelist as $f) {
        unset($funcs[array_search($f,$funcs)]);   
    }
    //Append '(' to prevent confusion (e.g. array() and array_fill())
    foreach($funcs as $key => $val) {
        $funcs[$key] = $val."(";
    }
    $blacklist = array_merge($bl_signs,$bl_constructs,$funcs);
   
    //Check
    $status=1;
    foreach($blacklist as $nono) {
        if(strpos($code,$nono) !== false) {
            $status = 0;
            return 0;
        }
    }

    //Eval
    return @eval($code);
}
?>

Note: Try to include this after all of your other self-defined functions and
consider whether the blacklist is appropriate for your purpose

I wouldn't recommend this function if you're going to use eval extensively in
your script. However, it's worth a try if you are going to put user input into
eval
alexis at amigo dot com 05-Nov-2008 04:20
eval vs include

i have to make a script to take code from a database and excute it, but i'm not
sure is eval was hight server load than include, so i take the example of Luke
at chaoticlogic dot net and test it, the results are great for eval:

test.php
<?php
//establish a blank integer
$increment=0;

//establish the code to be executed
//one hundred million times
$code="\$increment++;";

//remember the time this test started
$started=time();

//execute $code on hundred million times
for ($i=0;$i<100000;$i++) {
    eval($code);
}
//find out how long it took, in
//seconds
$ended=time();
$spent=$ended-$started;

//tell the user this
print "Eval()ed code took $spent seconds to execute 100,000 times.\n";

//re-establish that same blank integer
$increment=0;

//remember the time this second test
//started
$started=time();

//execute the test again, with
//pre-parsed code
for ($i=0;$i<100000;$i++) {
include("increment.php");
}
//find out how long it took, in
//seconds
$ended=time();
$spent=$ended-$started;

//tell the user this
print "Included file with Pre-parsed code took $spent seconds to execute
100,000 times.\n";
?>

increment.php
<?php
    $increment++;
?>

Eval()ed code took 0 seconds to execute 100,000 times. Included file with
Pre-parsed code took 17 seconds to execute 100,000 times.

i change 100,000,000 for 100,000 because the script take so much time
Mark dot Sheppard at disney dot com 30-Oct-2008 11:13
One thing to note is that an exit() call inside an eval() exits the entire
script, *not* just the eval(), which is what you'd expect if you've ever used
eval() in any other language.  This makes it somewhat useless in my opinion.
luke at cywh dot com 17-Sep-2008 08:12
Finally, a good use for eval :)!

If you want to be able to check for syntax errors WITHOUT executing the code,
add "return true;" before all the code. All execution of the code stops after
that mark, and makes eval returns true on no syntax errors, and false on syntax
errors.

This is especially useful for anyone making a template system.

Here's a working example:

<?php

function check_syntax($code) {
    return @eval('return true;' . $code);
}

print "<b>No Code execution:</b><br />\n";
$code = "print \"<b><i>hello! you don't want me...</i></b><br />\n\";";
var_dump(check_syntax($code)); // Good syntax
print "<br />\n";
var_dump(check_syntax($code . ' ==')); // Bad syntax
print "<br />\n";

print "<b>Code Executed...Bad</b>:<br />\n";
var_dump(eval($code) === null); // Good syntax
print "<br />\n";
var_dump(@eval($code . ' ==') === null); // Bad syntax

?>
asohn at aircanopy dot net 11-Sep-2008 08:45
<?php
$hello[2][4][6][8][10] = 'this is a test';
$w = "[2]";
$o = "[4]";
$r = "[6]";
$l = "[8]";
$d = "[10]";
echo 'hello, '.eval("return \$hello$w$o$r$l$d;");
?>
The above will output:
hello, this is a test
marco at harddisk dot is-a-geek dot org 30-Jun-2008 05:44
eval does not work reliably in conjunction with global, at least not in the
cygwin port version.

So:
<?PHP
class foo {
  //my class...
}
function load_module($module) {
  eval("global \$".$module."_var;");
  eval("\$".$module."_var=&new foo();");
  //various stuff ... ...
}
load_module("foo");
?>

becomes to working:

<?PHP
class foo {
  //my class...
}
function load_module($module) {
  eval('$GLOBALS["'.$module.'_var"]=&new foo();');
  //various stuff ... ...
}
load_module("foo");
?>

Note in the 2nd example, you _always_ need to use $GLOBALS[$module] to access
the variable!
trukin at gmail dot com 11-Jun-2008 03:58
The EVAL function can be used  as a fast Template system.

<?php
function parseTemplate($template, $params=array()) {
  foreach ($params as $k=>$v) {
     $$k = $v;
  }
  ob_start();
  eval("?>" . implode("", file($template)) . "<?");
  $c = ob_get_contents();
  ob_end_flush();
  return $c;
}
?>

Example:
<?php

echo parseTemplate("myTemplate.php", array('account'=>$row));
?>

and myTemplate.php can be like

<?php foreach($account as $k=>$v) : ?>
  <?php echo $k; ?>: <?php echo $v; ?>
<?php endforeach; ?>
Ivan Zahariev 02-Apr-2008 09:09
It seems that the Magic constants (http://www.php.net/manual/en/
language.constants.predefined.php) do NOT work in an eval()'ed code.

Probably because PHP substitutes these statically when it compiles the source
code of your PHP script initially.

So the following will not work as expected:
<?php
function user_func1() {
    echo "User function name: ".__FUNCTION__."\n";
    eval('echo "in eval(): User function name: ".__FUNCTION__."\n";');
}
?>

Calling user_func1() will output:
  User function name: user_func1
  User function name:
Luke at chaoticlogic dot net 02-Apr-2008 08:26
I thought it was pertinent to demonstrate just how slow the eval() function is
when compared to pre-parsed code, so I wrote this.

In my case, it took 54 seconds to execute the code 100,000,000 times through
eval(), and only 4 seconds with pre-parsed code.
<?php
//establish a blank integer
$increment=0;

//establish the code to be executed
//one hundred million times
$code="\$increment++;";

//remember the time this test started
$started=time();

//execute $code on hundred million times
for ($i=0;$i<10000000;$i++) {
    eval($code);
}
//find out how long it took, in
//seconds
$ended=time();
$spent=$ended-$started;

//tell the user this
print "Eval()ed code took $spent seconds to execute 100,000,000 times.\n";

//re-establish that same blank integer
$increment=0;

//remember the time this second test
//started
$started=time();

//execute the test again, with
//pre-parsed code
for ($i=0;$i<10000000;$i++) {
    $increment++;
}
//find out how long it took, in
//seconds
$ended=time();
$spent=$ended-$started;

//tell the user this
print "Pre-parsed code took $spent seconds to execute 100,000,000 times.\n";
?>
I wish there was some way to parse code, store the pre-parsed binary in a
variable, and then tell PHP to execute that variable as if it was part of the
program.
Ipseno at yahoo dot com 25-Feb-2008 06:24
If you attempt to call a user defined function in eval() and .php files are
obfuscated by Zend encoder, it will result in a fatal error.

Use a call_user_func() inside eval() to call your personal hand made functions.

This is user function
<?php

function square_it($nmb)
{
    return $nmb * $nmb;
}

?>

//Checking if eval sees it?
<?php

$code = var_export( function_exists('square_it') );

eval( $code );    //returns TRUE - so yes it does!

?>

This will result in a fatal error:
PHP Fatal error:  Call to undefined function square_it()
<?php

$code = 'echo square_it(55);' ;

eval( $code );

?>

This will work
<?php

$code = 'echo call_user_func(\'square_it\', 55);' ;

eval( $code );

?>
pierrotevrard at gmail dot com 03-Jul-2007 03:58
A wonderful world of eval() applications

You certainly know how to simulate an array as a constant using eval(), not ?
See the code below:

<?php

if( ! defined('MY_ARRAY') )
{
  define( 'MY_ARRAY' , 'return ' . var_export( array( 1, 2, 3, 4, 5 ) , true )
. ';' );
}

?>

And far, far away in your code...

<?php

$my_array = eval( MY_ARRAY );

?>

But the grandeur of eval is when you use it to customize some method of a class
:

<?php

if( ! class_exists( 'my_class' ) )
{
  class my_class
  {
    //private propreties
    var $_prop;
    var $_custom_check = 'return true;'; //of course, I want a default check
code that return true

    //PHP4 constructor
    function my_class()
    {
      $this -> _prop = eval( MY_ARRAY );
    }

    function customize_check( $code )
    {
      $this -> _custom_check = $code;
    }

    function check( $val )
    {
      return eval( $this -> _custom_check );
    }

  }
}

$my_class = new my_class();

$check = 'return in_array( $val , $this -> _prop , true );';
$my_class -> customize_check( $check );

print '<pre>';
if( $my_class -> check( 1 ) )
{
   echo '1 is checked as true.' . "\n";
}
else
{
   echo '1 is checked as false.' . "\n";
}
//show: 1 is checked as true.

if( $my_class -> check( '1' ) )
{
   echo '"1" is checked as true.' . "\n";
}
else
{
   echo '"1" is checked as false.' . "\n";
}
//show: "1" is checked as false.

print '</pre>';

?>

The application of eval() using propreties of a class gives you so much
possibilities...
Of course, combinate with a safer eval code, will be better but if you use it
only in your code ( for framework project by example ) that's note necessary...

Have fun.
udo dot schroeter at gmail dot com 26-May-2007 06:40
Safer Eval

eval() is used way to often. It slows down code, makes it harder to maintain
and it created security risks. However, sometimes, I found myself wishing I
could allow some user-controlled scripting in my software, without giving
access to dangerous functions.

That's what the following class does: it uses PHP's tokenizer to parse a
script, compares every function call against a list of allowed functions. Only
if the script is "clean", it gets eval'd.

<?php
  class SaferScript {
    var $source, $allowedCalls;
   
    function SaferScript($scriptText) {
      $this->source = $scriptText;
      $this->allowedCalls = array();     
    }
 
    function allowHarmlessCalls() {
      $this->allowedCalls = explode(',',
        'explode,implode,date,time,round,trunc,rand,ceil,floor,srand,'.
        'strtolower,strtoupper,substr,stristr,strpos,print,print_r');   
    }
   
    function parse() {
      $this->parseErrors = array();
      $tokens = token_get_all('<?'.'php '.$this->source.' ?'.'>');   
      $vcall = '';
     
      foreach ($tokens as $token) {
        if (is_array($token)) {
          $id = $token[0];
          switch ($id) {
            case(T_VARIABLE): { $vcall .= 'v'; break; }
            case(T_STRING): { $vcall .= 's'; }
            case(T_REQUIRE_ONCE): case(T_REQUIRE): case(T_NEW): case(T_RETURN):
            case(T_BREAK): case(T_CATCH): case(T_CLONE): case(T_EXIT):
            case(T_PRINT): case(T_GLOBAL): case(T_ECHO): case(T_INCLUDE_ONCE):
            case(T_INCLUDE): case(T_EVAL): case(T_FUNCTION): {
              if (array_search($token[1], $this->allowedCalls) === false)
                $this->parseErrors[] = 'illegal call: '.$token[1];
            }           
          }
        }    
        else
          $vcall .= $token;
      }
     
      if (stristr($vcall, 'v(') != '')
        $this->parseErrors[] = array('illegal dynamic function call');
     
      return($this->parseErrors);
    }
 
    function execute($parameters = array()) {
      foreach ($parameters as $k => $v)
        $$k = $v;
      if (sizeof($this->parseErrors) == 0)
        eval($this->source);
      else
        print('cannot execute, script contains errors');
    } 
  }
?>

Usage example:
<?php
  $ls = new SaferScript('horribleCode();');
  $ls->allowHarmlessCalls();
  print_r($ls->parse());
  $ls->execute();
?>

Of course it is not entirely safe, but it's a start ;-)
kai dot chan at kaisystems dot co dot uk 16-Mar-2007 11:06
Since JSON started becoming popular. I've started applying the same idea to PHP
arrays. Its an alternative to using XML or CSV. For example:

<?php

$from_external_source = '( "a" => "1", "b" => array( "b1" => "2", "b2" => "3" )
)';

eval( '$external_source_as_array = array'.$from_external_source.';' );

if ( is_array( $external_source_as_array ) ) {

// now you can work with the external source as an array
print_r( $external_source_as_array );

}

?>
It can be less verbose than XML, but provide more meta data than CSV, and
unlike CSV, data ordering is not an issue.

I used it when I wanted to store log data externally in a text file.

Kai
f dot boender at electricmonk dot nl 15-Jan-2007 08:39
Errors that occur in evaluated code are hard to catch. burninleo at gmx dot net
posted some code below that will buffer the output of the evaluated code and
search the output for errors. Another way you can do this would be using a
custom error handler that's only in effect during the eval() of the code. A
very (very) crude example:

<?php
$errors = array();
function error_hndl($errno, $errstr) {
    global $errors;
    $errors[] = array("errno"=>$errno, "errstr"=>$errstr);
}
function evale ($code) {
    global $errors;
    $errors = array();
    $orig_hndl = set_error_handler("error_hndl");
    eval($code);
    restore_error_handler();
}

evale('print("foo" . $bar);'); // Undefined variable: bar
var_dump($errors);

//fooarray(1) {
//  [0]=>
//  array(2) {
//    ["errno"]=>
//    int(8)
//    ["errstr"]=>
//    string(23) "Undefined variable: bar"
//  }
//}
?>

This will however not catch syntax errors in the code you're trying to eval.
This can cause your script to stop with a fatal error inside the eval(). You
can catch syntax errors using the Parsekit PECL extension. The
parsekit_compile_string() function will try to compile a piece of PHP code and
will catch syntax errors if they occur. To extend the earlier piece of code:

<?php
$errors = array();
function error_hndl($errno, $errstr) {
    global $errors;
    $errors[] = array("errno"=>$errno, "errstr"=>$errstr);
}
function evale ($code) {
    global $errors;
    $errors = array(); // Reset errors
    $orig_hndl = set_error_handler("error_hndl");
    if (parsekit_compile_string($code, &$errors, PARSEKIT_QUIET)) {
        eval($code);
    }
    restore_error_handler();
    if (count($errors) > 0) {
        return(false);
    } else {
        return(true);
    }
}

if (!evale('print("foo . $bar);')) { // syntax error, unexpected $end (no
closing double quote)
    var_dump($errors);
}
?>

(NOTE: Please do not use the code above directly in your program. It's merely a
proof-of-concept).
Dale Kern, Salt Lake City 10-Oct-2006 05:16
If you are trying to get eval()  to run a string as if it were from an include
file, try this:

<?php eval("?>".$string); ?>

Eval starts in PHP Script mode, break into html mode first thing and you're
done.
Nova912 21-Jul-2006 08:17
Well let me just start off by saying that eval(); confused the heck out of me
untill I read that you can use Return.

This will help anyone who wants to "Inject" code into an IF statement. My
example is a survey site, some questions are required, some are only required
if others are checked. So let me share with you my dynamic script and show you
how I was able to make a Dynamic IF Statement.

The code below had been altered to be understandable.
<?php
$survey_number = 3 // The third survey. (Out of 10 Surveys)
$rq[3] = array(1,2,3,4,5,6,8,9,11,13,15,17,19,20); // Required Questions  for
Survey 3 - Some of these can not be "NULL" (not NULL) or they will stop the
script from going any further. (In my script I replaced any questions that were
not answered with "NULL" using a for loop based on the number of questions in
the survey)
$aa[3][4] = ' && '.$q[3].' == "1"'; // Added Arguments - 3 = Survey 3's
Arguments, 4= Argument belongs to question 4, $q[1-20] (20 Questions total in
this case.

//HERE IS THE DYNAMIC IF STATEMENT
$count = count($rq[$survey_number]);
    for ($i=0;$i< $count;$i++)
        {
        $if_statement = '$q['.$rq[$survey_number][$i].'] == "NULL"';
        if(isset($aa[$survey_number][$rq[$survey_number][$i]]))
            {
            $if_statement .= $aa[$survey_number][$rq[$survey_number][$i]];
            }
        if(eval("return ".$if_statement.";"))
            {
            echo $rq[$survey_number][$i].': Is NULL and IS NOT ok.<br>';
            }
        else
            {
            echo $rq[$survey_number][$i].': Is NULL and IS ok.<br>';
            }
        }
?>

In my experiance with this the Added Argument needs to have an actual value
inplanted into the string, it did not work by just putting $q[3], i had to use
'.$q[3].' to place the value of question 3 in the string.

I hope this help someone, I spent so much time trying to figure this out and
want to share how something this simple is done.

Thank you.
brettz9 a/- yah00 do/- com 05-Jul-2006 09:19
I was trying to build a multidimensional array to an unknown dimension (within
a loop or "while") and found that eval is, as far as I can tell, the only
simple way to solve the problem.

<?php
$arr = array(2,
                 array("v", "q", 5,
                                    array(5, 8, "g"),
                                                      "x"));
$i=3;
$key1 = "[1]";
$key2 = "[".$i."]"; // E.g., could build this conditionally within a loop
$key3 = "[2]";

$keys = $key1.$key2.$key3; // Can add as many keys as needed (could be done
instead via a loop with repeated calls to .= )

print $arr{$keys}; // This does not work
print $arr[$keys]; // This also does not work

// However...
eval("\$value = \$arr{$keys};");
print $value; // Correctly prints "g"
?>
burninleo at gmx dot net 25-May-2006 12:51
The only way to retreive information on parse errors in eval'd code seems to be
the output buffering.

<?PHP
// Append a return true to php-code to check on errors
$code.= "\nreturn true;";
// Send any output to buffer
ob_start();
// Do eval()
$check = eval($code);
$output = ob_get_contents();
ob_end_clean();
// Send output or report errors
if ($check === true) {
  echo $output;
} else {
  // Manually parse output for errors and
  // generate usable information for the user
  // especially content of error-lines.
  $pattern = '/^\s*Parse error\s*:(.+) in (.+) on line (\d+)\s*$/m';
  etc ...
}
jkuckartz1984 at hotmail dot com 29-Jan-2006 12:01
Might you have to do eval in if statements, you will find it's quite some task
to make it work.

The only way to make it work is to make a reference to the eval'd variable.
This example will show the different usage of eval in if-statements. It simply
becomes clear that an eval() in an if() is not working as you want to.

<?php
$total2=5;
$total3=0;
$i=2;
if (eval("\$total".$i.";")) {
    echo "eval: total2 is full<br>";
} else {
    echo "eval: total2 is empty<br>";
}
// returns "empty"
// eval without the ";" will generate a warning

$str="\$refer=&\$total".$i.";";
eval($str);
if ($refer) {
    echo "eval: total2 is full<br>";
} else {
    echo "eval: total2 is empty<br>";
}
// returns "full"
?>
Sarangan Thuraisingham 21-Jan-2006 01:47
The eval function can be misused for Cross Site Scripting(XSS) as well. Les say
we have this very trivial page that allows a user to enter a text and see it
formated using different styles. If the site designer was lazy and used eval
function to come up with somethig like this:
<?php
$mytxt = $_GET["text"];
$strFormats = array( '<h1>$mytxt</h1>',
                      '<h2>$mytxt</h2>',
                      '<span class="style1">$mytxt</span>'); //so on

foreach ($strFormats as $style){
    eval("echo $style;");
}
?>
This page could be a target for XSS, because user input is not validated. So
the hacker could enter any valid PHP commands and the site will execute it.
Imagine what could happen if the injected script reads files like config.php
and passed it to the hacker's site.

If the file permissions are not set correctly, the injected script could modify
the current script. A form's action parameter can be set to a hacker's site or
worse every transaction could be secretly posted to another website from within
the server. Injected script could be something like this:
<?php
$filename=basename($_SERVER['PHP_SELF']);
$fp = fopen($filename, "a");
$str = echo "<!-- XSS Vulnerability-->"; // could be any PHP command
fwrite($fp, $str);
fclose($fp);
?>

The golden rule is don't trust the user. Always validate data from the client
side.
jurgen at person dot be 18-Dec-2005 05:27
eval() is used to protect (read: hide) source code. A well known way to encrypt
some php code is security through obscurity.  Someone used eval(base64_encode
(".....")); - which basically had 10-16 nested calls to eval(base64_encode())
inside the data.

E.g.
<?php
eval(gzinflate(base64_decode('AjHRawIHG1ypUpudV.....')));
?>

However this can be decoded in this way:
<?php
    echo "\nDECODE nested eval(gzinflate()) by DEBO Jurgen <jurgen@person.be>\n
\n";
   
    echo "1. Reading coded.txt\n";
    $fp1      = fopen ("coded.txt", "r");
    $contents = fread ($fp1, filesize ("coded.txt"));
    fclose($fp1);
   
    echo "2. Decoding\n";
    while (preg_match("/eval\(gzinflate/",$contents)) {
        $contents=preg_replace("/<\?|\?>/", "", $contents);
        eval(preg_replace("/eval/", "\$contents=", $contents));
    }
       
    echo "3. Writing decoded.txt\n";
    $fp2 = fopen("decoded.txt","w");
    fwrite($fp2, trim($contents));
    fclose($fp2);
?>
onlyphp 24-Nov-2005 02:59
To simulate the register_globals setting in php.ini, you must put it in the top
of your php page:

<?php
function rg() {
  $ar = array($_POST, $_GET, $_SESSION, $_SERVER);
  foreach($ar as $ar_) {
    foreach($ar_as $key => $value) {
      eval("\$" . $key . " = \"" . $value . "\";");
    }
  }
}
?>
matt at mattsoft dot net 10-Sep-2005 05:23
to load a php file to a variable then execute it, try this

<?php
$code=file_get_contents("file.php");
$code=str_replace('<'.'?php','<'.'?',$code);
$code='?'.'>'.trim($code).'<'.'?';
eval($code);
?>

using < ?php within eval does not work, but < ? does. in case there is html in
the file loaded, the script doesn't remove the < ?php and ? >, but insted adds
? > and < ? around the code loaded from the file. it's simple and works very
well. I also broke up the tags in the 3rd and 4th lines of code to keep from
having problems if the lines are commented out.
sadi at unicornsoftbd dot com 03-Sep-2005 01:49
I m going to give you my recent exploration about eval. I think you dont need
all those complex functions using regex to work HTML in your code. when ever
you call eval(), php thinks that it is within <? ?> tags. so all the problem
rises. to solve the problem just close your php tag at first of the HTML
string, then write the HTML string and then start the php tag.
this is some thing like:
<?php
$teststr="?><html><body>this is the test</body></html><?php";
eval($teststr);
?>

i think this will work for you. at least this worked for me. if you find any
problem with this please reply
zcox522 at gmail dot com 17-Aug-2005 07:03
If you send headers after you call the eval() function, you may get this error:

PHP Error: (2) Cannot modify header information - headers already sent by
(output started at something...)

In this case, surround your call to eval() with calls to some ob functions:

<?php
$eval = "some code you want to execute";

ob_start();
eval($eval);
ob_end_clean();
?>
admiral [at] nuclearpixel [dot] com 15-Aug-2005 08:02
This function will take any combination of HTML and (properly opened and
closed)PHP that is given in a string, and return a value that is the HTML and
the RESULT of that PHP code and return them both combined in the order that
they were originally written.

I tried using both the eval_html(gave me carp about using 's and "s in the
HTML) and html_eval2(gave me the results of the PHP first, then all of the HTML
afterwards) posted by the other users on this function's notes, but for some
reason, neither of them would really work the way I had understood that they
would work,(or in the case of some of my code, work at all)

So I combined the best of what I saw in both, and created eval_html3

<?php

function my_eval($arr) {
    return ('echo stripslashes("'.addslashes($arr[0]).'");');
}

function eval_html3($string) {
    $string = '<?php ?>'.$string.'<?php ?>';
    $string = str_replace( '?>', '', str_replace( array( '<?php', '<?' ), '',
preg_replace_callback( "/\?>(.*?)(<\?php|<\?)/", "my_eval", $string ) ) );
    return eval($string);
}

?>

Good luck!
jphansen at uga dot edu 08-Aug-2005 07:43
I used eval() to restore a user's session data. I stored $_SESSION to a field
in a database as

<?php
addslashes(var_export($_SESSION, TRUE))
?>

To restore it, I executed this code:

<?php
eval("\$_SESSION = $session;");
// $session being the first line of code above
?>

Voila! Session restored.

Without eval(), $_SESSION = $session would have resulted in $_SESSION being a
string instead of an array.
the dank 29-Jul-2005 11:26
<?php
$foo1 = "the good,<br>";
$foo2 = "the bad,<br>";
$foo3 = "the ugly.";

for ($i=1; $i <=3; $i++)
{
     eval("\$_SESSION['myVar$i'] = \$foo".$i.";");
}

//use below to show what's in session:

echo "<h3>SESSION</h3>";
echo "<table border=1 width=50%>";
echo "<tr bgcolor=\"#3399FF\">";
echo "<td><b><font color=\"#FFFFFF\">Variable Name</font></b></td>";
echo "<td><b><font color=\"#FFFFFF\">Value</font></b></td></tr>";
while(list($key, $val) = each($_SESSION))
{
    echo "<tr><td>$key</td><td><b>$val</b></td></tr>";
}
echo "</table>";
die();

/*---------------------------------------------------------
Prints:
myVar1    the good,
myVar2    the bad,
myVar3    the ugly.
*/
?>
privat at timo-damm dot de 29-Jul-2005 08:03
Using the html_eval() some notes above I experienced problems related to
*dirty* html. This function is less critical:

<?php
function html_eval2($string) {
  return preg_replace_callback("/<\?php(.*?)\?>/","my_eval",$string);
}

function my_eval($arr) {
  return eval($arr[1]);
}
?>

Timo
andrejkw 24-Jun-2005 12:50
To use eval output as a variable without the user seeing the output, use this:

<?php

ob_start();
eval("whatever you want");
$eval_buffer = ob_get_contents();
ob_end_clean();

echo $eval_buffer;

?>

Everything that eval produces will now be stored inside $eval_buffer.
Jesse 18-Jun-2005 08:25
a cool way to use eval is to convert strings into variable names.
this is a subsitute for using arrays.
look at this code:
<?php
for($a=1; $a<=5; $a++){
    eval("$"."variable".$a."=".$a.";");
}
?>
this will create variables called variable1, variable2, and so on, that are
equal to 1, 2, and so on.
i recently used this to help a friend make a Flash game that sent variables
like that to PHP.
1413 at blargh dot com 09-Jun-2005 07:58
Just a note when using eval and expecting return values - the eval()'ed string
must do the returning.  Take the following example script:

<?php

function ReturnArray()
{
  return array("foo"=>1, "bar"=>2);
}

$test = eval("ReturnArray();");
print("Got back $test (".count($test).")\n");

$test = eval("return ReturnArray();");
print("Got back $test (".count($test).")\n");

?>

You will get back:

Got back  (0)
Got back Array (2)

This ran me afoul for a little bit, but is the way eval() is supposed to work
(eval is evaluating a new PHP script).
jtraenkner 10-Apr-2005 04:11
Using eval inside loops is very slow, so try avoiding code like
<?php
for($i=0;$i<10;$i++) {
    eval('do_something()');
}
?>

If you absolutely have to, include the entire loop in eval:
<?php
eval('for($i=0;$i<10;$i++) {'.
    'do_something();'.
    '}');
?>
tom 29-Mar-2005 07:59
Eval can't be used as a callback function so if you want to use the eval
function name dynamically use this simple work around:

<?php

if ($function_name == "eval")
{
 eval($stuff);
}
else
{
 $function_name($stuff);
}

?>
Ben Grabkowitz 27-Mar-2005 02:57
The eval function becomes incredibly useful when dealing with static class
members and variables.

For instance:

Lets say you have 3 classes; Foo, BarA and BarB, where BarA and BarB are
children of Foo.

Now lets also say that both BarA and BarB contain a static member function
called getDataSource().

To call getDataSource() you would have to use the syntax:

<?php
BarA::getDataSource();
BarB::getDataSource();
?>

But lets say you need to access getDataSource() from inside class Foo during an
instance of either BarA or BarB.

You can use eval to do something like this:

<?php
eval('$dataSource=' . get_class($this) . '::getDataSource();');
?>
francois at bonzon dot com 28-Feb-2005 03:20
An obvious security reminder, which I think wasn't yet mentioned here. Special
care is required when variables entered by the user are passed to the eval()
function. You should validate those user inputs, and really make sure they have
the format you expect.

E.g., if you evaluate math expressions with something like

<?php
  eval("\$result = $equation;");
?>

without any check on the $equation variable, a bad user could enter in the
$equation field

""; echo file_get_contents('/etc/passwd')

- or whatever PHP code he wants! - which would evaluate to

<?php
  $result = ""; echo file_get_contents('/etc/passwd');
?>

and seriously compromising your security!
avenger at buynet dot com dot br 09-Feb-2005 04:52
This is a small code that uses 'eval' with a foreach (maybe 'for' loop), to
fill variables. This is very useful in some hard situations:

<html><title>for loop</title><body><p align=center>
 <?php
  $thing = array("a","b","c");
  $a = "bah" ; $b = "bleh2"; $c = "bluh3";
  print("Vars b4: $a, $b, $c. ");
  foreach ( $thing as $thingy ) {
   print("$thingy, ");
   eval("\$$thingy = \"$thingy\";");
  };
  print("vars aft: $a, $b, $c.");
 ?>
</p></body></html>
arnico at c4 dot lv 21-Dec-2004 11:28
Dynamically loading php pages!
In michael example ( 02-Sep-2004 05:16) is one big problem. Try to load php
page with this content :
-----------------------
<?php

$a = 1;

if($a == 1){

?>
<br />ir?<br />
<?php

}

?>
------------------------

Ups? :) maybe easier way is to do something like that ? please comments :
<?php

function eval_html($string) {

   $string = preg_replace("/\?>(.*?)(<\?php|<\?)/si", "echo \"\\1\";",$string);
   $string = str_replace("<?php", "", $string);
   $string = str_replace("?>", "", $string);
   return eval($string);
}

$filename = "page.php";
$handle = fopen($filename, "r");
$contents = fread($handle, filesize($filename));
fclose($handle);

echo eval_html($contents);

?>

The html source will be replaced with echo. and problem is gone :) or there are
other problems ? please comments.

P.S. sorry about my bad English
mahaixing at hotmail dot com 09-Oct-2004 03:49
When using Dynamic Proxy design pattern we must create a class automaticly.
Here is a sample code.

<?php
$clazz = "class SomeClass { var \$value = 'somevalue'; function show() { echo
get_class(\$this);}}";

eval($clazz);

$instance = new SomeClass;

// Here output 'somevalue';
echo $instance->value;

echo "<br>";

//Here output 'someclass'
$instance->show();
?>
evildictaitor at hotmail dot com 15-Aug-2004 08:00
Be careful when using eval() on heavy usage sites in PHP 4.0+ as it takes
vastly longer to activate due to the limitations of the Zend engine.

The Zend engine changes the PHP to a binary structure at the START of the file,
and then parses it. Every time an eval is called, however, it has to reactivate
the parsing procedure and convert the eval()'d code into usable binary format
again.

Basically, if you eval() code, it takes as long as calling a new php page with
the same code inside.
12-Jul-2004 04:37
Kepp the following Quote in mind:

If eval() is the answer, you're almost certainly asking the
wrong question. -- Rasmus Lerdorf, BDFL of PHP
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Jan 4 13:41:33 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

ucwords> <trim
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Dec 2011

view this page in

[English             ] Change language
ucfirst

(PHP 4, PHP 5)

ucfirst — 文字列の最初の文字を大文字にする

説明

string ucfirst ( string $str )

str の最初の文字がアルファベットであれば、それを大文字にします。

「アルファベット」かどうかというのは現在のロケールにより決定されます。たとえば
、デフォルトの "C" ロケールでは、a ウムラウト (ä) は変換されません。

パラメータ

str

    入力文字列。

返り値

変換後の文字列を返します。

例

例1 ucfirst() の例

<?php
$foo = 'hello world!';
$foo = ucfirst($foo);             // Hello world!

$bar = 'HELLO WORLD!';
$bar = ucfirst($bar);             // HELLO WORLD!
$bar = ucfirst(strtolower($bar)); // Hello world!
?>

参考

  • lcfirst() - 文字列の最初の文字を小文字にする
  • strtolower() - 文字列を小文字にする
  • strtoupper() - 文字列を大文字にする
  • ucwords() - 文字列の各単語の最初の文字を大文字にする



ucwords> <trim
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Dec 2011
 
add a note add a note User Contributed Notes ucfirst
vlknmtn at gmail dot com 17-Aug-2011 11:31
Turkish solution:

<?php
mb_internal_encoding("UTF-8");
mb_regex_encoding("UTF-8");

function tr_ilkbuyuk($text)
{
    $text = str_replace("I","ı",$text);
    $text = mb_strtolower($text, 'UTF-8');
   
    if($text[0] == "i")
        $tr_text = "İ".substr($text, 1);
    else
        $tr_text = mb_convert_case($text, MB_CASE_TITLE, "UTF-8");
   
    return trim($tr_text);
}

function tr_ucwords($text)
{
    $p = explode(" ",$text);
    if(is_array($p))
    {
        $tr_text = "";
        foreach($p AS $item)
            $tr_text .= " ".tr_ilkbuyuk($item);
           
        return trim($tr_text);
    }
    else
        return tr_ilkbuyuk($text);
}

$deger = "ıişllşlsdg";

echo tr_ucwords($deger);

?>
Quicker 10-May-2011 08:53
if you want to ucfirst for utf8 try this one:

<?php
function ucfirst_utf8($stri){
 if($stri{0}>="\xc3")
     return (($stri{1}>="\xa0")?
     ($stri{0}.chr(ord($stri{1})-32)):
     ($stri{0}.$stri{1})).substr($stri,2);
 else return ucfirst($stri);
}
?>

It is quick, not language (but utf8) dependend and does not use any
mb-functions such as mb_ucfirst.
chris at bjelleklang dot org 26-Jan-2011 11:03
For those who want a multibyte-compliant ucfirst() without wanting to mess with
encodings, this should do the trick:

<?php
function mb_ucasefirst($str){
    $str[0] = mb_strtoupper($str[0]);
    return $str;
}
?>
pete at namecube dot net 12-Apr-2010 02:08
for anyone wanting to ucfirst each word in a sentence this works for me:

<?php
function ucfirst_sentence($str)
{
    return preg_replace('/\b(\w)/e', 'strtoupper("$1")', $str);
}
?>
wilfried dot loche at fr dot adp dot com 22-Jan-2010 10:22
If someone looks for the equivalent on Oracle DB, here it is: INITCAP. Hope
this helps!
octavius 27-Sep-2009 12:18
For lithuanian text with utf-8 encoding I use two functions (thanks
[mattalexxpub at gmail dot com] and Svetoslav Marinov)

<?php
function my_ucfirst($string, $e ='utf-8') {
    if (function_exists('mb_strtoupper') && function_exists('mb_substr') && !
empty($string)) {
        $string = mb_strtolower($string, $e);
        $upper = mb_strtoupper($string, $e);
            preg_match('#(.)#us', $upper, $matches);
            $string = $matches[1] . mb_substr($string, 1, mb_strlen($string,
$e), $e);
    }
    else {
        $string = ucfirst($string);
    }
    return $string;
}

function sentence_case($string) {
    $sentences = preg_split('/([.?!]+)/', $string, -1, PREG_SPLIT_NO_EMPTY|
PREG_SPLIT_DELIM_CAPTURE);
    $new_string = '';
    foreach ($sentences as $key => $sentence) {
        $new_string .= ($key & 1) == 0?
            my_ucfirst(strtolower(trim($sentence))) :
            $sentence.' '; 
    }
    return trim($new_string);
}
?>
bgschool 30-Jul-2009 11:39
Simple function for use ucfirst with utf-8 encoded cyrylic text

<?php
    public function capitalize_first($str) {
        $line = iconv("UTF-8", "Windows-1251", $str); // convert to
windows-1251
        $line = ucfirst($line);
        $line = iconv("Windows-1251", "UTF-8", $line); // convert back to utf-8
       
        return $line;
    }
?>
svetoslavm at gmail dot com 20-Nov-2008 03:40
For some reason this worked for me.

Mac OS 10.5.1
PHP 5.2.6

<?php
   /**
     * ucfirst UTF-8 aware function
     *
     * @param string $string
     * @return string
     * @see http://ca.php.net/ucfirst
     */
    function my_ucfirst($string, $e ='utf-8') {
        if (function_exists('mb_strtoupper') && function_exists('mb_substr') &&
!empty($string)) {
            $string = mb_strtolower($string, $e);
            $upper = mb_strtoupper($string, $e);
            preg_match('#(.)#us', $upper, $matches);
            $string = $matches[1] . mb_substr($string, 1, mb_strlen($string,
$e), $e);
        } else {
            $string = ucfirst($string);
        }
        return $string;
    }
?>

Svetoslav Marinov
http://slavi.biz
mattalexxpub at gmail dot com 10-Nov-2008 01:10
This is what I use for converting strings to sentence case:

<?php
function sentence_case($string) {
    $sentences = preg_split('/([.?!]+)/', $string, -1, PREG_SPLIT_NO_EMPTY|
PREG_SPLIT_DELIM_CAPTURE);
    $new_string = '';
    foreach ($sentences as $key => $sentence) {
        $new_string .= ($key & 1) == 0?
            ucfirst(strtolower(trim($sentence))) :
            $sentence.' ';
    }
    return trim($new_string);
}

print sentence_case('HMM. WOW! WHAT?');

// Outputs: "Hmm. Wow! What?"
?>
prokur.net - there is my email 29-Jun-2008 10:01
I believe that mb_ucfirst will be soon added in PHP, but for now this could be
useful
<?php

if (!function_exists('mb_ucfirst') && function_exists('mb_substr')) {
    function mb_ucfirst($string) {
        $string = mb_strtoupper(mb_substr($string, 0, 1)) . mb_substr($string,
1);
        return $string;
    }
}

?>

it also check is mb support enabled or not
NoName 12-Mar-2008 08:23
For strings with diactrical marks (umlauts, etc.), consider mb_convert_case().
charliefortune 20-Feb-2008 11:48
Here's a function to capitalize segments of a name, and put the rest into lower
case. You can pass the characters you want to use as delimiters.

i.e. <?php echo nameize("john o'grady-smith"); ?>

returns John O'Grady-Smith

<?php

function nameize($str,$a_char = array("'","-"," ")){   
    //$str contains the complete raw name string
    //$a_char is an array containing the characters we use as separators for
capitalization. If you don't pass anything, there are three in there as
default.
    $string = strtolower($str);
    foreach ($a_char as $temp){
        $pos = strpos($string,$temp);
        if ($pos){
            //we are in the loop because we found one of the special characters
in the array, so lets split it up into chunks and capitalize each one.
            $mend = '';
            $a_split = explode($temp,$string);
            foreach ($a_split as $temp2){
                //capitalize each portion of the string which was separated at
a special character
                $mend .= ucfirst($temp2).$temp;
                }
            $string = substr($mend,0,-1);
            }   
        }
    return ucfirst($string);
    }

?>
webmaster at onmyway dot cz 11-Feb-2008 11:31
Inspired by the lcfirst function a simple mb_lcfirst to cope with multibyte
strings:

<?php
function mb_lcfirst($str, $enc = null)
{
  if($enc === null) $enc = mb_internal_encoding();
  return mb_strtolower(mb_substr($str, 0, 1, $enc), $enc).mb_substr($str, 1,
mb_strlen($str, $enc), $enc);
}
?>
Uwe 26-Jul-2007 03:08
@adefoor, Ken and Zee

Changing the case can only be done by understanding the text. Take for example
"USA", "Sunday", "March", "I am ...", abbreviations like "prob." and so on.
adefoor at gmail dot com 12-Jul-2007 06:57
Ken and zee

One thing I would do to make this more unviersally work would be to add
strtolower() around your $sentence.  Doing this will allow you to convert an
all caps text block as well as an all lowercase text block.

<?php

function sentence_cap($impexp, $sentence_split) {
    $textbad=explode($impexp, $sentence_split);
    $newtext = array();
    foreach ($textbad as $sentence) {
        $sentencegood=ucfirst(strtolower($sentence));
        $newtext[] = $sentencegood;
    }
    $textgood = implode($impexp, $newtext);
    return $textgood;
}

$text = "this is a sentence. this is another sentence! this is the fourth
sentence? no, this is the fourth sentence.";
$text = sentence_cap(". ",$text);
$text = sentence_cap("! ",$text);
$text = sentence_cap("? ",$text);

echo $text; // This is a sentence. This is another sentence! This is the fourth
sentence? No, this is the fourth sentence.

?>
Ken Kehler 14-Mar-2007 08:03
@ zee: this should solve your !, ?, and any punctuations you want to add. It
can probably be cleaned up a bit.

<?php

function sentence_cap($impexp, $sentence_split) {
    $textbad=explode($impexp, $sentence_split);
    $newtext = array();
    foreach ($textbad as $sentence) {
        $sentencegood=ucfirst($sentence);
        $newtext[] = $sentencegood;
    }
    $textgood = implode($impexp, $newtext);
    return $textgood;
}

$text = "this is a sentence. this is another sentence! this is the fourth
sentence? no, this is the fourth sentence.";
$text = sentence_cap(". ",$text);
$text = sentence_cap("! ",$text);
$text = sentence_cap("? ",$text);

echo $text; // This is a sentence. This is another sentence! This is the fourth
sentence? No, this is the fourth sentence.

?>
zee 31-Jan-2007 12:09
Another way to capitalize first letter of every sentence in a text, I hope it
will help someone. It won't convert non-English characters, though, and ignores
sentences ending with ! or ? etc.

<?php

$text="this is a sentence. this is another sentence.";

$split=explode(". ", $text);
foreach ($split as $sentence) {
$sentencegood=ucfirst($sentence);
$text=str_replace($sentence, $sentencegood, $text);
}

echo $text; // This is a sentence. This is another sentence.

?>
Carel at divers information with dotcom 06-Jan-2007 10:55
I made a small change. Now it takes care of points in numbers

function ucsentence ($string){
   $string = explode ('.', $string);
   $count = count ($string);
   for ($i = 0; $i < $count; $i++){
       $string[$i]  = ucfirst (trim ($string[$i]));
       if ($i > 0){
           if ((ord($string[$i]{0})<48) || (ord($string[$i]{0})>57)) {
              $string[$i] = ' ' . $string[$i];
           }  
       }
   }
   $string = implode ('.', $string);
   return $string;
}
26-Oct-2006 02:45
Some simple function for cyrillic and latin letters both:

function rucfirst($str) {
    if(ord(substr($str,0,1))<192) return ucfirst($str);
    else
    return chr(ord(substr($str,0,1))-32).substr($str,1);
}
Michael 12-Sep-2006 01:01
This is what you would expect php to deliver if there was a built-in function
named ucsentence.

function ucsentence ($string){
    $string = explode ('.', $string);
    $count = count ($string);
    for ($i = 0; $i < $count; $i++){
        $string[$i]  = ucfirst (trim ($string[$i]));
        if ($i > 0){
            $string[$i] = '&nbsp;&nbsp;' . $string[$i];
        }
    }
    $string = implode ('.', $string);
    return $string;
}
Northie 05-Sep-2006 11:39
Sentence Case:

<?php

function SentenceCase($str) {
    $sentences = explode(". ",$str);
    for($i=0;$i<count($sentences);$i++) {
        $sentences[$i][0] = strtoupper($sentences[$i][0]);
    }

    return implode(". ",$sentences);
}

?>
27-Jul-2006 09:31
lcfirst - In case you need to get the original string back after a ucfirst.

    function lcfirst( $str ) {
        $str[0] = strtolower($str[0]);
        return $str;
    }
Markus Ernst 31-Mar-2006 08:34
A combination of the below functions to enable ucfirst for multibyte strings in
a shared hosting environment (where you can not always count on mbstring to be
installed):

<?php
function my_mb_ucfirst($str, $e='utf-8') {
    if (function_exists('mb_strtoupper')) {
        $fc = mb_strtoupper(mb_substr($str, 0, 1, $e), $e);
        return $fc.mb_substr($str, 1, mb_strlen($str, $e), $e);
    }
    else {
        $str = utf8_decode($str);
        $str[0] = strtr($str[0],
            "abcdefghýijklmnopqrstuvwxyz".
            "\x9C\x9A\xE0\xE1\xE2\xE3".
            "\xE4\xE5\xE6\xE7\xE8\xE9".
            "\xEA\xEB\xEC\xED\xEE\xEF".
            "\xF0\xF1\xF2\xF3\xF4\xF5".
            "\xF6\xF8\xF9\xFA\xFB\xFC".
            "\xFE\xFF",
            "ABCDEFGHÝIJKLMNOPQRSTUVWXYZ".
            "\x8C\x8A\xC0\xC1\xC2\xC3\xC4".
            "\xC5\xC6\xC7\xC8\xC9\xCA\xCB".
            "\xCC\xCD\xCE\xCF\xD0\xD1\xD2".
            "\xD3\xD4\xD5\xD6\xD8\xD9\xDA".
            "\xDB\xDC\xDE\x9F");
        return utf8_encode($str);
    }
}
?>
Bartuc 27-Feb-2006 01:28
Here is the fixed function for Turkish alphabet..

<?php

function uc_first($str){
   $str[0] = strtr($str,
   "abcdefgh ijklmnopqrstuvwxyz".
   "\x9C\x9A\xE0\xE1\xE2\xE3".
   "\xE4\xE5\xE6\xE7\xE8\xE9".
   "\xEA\xEB\xEC\xED\xEE\xEF".
   "\xF0\xF1\xF2\xF3\xF4\xF5".
   "\xF6\xF8\xF9\xFA\xFB\xFC".
   "\xFE\xFF",
   "ABCDEFGHI JKLMNOPQRSTUVWXYZ".
   "\x8C\x8A\xC0\xC1\xC2\xC3\xC4".
   "\xC5\xC6\xC7\xC8\xC9\xCA\xCB".
   "\xCC\xCD\xCE\xCF\xD0\xD1\xD2".
   "\xD3\xD4\xD5\xD6\xD8\xD9\xDA".
   "\xDB\xDC\xDE\x9F");
   return $str;
}

?>
Markus Ernst 12-Jan-2006 02:39
plemieux' function did not work for me without passing the encoding to every
single mb function (despite ini_set('default_charset', 'utf-8') at the top of
the script). This is the example that works in my application (PHP 4.3):

<?php
function my_mb_ucfirst($str, $e='utf-8') {
    $fc = mb_strtoupper(mb_substr($str, 0, 1, $e), $e);
    return $fc.mb_substr($str, 1, mb_strlen($str, $e), $e);
}
?>
plemieux 29-Sep-2005 06:05
Simple multi-bytes ucfirst():

<?php
function my_mb_ucfirst($str) {
    $fc = mb_strtoupper(mb_substr($str, 0, 1));
    return $fc.mb_substr($str, 1);
}
?>
info [at] spwdesign [dot] com 23-Jun-2005 07:48
This is a simple code to get all the 'bad words', stored in a database, out of
the text. You could use str_ireplace but since that's installed on PHP5 only,
this works as well. It strtolowers the text first then places capitals with
ucfirst() where it thinks a capital should be placed, at a new sentence. The
previous sentence is ended by '. ' then.

<?php
function filter($text){
    $filters=mysql_query("SELECT word,result FROM filter");
    while($filter=mysql_fetch_array($filters)){
        $text=str_replace($filter[word],$filter[result],strtolower($text));
        $parts=explode(". ",$text);
        for($i=0;$i<count($parts);$i++){
            $parts[$i]=ucfirst($parts[$i]);
        }
        $text=implode(". ",$parts);
    }
    return $text;
}
?>
13-Mar-2005 01:11
Ah, the last code were spoiled, here is the fixed one:

<?php

function uc_first($str){
    $str[0] = strtr($str,
    "abcdefghijklmnopqrstuvwxyz".
    "\x9C\x9A\xE0\xE1\xE2\xE3".
    "\xE4\xE5\xE6\xE7\xE8\xE9".
    "\xEA\xEB\xEC\xED\xEE\xEF".
    "\xF0\xF1\xF2\xF3\xF4\xF5".
    "\xF6\xF8\xF9\xFA\xFB\xFC".
    "\xFD\xFE\xFF",
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
    "\x8C\x8A\xC0\xC1\xC2\xC3\xC4".
    "\xC5\xC6\xC7\xC8\xC9\xCA\xCB".
    "\xCC\xCD\xCE\xCF\xD0\xD1\xD2".
    "\xD3\xD4\xD5\xD6\xD8\xD9\xDA".
    "\xDB\xDC\xDD\xDE\x9F");
    return $str;
}

?>

So, this function changes also other letters into uppercase, ucfirst() does
only change: a-z to: A-Z.
Stig-Arne Gr nroos 25-Dec-2004 06:46
This function does not work as expected with characters from non-English
alphabets (I only tested it with scandinavian letters,     =>    ). It leaves
them as lowercase.

Someone already commented that the function doesn't work on html entities,
which is somewhat understandable. This bug however takes place before I convert
the strings to html.
steven at tux dot appstate dot edu 21-Jun-2004 07:14
Note: the return for this function changed in versions 4.3 when a string is
passed of length 0.  In <4.2 false is returned and in >4.3 a string of length 0
is returned.

Example:

$name = ucfirst("");
var_dump($name);

$name = ucfirst("owen");
var_dump($name);

Results for <4.2:
bool(false) string(4) "Owen"

Results for >4.3:
string(0) "" string(4) "Owen"
Ami Hughes (ami at mistress dot name) 08-Apr-2004 03:34
In the event you sort of need multiple delimiters to apply the same action to,
you can preg_replace this "second delimiter" enveloping it with your actual
delimiter.
 
A for instance, would be if you wanted to use something like Lee's FormatName
function in an input box designed for their full name as this script was only
designed to check the last name as if it were the entire string.  The problem
is that you still want support for double-barreled names and you still want to
be able to support the possibility that if the second part of the
double-barreled name starts with "mc", that it will still be formatted
correctly.

This example does a preg_replace that surrounds the separator with your actual
delimiter.  This is just a really quick alternative to writing some bigger
fancier blah-blah function.  If there's a shorter, simpler way to do it, feel
free to inform me.  (Emphasis on shorter and simpler because that was the whole
point of this.) :D

Here's the example.  I've removed Lee's comments as not to confuse them with my
own.

<?php

   function FormatName($name=NULL)
   {
       if (empty($name))
           return false;

       $name = strtolower($name);
       $name = preg_replace("[\-]", " - ",$name); // Surround hyphens with our
delimiter so our strncmp is accurate
       if (preg_match("/^[a-z]{2,}$/i",$name))  // Simple preg_match if
statement
       {
          
           $names_array = explode(' ',$name);  // Set the delimiter as a space.
   
           for ($i = 0; $i < count($names_array); $i++)
           {
               if (strncmp($names_array[$i],'mc',2) == 0 || ereg('^[oO]\'
[a-zA-Z]',$names_array[$i]))
               {
                   $names_array[$i][2] = strtoupper($names_array[$i][2]);
               }
               $names_array[$i] = ucfirst($names_array[$i]);
              
           }
   
           $name = implode(' ',$names_array);
           $name = preg_replace("[ \- ]", "-",$name); //  Remove the extra
instances of our delimiter
           return ucwords($name);
          
       }
   }

?>
lazaro_tolentino at hotmail dot com 01-Apr-2004 09:16
this is a advance ucfirst function, for upper especifics words, with config in
array of seperator
/**
 * @return string
 * @param string $str frase que passar  pelo parce
 * @desc Pega uma frase e devolve a mesma com as palavras com suas
 * maiusculas  obedecendo um criterio configurado no array $string_sep
 *
 * @since 2004-04-01 15:04 adicionado a variavel $tring_sep que   um
 * array contendo todos os separadores a serem usados
*/
function str_upper_lower($str)
{
    /**
    * array contendo todos os separadores
    */
    $string_sep=array(' ','-','/','_','.');
    /**
    * coloca todas as palavras com letras minusculas
    */
    $str=strtolower($str);
   
    /**
    * testa todos os separadores
    */
    for ($i=0;$i<count($string_sep);$i++)
    {
        $sep=$string_sep[$i];
        /**
        * separa a frase usando os separador atual
        */
        $array_words = explode($sep, $str);
       
        /**
        * variavel que conter  o valor temporario
        */
        $tmp_str = '';
        $i2=0;
        foreach ($array_words as $word)
        {
            /**
            * se a quantidade de caracteres for maior que dois, ou se conter
ponto,
            *  devolve upper da primeira letra
            */
            $tmp_str .=(strlen($word)>2 || strpos($word,'.')?ucfirst
($word):$word);
            /**
            * n o adiciona o separador no fim de strings
            */
            if ($i2<count($array_words)-1)
            {
                $tmp_str .= $sep;
            }
            $i2++;
        }
        $str = $tmp_str;
    }
    return $str;
}
Lee Benson 05-Mar-2004 10:37
Here's a function I threw together when needing to validate name entries (both
first name and last name).

This allows simple formatting for names prefixed with "Mc" (like McDonald,
McCulloch, etc) and names prefixed with O (like O'Reilly, O'Conner, etc)..

It also allows double-barrelled names to be formatted correctly, in the
Smith-Jones way.

Here's the function...

<?php

    function FormatName($name=NULL) {
       
        /* Formats a first or last name, and returns the formatted
        version */
       
        if (empty($name))
            return false;
           
        // Initially set the string to lower, to work on it
        $name = strtolower($name);
           
        // Run through and uppercase any multi-barrelled names

        $names_array = explode('-',$name);

        for ($i = 0; $i < count($names_array); $i++) {
           
            // "McDonald", "O'Conner"..
            if (strncmp($names_array[$i],'mc',2) == 0 || ereg('^[oO]\'[a-zA-Z]
',$names_array[$i])) {
            $names_array[$i][2] = strtoupper($names_array[$i][2]);
   
            }
           
            // Always set the first letter to uppercase, no matter what
            $names_array[$i] = ucfirst($names_array[$i]);
           
        }

        // Piece the names back together
        $name = implode('-',$names_array);

        // Return upper-casing on all missed (but required) elements of the
$name var
        return ucwords($name);
       
    }

?>

If you have any other "rules" to follow for international/foreign naming rules,
you can add them to the foreach loop, and it should still follow all of the
other rules.

It's a quick fix, but it seems to do the job nicely.

Examples...

<?php

$name = "o'cONNER-MCdOnAld";
echo FormatName($name);

?>

Returns: O'Conner-McDonald
04-Mar-2004 05:46
Of course ucfirst() will _not_ convert html entities such as &uuml; (u-Umlaut
as  ) to &Uuml; which would represent  .
bkimble at ebaseweb dot com 09-Jun-2003 12:02
Here is a handy function that makes the first letter of everything in a
sentence upercase. I used it to deal with titles of events posted on my website
... I've added exceptions for uppercase words and lowercase words so roman
numeral "IV" doesn't get printed as "iv" and words like "a" and "the" and "of"
stay lowercase.

function RemoveShouting($string)
{
 $lower_exceptions = array(
        "to" => "1", "a" => "1", "the" => "1", "of" => "1"
 );
                                     
 $higher_exceptions = array(
        "I" => "1", "II" => "1", "III" => "1", "IV" => "1",
        "V" => "1", "VI" => "1", "VII" => "1", "VIII" => "1",
        "XI" => "1", "X" => "1"
 );

 $words = split(" ", $string);
 $newwords = array();
 
 foreach ($words as $word)
 {
        if (!$higher_exceptions[$word])
                $word = strtolower($word);
        if (!$lower_exceptions[$word])
                $word = ucfirst($word);
         array_push($newwords, $word);
 
 }
       
 return join(" ", $newwords); 
}
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue Jan 3 20:41:33 2012 UTC
Received cookie: COUNTRY=JPN%2C1.112.94.113
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtr> <strtolower
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Dec 2011

view this page in

[English             ] Change language
strtoupper

(PHP 4, PHP 5)

strtoupper — 文字列を大文字にする

説明

string strtoupper ( string $string )

string のアルファベット部分をすべて大文字にして返します｡

「アルファベット部分」は現在のロケールにより決定されます。つまり、たとえばデフ
ォルトの「C」ロケールである場合は、 a ウムラウト (ä) のような文字は変換されませ
ん。

パラメータ

string

    入力文字列。

返り値

大文字にした文字列を返します。

例

例1 strtoupper() の例

<?php
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = strtoupper($str);
echo $str; // 「MARY HAD A LITTLE LAMB AND SHE LOVED IT SO」を出力します。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strtolower() - 文字列を小文字にする
  • ucfirst() - 文字列の最初の文字を大文字にする
  • ucwords() - 文字列の各単語の最初の文字を大文字にする
  • mb_strtoupper() - 文字列を大文字にする



strtr> <strtolower
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 30 Dec 2011
 
add a note add a note User Contributed Notes strtoupper
james at snasta dot ie 10-Nov-2011 02:44
In the Irish language certain initial mutations can never be capitalized — the
following simple function can be used to capitalize text in Irish.

i.e. Muintir na hÉireann -> MUINTIR NA hÉIREANN

<?php
function strtoupper_ga($a) {
    return strtr(mb_strtoupper($a, "utf-8"), array(
      " MB" => " mB",
      " GC" => " gC",
      " ND" => " nD",
      " BHF" => " bhF",
      " NG" => " nG",
      " BP" => " bP",
      " DT" => " dT",
      " HA" => " hA",
      " HE" => " hE",
      " HI" => " hI",
      " HO" => " hO",
      " HU" => " hU",
      " HÁ" => " hÁ",
      " HÉ" => " hÉ",
      " HÍ" => " hÍ",
      " HÓ" => " hÓ",
      " HÚ" => " hÚ"
    ));
}
?>
markus dot geiger at mayflower dot de 20-Jun-2011 04:42
NOTE: To uppercase a unicode string you simply could use mb_strtoupper($str, 
'UTF-8') instead of all that bloated PHP functions ;=)
dev dot gabiu at gmail dot com 17-May-2011 11:22
This would be my short version for French characters:

<?php
function fullUpper($string){
  return strtr(strtoupper($string), array(
      "à" => "À",
      "è" => "È",
      "ì" => "Ì",
      "ò" => "Ò",
      "ù" => "Ù",
          "á" => "Á",
      "é" => "É",
      "í" => "Í",
      "ó" => "Ó",
      "ú" => "Ú",
          "â" => "Â",
      "ê" => "Ê",
      "î" => "Î",
      "ô" => "Ô",
      "û" => "Û",
          "ç" => "Ç",
    ));
}
?>
christoph dot hochstrasser at gmail dot com 15-Mar-2011 04:12
For beginners: here is the most simple Camelize function for PHP. It converts
underscore or dash separated strings to camelCase, optionally with a Parameter
to convert them to PascalCase (often needed for Class names).

<?php

function camelize($string, $pascalCase = false)
{
  $string = str_replace(array('-', '_'), ' ', $string);
  $string = ucwords($string);
  $string = str_replace(' ', '', $string); 

  if (!$pascalCase) {
    return lcfirst($string);
  }
  return $string;
}
?>
smieat 01-May-2010 11:39
perfect solutions for turkish utf-8 (including i I conversations):

<?php
function strtolowertr($metin){
    return mb_convert_case(str_replace('I','ı',$metin), MB_CASE_LOWER,
"UTF-8");
}

function strtouppertr($metin){
    return mb_convert_case(str_replace('i','İ',$metin), MB_CASE_UPPER,
"UTF-8");
}

function ucwordstr($metin) {
    return ltrim(mb_convert_case(str_replace(array(' I',' ı', ' İ', ' i'),array
(' I',' I',' İ',' İ'),' '.$metin), MB_CASE_TITLE, "UTF-8"));
}

function ucfirsttr($metin) {
    $metin = in_array(crc32($metin[0]),array(1309403428, -797999993,
957143474)) ? array(strtouppertr(substr($metin,0,2)),substr($metin,2)) : array
(strtouppertr($metin[0]),substr($metin,1));
return $metin[0].$metin[1];
}
?>
php at emanaton dot com 06-Nov-2009 04:38
I liked jesdisciple's approach to a camel case function, but needed something a
little more high powered, so here is my stab at this need:

<?php
/**
 * Convert a string to camel case, optionally capitalizing the first char and
optionally setting which characters are
 * acceptable.
 *
 * First, take existing camel case and add a space between each word so that it
is in Title Form; note that
 *   consecutive capitals (acronyms) are considered a single word.
 * Second, capture all contigious words, capitalize the first letter and then
convert the rest into lower case.
 * Third, strip out all the non-desirable characters (i.e, non numerics).
 *
 * EXAMPLES:
 * $str = 'Please_RSVP: b4 you-all arrive!';
 *
 * To convert a string to camel case:
 *  strtocamel($str); // gives: PleaseRsvpB4YouAllArrive
 *
 * To convert a string to an acronym:
 *  strtocamel($str, true, 'A-Z'); // gives: PRBYAA
 *
 * To convert a string to first-lower camel case without numerics but with
underscores:
 *  strtocamel($str, false, 'A-Za-z_'); // gives: please_RsvpBYouAllArrive
 *
 * @param  string  $str              text to convert to camel case.
 * @param  bool    $capitalizeFirst  optional. whether to capitalize the first
chare (e.g. "camelCase" vs. "CamelCase").
 * @param  string  $allowed          optional. regex of the chars to allow in
the final string
 *
 * @return string camel cased result
 *
 * @author Sean P. O. MacCath-Moran   www.emanaton.com
 */
function strtocamel($str, $capitalizeFirst = true, $allowed = 'A-Za-z0-9') {
    return preg_replace(
        array(
            '/([A-Z][a-z])/e', // all occurances of caps followed by lowers
            '/([a-zA-Z])([a-zA-Z]*)/e', // all occurances of words w/ first
char captured separately
            '/[^'.$allowed.']+/e', // all non allowed chars (non alpha
numerics, by default)
            '/^([a-zA-Z])/e' // first alpha char
        ),
        array(
            '" ".$1', // add spaces
            'strtoupper("$1").strtolower("$2")', // capitalize first, lower the
rest
            '', // delete undesired chars
            'strto'.($capitalizeFirst ? 'upper' : 'lower').'("$1")' // force
first char to upper or lower
        ),
        $str
    );
}
Jaason 10-Jul-2009 08:48
convert polish special letters into big and small chars;p

<?php
function toUpper($string) {
    return (strtoupper(strtr($string, 'ęóąśłżźćń','ĘÓĄŚŁŻŹĆŃ' )));
    };

function toLower($string) {
    return (strtolower(strtr($string,'ĘÓĄŚŁŻŹĆŃ', 'ęóąśłżźćń' )));
    };
?>
chris at table4 dot com 19-Jan-2009 03:31
Simple function to change the case of your string and any accented html
characters contained within it.

Inspired by fullUpper(), by silent at gmx dot li... just a little bit more
atomic.

<?php

function convertCase($str, $case = 'upper')
{ //yours, courtesy of table4.com  :)
  switch($case)
  {
    case "upper" :
    default:
      $str = strtoupper($str);
      $pattern = '/&([A-Z])(UML|ACUTE|CIRC|TILDE|RING|';
      $pattern .= 'ELIG|GRAVE|SLASH|HORN|CEDIL|TH);/e';
      $replace = "'&'.'\\1'.strtolower('\\2').';'"; //convert the important bit
back to lower
    break;
   
    case "lower" :
      $str = strtolower($str);
    break;
  }
 
  $str = preg_replace($pattern, $replace, $str);
  return $str;
}
?>

Depending on what you are trying to achieve you would call like this:

<?php

//with entities...
$str = convertCase(htmlentities($str, ENT_QUOTES, "ISO-8859-1"));

?>
spaceman at foo dot at 17-Apr-2008 04:59
It has been mentioned in a previous comment that all you need to do to let
PHP's strtoupper() do the conversion - instead of writing more or less
complicated functions yourself - is to specify the locale in which you're doing
the case conversion:

<?php setlocale(LC_CTYPE, "de_AT") ?>

It is important to note that setlocale() will silently fail if it can't find
the specified locale on your system, so *always* check its return value. Try
different spellings: using "de_AT" as an example, there are various
combinations that may or may not work for you: "de", "de_AT.utf8",
"de_AT.iso-8859-1", "de_AT.latin1", "de_AT@euro", etc).

If you can't find an appropriate locale setting, check your system
configuration (locales are a system-wide setting, PHP gets them from the OS).
On Windows, locales can be set from the Control Panel; on Linux it depends on
your distribution. You can try "sudo dpkg-reconfigure locales" on Debian-based
distros, or configure them manually. On Ubuntu Dapper, I had to copy entries
over from /usr/share/i18n/SUPPORTED to /var/lib/locales/supported.d/local, then
do the dpkg-reconfigure.

After you're done, restart the web server.

That said, there are special cases where you want to do the conversion
manually. In German, for example, the letter 'ß' (szlig) only exists as a
lower-case character, and so doesn't get converted by strtoupper. The
convential way to express a 'ß' in an uppercase string is "SS". This function
will take care of this exception (for Latin1 and most of Latin9, at least):

<?php

define("LATIN1_UC_CHARS", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝ");
define("LATIN1_LC_CHARS", "àáâãäåæçèéêëìíîïðñòóôõöøùúûüý");

function uc_latin1 ($str) {
    $str = strtoupper(strtr($str, LATIN1_LC_CHARS, LATIN1_UC_CHARS));
    return strtr($str, array("ß" => "SS"));
}

?>
jesdisciple at gmail dot com 09-Mar-2008 01:02
This function takes a space-delimited list of words and returns it as one
camelcase word.
<?php
function strtocamel($str){
    $str = explode(' ', strtolower($str));
    for($i = 1; $i < count($str); $i++){
        $str[$i] = strtoupper(substr($str[$i], 0, 1)) . substr($str[$i], 1);
    }
    return implode('', $str);
}
?>

Example:
<?php
echo strtocamel('Str tO CAMEL');
?>
This will output 'strToCamel'.  To also make the first letter uppercase, change
'$i = 1' to '$i = 0'.
silent at gmx dot li 15-Oct-2007 12:25
ISO-8859-1 (Latin 1) full with all special characters:

<?php
function fullUpper($str){
   // convert to entities
   $subject = htmlentities($str,ENT_QUOTES);
   $pattern = '/&([a-z])(uml|acute|circ';
   $pattern.= '|tilde|ring|elig|grave|slash|horn|cedil|th);/e';
   $replace = "'&'.strtoupper('\\1').'\\2'.';'";
   $result = preg_replace($pattern, $replace, $subject);
   // convert from entities back to characters
   $htmltable = get_html_translation_table(HTML_ENTITIES);
   foreach($htmltable as $key => $value) {
      $result = ereg_replace(addslashes($value),$key,$result);
   }
   return(strtoupper($result));
}

echo fullUpper("try this: äöüß");
?>

results in

TRY THIS: ÄÖÜß
Oliv. 11-Oct-2007 02:20
accents convertion trick :

<?php
       
    function ucfirstHTMLentity($matches){
        return "&".ucfirst(strtolower($matches[1])).";";
    }
    function fullUpper($str){
        $subject = strtoupper(htmlentities($str, null, 'UTF-8'));
        $pattern = '/&([A-Z]+);/';
        return preg_replace_callback($pattern, "ucfirstHTMLentity", $subject);
    }

        print fullUpper($_REQUEST["txt"]);
   
?>
xguimax at gmail dot com 05-Oct-2007 08:17
Portuguese version of String Capitalize in PHP.

    function strProper($str)
    {
        $noUp = array('um','uma','o','a','de','do','da','em');
        $str = trim($str);
        $str = strtoupper($str[0]) . strtolower(substr($str, 1));
        for($i=1; $i<strlen($str)-1; ++$i) {
            if($str[$i]==' ') {
                for($j=$i+1; $j<strlen($str) && $str[$j]!=' '; ++$j); //find
next space
                $size = $j-$i-1;
                $shortWord = false;
                if($size<=3) {
                    $theWord = substr($str,$i+1,$size);
                    for($j=0; $j<count($noUp) && !$shortWord; ++$j)
                        if($theWord==$noUp[$j])
                            $shortWord = true;
                }
                if( !$shortWord )
                    $str = substr($str, 0, $i+1) . strtoupper($str[$i+1]) .
substr($str, $i+2);
            }  
            $i+=$size;
        }
        return $str;
    }
marcinhacia at gazeta dot pl 31-Jul-2007 03:15
In response to strtoupper:

There is a simpler way to change the first letter of a string to uppercase:

<?php
$string='this is a much more simpler way to capitalise the first character of a
string';
echo ucfirst($string); // This is a much more...
?>
16-May-2007 08:40
<?php
$string='this is a simpler way to capitalise the first character of a string';
$string[0]=strtoupper($string[0]);
echo $string; // This is a simpler way...
?>
RUNET 18-Apr-2007 12:33
Russian

function str_to_upper($str){
    return strtr($str,
    "abcdefghijklmnopqrstuvwxyz".
    "\xE0\xE1\xE2\xE3\xE4\xE5".
    "\xb8\xe6\xe7\xe8\xe9\xea".
    "\xeb\xeC\xeD\xeE\xeF\xf0".
    "\xf1\xf2\xf3\xf4\xf5\xf6".
    "\xf7\xf8\xf9\xfA\xfB\xfC".
    "\xfD\xfE\xfF",
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
    "\xC0\xC1\xC2\xC3\xC4\xC5".
    "\xA8\xC6\xC7\xC8\xC9\xCA".
    "\xCB\xCC\xCD\xCE\xCF\xD0".
    "\xD1\xD2\xD3\xD4\xD5\xD6".
    "\xD7\xD8\xD9\xDA\xDB\xDC".
    "\xDD\xDE\xDF");
}
Cory 24-Jul-2006 04:05
This function converts any series of english words to Proper Casing.  It also
accounts for words such as 'a' and 'the'.  To change what words are ignored,
just change the $noUp array.

function strProper($str) {
    $noUp = array('a','an','of','the','are','at','in');
    $str = trim($str);
    $str = strtoupper($str[0]) . strtolower(substr($str, 1));
    for($i=1; $i<strlen($str)-1; ++$i) {
        if($str[$i]==' ') {
            for($j=$i+1; $j<strlen($str) && $str[$j]!=' '; ++$j); //find next
space
            $size = $j-$i-1;
            $shortWord = false;
            if($size<=3) {
                $theWord = substr($str,$i+1,$size);
                for($j=0; $j<count($noUp) && !$shortWord; ++$j)
                    if($theWord==$noUp[$j])
                        $shortWord = true;
            }
            if( !$shortWord )
                $str = substr($str, 0, $i+1) . strtoupper($str[$i+1]) . substr
($str, $i+2);
        }   
        $i+=$size;
    }
    return $str;
}
sjrd at redaction-developpez dot com 03-Jun-2006 06:12
Angus Lord's function has got a problem with html entities such as &amp;, for
they're converted into &Amp;, which is incorrect.

The following code fixes the problem:

<?php
function to_upper($string)
{
  $new_string = "";
  while (eregi("^([^&]*)(&)(.)([a-z0-9]{2,9};|&)(.*)", $string, $regs))
  {
    $entity = $regs[2].strtoupper($regs[3]).$regs[4];
    if (html_entity_decode($entity) == $entity)
      $new_string .= strtoupper($regs[1]).$regs[2].$regs[3].$regs[4];
    else
      $new_string .= strtoupper($regs[1]).$entity;
    $string = $regs[5];
  }
  $new_string .= strtoupper($string);
  return $new_string;
}
?>
bart at insane dot at 10-May-2006 11:31
When using UTF-8 and need to convert to uppercase with
special characters like the german ä,ö,ü (didn't test for french,polish,russian
but think it should work, too) try this:

function strtoupper_utf8($string){
    $string=utf8_decode($string);
    $string=strtoupper($string);
    $string=utf8_encode($string);
    return $string;
}
tree2054 at hotmail dot com 14-Feb-2006 06:11
An even simpler version of h3's rewrite:

<?php
function isupper($i) { return (strtoupper($i) === $i);}
function islower($i) { return (strtolower($i) === $i);}
?>
G rkem PA ACI(gorkempacaci[et]gmail.com) 06-Jan-2006 02:36
These functions can be used on Turkish(iso-8859-9):
Turkce(iso-8859-9) icin su fonksiyonlar kullanilabilir:

$tr_low_letters = str_split("abc defg h ijklmno pqrs tu vwxyz");
$tr_up_letters = str_split("ABC DEFG HI JKLMNO PQRS TU VWXYZ");
function tr_uppercase($str) {
    global $tr_low_letters, $tr_up_letters;
    return str_replace($tr_low_letters, $tr_up_letters, $str);
}
function tr_lowercase($str) {
    global $tr_low_letters, $tr_up_letters;
    return str_replace($tr_up_letters, $tr_low_letters, $str);
}
function tr_fuppercase($str) {//only first letter uppercase
    return tr_uppercase($str[0]) . tr_lowercase(substr($str,1));
}
Vadim from Baku 27-Nov-2005 09:55
The following function counts uppercase letters in English and Cyrillic. It
works great with cyrillic when strtolower doesn't work due to enviroment
settings.(Thank you Sean!).

preg_match_all("@[A-Z - ]@",$str,$m,PREG_OFFSET_CAPTURE)

It is probably displayed incorrectly due to page encoding, but there are range
from the first uppercase letter of the latin alphabet to the last one and range
from the first uppercase cyrillic alphabet letter to the last one in the
pattern. Not sure but similar approach can work for other alphabets.
Beniamin 26-Nov-2005 02:04
Here is correct str2upper function for polish programmers (plus str2lower
function):

<?php
function str2upper($text){
   return strtr($text,
   "abcdefghijklmnopqrstuvwxyz".
   "\xB1\xE6\xEA\xB3\xF1\xF3\xB6\xBC\xBF". // ISO 8859-2
   "\xB9\x9C\x9F", // win 1250
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
   "\xA1\xC6\xCA\xA3\xD1\xD3\xA6\xAC\xAF". // ISO 8859-2
   "\xA5\x8C\x8F"  // win 1250
   );
}

function str2lower($text){
   return strtr($text,
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
   "\xA1\xC6\xCA\xA3\xD1\xD3\xA6\xAC\xAF". // ISO 8859-2
   "\xA5\x8C\x8F",  // win 1250
   "abcdefghijklmnopqrstuvwxyz".
   "\xB1\xE6\xEA\xB3\xF1\xF3\xB6\xBC\xBF". // ISO 8859-2
   "\xB9\x9C\x9F" // win 1250
   );
}
?>
julas 01-Aug-2005 10:46
The code for Polish programmers was spolied a little bit - \xB3 should be
turned into \xA3, not the opposite. So the correct code is:

function str2upper($text){
   return strtr($text,
   "abcdefghijklmnopqrstuvwxyz".
   "\xB1\xE6\xEA\xA3\xF1\xF3\xB6\xBC\xBF". // ISO 8859-2
   "\xB9\x9C\x9F", // win 1250
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
   "\xA1\xC6\xCA\xB3\xD1\xD3\xA6\xAC\xAF". // ISO 8859-2
   "\xA5\x8C\x8F"  // win 1250
   );
}
kirsman 07-Jul-2005 05:37
For polish programmers:

function str2upper($text){
   return strtr($text,
   "abcdefghijklmnopqrstuvwxyz".
   "\xB1\xE6\xEA\xA3\xF1\xF3\xB6\xBC\xBF". // ISO 8859-2
   "\xB9\x9C\x9F", // win 1250
   "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
   "\xA1\xC6\xCA\xB3\xD1\xD3\xA6\xAC\xAF". // ISO 8859-2
   "\xA5\x8C\x8F"  // win 1250
   );
30-May-2005 01:11
// 2005/5/30 Justin
    // Chinese_Traditional toupper
    function CT_to_upper($string)
    {       
        $isChineseStart = false;
       
          $new_string = "";
         $i = 0;
          while($i < strlen($string))
          {                  
               if (ord(substr($string,$i,1)) <128)
               {
                   if( $isChineseStart == false )
                       $new_string .= strtoupper(mb_substr($string,$i,1));
                   else      
                       $new_string .= substr($string,$i,1);
               }
               else
               {
                   if( $isChineseStart == false )
                       $isChineseStart = true;
                   else
                       $isChineseStart = false;                      
                    
                     $new_string .= substr($string,$i,1);
               }
               $i++;
          }
          return $new_string;         
    }
    //
Justin_Lin at mail2000 dot com dot tw 30-May-2005 01:09
The following is my code for translate a given string to upper case and it will
support chinese traditional :

// 2005/5/30 Justin
// Chinese_Traditional toupper
function CT_to_upper($string)
{       
    $isChineseStart = false;
       
    $new_string = "";
    $i = 0;
    while($i < strlen($string))
    {                  
           if (ord(substr($string,$i,1)) <128)
            {
           if( $isChineseStart == false )
                $new_string .= strtoupper(mb_substr($string,$i,1));
           else      
                $new_string .= substr($string,$i,1);
             }
             else
             {
           if( $isChineseStart == false )
                  $isChineseStart = true;
           else
                $isChineseStart = false;                                 
             $new_string .= substr($string,$i,1);
             }
             $i++;
      }
      return $new_string;         
}
//
willyann at gmail dot com 25-May-2005 04:31
chinese

function to_upper($string) {
  $new_string = "";
  $i = 0;
  while($i < strlen($string)) {
   if (ord(substr($string,$i,1)) <128)
   {
     $new_string .= strtoupper(substr($string,$i,1));
     $i++;
   } else {
     $new_string .= substr($string,$i,2);
     $i=$i+2;
   }
  }
  return $new_string;
}
13-Mar-2005 01:08
Ah, the last code were spoiled, here is the fixed one:

<?php

function str_to_upper($str){
    return strtr($str,
    "abcdefghijklmnopqrstuvwxyz".
    "\x9C\x9A\xE0\xE1\xE2\xE3".
    "\xE4\xE5\xE6\xE7\xE8\xE9".
    "\xEA\xEB\xEC\xED\xEE\xEF".
    "\xF0\xF1\xF2\xF3\xF4\xF5".
    "\xF6\xF8\xF9\xFA\xFB\xFC".
    "\xFD\xFE\xFF",
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ".
    "\x8C\x8A\xC0\xC1\xC2\xC3\xC4".
    "\xC5\xC6\xC7\xC8\xC9\xCA\xCB".
    "\xCC\xCD\xCE\xCF\xD0\xD1\xD2".
    "\xD3\xD4\xD5\xD6\xD8\xD9\xDA".
    "\xDB\xDC\xDD\xDE\x9F");
}

?>

So, this function changes also other letters into uppercase, strtoupper() does
only change: a-z to: A-Z.
30-Oct-2004 10:23
If you only need to extend the conversion by the characters of a certain
language, it's possible to control this using an environment variable to change
the locale:

setlocale(LC_CTYPE, "de_DE");
p dot thomas at inlive dot info 03-Apr-2004 12:02
Some bench :

String Copy, OUT=IN : 21.398067474365 ms

String TRANSFORMATION :

- strtolower : 383.09001922607 ms
- strtolower( strtr) : 267.36092567444 ms
- preg_replace : 16624.928951263 ms
- stringUpDown : 4013.0908489227 ms

IN : jehrjzh r ' ' _- &  (r&)                          EAZREZREZ^m
OUT : jehrjzh r ' ' _- &  (r&)                          eazrezrez^m

Platform : AMD 1 Ghz, Win2K, EasyPHP
martine 07-Feb-2004 03:41
This may save you time and effort (if you need to convert european languages
such as Czech, Portugees, German or Swedish)

the function mb_strtoupper() converts all accented characters in the latin
alphabet, ie.  ,  ,  ,   etc. This is easier than some of the suggestions
below. It should also convert case properly for russian, etc.
mec at stadeleck dot org 02-Dec-2002 02:54
something I myself first not thought about:
if there are any html entities (named entities) in your string, strtoupper will
turn all letters within this entities to upper case, too. So if you want to
manipulate a string with strtoupper it should contain only unicode entities (if
ever).
urudz at strategma dot bg 21-Apr-2002 04:49
on linux
php gets LC_LOCAL env variable therefor you must set this

export LC_ALL=bg_BG.CP1251
export LANG=bg_BG.CP1251

before starting of apache i have put this to lines in /etc/rc.d/rc.httpd
-----

cat /etc/rc.d/rc.httpd
#!/bin/sh
#
# Start the Apache web server
#

export LC_ALL=bg_BG.CP1251
export LANG=bg_BG.CP1251

case "$1" in
   'start')
      /usr/sbin/apachectl startssl ;;
   'stop')
      /usr/sbin/apachectl stop ;;
   'restart')
      /usr/sbin/apachectl restart ;;
   *)
      echo "usage $0 start|stop|restart" ;;
esac
-------

in windows you must define your "locale"
in control panel  > regional options > general

best regards urudz :>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue Jan 3 20:41:33 2012 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

gmmktime> <gettimeofday
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
gmdate

(PHP 4, PHP 5)

gmdate — GMT/UTC の日付/時刻を書式化する

説明

string gmdate ( string $format [, int $timestamp = time() ] )

date() 関数と同じですが、返される時刻がグリニッジ標準時 (GMT) であるところが異
なります。

パラメータ

format

    出力される文字列の書式。date() 関数の書式オプションを参照ください。

timestamp

    オプションのパラメータ timestamp は、 integer 型の Unix タイムスタンプです
    。 timestamp が指定されなかった場合のデフォルト値は、現在の時刻です。言い換
    えると、デフォルトは time() の返り値となります。

返り値

日付を表す文字列を返します。 timestamp に数字以外が使用された場合は FALSE が返
され、E_WARNING レベルのエラーが発生します。

変更履歴

バー
ジョ                                    説明
 ン
      有効なタイムスタンプの範囲は、通常 Fri, 13 Dec 1901 20:45:54 GMT から
      Tue, 19 Jan 2038 03:14:07 GMT までです (これらの日付は、32 ビット符号付き
5.1.0 整数の最小および最大値に対応します)。しかし、PHP 5.1 より前のバージョンで
      は、システム環境によっては (例: Windows) この範囲が 1970 年 1 月 1 日から
      2038 年 1 月 19 日までに制限されます。
5.1.1 PHP 5.1.1 以降、format パラメータで標準的な日付/時刻フォーマットを指定す
      る際に有用な定数がいくつか追加されました。

例

例1 gmdate() の例

フィンランド (GMT +0200) で実行した場合、一行目の出力は "Jan 01 1998 00:00:00"
、二行目の出力は "Dec 31 1997 22:00:00" となります。

<?php
echo date("M d Y H:i:s", mktime(0, 0, 0, 1, 1, 1998));
echo gmdate("M d Y H:i:s", mktime(0, 0, 0, 1, 1, 1998));
?>

参考

  • date() - ローカルの日付/時刻を書式化する
  • mktime() - 日付を Unix のタイムスタンプとして取得する
  • gmmktime() - GMT 日付から Unix タイムスタンプを取得する
  • strftime() - ロケールの設定に基づいてローカルな日付・時間をフォーマットする



gmmktime> <gettimeofday
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes gmdate
RPaseur at NationalPres dot org 25-Jul-2009 07:51
Greenwich Mean Time has no "Summer Time" or "Daylight Saving Time" so depending
on the season of the year these statements may produce the same or different
output.

<?php
date_default_timezone_set('Europe/London');
echo gmdate('c');
echo date('c');
?>
QED2000 07-Aug-2008 06:14
Here is a very simple UTC timestamp:

<?php

 print gmdate("Y-m-d\TH:i:s\Z");

?>
Glen 05-Dec-2007 12:32
This routine can help obtain a UTC timestamp:

<?php
  $utc_str = gmdate("M d Y H:i:s", time());
  $utc = strtotime($utc_str);
?>

Note that gmmktime(), mktime() and time() all return the same value (with no
params).  This was the cleanest way I found to create a UTC timestamp.
jhechtf at gmail dot com 25-Jul-2007 03:19
My function for something like this is like so:
<?php
function actual_time($format,$offset,$timestamp){
   //Offset is in hours from gmt, including a - sign if applicable.
   //So lets turn offset into seconds
   $offset = $offset*60*60;
   $timestamp = $timestamp + $offset;
    //Remember, adding a negative is still subtraction ;)
   return gmdate($format,$timestamp);
}
?>
It's always worked fine for me.
Blazeme 15-Jun-2007 10:25
Here, I wrote a function (from code above) for easy time zone
settings.
Regards.
<?php
function datum($datum=true) {
$sign = "+"; // Whichever direction from GMT to your timezone. + or -
$h = "1"; // offset for time (hours)
$dst = true; // true - use dst ; false - don't

if ($dst==true) {
    $daylight_saving = date('I');
    if ($daylight_saving){
        if ($sign == "-"){ $h=$h-1;  }
        else { $h=$h+1; }
    }
}
$hm = $h * 60;
$ms = $hm * 60;
if ($sign == "-"){ $timestamp = time()-($ms); }
else { $timestamp = time()+($ms); }
$gmdate = gmdate("m.d.Y. g:i A", $timestamp);
if($datum==true) {
return $gmdate;
}
else {
return $timestamp;
}

}
?>

If you set first argument to true, it'll return formated date.
If false, will return $timestamp.
Enjoy!
code at ashleyhunt dot co dot uk 28-Mar-2007 02:53
I wanted to get the time past from two MySQL dates and came up with this code
that does the trick.
Supply a start date, end date and optional output date/time format the default
is in seconds but will expand from SS to MM:SS and then to HH:MM:SS
automatically, you may wish to force a date format that will not be dynamic
(site layout etc). See examples below, also see function date() for more date
format options.

<?php
function calculate_time_past($start_time, $end_time, $format = "s") {
    $time_span = strtotime($end_time) - strtotime($start_time);
    if ($format == "s") { // is default format so dynamically calculate date
format
        if ($time_span > 60) { $format = "i:s"; }
        if ($time_span > 3600) { $format = "H:i:s"; }
    }
    return gmdate($format, $time_span);
}

$start_time = "2007-03-28 00:50:14"; // 00:50:14 will work on its own
$end_time = "2007-03-28 00:52:59"; // 00:52:59 will also work instead

echo calculate_time_past($start_time, $end_time) . "<br />"; // will output
02:45
echo calculate_time_past($start_time, $end_time, "H:i:s"); // will output
00:02:45 when format is overridden
?>

I hope it of use.
Regards,
Ashley
derek at d3swimming dot com 14-Nov-2006 04:30
I don't really know what I'm doing, so I just stole various parts of this from
other people around here and did a little improvising on my own.  Hope this is
helpful to somebody.

This script allows you to insert just three variables: direction from GMT to
your timezone ($sign), number of hours to your timezone ($h), and whether or
not you have daylight savings time ($dst).  The rest, including daylight
savings time, will take care of itself (unless I don't know what I'm doing!).

<?php
// Get info about time zone relationship to GMT at: http://
wwp.greenwichmeantime.com/

// SELECT TIME ZONE
$sign = "-"; // Whichever direction from GMT to your timezone.
$h = "8"; // Hour for time zone goes here e.g. +8 or -4, just remove the + or -
$dst = "true"; // Just insert "true" if your location uses daylight savings
time or "false" if it does not

// DETECT AND ADJUST FOR DAYLIGHT SAVINGS TIME
if ($dst) {
    $daylight_saving = date('I');
    if ($daylight_saving){
        if ($sign == "-"){ $h=$h-1;  }
        else { $h=$h+1; }
    }
}

// FIND DIFFERENCE FROM GMT
$hm = $h * 60;
$ms = $hm * 60;

// SET CURRENT TIME
if ($sign == "-"){ $timestamp = time()-($ms); }
else { $timestamp = time()+($ms); }

// SAMPLE OUTPUT
$gmdate = gmdate("m/d/Y g:i:s A", $timestamp);

echo "Your current time now is :  $gmdate . ";
?>
ttech5593 at gmail dot com 28-Mar-2006 10:53
For me most of the examples here needed the + or - seconds to set the time
zone. I wanted a faster way to get the time zone in seconds. So I created this
:
<?php
$h = "3";// Hour for time zone goes here e.g. +7 or -4, just remove the + or -
$hm = $h * 60;
$ms = $hm * 60;
$gmdate = gmdate("m/d/Y g:i:s A", time()-($ms)); // the "-" can be switched to
a plus if that's what your time zone is.
echo "Your current time now is :  $gmdate . ";
?>
It works. Hope it helps.
gefiltefishee at comcast dot net 11-Mar-2006 09:54
I was struggling with how to get my browser to output MY local time using
gmdate().

I figured it out and here's what you do (ASSUMING THE SERVER IS ON GMT, If not,
just echo a generic gmdate() without timezone setting and calculate the number
of hours ahead or behind you are of that time, convert it to seconds and add
[for ahead] or subtract [for behind] that value to time() ):

NOTE: these are US times [setlocale(LC_TIME, 'en_US')]

for Central Time (7 hours behind GMT):
gmdate("format", time()-(25200));

For Pacific Time (9 hours behind GMT):
gmdate("format", time()-(32400));

REMEMBER - THE VALUES ABOVE ASSUME THE SERVER IS ON GMT

I used the following gmdate() format:
"l, F jS, Y  g:i a"
but you can use what you like ;)

Hope this helps!
fernandobassani at gmail dot com 28-Dec-2005 01:35
If you have the same application running in different countries, you may have
some troubles getting the local time..
In my case, I was having troubles with a clock created with Macromedia Flash...
the time shown by the clock was supposed to be set up by the server, passing
the timestamp. When I moved the file to another country, I got a wrong time...
You can use the timezone offset ( date("Z") ) to handle this kind of thing...

<?php
$timestamp = time()+date("Z");
echo gmdate("Y/m/d H:i:s",$timestamp);
?>
Sir Derek G 25-Nov-2005 07:00
Here's a nifty little function that returns a random timestamp between two
dates.

<?php
//////////////////////////////////////////////////////////
// Return a random timestamp between two dates (inclusive)
// Example: Tue, 08 Nov 2004 06:47:10 GMT
//
// time - Starting time string
// Valid Examples:
// 10 September 2001
// next Thursday
// last Monday
// now
//
// time2 - Ending time string
function randomTimestamp($time = "" , $time2 = "")
{
    if(!$time) $time = strtotime("10 September 2000");
    if(!$time2) $time2 = strtotime("24 November 2005");
    $timestamp = date(" D, d M Y", rand( settype($time , int) , settype($time2
, int) )); //Must be called once before becoming random, ???
    $timestamp = date(" D, d M Y", rand($time , $time2))." ";//Now it's random
   
    $h = rand(1,23);
    if(strlen($h) == 1 ) $h = "0$h";
    $t = $h.":";
   
    $d = rand(1,29);
    if(strlen($d) == 1 ) $d = "0$d";
    $t .= $d.":";
   
    $s = rand(0,59);
    if(strlen($s) == 1 ) $s = "0$s";
    $t .= $s;
   
    $timestamp .= $t." GMT";
    return $timestamp;
}
?>
rob at geek dot co dot nz 07-Nov-2005 08:06
It's worth noting the distinction between gmgate() and date() with regards to
day light savings time. If your server uses universal time and makes an
adjustment by locale for daylight savings time, you will want to use date().
gmdate will display the non-adjuisted time.
paul at sysnyx dot com 23-Sep-2005 08:16
Gives user the ability to use their timezone preferences.
I had to create this script for a very large community. I first made any posts
to the database that would display the date using just time();

Example: mysql_query("INSERT INTO `table` (`datetime`) VALUES ('".time()."')");

Also, for their timezone preference, I had the values as (example):
(Eastern Timezone) -5 hours
(Newfoundland) -3 hours -30 minutes

This information would be saved in the users table.
To display the date and time in their respective timezone preference:

<?php
function datetime($datetime,$zone){
if(date('I')):$datetime+=60*60;endif;
return gmdate('m-d-Y - h:i:sa',strtotime($zone,$datetime));
}
?>

$datetime would be the information pulled from the database from a post for
news, forums, etcetera (remember, the inserted table data for the time was
using time();)
$zone would be the information pulled from the database from the users timezone
preference.

I also used cookies to store their timezone:
$sth=mysql_query("SELECT `datetime` FROM `table` LIMIT 1");
$row=mysql_fetch_assoc($sth);
echo datetime($row['datetime'],$_COOKIE['timezone']);

Remember to set the 'm-d-Y - h:i:sa' to how you wish the time to display. Visit
the manual about date().
ncofreNOSPAMPLEASE at step2u dot com 20-May-2005 11:21
Want to put different International Times in your web?

First create a database including the GMT and the DST (find it f.i. at
timeanddate.com). Be careful, because there are several different DST dates and
options.

Once you have your function which calculates the GMT hour difference (it can be
a decimal!!), sum it to the Unix Time (remember that unix time is GMT, not
local: f.i. gmdate("U")===date("U)).

Don't forget to recalculate the GMT difference to seconds before it.

Then format your date using gmdate() (not date()!) and... you've got your
International Time!

<?php

$city["Name"] = "Barcelona";
$city["GMT"] = 1.0;
$city["actualDST"] = 1.0; //Because it's summer time

$gmt_diff = $city["GMT"]+$city["actualDST"]; //your functions for getting the
hour difference betweer the city and the GMT
$city_time = time()+($gmt_diff*3600); //sum the timestamps
echo gmdate("H:i",$city_time); //echo the formatted date
echo " h. in the beautiful city of ".$city["Name"];

?>
Kogik inc dot -- info at kogik dot com 08-Jul-2004 09:35
Wath out for summer time and winter time...

If you want to get the current date and time based on GMT you could use this :

<?php
$timezone  = -5; //(GMT -5:00) EST (U.S. & Canada)
echo gmdate("Y/m/j H:i:s", time() + 3600*($timezone+date("I")));
?>

this would gives: 2004/07/8 14:35:19 in summer time
and 2004/07/8 13:35:19 in winter time.

Note that date("I") returns 1 in summer and 0 in winter.
www.l-serwis.wpt.pl 13-Nov-2003 09:51
If you want to get time in your timezone try this:

<?php
$zone=3600*0 //GMT
$zone=3600*1 //CET
$zone=3600*-5//USA
$date=gmdate("D M Y H:i", time() + $zone);
?>
08-Sep-2002 04:26
Do not use the "T" timezone specifier to generate "GMT", as this may return
"UTC" or "GMT+0000" or "Z" or something else which depends on the running
platform, which would not be RFC1123 compliant.

Use 'D, d M Y H:i:s \G\M\T' which forces the value of the timezone indicator.

Note that RFC1123 requires the use of ENGLISH day and month abbreviations. They
MUST NOT be localized!

An example of the RFC1123 format for full dates is:
Sun, 06 Nov 1994 08:49:37 GMT

Note the presence of the leading 0 (RFC1123 dates have a fixed size, and space
padding is prohibited because it causes problems with fixed size handling when
such dates are used in HTTP headers that may compress whitespaces.

Some proxies accept also the ISO 8601 format, but this is not documented in
HTTP/1.1 specs (RFC2616).

Examples:
<?php
header('Date: '.gmdate('D, d M Y H:i:s \G\M\T', time()));
header('Last-Modified: '.gmdate('D, d M Y H:i:s \G\M\T', time()));
header('Expires: '.gmdate('D, d M Y H:i:s \G\M\T', time() + 3600));
?>

or if you prefer double quotes and don't want to bother with double
backslashes:
<?php
header("Date: ".gmdate("D, d M Y H:i:s", time())." GMT");
header("Last-Modified: ".gmdate("D, d M Y H:i:s", time())." GMT");;
header("Expires: ".gmdate("D, d M Y H:i:s", time() + 3600)." GMT");
?>
15-Jun-2002 03:09
For an RFC 1123 (HTTP header date) date, try:

<?php
$rfc_1123_date = gmdate('D, d M Y H:i:s T', time());
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 30 02:22:05 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

date_add> <日付・時刻関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
checkdate

(PHP 4, PHP 5)

checkdate — グレゴリオ暦の日付/時刻の妥当性を確認します

説明

bool checkdate ( int $month , int $day , int $year )

引数で指定された日付の妥当性をチェックします。各パラメータが適切に指定されてい
る場合に、妥当であると判断されます。

パラメータ

month

    月は 1 から 12 の間となります。

day

    日は、指定された month の日数の範囲内になります。year がうるう年の場合は、
    それも考慮されます。

year

    年は 1 から 32767 の間となります。

返り値

指定した日付が有効な場合に TRUE、そうでない場合に FALSE を返します。

例

例1 checkdate() の例

<?php
var_dump(checkdate(12, 31, 2000));
var_dump(checkdate(2, 29, 2001));
?>

上の例の出力は以下となります。

bool(true)
bool(false)

参考

  • mktime() - 日付を Unix のタイムスタンプとして取得する
  • strtotime() - 英文形式の日付を Unix タイムスタンプに変換する



date_add> <日付・時刻関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes checkdate
pradeepkumarprajapati3 at yahoo dot co dot in 19-Dec-2011 07:23
don't use strtotime() to format inputs to checkdate(). It would give false
results.
Eg,
Below function would return true though it should have been false
$str = '2011-11-31'; //invalid date, november has 30 days only
function isDateValid($str)
{
  $stamp = strtotime($str);
  if (!is_numeric($stamp))
     return FALSE;
 
  //checkdate(month, day, year)
  if ( checkdate(date('m', $stamp), date('d', $stamp), date('Y', $stamp)) )
  {
     return TRUE;
  }
  return FALSE;
}

The reason is that strtotime() coverts 2011-11-31 to 2011-12-01.
check with date('Y-m-d', strtotime('2011-11-31'))
Anonymous 13-Jul-2009 07:06
Beware that checkdate can not be used as validation to check if a date is
correct.

The example below will return bool(true) which can result that the <script>
part is inserted into the database.

<?php

$date = "01-01-1980 <script>alert('test');</script>";
$aDate_parts = preg_split("/[\s-]+/", $date);

var_dump(
    checkdate(
        $aDate_parts[1], // Month
        $aDate_parts[0], // Day
        $aDate_parts[2] // Year
    )
);

?>
iamcanadian1973 at gmail dot com 17-Apr-2009 04:37
[NOTE BY danbrown AT php DOT net: The author's purpose for this function is to
determine whether or not a given string $str is a date using a static
algorithm.]

<?php
function is_date( $str )
{
  $stamp = strtotime( $str );
 
  if (!is_numeric($stamp))
  {
     return FALSE;
  }
  $month = date( 'm', $stamp );
  $day   = date( 'd', $stamp );
  $year  = date( 'Y', $stamp );
 
  if (checkdate($month, $day, $year))
  {
     return TRUE;
  }
 
  return FALSE;
}
?>
rfeugenio at gmail dot com 27-Mar-2009 06:21
<?php

// This is a simple function that will get the last day of the month.

function GetLastDayofMonth($year, $month) {
    for ($day=31; $day>=28; $day--) {
        if (checkdate($month, $day, $year)) {
            return $day;
        }
    }   
}

?>
James Luckhurst 23-Mar-2009 12:26
<?php
/*
## converts a given date format to another date format returns date if the
checked date given is valid; otherwise returns NULL
## $s_date the date in e.g. dd/mm/yyyy
## $s_from, $s_to date formats from to i.e. convertdate('13/04/
2009','eng','iso','-'); output: 2009-04-13
## date formats available
## 'eng' = dd/mm/yyyy
## 'usa' = mm/dd/yyyy
## 'iso' = yyyy/mm/dd
## $s_return_delimiter returned delimiter e.g. '-' would return dd-mm-yyyy
*/
function convertdate($s_date,$s_from,$s_to,$s_return_delimiter) {

    $s_return_date = '';
    $s_from = strtolower($s_from);
    $s_to = strtolower($s_to);
    $s_date = str_replace(array('\'', '-', '.', ',', ' '), '/', $s_date);
    $a_date = explode('/', $s_date);
   
    switch($s_from) {
        case 'eng': # dd/mm/yyyy
            $day = $a_date[0];
            $month = $a_date[1];
            $year = $a_date[2];
        break;
        case 'usa':  # mm/dd/yyyy
            $month = $a_date[0];
            $day = $a_date[1];
            $year = $a_date[2];
        break;
        case 'iso': # yyyy/mm/dd
            $year = $a_date[0];
            $month = $a_date[1];
            $day = $a_date[2];
        break;
        default: # error message
            user_error('function convertdate(string $s_date, string $s_from,
string $s_to, string $s_return_delimiter) $s_from not a valid type of \'eng\',
\'usa\' or \'iso\'');
            return NULL;
    }

    # substitution fixes of valid alternative human input e.g. 1/12/08
    if (strlen($day)==1) { $day='0'.$day; } # day -trailing zero missing
    if (strlen($month)==1) { $month='0'.$month; } # month -trailing zero
missing
    if (strlen($year)==3) { $year=substr(date('Y'),0,strlen(date('Y'))
-3).$year; } # year -millennium missing
    if (strlen($year)==2) { $year=substr(date('Y'),0,strlen(date('Y'))
-2).$year; } # year -century missing
    if (strlen($year)==1) { $year=substr(date('Y'),0,strlen(date('Y'))
-1).$year; } # year -decade missing

    switch($s_to) {
        case 'eng': # dd/mm/yyyy
            $s_return_date =
$day.$s_return_delimiter.$month.$s_return_delimiter.$year;
        break;
        case 'usa':  # mm/dd/yyyy
            $s_return_date =
$month.$s_return_delimiter.$day.$s_return_delimiter.$year;
        break;
        case "iso": # yyyy/mm/dd
            $s_return_date =
$year.$s_return_delimiter.$month.$s_return_delimiter.$day;
        break;
        default: # error message
            user_error('function convertdate(string $s_date, string $s_from,
string $s_to, string $s_return_delimiter) $s_to not a valid type of \'eng\', \
'usa\' or \'iso\'');
            return NULL;
    }

    # if it's an invalid calendar date e.g. 40/02/2009 or rt/we/garbage
    if (!is_numeric($month) || !is_numeric($day) || !is_numeric($year)) {
        return NULL;
    } elseif (!checkdate($month, $day, $year)) {
        return NULL;
    }

    return $s_return_date;
}

echo convertdate('13/04/2009','eng','iso','-');
?>
ystein M 18-Mar-2009 01:51
I think there is an error in the function from bmauser below. $regexp is
overwritten. Here's another version which also accepts missing zeros and two
digits year notation.

This function checks date if matches given format and validity of the date.

<?php
/**
 * Checks date if matches given format and validity of the date.
 * Examples:
 * <code>
 * is_date('22.22.2222', 'mm.dd.yyyy'); // returns false
 * is_date('11/30/2008', 'mm/dd/yyyy'); // returns true
 * is_date('30-01-2008', 'dd-mm-yyyy'); // returns true
 * is_date('2008 01 30', 'yyyy mm dd'); // returns true
 * </code>
 * @param string $value the variable being evaluated.
 * @param string $format Format of the date. Any combination of <i>mm<i>, <i>dd
<i>, <i>yyyy<i>
 * with single character separator between.
 */
function is_valid_date($value, $format = 'dd.mm.yyyy'){
    if(strlen($value) >= 6 && strlen($format) == 10){
       
        // find separator. Remove all other characters from $format
        $separator_only = str_replace(array('m','d','y'),'', $format);
        $separator = $separator_only[0]; // separator is first character
       
        if($separator && strlen($separator_only) == 2){
            // make regex
            $regexp = str_replace('mm', '(0?[1-9]|1[0-2])', $format);
            $regexp = str_replace('dd', '(0?[1-9]|[1-2][0-9]|3[0-1])',
$regexp);
            $regexp = str_replace('yyyy', '(19|20)?[0-9][0-9]', $regexp);
            $regexp = str_replace($separator, "\\" . $separator, $regexp);
            if($regexp != $value && preg_match('/'.$regexp.'\z/', $value)){

                // check date
                $arr=explode($separator,$value);
                $day=$arr[0];
                $month=$arr[1];
                $year=$arr[2];
                if(@checkdate($month, $day, $year))
                    return true;
            }
        }
    }
    return false;
}
?>

[NOTE BY danbrown AT php DOT net: Original function was written by (bmauser AT
gmail) on 16-DEC-2008.]
sebagr@gmail 04-Mar-2009 05:20
Here's a nice snippet to check if user input is valid:

<?php

$date_format = 'Y-m-d';
$input = '2009-03-03';

$input = trim($input);
$time = strtotime($input);

$is_valid = date($date_format, $time) == $input;

print "Valid? ".($is_valid ? 'yes' : 'no');

?>
venadder at yahoo dot ca 22-Jan-2009 06:49
Here is a simple IsDate function, using purely PHP functions( A Check for
$Stamp can be added to see if it's a legal Unix timestamp ):

<?php
function IsDate( $Str )
{
  $Stamp = strtotime( $Str );
  $Month = date( 'm', $Stamp );
  $Day   = date( 'd', $Stamp );
  $Year  = date( 'Y', $Stamp );

  return checkdate( $Month, $Day, $Year );
}
?>
parris dot varney at gmail dot com 11-Dec-2008 03:24
I put together an is_date function using checkdate.  Works the same as
is_numeric.

<?php
    public static function is_date($date)
    {
        $date = str_replace(array('\'', '-', '.', ','), '/', $date);
        $date = explode('/', $date);

        if(    count($date) == 1 // No tokens
            and    is_numeric($date[0])
            and    $date[0] < 20991231 and
            (    checkdate(substr($date[0], 4, 2)
                        , substr($date[0], 6, 2)
                        , substr($date[0], 0, 4)))
        )
        {
            return true;
        }
       
        if(    count($date) == 3
            and    is_numeric($date[0])
            and    is_numeric($date[1])
            and is_numeric($date[2]) and
            (    checkdate($date[0], $date[1], $date[2]) //mmddyyyy
            or    checkdate($date[1], $date[0], $date[2]) //ddmmyyyy
            or    checkdate($date[1], $date[2], $date[0])) //yyyymmdd
        )
        {
            return true;
        }
       
        return false;
    }
?>
doob_ at gmx dot de 26-Nov-2008 04:47
<?php

/*
** check a date
** dd.mm.yyyy || mm/dd/yyyy || dd-mm-yyyy || yyyy-mm-dd
*/

function check_date($date) {
    if(strlen($date) == 10) {
        $pattern = '/\.|\/|-/i';    // . or / or -
        preg_match($pattern, $date, $char);
       
        $array = preg_split($pattern, $date, -1, PREG_SPLIT_NO_EMPTY);
       
        if(strlen($array[2]) == 4) {
            // dd.mm.yyyy || dd-mm-yyyy
            if($char[0] == "."|| $char[0] == "-") {
                $month = $array[1];
                $day = $array[0];
                $year = $array[2];
            }
            // mm/dd/yyyy    # Common U.S. writing
            if($char[0] == "/") {
                $month = $array[0];
                $day = $array[1];
                $year = $array[2];
            }
        }
        // yyyy-mm-dd    # iso 8601
        if(strlen($array[0]) == 4 && $char[0] == "-") {
            $month = $array[1];
            $day = $array[2];
            $year = $array[0];
        }
        if(checkdate($month, $day, $year)) {    //Validate Gregorian date
            return TRUE;
       
        } else {
            return FALSE;
        }
    }else {
        return FALSE;    // more or less 10 chars
    }
}

check_date('21.02.1983');
check_date('21-02-1983');
check_date('02/21/1983'); // Common U.S. writing
check_date('1983-02-21'); // iso 8601

?>
saturn at ax dot com dot tw 26-Aug-2008 06:06
I wrote a simple function to converter datetime to UNIX timestamp. If the input
time with error format, the function will return current timestamp.

<?php
function datetime2timestamp($datetime)
{
    $datetime = str_replace('-', ' ', $datetime);
    $datetime = str_replace('/', ' ', $datetime);
    $datetime = str_replace(':', ' ', $datetime);
    $array = explode(' ', $datetime);

    $year   = $array[0];
    $month  = $array[1];
    $day    = $array[2];
    $array[3] ? $hour   = $array[3] : $hour   = '00';
    $array[4] ? $minute = $array[4] : $minute = '00';
    $array[5] ? $second = $array[5] : $second = '00';
   
    if (preg_match("/^(\d{4}) (\d{2}) (\d{2}) ([01][0-9]|2[0-3]) ([0-5][0-9])
([0-5][0-9])$/", "$year $month $day $hour $minute $second", $matches)) {
        if (checkdate($matches[2], $matches[3], $matches[1])) {
        return mktime(intval($hour), intval($minute), intval($second), intval
($month), intval($day), intval($year));
        } else {
        return time();
        }       
    } else {
    return time();
    }
}
?>
el dot vartauy__ at t__gmail dot com 29-Feb-2008 06:18
for funny leap year detection:
<?php
function is_leap($year=NULL) {
    return checkdate(2, 29, ($year==NULL)? date('Y'):$year); // true if is a
leap year
}
?>
wasile_ro[at]yahoo[dot]com 08-Oct-2007 02:30
here's a cool function to validate a mysql datetime:

<?php
function isValidDateTime($dateTime)
{
    if (preg_match("/^(\d{4})-(\d{2})-(\d{2}) ([01][0-9]|2[0-3]):([0-5][0-9]):
([0-5][0-9])$/", $dateTime, $matches)) {
        if (checkdate($matches[2], $matches[3], $matches[1])) {
            return true;
        }
    }

    return false;
}
?>
jens wittmann 28-Aug-2007 03:29
for checking the rime use this:

<?php
function checktime($hour, $minute) {
    if ($hour > -1 && $hour < 24 && $minute > -1 && $minute < 60) {
        return true;
    }
}
?>
brenig code 14-Aug-2007 06:21
<?php

/**
* check a date combo of the 2
*/
function checkData($date)
{
    if (!isset($date) || $date=="")
    {
        return false;
    }
  
    list($dd,$mm,$yy)=explode("/",$date);
    if ($dd!="" && $mm!="" && $yy!="")
    {
    if (is_numeric($yy) && is_numeric($mm) && is_numeric($dd))
        {
            return checkdate($mm,$dd,$yy);

        }
    }  
    return false;

}
?>
a34 at yahoo dot com 09-Jul-2007 12:21
checkData function posted below does not consider a date entered such as 03/27c
/2000.   The c will cause it to crash.  Here is the fix.

<?php
function checkData($mydate) {
      
    list($yy,$mm,$dd)=explode("-",$mydate);
    if (is_numeric($yy) && is_numeric($mm) && is_numeric($dd))
    {
        return checkdate($mm,$dd,$yy);
    }
    return false;           
}
?>
manuel84**at**mp4**dot**it 04-Dec-2006 03:49
If you have a date like this gg/mm/aaaa and you'd like to verify that it is in
the Italian Format you can use a function like this.
For other date format you can take this code and simply modify the list and
explode line
<?php
/**
* check a date in the Italian format
*/
function checkData($date)
{
    if (!isset($date) || $date=="")
    {
        return false;
    }
   
    list($dd,$mm,$yy)=explode("/",$date);
    if ($dd!="" && $mm!="" && $yy!="")
    {
        return checkdate($mm,$dd,$yy);
    }
   
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 30 01:21:27 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

strftime> <microtime
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
mktime

(PHP 4, PHP 5)

mktime — 日付を Unix のタイムスタンプとして取得する

説明

int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second =
date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date
("Y") [, int $is_dst = -1 ]]]]]]] )

与えられた引数に従って UNIX のタイムスタンプを返します。このタイムスタンプは、
Unix epoch(1970年1月1日00:00:00 GMT)から指定された時刻までの通算秒を表す長整数
です。

引数は右から順に省略することができます。省略された引数は、ローカルの日付と時刻
に従って、現在の値にセットされます。

注意

    注意:

    PHP 5.1 以降、引数なしでコールすると mktime() は E_STRICT notice を発行する
    ようになりました。かわりに time() 関数を使用しましょう。

パラメータ

hour

    month、day と year で決まる日付の 0 時から数えた「時」。負の値は、その日の
    0 時から前にさかのぼった時間を表します。 23 より大きい値は、その翌日以降の
    該当する時間を表します。

minute

    hour 時 0 分から数えた「分」。負の値は、その前の時刻を表します。 59 より大
    きい値は、その次の時間以降の該当する時間を表します。

second

    minute 分 0 秒から数えた「秒」。負の値は、その前の時刻を表します。 59 より
    大きい値は、その次の分以降の該当する時間を表します。

month

    前年末から数えた月数。1 から 12 までの場合は、カレンダーどおりのその年の「
    月」を表します。 (負の値を含めた) 1 より小さい値は、前年の月を逆順でたどり
    ます。つまり 0 なら 12 月、-1 なら 11 月になるということです。 12 より大き
    い値は、その翌年以降の該当する月を表します。

day

    前月末から数えた日数。1 から 28、29、30、31 (月によって異なる) までの場合は
    、その月の「日」を表します。 (負の値を含めた) 1 より小さい値は、前月の日を
    逆順でたどります。つまり 0 なら前月の末日、-1 ならそのさらに前日になるとい
    うことです。その月の日数より大きい値は、翌月以降の該当する日を表します。

year

    年。2 桁または 4 桁の値を指定可能で、 0-69 の間の値は 2000-2069 に、70-100
    は 1970-2000 にマップされます。今日最も一般的なシステム、すなわち time_t が
    32 ビットの符号付き整数であるシステムでは year として有効な範囲は 1901 から
    2038 の間です。しかし、PHP 5.1.0 より前のバージョンではこの範囲が 1970 から
    2038 に制限されているシステム (たとえば Windows) もありました。

is_dst

    このパラメータはサマータイム (DST) の時に1にセットされ、そうでない時に0、サ
    マータイムであるかどうかが不明である場合に-1 にセットされます。不明な場合、
    PHP はサマータイムかどうか推測しようとします。 PHP を実行しているシステムで
    DST が有効になっている、もしくは is_dst が 1 にセットされている場合、一部の
    時刻は有効になりません。もし DST が有効で例えば 2:00 の場合、2:00 から 3:00
    までの全ての時刻は無効になり、mktime() は不確定な値 (通常は負数) を返します
    。いくつかのシステム (例えば Solaris 8) は真夜中に DST を有効にしますので、
    DST が有効なときの 0:30 は前日の 23:30 と評価されます。

        注意:

        PHP 5.1.0 以降、このパラメータは廃止されました。その結果、新しいタイム
        ゾーン処理機能がかわりに使用されます。

返り値

mktime() は与えられた引数の Unix タイムスタンプを返します。引数が不正な場合、こ
の関数は FALSE を返します（PHP 5.1 より前のバージョンでは -1 を返していました）
。

エラー / 例外

すべての日付/時刻関数は、有効なタイムゾーンが設定されていない場合に E_NOTICE を
発生させます。また、システム設定のタイムゾーンあるいは環境変数 TZ を使用した場
合には E_STRICT あるいは E_WARNING を発生させます。 date_default_timezone_set()
も参照ください。

変更履歴

バージ                                   説明
 ョン
5.3.0  mktime() は、 is_dst パラメータを使用した場合に E_DEPRECATED をスローす
       るようになりました。
5.1.0  is_dst パラメータは廃止されました。エラー時には -1 ではなく FALSE を返す
       ようになりました。年月日がすべてゼロとすることが可能になりました。
5.1.0  引数なしでコールすると、mktime() は E_STRICT notice を発行するようになり
       ました。かわりに time() 関数を使用しましょう。
5.1.0  タイムゾーンがおかしい場合に E_STRICT や E_NOTICE が発生するようになりま
       した。

例

例1 mktime() の基本的な例

<?php
// デフォルトのタイムゾーンを設定します。PHP 5.1 以降で使用可能です
date_default_timezone_set('UTC');

// 出力: July 1, 2000 is on a Saturday
echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));

// 出力例: 2006-04-05T01:02:03+00:00
echo date('c', mktime(1, 2, 3, 4, 5, 2006));
?>

例2 mktime() の例

mktime() は入力日付の有効性を確認しており、範囲外の入力を自動的に修正して計算し
てくれるので便利です。例えば、以下の各行はいずれも文字列 "Jan-01-1998"を出力し
ます。

<?php
echo date("M-d-Y", mktime(0, 0, 0, 12, 32, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 13, 1, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 1998));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 98));
?>

例3 月の末日

指定した月の最後の日は次の月の -1 番目の日ではなく、"0" 番目の日として表すこと
が可能です。以下の例はともに文字列"The last day in Feb 2000 is: 29" を出力しま
す。

<?php
$lastday = mktime(0, 0, 0, 3, 0, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
$lastday = mktime(0, 0, 0, 4, -31, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
?>

注意

警告

PHP 5.1.0 より前のバージョンでは、負の値のタイムスタンプは Windows のどのバージ
ョンにおいてもサポートされていませんでした。したがって、年の有効範囲は 1970 年
から 2038 年の間のみに限定されていました。

参考

  • checkdate() - グレゴリオ暦の日付/時刻の妥当性を確認します
  • gmmktime() - GMT 日付から Unix タイムスタンプを取得する
  • date() - ローカルの日付/時刻を書式化する
  • time() - 現在の Unix タイムスタンプを返す



strftime> <microtime
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes mktime
carlosbuz2 at gmail dot com 04-Mar-2011 06:21
The first date in array is incorrect, to fix it:

function dates_range($date1, $date2)
{
    if ($date1<$date2)
    {
        $dates_range[]=$date1;
        $date1=strtotime($date1);
        $date2=strtotime($date2);
        while ($date1!=$date2)
        {
            $date1=mktime(0, 0, 0, date("m", $date1), date("d", $date1)+1, date
("Y", $date1));
            $dates_range[]=date('Y-m-d', $date1);
        }
    }
    return $dates_range;
}
info at microweb dot lt 03-Nov-2010 03:42
Function to generate array of dates between two dates (date range array)

<?php
function dates_range($date1, $date2)
{
   if ($date1<$date2)
   {
       $dates_range[]=$date1;
       $date1=strtotime($date1);
       $date2=strtotime($date2);
       while ($date1!=$date2)
       {
           $date1=mktime(0, 0, 0, date("m", $date1), date("d", $date1)+1, date
("Y", $date1));
           $dates_range[]=date('Y-m-d', $date1);
       }
   }
   return $dates_range;
}

echo '<pre>';
print_r(dates_range('2009-12-25', '2010-01-05'));
echo '</pre>';
?>

[EDIT BY danbrown AT php DOT net: Contains a bugfix submitted by (carlosbuz2 AT
gmail DOT com) on 04-MAR-2011, with the following note: The first date in array
is incorrect.]
php at wirnhier dot de 02-Nov-2010 05:17
warning: mktime expects parameter 1 to be long

It could be a string that is given to mktime, so it has to be converted into an
int.

mktime((int)$h, (int)$m, (int)$s, (int)$m, (int)$d, (int)$y);
xr714 at yahoo dot com 07-Oct-2010 03:58
One of the many problems with Daylight Saving Time / Summer Time is the
ambiguity when a specified local time value can refer to two different actual
times!  This happens when the local time value is within the relapse range
caused by the clocks being set back to proper time.  (eg. if the DST/ST bias is
+1 hour, and DST/ST terminates at 02:00 local time, a local time value of 01:30
occurs twice in the same day!)

Because the mktime() function only returns one value, it silently chooses
whether to return the time-stamp for the first iteration or the second
iteration of a specified local time within this critical range.

To get both possible time-stamps for a local time, compatible with any system
locale, time zone, and applicable DST/ST rules, the following function can be
used:

<?php /*><!--*/
function LocalToUT($LocalYear, $LocalMonth, $LocalMonthDay, $LocalHour24,
$LocalMinute, $LocalSecond) {
/* Converts local date/time to Universal Time values.  Returns both
possible UT values when local time value is within relapse range
(due to Daylight Saving Time / Summer Time termination).
Notes:
    Conversion based on TZ and DST/ST rules used by mktime() function.
    UT time-stamps are number of UT seconds since midnight Jan 1, 1970 UTC.
    UT does not have leap seconds; a UT second is "stretched" by 2x duration
to maintain synchronization with UTC when a UTC leap second elapses.
Inputs:    All inputs are numeric; $LocalHour24 is in 24-hour format.
Returns: Array:
    'initial' = UT time-stamp of first occurrence of specified local date/time
    'relapse' = UT time-stamp of second occurrence, when local time relapses
upon DST/ST termination
*/
    $UTValue = mktime($LocalHour24, $LocalMinute, $LocalSecond, $LocalMonth,
$LocalMonthDay, $LocalYear);
    $ReturnData = array('initial' => $UTValue, 'relapse' => $UTValue);
    //Test for DST/ST transition since prev day
    $Bias = $UTValue - mktime($LocalHour24, $LocalMinute, $LocalSecond,
$LocalMonth, $LocalMonthDay - 1, $LocalYear) - 86400;    //(-) = DST/ST
commence, (+) = DST/ST terminate
    if ($Bias == 0) {    //No DST/ST transition detected since prev day
        //Test for DST/ST transition up to next day
        $Bias = mktime($LocalHour24, $LocalMinute, $LocalSecond, $LocalMonth,
$LocalMonthDay + 1, $LocalYear) - $UTValue - 86400;    //(-) = DST/ST commence,
(+) = DST/ST terminate
    }
    if ($Bias > 0) {    //DST/ST termination detected
        if (date('Z', $UTValue) !== date('Z', $UTValue + $Bias)) {    //Local
time occurred in relapse range; System assumed 1st iteration
            $ReturnData['relapse'] = $UTValue + $Bias;
        }
        if (date('Z', $UTValue - $Bias) !== date('Z', $UTValue)) {    //Local
time occurred in relapse range; System assumed 2nd iteration
            $ReturnData['initial'] = $UTValue - $Bias;
        }
        //Else local time is outside of relapse range
    }    //Else no DST/ST transition, or transition is commencement
    return $ReturnData;
}
/*--></?php */?>

Do not be confused by the start and end tags; The interleaved PHP-comment and
HTML-comment delimiters prevent PHP code containing ">" from appearing as
literal text when viewing or editing an HTML file with embedded PHP code.
enVide neFelibata 26-Sep-2010 01:34
I've had this query for an event organizer.

<?php
   $query = "SELECT MAX(dt_atfrom) FROM tb_date LIMIT 1";
   $raw_data = mysql_query($query);
   $maxdate = mysql_result($raw_data,0,0);
?>
It would fetch the 'bigger' date of all of those events.
The problem started when having events in the future.

I'll start to explain.
Imagine you're in '2010' and the biggest event date is '2011-06-05'.
$maxdate will return me the correct data '2011-06-05', yet since I was only
needing the year i passed this date through the following function:

<?php
   maxyear = date("Y", mktime($maxdate));
?>

mktime was returning me the actual year for every future event instead of the
future year.

I ended up doing the following:

<?php
   $maxyear = substr($maxdate,0,4);
?>

Probably there's a better solution...
tom at chegg dot com 31-Aug-2010 09:01
I was using the following to get a list of month names.

for ($i=1; $i<13; $i++) {
  echo date('F', mktime(0,0,0,$i) . ",";
}

Normally this outputs -
January,February,March,April,May,June,July,August,
September,October,November,December

However if today's date is the 31st you get instead:
January,March,March,May,May,July,July,August,October,
October,December,December

Why? Because Feb,Apr,June,Sept, and Nov don't have 31 days!

The fix, add the 5th parameter, don't let the day of month default to today's
date:

  echo date('F', mktime(0,0,0,$i,1) . ",";
zfowler at unomaha dot edu 16-Mar-2010 10:18
Proper way to convert Excel dates into PHP-friendly timestamps using mktime():

<?php
// The date 6/30/2009 is stored as 39994 in Excel
$days = 39994;

// But you must subtract 1 to get the correct timestamp
$ts = mktime(0,0,0,1,$days-1,1900);

// So, this would then match Excel's representation:
echo date("m/d/Y",$ts);
?>

Excel uses "number of days since Jan. 1, 1900" to store its dates.  It also
treats 1900 as a leap year when it wasn't, thus there is an extra day which
must be accounted for in PHP (and the rest of the world).  Subtracting 1 from
Excel's number will fix this problem.
contact at phpmember dot com 20-Jan-2010 12:45
How many days have  passed since the beginning of the year.... regardless of
what year it is...

<?php
//Carlos Galindo
//phpmember.com

$days = floor((time()-mktime(null,null,null,1,0,date("Y")))/86400);
           
echo "$days days have passed";

//Good Luck
?>
davix 06-Oct-2009 07:39
I couldn't find any correct date differentiate function anywhere so I wrote
this one which works correctly. It's fully resistant to all troubles with
different day count of the month or leap year.
Input must be two timestamps and output is associative array with year, month,
day, hour, minute, second items.
It can be used for exact age or similar issues.

<?php
function date_diff($d1, $d2){
/* compares two timestamps and returns array with differencies (year, month,
day, hour, minute, second)
*/
  //check higher timestamp and switch if neccessary
  if ($d1 < $d2){
    $temp = $d2;
    $d2 = $d1;
    $d1 = $temp;
  }
  else {
    $temp = $d1; //temp can be used for day count if required
  }
  $d1 = date_parse(date("Y-m-d H:i:s",$d1));
  $d2 = date_parse(date("Y-m-d H:i:s",$d2));
  //seconds
  if ($d1['second'] >= $d2['second']){
    $diff['second'] = $d1['second'] - $d2['second'];
  }
  else {
    $d1['minute']--;
    $diff['second'] = 60-$d2['second']+$d1['second'];
  }
  //minutes
  if ($d1['minute'] >= $d2['minute']){
    $diff['minute'] = $d1['minute'] - $d2['minute'];
  }
  else {
    $d1['hour']--;
    $diff['minute'] = 60-$d2['minute']+$d1['minute'];
  }
  //hours
  if ($d1['hour'] >= $d2['hour']){
    $diff['hour'] = $d1['hour'] - $d2['hour'];
  }
  else {
    $d1['day']--;
    $diff['hour'] = 24-$d2['hour']+$d1['hour'];
  }
  //days
  if ($d1['day'] >= $d2['day']){
    $diff['day'] = $d1['day'] - $d2['day'];
  }
  else {
    $d1['month']--;
    $diff['day'] = date("t",$temp)-$d2['day']+$d1['day'];
  }
  //months
  if ($d1['month'] >= $d2['month']){
    $diff['month'] = $d1['month'] - $d2['month'];
  }
  else {
    $d1['year']--;
    $diff['month'] = 12-$d2['month']+$d1['month'];
  }
  //years
  $diff['year'] = $d1['year'] - $d2['year'];
  return $diff;   
}

$born_date = mktime(6,30,0,7,24,2008);
$date_diff_array = date_diff($born_date, time());
print_r($date_diff_array);
?>
cebleo at n-trance dot net 08-Sep-2009 06:36
to ADD or SUBSTRACT times NOTE that if you dont specify the UTC zone your
result is the difference +- your server UTC delay.

if you are ina utc/GMT +1

<?php
$hours_diff = strtotime("20:00:00")-strtotime("19:00:00");
echo  date('h:i', $hours_diff)." Hours";
?>

it shows: 02:00 Hours

but if you use a default UTC time:

<?php
date_default_timezone_set('UTC');
$hours_diff = strtotime("20:00:00")-strtotime("19:00:00");
echo "<br>". date('h:i', $hours_diff);
?>

it shows: 01:00 Hours.
p2409 at hotmail dot com 02-Aug-2009 03:49
How to get the first and last dates of the last quarter - useful for things
like tax return dates etc.  by Justin

<?php
function getLastQuarter() {
    // Returns an array with a start and end date for the last quarter from
todays date
    // eg. If today is 23 Feb 2009, returns $x['start'] = 1 Oct 2008, $x[end] =
31 Dec 2008
    $year = date("Y",mktime());
    $month = date("m",mktime());
    // Formula to get a quarter in the year from a month
    $startmth = $month - 3 - (($month-1) % 3 );
    // Fix up Jan - Feb to get LAST year's quarter dates (Oct - Dec)
    if ($startmth == -2) {
        $startmth+=12;
        $year-=1;
    }
    $endmth = $startmth+2;
    $last_quarter['start'] = mktime(0,0,0,$startmth,1,$year);
    $last_quarter['end'] = mktime(0,0,0,$endmth,date("t",mktime
(0,0,0,$endmth,1,$year)),$year);
    return $last_quarter;   
}

// Example - print first and last dates of last quarter.
echo "First day of last quarter was : " . date("d-M-Y",$lastquarter['start']) .
"\n";
echo "Last day of last quarter was : " . date("d-M-Y",$lastquarter['end']) . "\
n";

// For 2 August 2009, returns:
//    First day of last quarter was : 01-Apr-2009
//    Last day of last quarter was : 30-Jun-2009
//
?>
lucianoiw at hotmail dot com 13-Mar-2009 01:48
Convert timestamp to time();

<?php
function wp_mktime($_timestamp = ''){
    if($_timestamp){
        $_split_datehour = explode(' ',$_timestamp);
        $_split_data = explode("-", $_split_datehour[0]);
        $_split_hour = explode(":", $_split_datehour[1]);

        return mktime ($_split_hour[0], $_split_hour[1], $_split_hour[2],
$_split_data[1], $_split_data[2], $_split_data[0]);
    }
}
?>

[NOTE BY danbrown AT php DOT net: See also (http://php.net/strtotime)]
admin at stipe dot info 16-Feb-2009 10:12
With combination of mktime and getDate and date() you can add hours / seconds /
days / months / years to ANY timestamp. Use strtotime() function to convert any
type of dates to timestamp

<?php
    public function addMonthToDate($timeStamp, $totalMonths=1){
        // You can add as many months as you want. mktime will accumulate to
the next year.
        $thePHPDate = getdate($timeStamp); // Covert to Array   
        $thePHPDate['mon'] = $thePHPDate['mon']+$totalMonths; // Add to Month 
 
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']); // Convert back to timestamp
        return $timeStamp;
    }
   
    public function addDayToDate($timeStamp, $totalDays=1){
        // You can add as many days as you want. mktime will accumulate to the
next month / year.
        $thePHPDate = getdate($timeStamp);
        $thePHPDate['mday'] = $thePHPDate['mday']+$totalDays;
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']);
        return $timeStamp;
    }

    public function addYearToDate($timeStamp, $totalYears=1){
        $thePHPDate = getdate($timeStamp);
        $thePHPDate['year'] = $thePHPDate['year']+$totalYears;
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']);
        return $timeStamp;
    }
?>
ronnie dot kurniawan at gmail dot com 16-Jan-2009 05:49
Add (and subtract) unixtime:

<?php
function utime_add($unixtime, $hr=0, $min=0, $sec=0, $mon=0, $day=0, $yr=0) {
  $dt = localtime($unixtime, true);
  $unixnewtime = mktime(
      $dt['tm_hour']+$hr, $dt['tm_min']+$min, $dt['tm_sec']+$sec,
      $dt['tm_mon']+1+$mon, $dt['tm_mday']+$day, $dt['tm_year']+1900+$yr);
  return $unixnewtime;
}
?>
electriic ink 17-Dec-2008 07:30
Days until Christmas:

<?php
     $time = mktime(0, 0, 0, 12, 25, 2008, 1) - time();

     $days = floor($time/86400);
     $hours = floor(($time-($days*86400))/3600);
     $mins = floor (($time-($days*86400)-($hours*3600))/60);
     $secs = floor ($time-($days*86400)-($hours*3600)-($mins*60));

     $tsecs = $time;
     $thours = round($time/3600);

    
     if ($tsecs <= 600) {

      echo '<html> <head> <title> ' . $tsecs . ' seconds left until 12am
Christmas Day </title> <meta http-equiv="refresh" content="1;url=""></head>
<body><span

style="font-size:10pt">Christmas day in ' . $days . ' days ' . $hours . ' hours
' .  $mins . ' mins ' . $secs . ' seconds!<br><br>(There are ' . $tsecs . '
seconds in

total)</span></body></html>';
   
     } else {

      echo '<html> <head> <title> ' . $thours . ' hours left until 12am
Christmas Day </title> <meta http-equiv="refresh" content="10;url=""></head>
<body><span

style="font-size:10pt">Christmas day in ' . $days . ' days ' . $hours . ' hours
' .  $mins . ' mins ' . $secs . ' seconds!<br><br>(There are ' . number_format
($thours)

. ' hours in total and ' . number_format($tsecs) . ' seconds in total)</span></
body></html>';

     }

?>
Alan 18-Nov-2008 03:52
Do remember that, counter-intuitively enough, the arguments for month and day
are inversed (or middle-endian). A common mistake for Europeans seems to be to
feed the date arguments in the expected order (big endian or little endian).

It's clear to see where this weird order comes from (even with the date being
big endian the order for all arguments would still be mixed - it's obviously
based on the American date format with the time "prefixed" to allow an easier
shorthand) and why this wasn't changed (passing the values in the wrong order
produces a valid, though unexpected, result in most cases), but it continues to
be a source of confusion for me whenever I come back to PHP from other
languages or libraries.
Anonymous 14-Nov-2008 04:34
<?php
//example of functions to know if a date/time value is in summer hour or in
winter hour

//====================
function getChgWinDate($dt){
 $y=substr($dt,0,4);
 for($i=31;$i>20;$i--){
  $ts=mktime(3,0,0,10,$i,$y);
  $dy=date('D',$ts);
  if($dy=='Sun') return($y.'/10/'.$i.' 03:00:00');
 }
}
//====================
function getChgSumDate($dt){
 $y=substr($dt,0,4);
 for($i=31;$i>20;$i--){
  $ts=mktime(2,0,0,10,$i,$y);
  $dy=date('D',$ts);
  if($dy=='Sun') return($y.'/03/'.$i.' 02:00:00');
 }
}
//====================
function isSummerDate($dt){
 $b1=getChgWinDate($dt);
 $b2=getChgSumDate($dt);
 if($dt>=$b2&&$dt<$b1) return(true);
 return(false);
}
//====================
function isWinterDate($dt){
 return(!isSummerDate($dt));
}

//====================
$dt = '2008/10/26 03:15:16';
if( isSummerDate($dt) ){
 echo $dt . " is summer hour in france";
}else{
 echo $dt . " is winter hour in france";
}
?>
thebloodyharry at gmail dot com 11-Nov-2008 02:04
here simple sample for timestamps.(using malaysia GMT 8)

$mkendtimep=mktime(date("H")+8, date("i"), date("s"), date("m"), date("d"),
date("Y"));

$todaydate=date("(d/m/y) H:i:s", $mkendtimep);
if (date("l")=="Monday") { $mday=Monday; } else
    if (date("l")=="Tuesday") { $mday=Tuesday; } else
    if (date("l")=="Wednesday") { $mday=Wednesday; } else
    if (date("l")=="Thursday") { $mday=Thursday; } else
    if (date("l")=="Friday") { $mday=Friday; } else
    if (date("l")=="Saturday") { $mday=Saturday; } else
    if (date("l")=="Sunday"){  $mday=Sunday; }

$realtime="$mday$todaydate (GMT +8)";

..hope it will help you out....
yan 10-Nov-2008 01:50
caculate days between two date

<?php
  // end date is 2008 Oct. 11 00:00:00
  $_endDate = mktime(0,0,0,11,10,2008);
  // begin date is 2007 May 31 13:26:26
  $_beginDate = mktime(13,26,26,05,31,2007);

  $timestamp_diff= $_endDate-$_beginDate +1 ;
  // how many days between those two date
  $days_diff = $timestamp_diff/86400;

?>
Maffu 29-Oct-2008 11:05
When calling mktime(), be sure that you use values without leading zeros.  The
date comes out wrong in the following example:

$endts = mktime(12, 00, 00, 12, 08, 2008, 0);

(note the 08 instead of just 8)

C's scanf() has a format specification where leading 0's can indicate an octal
value - perhaps this is related?
mark at markfiend dot com 15-Oct-2008 11:52
zola at zolaweb:

Your expression date('U', strtotime($mydate)) evaluates to strtotime($mydate).
Converting to a UNIX timestamp is what strtotime() does.
ionut dot bodea at eydos dot ro 02-Oct-2008 03:29
Here is what I use to calculate age. It took me 30 minutes to write and it's
quite accurate. What it has special is that it's calculating the number of days
a year has (float number), by testing if a year is a leap one or not. This
number is used to compute the age.

<?php
function get_age($date_start, $date_end) {
    $t_lived = get_timestamp($date_end) - get_timestamp($date_start);
    $seconds_one_year = get_days_per_year($date_start, $date_end) * 24 * 60 *
60;
    $age = array();
    $age['years_exact'] = $t_lived / $seconds_one_year;
    $age['years'] = floor($t_lived / $seconds_one_year);
    $seconds_remaining = $t_lived % $seconds_one_year;
    $age['days'] = round($seconds_remaining / (24 * 60 * 60));
    return $age;
}
function get_timestamp($date) {
    list($y, $m, $d) = explode('-', $date);
    return mktime(0, 0, 0, $m, $d, $y);
}
function get_days_per_year($date_start, $date_end) {
    list($y1) = explode('-', $date_start);
    list($y2) = explode('-', $date_end);
    $years_days = array();
    for($y = $y1; $y <= $y2; $y++) {
        $years_days[] = date('L', mktime(0, 0, 0, 1, 1, $y)) ? 366 : 365;
    }
    return round(array_sum($years_days) / count($years_days), 2);
}

$date_birth = '1979-10-12';
$date_now = date('Y-m-d');

$age = get_age($date_birth, $date_now);
echo '<pre>';
print_r($age);
echo '</pre>';
?>


It will display something like this:
Array
(
    [years_exact] => 28.972974329491
    [years] => 28
    [days] => 355
)
ooogla at hotmail dot com 01-Sep-2008 10:56
If you want to increment the day based on a variable when using a loop you can
use this when you submit a form

1. Establish a start date and end date in two different variables

2. Get the number of days between a date

$ndays = (strtotime($_POST['edate']) - strtotime($_POST['sdate'])) / (60 * 60 *
24);

Then here is the string you slip in your loop

$nextday  = date('Y-m-d', mktime(0, 0, 0, date("m", strtotime($_POST['sdate']))
  , date("d", strtotime($_POST['sdate']))+ $count, date("Y", strtotime($_POST
['sdate']))));

$count is incremented by the loop.
thomas_corthals at hotmail dot com 13-May-2008 02:34
It seems mktime() doesn't return negative timestamps on Linux systems with a
version of glibc <= 2.3.3.
joseph dot andrew dot hughes at gmail dot com 30-Jan-2008 08:58
Just a small thing to think about if you are only trying to pull the month out
using mktime and date.  Make sure you place a 1 into day field.  Otherwise you
will get incorrect dates when a month is followed by a month with less days
when the day of the current month is higher then the max day of the month you
are trying to find.. (Such as today being Jan 30th and trying to find the month
Feb.)
PHPcoder at freemail dot ig3 dot net 06-Sep-2007 05:58
The maximum possible date accepted by mktime() and gmmktime() is dependent on
the current location time zone.

For example, the 32-bit timestamp overflow occurs at
2038-01-19T03:14:08+0000Z.  But if you're in a UTC -0500 time zone (such as EST
in North America), the maximum accepted time before overflow (for older PHP
versions on Windows) is 2038-01-18T22:14:07-0500Z, regardless of whether you're
passing it to mktime() or gmmktime().
Jonathan Woodard 31-Aug-2007 02:31
NB: one 'gotcha' with the implementation of mktime()'s parameters:

<?php
for( $i = 1 ;  $i <= 12 ; $i++ )
{
    echo "Month '$i' is: " . date( "F" , mktime( 0 , 0 , 0 , $i ) ) . "\n";
}
?>
Will output:
Month '1' is: January
Month '2' is: March
Month '3' is: March
Month '4' is: May
Month '5' is: May
Month '6' is: July
Month '7' is: July
Month '8' is: August
Month '9' is: October
Month '10' is: October
Month '11' is: December
Month '12' is: December
on the 31st day of every month.

Why? Because the 5th parameter "day" defaults to "right now," which will not
work reliably for days after the 28th.

To make sure this doesn't happen, specify the first day of the month:
<?php
mktime( 0 , 0 , 0 , $i , 1 )
?>
rlz 17-Jul-2007 04:52
Finding out the number of days in a given month and year, accounting for leap
years when February has more than 28 days.

<?php
function days_in_month($year, $month) {
    return( date( "t", mktime( 0, 0, 0, $month, 1, $year) ) );
}
?>

Hope it helps a soul out there.
mike at mike-griffiths dot co dot uk 11-Jul-2007 01:04
It may be useful to note that no E_WARNINGS or E_NOTICES are give if you
specify a date <1901 or >2038 on systems where time_t is a 32bit signed
integer.

If a date is specified outside of the allowed range you may get some unexpected
results as no timestamp will be returned.
rga at merchantpal dot com 31-Mar-2007 04:46
You cannot simply subtract or add month VARs using mktime to obtain previous or
next months as suggested in previous user comments (at least not with a DD > 28
anyway).

If the date is 03-31-2007, the following yeilds March as a previous month. Not
what you wanted.

<?php
$dateMinusOneMonth = mktime(0, 0, 0, (3-1), 31,  2007 );
$lastmonth = date("n | F", $dateMinusOneMonth);
echo $lastmonth;    //---> 3 | March
?>

mktime correctly gives you back the 3rd of March if you subtract 1 month from
March 31 (there are only 28 days in Feb 07).

If you are just looking to do month and year arithmetic using mktime, you can
use general days like 1 or 28 to do stuff like this:

<?php
$d_daysinmonth = date('t', mktime(0,0,0,$myMonth,1,$myYear));     // how many
days in month
$d_year = date('Y', mktime(0,0,0,$myMonth,1,$myYear));        // year
$d_isleapyear = date('L', mktime(0,0,0,$myMonth,1,$myYear));    // is YYYY a
leapyear?

$d_firstdow = date('w', mktime(0,0,0,$myMonth,'1',$myYear));     // FIRST falls
on what day of week (0-6)
$d_firstname = date('l', mktime(0,0,0,$myMonth,'1',$myYear));     // FIRST
falls on what day of week Full Name

$d_month = date('n', mktime(0,0,0,$myMonth,28,$myYear));         // month of
year (1-12)
$d_monthname = date('F', mktime(0,0,0,$myMonth,28,$myYear));         // Month
Long name (July)
$d_month_previous = date('n', mktime(0,0,0,($myMonth-1),28,$myYear));         /
/ PREVIOUS month of year (1-12)
$d_monthname_previous = date('F', mktime(0,0,0,($myMonth-1),28,$myYear));     /
/ PREVIOUS Month Long name (July)
$d_month_next = date('n', mktime(0,0,0,($myMonth+1),28,$myYear));         //
NEXT month of year (1-12)
$d_monthname_next = date('F', mktime(0,0,0,($myMonth+1),28,$myYear));         /
/ NEXT Month Long name (July)
$d_year_previous = date('Y', mktime(0,0,0,$myMonth,28,($myYear-1)));        //
PREVIOUS year
$d_year_next = date('Y', mktime(0,0,0,$myMonth,28,($myYear+1)));        // NEXT
year

$d_weeksleft = (52 - $d_weekofyear);                     // how many weeks left
in year
$d_daysinyear = $d_isleapyear ? 366 : 365;                // set correct days
in year for leap years
$d_daysleft = ($d_daysinyear - $d_dayofyear);                // how many days
left in year
?>
Stephen 08-Jan-2007 10:43
There are several warnings here about using mktime() to determine a date
difference because of daylight savings time. However, nobody seems to have
mentioned the other obvious problem, which is leap years.

Leap years mean that any effort to use mktime() and time() to determine the age
(positive or negative) of some timestamp in years will be flawed. There are
some years that are 366 days long, therefore you cannot say that there is a set
number of seconds per year.

Timestamps are good for determining *real* time, which is not the same thing as
*human calendar* time. The Gregorian calendar is only an approximation of real
time, which is tweaked with daylight savings time and leap years to make it
conform more to humans' expectations of how time should or ought to work.
Timestamps are not tweaked and therefore are the only authoritative way of
recording in computers a proper order of succession of events, but they cannot
be integrated with a Gregorian system unless you take both leap years and DST
into account. Otherwise, you may get the wrong number of years when you are
approaching a value of exactly X years.

As for PHP, you could still use timestamps as a way of determining age if you
took into account not only DST but also whether or not each year is a leap year
and adjusted your calculations accordingly. However, this could become messy
and inefficient.

There is an alternative approach to calculating days given the day, month and
year of the dates to be compared. Compare the years first, and then compare the
month and day - if the month and day have already passed (or, if you like, if
they match the current month and day), then add 1 to the total for the years.

This solution works because it stays within the Gregorian system and doesn't
venture into the world of timestamps.

There is also the issue of leap seconds, but this will only arise if you
literally need to get the *exact* age in seconds. In that case, of course, you
would also need to verify that your timestamps are exactly correct and are not
delayed by script processing time, plus you would need to determine whether
your system conforms to UTC, etc. I expect this will hardly be an issue for
anybody using PHP, however if you are interested there is an article on this
issue on Wikipedia:

http://en.wikipedia.org/wiki/Leap_second
jsebfranck 07-Nov-2006 12:42
There are several notes for mktime which use the number 86400 to differentiate
two days. However this technique may pose a problem in case there is a day
where the hour change between the two dates to compare.

Consequently, if you want the timestamp difference between the day where the
hour change and the next day, it will not be equals to 86400 but either 82800
in case its the winter change of hour day or 90000 for the summer change of
hour day.

For example in 2006 :

<?php
echo mktime(0,0,0,10,29,2006) - mktime(0,0,0,10,30,2006); // -90 000
?>
carlo dot tafuro at poste dot it 08-May-2006 11:40
Negative timestamps give problem also using linux as guest operating system
inside WMvare with Windows host operating system.
colin dot horne at gmail dot com 31-Mar-2005 06:48
If the month is greater than 12, it goes into the next year. If it is less than
1, it goes into the previous year. Generally, it behaves as you'd expect it to
:-)

Examples:

<?php

// January 1, 2005
print date ("F j, Y", mktime (0,0,0,13,1,2004));

// December 1, 2003
print date ("F j, Y", mktime (0,0,0,0,1,2004));

// February 1, 2005
print date ("F j, Y", mktime (0,0,0,14,1,2004));

// November 1, 2003
print date ("F j, Y", mktime (0,0,0,-1,1,2004));

?>
Romain Sam 25-Mar-2005 03:50
Under Windows, mktime goes until 2038-01-19 (03:14:07 ...)
praas at NOSPAM dot ision dot nl 01-Feb-2004 08:44
Consider skipping months with mktime().

$nextmonth = date("M",mktime(0,0,0,date("n")+1,date("j"),date("Y")));

On any day in Januari you expect to get Feb, right?
But on January 30th you'll get Mar. It will try Feb 30th, which doesn't exist,
and skips another month. Therefore in this case present a day value that will
certainly be legal in any month, like day "1".

This will give you next month on any day of the year:
$nextmonth = date("M",mktime(0,0,0,date("n")+1,1,date("Y")));
iain at seatofthepants dot net 09-Dec-2003 03:49
In the above example it should ne boted that if you try to calculate the
command at midnight on the 28/04/2004 you will get an erroneous response. This
has been driving me to distraction.

$myTime = mktime( 0, 0, 0, 3, 28, 2004);

Solution I found was to create the time at 3am well after the 2am daylight
savings problem, viz:

$myTime = mktime( 3, 0, 0, 3, 28, 2004);

Not sure if this is documented anywhere.
trahma 20-Nov-2003 08:06
I think it is important to note that the timestamp returned is based upon the
number of seconds from the epoch GMT, and then modified by the time zone
settings on the server.

Thus...

mktime(0,0,0,1,1,1970) will not always return 0.  For example with the US
eastern time zone (GMT-5) will return 18000 (5 hours past the epoch) and the
same function with the time zone set to the US pacific time zone (GMT-8) will
return 28800 (8 hours past the epoch).

In an instance where you want time zone independence, you should use the
function gmmktime()
laurie at oneuponedown dot com 18-Nov-2003 04:42
With regard to Example 1 and using mktime to correct out-of-range input.

It should be noted that mktime will implement day light saving amends. Consider
the following:

<?php
print(date("d/m/Y H:i:s",mktime(0,0,0,3,(27 + 1),2004)));
?>
OUTPUT "28/03/2004 02:00:00"

<?php
print(date("d/m/Y H:i:s",(mktime(0,0,0,3,27,2004) + (((1 * 24) * 60) * 60))));
?>
OUTPUT "28/03/2004 00:00:00"

Dependent on your requirements this may or may be desirable
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 30 01:21:27 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
strstr

(PHP 4, PHP 5)

strstr — 文字列が最初に現れる位置を見つける

説明

string strstr ( string $haystack , mixed $needle [, bool $before_needle = false
] )

haystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。

    注意:

    この関数は大文字小文字を区別することに注意してください。大文字小文字を区別
    しない検索を行う場合は、stristr() を使用してください。

    注意:

    もし特定の haystack に needle があるかどうかを調べるだけの場合、より高速で
    メモリ消費も少ない strpos() を代わりに使用してください。

パラメータ

haystack

    入力文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

before_needle

    TRUE にすると、strstr() の返り値は、haystack の中で最初に needle があらわれ
    る箇所より前の部分となります。

返り値

部分文字列を返します。 needle が見つからない場合は FALSE を返します。

変更履歴

バージョン                          説明
5.3.0      オプションの before_needle パラメータが追加されました。
4.3.0      strstr() がバイナリセーフとなりました。

例

例1 strstr() の例

<?php
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // @example.com と表示します

$user = strstr($email, '@', true); // PHP 5.3.0 以降
echo $user; // name と表示します
?>

参考

  • preg_match() - 正規表現によるマッチングを行う
  • stristr() - 大文字小文字を区別しない strstr
  • strpos() - 文字列が最初に現れる場所を見つける
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す



strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes strstr
xydon1 at yahoo dot com 31-Aug-2011 10:03
I explained this to my newbies the difference though it would be good to
demonstrate this here. If you are evaluating a list you cannot use strstr as it
looks for any occurance. The correct way is the function which evaluates a true
or false on the exact value to check.

In the following example I have a list of promotion ids I want to evaluate
whether or not a promotion exists:

<?php
//Wrong
$promotion = strstr("25,56","2");
if($promotion){
  echo "found";
}else{
  echo "not found";
}

//right
function detectPromotion($string,$promotion){
  foreach(explode(",",$string) as $promotionToCheck){   
    echo "checkin ".$promotionToCheck."==".$promotion."<br/>";   
    if($promotionToCheck==$promotion){
      $promotionFound=true;
    }
  }
  return $promotionFound;
}

echo detectPromotion("2,56","2");
?>
gruessle at gmail dot com 20-Apr-2011 08:39
Been using this for years:

<?php
/**
*
* @author : Dennis T Kaplan
*
* @version : 1.0
* Date : June 17, 2007
* Function : reverse strstr()
* Purpose : Returns part of haystack string from start to the first occurrence
of needle
* $haystack = 'this/that/whatever';
* $result = rstrstr($haystack, '/')
* $result == this
*
* @access public
* @param string $haystack, string $needle
* @return string
**/

function rstrstr($haystack,$needle)
    {
        return substr($haystack, 0,strpos($haystack, $needle));
    }
?>

You could change it to:
rstrstr ( string $haystack , mixed $needle [, int $start] )
<?php

function rstrstr($haystack,$needle, $start=0)
    {
        return substr($haystack, $start,strpos($haystack, $needle));
    }

?>
w3b_monk3y at yahoo dot com 20-Jan-2009 08:28
If you want to emulate strstr's new before_needle parameter pre 5.3 strtok is
faster than using strpos to find the needle and cutting with substr. The amount
of difference varies with string size but strtok is always faster.
tim 26-Nov-2007 12:42
I simplified prafe at prafesplace dot com's function:

<?php
function strstrbi($haystack, $needle, $before_needle=FALSE, $include_needle=
TRUE, $case_sensitive=FALSE) {
 //Find the position of $needle
 if($case_sensitive) {
  $pos=strpos($haystack,$needle);
 } else {
  $pos=strpos(strtolower($haystack),strtolower($needle));
 }
 
 //If $needle not found, abort
 if($pos===FALSE) return FALSE;
 
 //Adjust $pos to include/exclude the needle
 if($before_needle==$include_needle) $pos+=strlen($needle);
 
 //get everything from 0 to $pos?
 if($before_needle) return substr($haystack,0,$pos);
 
 //otherwise, go from $pos to end
 return substr($haystack,$pos);
}
?>

It's now 600 bytes, down from 2k.

Also, here are replacements for strstr and stristr:

<?php
function strstr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos($haystack,$needle))===FALSE) return FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}

function stristr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos(strtolower($haystack),strtolower($needle)))===FALSE) return
FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}
?>
brett dot jr dot alton at gmail dot com 25-Nov-2007 04:02
For the needle_before (first occurance) parameter when using PHP 5.x or less,
try:

<?php
$haystack = 'php-homepage-20071125.png';
$needle = '-';
$result = substr($haystack, 0, strpos($haystack, $needle)); // $result = php
?>
prafe at prafesplace dot com 22-Nov-2007 05:14
If you want to use the $before_needle parameter that's only in PHP 5.3.0, I
found a way to use it in lower versions.

The code is a bit hefty, but it works. It also has added $include_needle and
$case_sensitive.

<?php
// ==== I don't guarantee this is faster than the PHP 6 before needle, ====
// ====  but it works for PHP below 6 atleast. ====
// ==== IT ALSO HAS INCLUDE NEEDLE BOOLEAN.. ====
function strstrbi($haystack,$needle,$before_needle,
$include_needle,$case_sensitive)
{
  $strstr = ($case_sensitive) ? 'strstr' : 'stristr';
  if($before_needle!=true && $before_needle!=false && isset($before_needle)){
      die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' :  parameter
'. chr(39).'$before_needle'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$before_needle'

  if($include_needle!=true && $include_needle!=false && isset($include_needle))
{
    die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' : parameter '.
chr(39).'$include_needle'.chr(39). ' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$include_needle'

  if($case_sensitive!=true && $case_sensitive!=false && isset($case_sensitive))
{
    die('PHP: Error in function '.chr(39).'$strstrbi' .chr(39).' : parameter '.
chr(39).'$case_sensitive'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$case_sensitive'

  if(!isset($before_needle)){
    $before_needle=false;
  }

  if(!isset($include_needle)){
    $include_needle=true;
  }

  if(!isset($case_sensitive)){
    $case_sensitive=false;
  }

  switch($before_needle){
    case true:
      switch($include_needle){
        case true:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),0));
          break;
        // END case true : $include_needle
        case false:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),1));
          break;
        // END case false : $include_needle
      }
      break;
    // END case true : $before_needle
    case false:
      switch($include_needle){
        case true:
          $ret=$strstr($haystack,$needle);
          break;
        // END case true: $include_needle
        case false:
          $ret=substr($strstr($haystack,$needle),1);
          break;
        // END case false: $include_needle
    }
    break;
    // END case false : $before_needle
  }

  if(!empty($ret)){
    return $ret;
  }else{
    return false;
  }
}
// === END FUNCTION 'strstrbi'

// Example

$email  = 'user@example.com';
$domain = strstrbi($email, '@', false, false, false);
echo $domain; // prints example.com

$user = strstrbi($email, '@', true, false, false);
echo $user; // prints user
?>
root at mantoru dot de 10-Nov-2007 11:22
Please note that $needle is included in the return string, as shown in the
example above. This ist not always desired behavior, _especially_ in the
mentioned example. Use this if you want everything AFTER $needle.

<?php
function strstr_after($haystack, $needle, $case_insensitive = false) {
    $strpos = ($case_insensitive) ? 'stripos' : 'strpos';
    $pos = $strpos($haystack, $needle);
    if (is_int($pos)) {
        return substr($haystack, $pos + strlen($needle));
    }
    // Most likely false or null
    return $pos;
}

// Example
$email = 'name@example.com';
$domain = strstr_after($email, '@');
echo $domain; // prints example.com
?>
gigaman2003 at halfempty dot co dot uk 24-Feb-2007 08:48
Often you will need to find all occurrences of a string (for security escapes
and such)

So I wrote this function to return an array with the locations of all the
occurrences. Almost like an advanced strstr.

<?php
function findall($needle, $haystack)
{
    //Setting up
    $buffer=''; //We will use a 'frameshift' buffer for this search
    $pos=0; //Pointer
    $end = strlen($haystack); //The end of the string
    $getchar=''; //The next character in the string
    $needlelen=strlen($needle); //The length of the needle to find (speeds up
searching)
    $found = array(); //The array we will store results in
   
    while($pos<$end)//Scan file
    {
        $getchar = substr($haystack,$pos,1); //Grab next character from pointer
        if($getchar!="\n" || buffer<$needlelen) //If we fetched a line break,
or the buffer is still smaller than the needle, ignore and grab next character
        {
            $buffer = $buffer . $getchar; //Build frameshift buffer
            if(strlen($buffer)>$needlelen) //If the buffer is longer than the
needle
            {
                $buffer = substr($buffer,-$needlelen);//Truncunate backwards to
needle length (backwards so that the frame 'moves')
            }
            if($buffer==$needle) //If the buffer matches the needle
            {
                $found[]=$pos-$needlelen+1; //Add the location of the needle to
the array. Adding one fixes the offset.
            }
        }
        $pos++; //Increment the pointer
    }
    if(array_key_exists(0,$found)) //Check for an empty array
    {
        return $found; //Return the array of located positions
    }
    else
    {
        return false; //Or if no instances were found return false
    }
}
?>

Haven't had the chance to speed test it, but many optimizations should be
possible. It just works enough for me. Hope it saves someone a lot of time.
06-Jun-2005 04:13
suggestion for [leo dot nard at free dot fr]:
to be able to cut the string without having the html entities being cut in
half, use this instead:

<?php

$oldstr = "F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller
skandinaviska (eller Franska, f&ouml;r den delen) tecken, kan man g&ouml;ra s&
aring;h&auml;r...";

$length = 50;

# First, first we want to decode the entities (to get them as usual chars),
then cut the string at for example 50 chars, and then encoding the result of
that again.

# Or, as I had it done, in one line:
$newstr = htmlentities(substr(html_entity_decode($oldstr), 0, $length));
$newstr2 = substr($oldstr, 0, $length);
# It's not quite as much code as the snippet you've coded to remove the
half-portions... ;)
# Hopefully somebody finds this useful!
echo "Without the decode-encode snippet:
$newstr2

With the decode-encode snippet:
$newstr";
?>

The above outputs this:

Without the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&ar

With the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller skandin

First post in this db ;)
Best regards, Mikael R nn, FIN
leo dot nard at free dot fr 24-May-2005 09:12
When encoding ASCII strings to HTML size-limited strings, sometimes some HTML
special chars were cut.

For example, when encoding "��" to a string of size 10, you would get: "à&a" =>
the second character is cut.

This function will remove any unterminated HTML special characters from the
string...

<?php
function cut_html($string)
{
    $a=$string;

    while ($a = strstr($a, '&'))
    {
        echo "'".$a."'\n";
        $b=strstr($a, ';');
        if (!$b)
        {
            echo "couper...\n";
            $nb=strlen($a);
            return substr($string, 0, strlen($string)-$nb);
        }
        $a=substr($a,1,strlen($a)-1);
    }
    return $string;
}
?>
Romuald Brunet 21-Jan-2004 08:25
Regarding the note of the manual concerning the speed of strstr against strpos,
for people who wants to check a needle occurs within haystack, it apprears that
strstr() is in facts faster than strpos().

Example:
<?php
// [VERY] Quick email check:
if ( strstr("email@domain.tld", "@") ) {
// Ok
}
?>

is faster than

<?php
if ( strpos("email@domain.tld", "@") !== FALSE ) {
// Ok
}

Without using the true equality with !==, strpos() is faster. But then if the
haystack starts with needle the condition whould not be met.
php at silisoftware dot com 14-Feb-2003 11:37
PHP versions before 4.3.0 (tested on 4.2.2 and 4.2.3) return the $haystack from
$needle only up to the first null character. So for example:

<?php
$string = strstr("one#two\x00three", "#");
// PHP 4.2.x:  $string contains "#two"
// PHP 4.3.0:  $string contains "#two\x00three"
?>

If you're trying to match nulls, you will probably get back an empty string:

<?php
$string = strstr("one#two\x00three", "\x00");
// PHP 4.2.x:  $string contains ""
// PHP 4.3.0:  $string contains "\x00three"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 30 01:21:27 2011 UTC
Received cookie: COUNTRY=JPN%2C114.48.40.106
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

strftime> <microtime
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
mktime

(PHP 4, PHP 5)

mktime — 日付を Unix のタイムスタンプとして取得する

説明

int mktime ([ int $hour = date("H") [, int $minute = date("i") [, int $second =
date("s") [, int $month = date("n") [, int $day = date("j") [, int $year = date
("Y") [, int $is_dst = -1 ]]]]]]] )

与えられた引数に従って UNIX のタイムスタンプを返します。このタイムスタンプは、
Unix epoch(1970年1月1日00:00:00 GMT)から指定された時刻までの通算秒を表す長整数
です。

引数は右から順に省略することができます。省略された引数は、ローカルの日付と時刻
に従って、現在の値にセットされます。

注意

    注意:

    PHP 5.1 以降、引数なしでコールすると mktime() は E_STRICT notice を発行する
    ようになりました。かわりに time() 関数を使用しましょう。

パラメータ

hour

    month、day と year で決まる日付の 0 時から数えた「時」。負の値は、その日の
    0 時から前にさかのぼった時間を表します。 23 より大きい値は、その翌日以降の
    該当する時間を表します。

minute

    hour 時 0 分から数えた「分」。負の値は、その前の時刻を表します。 59 より大
    きい値は、その次の時間以降の該当する時間を表します。

second

    minute 分 0 秒から数えた「秒」。負の値は、その前の時刻を表します。 59 より
    大きい値は、その次の分以降の該当する時間を表します。

month

    前年末から数えた月数。1 から 12 までの場合は、カレンダーどおりのその年の「
    月」を表します。 (負の値を含めた) 1 より小さい値は、前年の月を逆順でたどり
    ます。つまり 0 なら 12 月、-1 なら 11 月になるということです。 12 より大き
    い値は、その翌年以降の該当する月を表します。

day

    前月末から数えた日数。1 から 28、29、30、31 (月によって異なる) までの場合は
    、その月の「日」を表します。 (負の値を含めた) 1 より小さい値は、前月の日を
    逆順でたどります。つまり 0 なら前月の末日、-1 ならそのさらに前日になるとい
    うことです。その月の日数より大きい値は、翌月以降の該当する日を表します。

year

    年。2 桁または 4 桁の値を指定可能で、 0-69 の間の値は 2000-2069 に、70-100
    は 1970-2000 にマップされます。今日最も一般的なシステム、すなわち time_t が
    32 ビットの符号付き整数であるシステムでは year として有効な範囲は 1901 から
    2038 の間です。しかし、PHP 5.1.0 より前のバージョンではこの範囲が 1970 から
    2038 に制限されているシステム (たとえば Windows) もありました。

is_dst

    このパラメータはサマータイム (DST) の時に1にセットされ、そうでない時に0、サ
    マータイムであるかどうかが不明である場合に-1 にセットされます。不明な場合、
    PHP はサマータイムかどうか推測しようとします。 PHP を実行しているシステムで
    DST が有効になっている、もしくは is_dst が 1 にセットされている場合、一部の
    時刻は有効になりません。もし DST が有効で例えば 2:00 の場合、2:00 から 3:00
    までの全ての時刻は無効になり、mktime() は不確定な値 (通常は負数) を返します
    。いくつかのシステム (例えば Solaris 8) は真夜中に DST を有効にしますので、
    DST が有効なときの 0:30 は前日の 23:30 と評価されます。

        注意:

        PHP 5.1.0 以降、このパラメータは廃止されました。その結果、新しいタイム
        ゾーン処理機能がかわりに使用されます。

返り値

mktime() は与えられた引数の Unix タイムスタンプを返します。引数が不正な場合、こ
の関数は FALSE を返します（PHP 5.1 より前のバージョンでは -1 を返していました）
。

エラー / 例外

すべての日付/時刻関数は、有効なタイムゾーンが設定されていない場合に E_NOTICE を
発生させます。また、システム設定のタイムゾーンあるいは環境変数 TZ を使用した場
合には E_STRICT あるいは E_WARNING を発生させます。 date_default_timezone_set()
も参照ください。

変更履歴

バージ                                   説明
 ョン
5.3.0  mktime() は、 is_dst パラメータを使用した場合に E_DEPRECATED をスローす
       るようになりました。
5.1.0  is_dst パラメータは廃止されました。エラー時には -1 ではなく FALSE を返す
       ようになりました。年月日がすべてゼロとすることが可能になりました。
5.1.0  引数なしでコールすると、mktime() は E_STRICT notice を発行するようになり
       ました。かわりに time() 関数を使用しましょう。
5.1.0  タイムゾーンがおかしい場合に E_STRICT や E_NOTICE が発生するようになりま
       した。

例

例1 mktime() の基本的な例

<?php
// デフォルトのタイムゾーンを設定します。PHP 5.1 以降で使用可能です
date_default_timezone_set('UTC');

// 出力: July 1, 2000 is on a Saturday
echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));

// 出力例: 2006-04-05T01:02:03+00:00
echo date('c', mktime(1, 2, 3, 4, 5, 2006));
?>

例2 mktime() の例

mktime() は入力日付の有効性を確認しており、範囲外の入力を自動的に修正して計算し
てくれるので便利です。例えば、以下の各行はいずれも文字列 "Jan-01-1998"を出力し
ます。

<?php
echo date("M-d-Y", mktime(0, 0, 0, 12, 32, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 13, 1, 1997));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 1998));
echo date("M-d-Y", mktime(0, 0, 0, 1, 1, 98));
?>

例3 月の末日

指定した月の最後の日は次の月の -1 番目の日ではなく、"0" 番目の日として表すこと
が可能です。以下の例はともに文字列"The last day in Feb 2000 is: 29" を出力しま
す。

<?php
$lastday = mktime(0, 0, 0, 3, 0, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
$lastday = mktime(0, 0, 0, 4, -31, 2000);
echo strftime("Last day in Feb 2000 is: %d", $lastday);
?>

注意

警告

PHP 5.1.0 より前のバージョンでは、負の値のタイムスタンプは Windows のどのバージ
ョンにおいてもサポートされていませんでした。したがって、年の有効範囲は 1970 年
から 2038 年の間のみに限定されていました。

参考

  • checkdate() - グレゴリオ暦の日付/時刻の妥当性を確認します
  • gmmktime() - GMT 日付から Unix タイムスタンプを取得する
  • date() - ローカルの日付/時刻を書式化する
  • time() - 現在の Unix タイムスタンプを返す



strftime> <microtime
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes mktime
carlosbuz2 at gmail dot com 04-Mar-2011 06:21
The first date in array is incorrect, to fix it:

function dates_range($date1, $date2)
{
    if ($date1<$date2)
    {
        $dates_range[]=$date1;
        $date1=strtotime($date1);
        $date2=strtotime($date2);
        while ($date1!=$date2)
        {
            $date1=mktime(0, 0, 0, date("m", $date1), date("d", $date1)+1, date
("Y", $date1));
            $dates_range[]=date('Y-m-d', $date1);
        }
    }
    return $dates_range;
}
info at microweb dot lt 03-Nov-2010 03:42
Function to generate array of dates between two dates (date range array)

<?php
function dates_range($date1, $date2)
{
   if ($date1<$date2)
   {
       $dates_range[]=$date1;
       $date1=strtotime($date1);
       $date2=strtotime($date2);
       while ($date1!=$date2)
       {
           $date1=mktime(0, 0, 0, date("m", $date1), date("d", $date1)+1, date
("Y", $date1));
           $dates_range[]=date('Y-m-d', $date1);
       }
   }
   return $dates_range;
}

echo '<pre>';
print_r(dates_range('2009-12-25', '2010-01-05'));
echo '</pre>';
?>

[EDIT BY danbrown AT php DOT net: Contains a bugfix submitted by (carlosbuz2 AT
gmail DOT com) on 04-MAR-2011, with the following note: The first date in array
is incorrect.]
php at wirnhier dot de 02-Nov-2010 05:17
warning: mktime expects parameter 1 to be long

It could be a string that is given to mktime, so it has to be converted into an
int.

mktime((int)$h, (int)$m, (int)$s, (int)$m, (int)$d, (int)$y);
xr714 at yahoo dot com 07-Oct-2010 03:58
One of the many problems with Daylight Saving Time / Summer Time is the
ambiguity when a specified local time value can refer to two different actual
times!  This happens when the local time value is within the relapse range
caused by the clocks being set back to proper time.  (eg. if the DST/ST bias is
+1 hour, and DST/ST terminates at 02:00 local time, a local time value of 01:30
occurs twice in the same day!)

Because the mktime() function only returns one value, it silently chooses
whether to return the time-stamp for the first iteration or the second
iteration of a specified local time within this critical range.

To get both possible time-stamps for a local time, compatible with any system
locale, time zone, and applicable DST/ST rules, the following function can be
used:

<?php /*><!--*/
function LocalToUT($LocalYear, $LocalMonth, $LocalMonthDay, $LocalHour24,
$LocalMinute, $LocalSecond) {
/* Converts local date/time to Universal Time values.  Returns both
possible UT values when local time value is within relapse range
(due to Daylight Saving Time / Summer Time termination).
Notes:
    Conversion based on TZ and DST/ST rules used by mktime() function.
    UT time-stamps are number of UT seconds since midnight Jan 1, 1970 UTC.
    UT does not have leap seconds; a UT second is "stretched" by 2x duration
to maintain synchronization with UTC when a UTC leap second elapses.
Inputs:    All inputs are numeric; $LocalHour24 is in 24-hour format.
Returns: Array:
    'initial' = UT time-stamp of first occurrence of specified local date/time
    'relapse' = UT time-stamp of second occurrence, when local time relapses
upon DST/ST termination
*/
    $UTValue = mktime($LocalHour24, $LocalMinute, $LocalSecond, $LocalMonth,
$LocalMonthDay, $LocalYear);
    $ReturnData = array('initial' => $UTValue, 'relapse' => $UTValue);
    //Test for DST/ST transition since prev day
    $Bias = $UTValue - mktime($LocalHour24, $LocalMinute, $LocalSecond,
$LocalMonth, $LocalMonthDay - 1, $LocalYear) - 86400;    //(-) = DST/ST
commence, (+) = DST/ST terminate
    if ($Bias == 0) {    //No DST/ST transition detected since prev day
        //Test for DST/ST transition up to next day
        $Bias = mktime($LocalHour24, $LocalMinute, $LocalSecond, $LocalMonth,
$LocalMonthDay + 1, $LocalYear) - $UTValue - 86400;    //(-) = DST/ST commence,
(+) = DST/ST terminate
    }
    if ($Bias > 0) {    //DST/ST termination detected
        if (date('Z', $UTValue) !== date('Z', $UTValue + $Bias)) {    //Local
time occurred in relapse range; System assumed 1st iteration
            $ReturnData['relapse'] = $UTValue + $Bias;
        }
        if (date('Z', $UTValue - $Bias) !== date('Z', $UTValue)) {    //Local
time occurred in relapse range; System assumed 2nd iteration
            $ReturnData['initial'] = $UTValue - $Bias;
        }
        //Else local time is outside of relapse range
    }    //Else no DST/ST transition, or transition is commencement
    return $ReturnData;
}
/*--></?php */?>

Do not be confused by the start and end tags; The interleaved PHP-comment and
HTML-comment delimiters prevent PHP code containing ">" from appearing as
literal text when viewing or editing an HTML file with embedded PHP code.
enVide neFelibata 26-Sep-2010 01:34
I've had this query for an event organizer.

<?php
   $query = "SELECT MAX(dt_atfrom) FROM tb_date LIMIT 1";
   $raw_data = mysql_query($query);
   $maxdate = mysql_result($raw_data,0,0);
?>
It would fetch the 'bigger' date of all of those events.
The problem started when having events in the future.

I'll start to explain.
Imagine you're in '2010' and the biggest event date is '2011-06-05'.
$maxdate will return me the correct data '2011-06-05', yet since I was only
needing the year i passed this date through the following function:

<?php
   maxyear = date("Y", mktime($maxdate));
?>

mktime was returning me the actual year for every future event instead of the
future year.

I ended up doing the following:

<?php
   $maxyear = substr($maxdate,0,4);
?>

Probably there's a better solution...
tom at chegg dot com 31-Aug-2010 09:01
I was using the following to get a list of month names.

for ($i=1; $i<13; $i++) {
  echo date('F', mktime(0,0,0,$i) . ",";
}

Normally this outputs -
January,February,March,April,May,June,July,August,
September,October,November,December

However if today's date is the 31st you get instead:
January,March,March,May,May,July,July,August,October,
October,December,December

Why? Because Feb,Apr,June,Sept, and Nov don't have 31 days!

The fix, add the 5th parameter, don't let the day of month default to today's
date:

  echo date('F', mktime(0,0,0,$i,1) . ",";
zfowler at unomaha dot edu 16-Mar-2010 10:18
Proper way to convert Excel dates into PHP-friendly timestamps using mktime():

<?php
// The date 6/30/2009 is stored as 39994 in Excel
$days = 39994;

// But you must subtract 1 to get the correct timestamp
$ts = mktime(0,0,0,1,$days-1,1900);

// So, this would then match Excel's representation:
echo date("m/d/Y",$ts);
?>

Excel uses "number of days since Jan. 1, 1900" to store its dates.  It also
treats 1900 as a leap year when it wasn't, thus there is an extra day which
must be accounted for in PHP (and the rest of the world).  Subtracting 1 from
Excel's number will fix this problem.
contact at phpmember dot com 20-Jan-2010 12:45
How many days have  passed since the beginning of the year.... regardless of
what year it is...

<?php
//Carlos Galindo
//phpmember.com

$days = floor((time()-mktime(null,null,null,1,0,date("Y")))/86400);
           
echo "$days days have passed";

//Good Luck
?>
davix 06-Oct-2009 07:39
I couldn't find any correct date differentiate function anywhere so I wrote
this one which works correctly. It's fully resistant to all troubles with
different day count of the month or leap year.
Input must be two timestamps and output is associative array with year, month,
day, hour, minute, second items.
It can be used for exact age or similar issues.

<?php
function date_diff($d1, $d2){
/* compares two timestamps and returns array with differencies (year, month,
day, hour, minute, second)
*/
  //check higher timestamp and switch if neccessary
  if ($d1 < $d2){
    $temp = $d2;
    $d2 = $d1;
    $d1 = $temp;
  }
  else {
    $temp = $d1; //temp can be used for day count if required
  }
  $d1 = date_parse(date("Y-m-d H:i:s",$d1));
  $d2 = date_parse(date("Y-m-d H:i:s",$d2));
  //seconds
  if ($d1['second'] >= $d2['second']){
    $diff['second'] = $d1['second'] - $d2['second'];
  }
  else {
    $d1['minute']--;
    $diff['second'] = 60-$d2['second']+$d1['second'];
  }
  //minutes
  if ($d1['minute'] >= $d2['minute']){
    $diff['minute'] = $d1['minute'] - $d2['minute'];
  }
  else {
    $d1['hour']--;
    $diff['minute'] = 60-$d2['minute']+$d1['minute'];
  }
  //hours
  if ($d1['hour'] >= $d2['hour']){
    $diff['hour'] = $d1['hour'] - $d2['hour'];
  }
  else {
    $d1['day']--;
    $diff['hour'] = 24-$d2['hour']+$d1['hour'];
  }
  //days
  if ($d1['day'] >= $d2['day']){
    $diff['day'] = $d1['day'] - $d2['day'];
  }
  else {
    $d1['month']--;
    $diff['day'] = date("t",$temp)-$d2['day']+$d1['day'];
  }
  //months
  if ($d1['month'] >= $d2['month']){
    $diff['month'] = $d1['month'] - $d2['month'];
  }
  else {
    $d1['year']--;
    $diff['month'] = 12-$d2['month']+$d1['month'];
  }
  //years
  $diff['year'] = $d1['year'] - $d2['year'];
  return $diff;   
}

$born_date = mktime(6,30,0,7,24,2008);
$date_diff_array = date_diff($born_date, time());
print_r($date_diff_array);
?>
cebleo at n-trance dot net 08-Sep-2009 06:36
to ADD or SUBSTRACT times NOTE that if you dont specify the UTC zone your
result is the difference +- your server UTC delay.

if you are ina utc/GMT +1

<?php
$hours_diff = strtotime("20:00:00")-strtotime("19:00:00");
echo  date('h:i', $hours_diff)." Hours";
?>

it shows: 02:00 Hours

but if you use a default UTC time:

<?php
date_default_timezone_set('UTC');
$hours_diff = strtotime("20:00:00")-strtotime("19:00:00");
echo "<br>". date('h:i', $hours_diff);
?>

it shows: 01:00 Hours.
p2409 at hotmail dot com 02-Aug-2009 03:49
How to get the first and last dates of the last quarter - useful for things
like tax return dates etc.  by Justin

<?php
function getLastQuarter() {
    // Returns an array with a start and end date for the last quarter from
todays date
    // eg. If today is 23 Feb 2009, returns $x['start'] = 1 Oct 2008, $x[end] =
31 Dec 2008
    $year = date("Y",mktime());
    $month = date("m",mktime());
    // Formula to get a quarter in the year from a month
    $startmth = $month - 3 - (($month-1) % 3 );
    // Fix up Jan - Feb to get LAST year's quarter dates (Oct - Dec)
    if ($startmth == -2) {
        $startmth+=12;
        $year-=1;
    }
    $endmth = $startmth+2;
    $last_quarter['start'] = mktime(0,0,0,$startmth,1,$year);
    $last_quarter['end'] = mktime(0,0,0,$endmth,date("t",mktime
(0,0,0,$endmth,1,$year)),$year);
    return $last_quarter;   
}

// Example - print first and last dates of last quarter.
echo "First day of last quarter was : " . date("d-M-Y",$lastquarter['start']) .
"\n";
echo "Last day of last quarter was : " . date("d-M-Y",$lastquarter['end']) . "\
n";

// For 2 August 2009, returns:
//    First day of last quarter was : 01-Apr-2009
//    Last day of last quarter was : 30-Jun-2009
//
?>
lucianoiw at hotmail dot com 13-Mar-2009 01:48
Convert timestamp to time();

<?php
function wp_mktime($_timestamp = ''){
    if($_timestamp){
        $_split_datehour = explode(' ',$_timestamp);
        $_split_data = explode("-", $_split_datehour[0]);
        $_split_hour = explode(":", $_split_datehour[1]);

        return mktime ($_split_hour[0], $_split_hour[1], $_split_hour[2],
$_split_data[1], $_split_data[2], $_split_data[0]);
    }
}
?>

[NOTE BY danbrown AT php DOT net: See also (http://php.net/strtotime)]
admin at stipe dot info 16-Feb-2009 10:12
With combination of mktime and getDate and date() you can add hours / seconds /
days / months / years to ANY timestamp. Use strtotime() function to convert any
type of dates to timestamp

<?php
    public function addMonthToDate($timeStamp, $totalMonths=1){
        // You can add as many months as you want. mktime will accumulate to
the next year.
        $thePHPDate = getdate($timeStamp); // Covert to Array   
        $thePHPDate['mon'] = $thePHPDate['mon']+$totalMonths; // Add to Month 
 
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']); // Convert back to timestamp
        return $timeStamp;
    }
   
    public function addDayToDate($timeStamp, $totalDays=1){
        // You can add as many days as you want. mktime will accumulate to the
next month / year.
        $thePHPDate = getdate($timeStamp);
        $thePHPDate['mday'] = $thePHPDate['mday']+$totalDays;
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']);
        return $timeStamp;
    }

    public function addYearToDate($timeStamp, $totalYears=1){
        $thePHPDate = getdate($timeStamp);
        $thePHPDate['year'] = $thePHPDate['year']+$totalYears;
        $timeStamp = mktime($thePHPDate['hours'], $thePHPDate['minutes'],
$thePHPDate['seconds'], $thePHPDate['mon'], $thePHPDate['mday'], $thePHPDate
['year']);
        return $timeStamp;
    }
?>
ronnie dot kurniawan at gmail dot com 16-Jan-2009 05:49
Add (and subtract) unixtime:

<?php
function utime_add($unixtime, $hr=0, $min=0, $sec=0, $mon=0, $day=0, $yr=0) {
  $dt = localtime($unixtime, true);
  $unixnewtime = mktime(
      $dt['tm_hour']+$hr, $dt['tm_min']+$min, $dt['tm_sec']+$sec,
      $dt['tm_mon']+1+$mon, $dt['tm_mday']+$day, $dt['tm_year']+1900+$yr);
  return $unixnewtime;
}
?>
electriic ink 17-Dec-2008 07:30
Days until Christmas:

<?php
     $time = mktime(0, 0, 0, 12, 25, 2008, 1) - time();

     $days = floor($time/86400);
     $hours = floor(($time-($days*86400))/3600);
     $mins = floor (($time-($days*86400)-($hours*3600))/60);
     $secs = floor ($time-($days*86400)-($hours*3600)-($mins*60));

     $tsecs = $time;
     $thours = round($time/3600);

    
     if ($tsecs <= 600) {

      echo '<html> <head> <title> ' . $tsecs . ' seconds left until 12am
Christmas Day </title> <meta http-equiv="refresh" content="1;url=""></head>
<body><span

style="font-size:10pt">Christmas day in ' . $days . ' days ' . $hours . ' hours
' .  $mins . ' mins ' . $secs . ' seconds!<br><br>(There are ' . $tsecs . '
seconds in

total)</span></body></html>';
   
     } else {

      echo '<html> <head> <title> ' . $thours . ' hours left until 12am
Christmas Day </title> <meta http-equiv="refresh" content="10;url=""></head>
<body><span

style="font-size:10pt">Christmas day in ' . $days . ' days ' . $hours . ' hours
' .  $mins . ' mins ' . $secs . ' seconds!<br><br>(There are ' . number_format
($thours)

. ' hours in total and ' . number_format($tsecs) . ' seconds in total)</span></
body></html>';

     }

?>
Alan 18-Nov-2008 03:52
Do remember that, counter-intuitively enough, the arguments for month and day
are inversed (or middle-endian). A common mistake for Europeans seems to be to
feed the date arguments in the expected order (big endian or little endian).

It's clear to see where this weird order comes from (even with the date being
big endian the order for all arguments would still be mixed - it's obviously
based on the American date format with the time "prefixed" to allow an easier
shorthand) and why this wasn't changed (passing the values in the wrong order
produces a valid, though unexpected, result in most cases), but it continues to
be a source of confusion for me whenever I come back to PHP from other
languages or libraries.
Anonymous 14-Nov-2008 04:34
<?php
//example of functions to know if a date/time value is in summer hour or in
winter hour

//====================
function getChgWinDate($dt){
 $y=substr($dt,0,4);
 for($i=31;$i>20;$i--){
  $ts=mktime(3,0,0,10,$i,$y);
  $dy=date('D',$ts);
  if($dy=='Sun') return($y.'/10/'.$i.' 03:00:00');
 }
}
//====================
function getChgSumDate($dt){
 $y=substr($dt,0,4);
 for($i=31;$i>20;$i--){
  $ts=mktime(2,0,0,10,$i,$y);
  $dy=date('D',$ts);
  if($dy=='Sun') return($y.'/03/'.$i.' 02:00:00');
 }
}
//====================
function isSummerDate($dt){
 $b1=getChgWinDate($dt);
 $b2=getChgSumDate($dt);
 if($dt>=$b2&&$dt<$b1) return(true);
 return(false);
}
//====================
function isWinterDate($dt){
 return(!isSummerDate($dt));
}

//====================
$dt = '2008/10/26 03:15:16';
if( isSummerDate($dt) ){
 echo $dt . " is summer hour in france";
}else{
 echo $dt . " is winter hour in france";
}
?>
thebloodyharry at gmail dot com 11-Nov-2008 02:04
here simple sample for timestamps.(using malaysia GMT 8)

$mkendtimep=mktime(date("H")+8, date("i"), date("s"), date("m"), date("d"),
date("Y"));

$todaydate=date("(d/m/y) H:i:s", $mkendtimep);
if (date("l")=="Monday") { $mday=Monday; } else
    if (date("l")=="Tuesday") { $mday=Tuesday; } else
    if (date("l")=="Wednesday") { $mday=Wednesday; } else
    if (date("l")=="Thursday") { $mday=Thursday; } else
    if (date("l")=="Friday") { $mday=Friday; } else
    if (date("l")=="Saturday") { $mday=Saturday; } else
    if (date("l")=="Sunday"){  $mday=Sunday; }

$realtime="$mday$todaydate (GMT +8)";

..hope it will help you out....
yan 10-Nov-2008 01:50
caculate days between two date

<?php
  // end date is 2008 Oct. 11 00:00:00
  $_endDate = mktime(0,0,0,11,10,2008);
  // begin date is 2007 May 31 13:26:26
  $_beginDate = mktime(13,26,26,05,31,2007);

  $timestamp_diff= $_endDate-$_beginDate +1 ;
  // how many days between those two date
  $days_diff = $timestamp_diff/86400;

?>
Maffu 29-Oct-2008 11:05
When calling mktime(), be sure that you use values without leading zeros.  The
date comes out wrong in the following example:

$endts = mktime(12, 00, 00, 12, 08, 2008, 0);

(note the 08 instead of just 8)

C's scanf() has a format specification where leading 0's can indicate an octal
value - perhaps this is related?
mark at markfiend dot com 15-Oct-2008 11:52
zola at zolaweb:

Your expression date('U', strtotime($mydate)) evaluates to strtotime($mydate).
Converting to a UNIX timestamp is what strtotime() does.
ionut dot bodea at eydos dot ro 02-Oct-2008 03:29
Here is what I use to calculate age. It took me 30 minutes to write and it's
quite accurate. What it has special is that it's calculating the number of days
a year has (float number), by testing if a year is a leap one or not. This
number is used to compute the age.

<?php
function get_age($date_start, $date_end) {
    $t_lived = get_timestamp($date_end) - get_timestamp($date_start);
    $seconds_one_year = get_days_per_year($date_start, $date_end) * 24 * 60 *
60;
    $age = array();
    $age['years_exact'] = $t_lived / $seconds_one_year;
    $age['years'] = floor($t_lived / $seconds_one_year);
    $seconds_remaining = $t_lived % $seconds_one_year;
    $age['days'] = round($seconds_remaining / (24 * 60 * 60));
    return $age;
}
function get_timestamp($date) {
    list($y, $m, $d) = explode('-', $date);
    return mktime(0, 0, 0, $m, $d, $y);
}
function get_days_per_year($date_start, $date_end) {
    list($y1) = explode('-', $date_start);
    list($y2) = explode('-', $date_end);
    $years_days = array();
    for($y = $y1; $y <= $y2; $y++) {
        $years_days[] = date('L', mktime(0, 0, 0, 1, 1, $y)) ? 366 : 365;
    }
    return round(array_sum($years_days) / count($years_days), 2);
}

$date_birth = '1979-10-12';
$date_now = date('Y-m-d');

$age = get_age($date_birth, $date_now);
echo '<pre>';
print_r($age);
echo '</pre>';
?>


It will display something like this:
Array
(
    [years_exact] => 28.972974329491
    [years] => 28
    [days] => 355
)
ooogla at hotmail dot com 01-Sep-2008 10:56
If you want to increment the day based on a variable when using a loop you can
use this when you submit a form

1. Establish a start date and end date in two different variables

2. Get the number of days between a date

$ndays = (strtotime($_POST['edate']) - strtotime($_POST['sdate'])) / (60 * 60 *
24);

Then here is the string you slip in your loop

$nextday  = date('Y-m-d', mktime(0, 0, 0, date("m", strtotime($_POST['sdate']))
  , date("d", strtotime($_POST['sdate']))+ $count, date("Y", strtotime($_POST
['sdate']))));

$count is incremented by the loop.
thomas_corthals at hotmail dot com 13-May-2008 02:34
It seems mktime() doesn't return negative timestamps on Linux systems with a
version of glibc <= 2.3.3.
joseph dot andrew dot hughes at gmail dot com 30-Jan-2008 08:58
Just a small thing to think about if you are only trying to pull the month out
using mktime and date.  Make sure you place a 1 into day field.  Otherwise you
will get incorrect dates when a month is followed by a month with less days
when the day of the current month is higher then the max day of the month you
are trying to find.. (Such as today being Jan 30th and trying to find the month
Feb.)
PHPcoder at freemail dot ig3 dot net 06-Sep-2007 05:58
The maximum possible date accepted by mktime() and gmmktime() is dependent on
the current location time zone.

For example, the 32-bit timestamp overflow occurs at
2038-01-19T03:14:08+0000Z.  But if you're in a UTC -0500 time zone (such as EST
in North America), the maximum accepted time before overflow (for older PHP
versions on Windows) is 2038-01-18T22:14:07-0500Z, regardless of whether you're
passing it to mktime() or gmmktime().
Jonathan Woodard 31-Aug-2007 02:31
NB: one 'gotcha' with the implementation of mktime()'s parameters:

<?php
for( $i = 1 ;  $i <= 12 ; $i++ )
{
    echo "Month '$i' is: " . date( "F" , mktime( 0 , 0 , 0 , $i ) ) . "\n";
}
?>
Will output:
Month '1' is: January
Month '2' is: March
Month '3' is: March
Month '4' is: May
Month '5' is: May
Month '6' is: July
Month '7' is: July
Month '8' is: August
Month '9' is: October
Month '10' is: October
Month '11' is: December
Month '12' is: December
on the 31st day of every month.

Why? Because the 5th parameter "day" defaults to "right now," which will not
work reliably for days after the 28th.

To make sure this doesn't happen, specify the first day of the month:
<?php
mktime( 0 , 0 , 0 , $i , 1 )
?>
rlz 17-Jul-2007 04:52
Finding out the number of days in a given month and year, accounting for leap
years when February has more than 28 days.

<?php
function days_in_month($year, $month) {
    return( date( "t", mktime( 0, 0, 0, $month, 1, $year) ) );
}
?>

Hope it helps a soul out there.
mike at mike-griffiths dot co dot uk 11-Jul-2007 01:04
It may be useful to note that no E_WARNINGS or E_NOTICES are give if you
specify a date <1901 or >2038 on systems where time_t is a 32bit signed
integer.

If a date is specified outside of the allowed range you may get some unexpected
results as no timestamp will be returned.
rga at merchantpal dot com 31-Mar-2007 04:46
You cannot simply subtract or add month VARs using mktime to obtain previous or
next months as suggested in previous user comments (at least not with a DD > 28
anyway).

If the date is 03-31-2007, the following yeilds March as a previous month. Not
what you wanted.

<?php
$dateMinusOneMonth = mktime(0, 0, 0, (3-1), 31,  2007 );
$lastmonth = date("n | F", $dateMinusOneMonth);
echo $lastmonth;    //---> 3 | March
?>

mktime correctly gives you back the 3rd of March if you subtract 1 month from
March 31 (there are only 28 days in Feb 07).

If you are just looking to do month and year arithmetic using mktime, you can
use general days like 1 or 28 to do stuff like this:

<?php
$d_daysinmonth = date('t', mktime(0,0,0,$myMonth,1,$myYear));     // how many
days in month
$d_year = date('Y', mktime(0,0,0,$myMonth,1,$myYear));        // year
$d_isleapyear = date('L', mktime(0,0,0,$myMonth,1,$myYear));    // is YYYY a
leapyear?

$d_firstdow = date('w', mktime(0,0,0,$myMonth,'1',$myYear));     // FIRST falls
on what day of week (0-6)
$d_firstname = date('l', mktime(0,0,0,$myMonth,'1',$myYear));     // FIRST
falls on what day of week Full Name

$d_month = date('n', mktime(0,0,0,$myMonth,28,$myYear));         // month of
year (1-12)
$d_monthname = date('F', mktime(0,0,0,$myMonth,28,$myYear));         // Month
Long name (July)
$d_month_previous = date('n', mktime(0,0,0,($myMonth-1),28,$myYear));         /
/ PREVIOUS month of year (1-12)
$d_monthname_previous = date('F', mktime(0,0,0,($myMonth-1),28,$myYear));     /
/ PREVIOUS Month Long name (July)
$d_month_next = date('n', mktime(0,0,0,($myMonth+1),28,$myYear));         //
NEXT month of year (1-12)
$d_monthname_next = date('F', mktime(0,0,0,($myMonth+1),28,$myYear));         /
/ NEXT Month Long name (July)
$d_year_previous = date('Y', mktime(0,0,0,$myMonth,28,($myYear-1)));        //
PREVIOUS year
$d_year_next = date('Y', mktime(0,0,0,$myMonth,28,($myYear+1)));        // NEXT
year

$d_weeksleft = (52 - $d_weekofyear);                     // how many weeks left
in year
$d_daysinyear = $d_isleapyear ? 366 : 365;                // set correct days
in year for leap years
$d_daysleft = ($d_daysinyear - $d_dayofyear);                // how many days
left in year
?>
Stephen 08-Jan-2007 10:43
There are several warnings here about using mktime() to determine a date
difference because of daylight savings time. However, nobody seems to have
mentioned the other obvious problem, which is leap years.

Leap years mean that any effort to use mktime() and time() to determine the age
(positive or negative) of some timestamp in years will be flawed. There are
some years that are 366 days long, therefore you cannot say that there is a set
number of seconds per year.

Timestamps are good for determining *real* time, which is not the same thing as
*human calendar* time. The Gregorian calendar is only an approximation of real
time, which is tweaked with daylight savings time and leap years to make it
conform more to humans' expectations of how time should or ought to work.
Timestamps are not tweaked and therefore are the only authoritative way of
recording in computers a proper order of succession of events, but they cannot
be integrated with a Gregorian system unless you take both leap years and DST
into account. Otherwise, you may get the wrong number of years when you are
approaching a value of exactly X years.

As for PHP, you could still use timestamps as a way of determining age if you
took into account not only DST but also whether or not each year is a leap year
and adjusted your calculations accordingly. However, this could become messy
and inefficient.

There is an alternative approach to calculating days given the day, month and
year of the dates to be compared. Compare the years first, and then compare the
month and day - if the month and day have already passed (or, if you like, if
they match the current month and day), then add 1 to the total for the years.

This solution works because it stays within the Gregorian system and doesn't
venture into the world of timestamps.

There is also the issue of leap seconds, but this will only arise if you
literally need to get the *exact* age in seconds. In that case, of course, you
would also need to verify that your timestamps are exactly correct and are not
delayed by script processing time, plus you would need to determine whether
your system conforms to UTC, etc. I expect this will hardly be an issue for
anybody using PHP, however if you are interested there is an article on this
issue on Wikipedia:

http://en.wikipedia.org/wiki/Leap_second
jsebfranck 07-Nov-2006 12:42
There are several notes for mktime which use the number 86400 to differentiate
two days. However this technique may pose a problem in case there is a day
where the hour change between the two dates to compare.

Consequently, if you want the timestamp difference between the day where the
hour change and the next day, it will not be equals to 86400 but either 82800
in case its the winter change of hour day or 90000 for the summer change of
hour day.

For example in 2006 :

<?php
echo mktime(0,0,0,10,29,2006) - mktime(0,0,0,10,30,2006); // -90 000
?>
carlo dot tafuro at poste dot it 08-May-2006 11:40
Negative timestamps give problem also using linux as guest operating system
inside WMvare with Windows host operating system.
colin dot horne at gmail dot com 31-Mar-2005 06:48
If the month is greater than 12, it goes into the next year. If it is less than
1, it goes into the previous year. Generally, it behaves as you'd expect it to
:-)

Examples:

<?php

// January 1, 2005
print date ("F j, Y", mktime (0,0,0,13,1,2004));

// December 1, 2003
print date ("F j, Y", mktime (0,0,0,0,1,2004));

// February 1, 2005
print date ("F j, Y", mktime (0,0,0,14,1,2004));

// November 1, 2003
print date ("F j, Y", mktime (0,0,0,-1,1,2004));

?>
Romain Sam 25-Mar-2005 03:50
Under Windows, mktime goes until 2038-01-19 (03:14:07 ...)
praas at NOSPAM dot ision dot nl 01-Feb-2004 08:44
Consider skipping months with mktime().

$nextmonth = date("M",mktime(0,0,0,date("n")+1,date("j"),date("Y")));

On any day in Januari you expect to get Feb, right?
But on January 30th you'll get Mar. It will try Feb 30th, which doesn't exist,
and skips another month. Therefore in this case present a day value that will
certainly be legal in any month, like day "1".

This will give you next month on any day of the year:
$nextmonth = date("M",mktime(0,0,0,date("n")+1,1,date("Y")));
iain at seatofthepants dot net 09-Dec-2003 03:49
In the above example it should ne boted that if you try to calculate the
command at midnight on the 28/04/2004 you will get an erroneous response. This
has been driving me to distraction.

$myTime = mktime( 0, 0, 0, 3, 28, 2004);

Solution I found was to create the time at 3am well after the 2am daylight
savings problem, viz:

$myTime = mktime( 3, 0, 0, 3, 28, 2004);

Not sure if this is documented anywhere.
trahma 20-Nov-2003 08:06
I think it is important to note that the timestamp returned is based upon the
number of seconds from the epoch GMT, and then modified by the time zone
settings on the server.

Thus...

mktime(0,0,0,1,1,1970) will not always return 0.  For example with the US
eastern time zone (GMT-5) will return 18000 (5 hours past the epoch) and the
same function with the time zone set to the US pacific time zone (GMT-8) will
return 28800 (8 hours past the epoch).

In an instance where you want time zone independence, you should use the
function gmmktime()
laurie at oneuponedown dot com 18-Nov-2003 04:42
With regard to Example 1 and using mktime to correct out-of-range input.

It should be noted that mktime will implement day light saving amends. Consider
the following:

<?php
print(date("d/m/Y H:i:s",mktime(0,0,0,3,(27 + 1),2004)));
?>
OUTPUT "28/03/2004 02:00:00"

<?php
print(date("d/m/Y H:i:s",(mktime(0,0,0,3,27,2004) + (((1 * 24) * 60) * 60))));
?>
OUTPUT "28/03/2004 00:00:00"

Dependent on your requirements this may or may be desirable
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 30 01:21:27 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

natcasesort> <ksort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
list

(PHP 4, PHP 5)

list — 配列と同様の形式で、複数の変数への代入を行う

説明

array list ( mixed $varname [, mixed $... ] )

array() と同様に、この関数は実際には関数ではなく言語の構成要素です。 list() は
、単一の操作で一連の変数に値を代入するために使われます。

パラメータ

varname

    変数。

返り値

代入した配列を返します。

例

例1 list() の例

<?php

$info = array('コーヒー', '茶色', 'カフェイン');

// すべての変数の取得
list($drink, $color, $power) = $info;
echo "$drink の色は $color で、$power が含まれています。\n";

// 一部の変数の取得
list($drink, , $power) = $info;
echo "$drink には $power が含まれています。\n";

// 三番目のみの取得
list( , , $power) = $info;
echo "$power 欲しい!\n";

// list() は文字列では動作しません
list($bar) = "abcde";
var_dump($bar); // NULL
?>

例2 list() の使用法の例

<table>
 <tr>
  <th>社員氏名</th>
  <th>給与</th>
 </tr>

<?php

$result = mysql_query("SELECT id, name, salary FROM employees", $conn);
while (list($id, $name, $salary) = mysql_fetch_row($result)) {
    echo " <tr>\n" .
          "  <td><a href=\"info.php?id=$id\">$name</a></td>\n" .
          "  <td>$salary</td>\n" .
          " </tr>\n";
}

?>

</table>

例3 ネストした list() の使用法

<?php

list($a, list($b, $c)) = array(1, array(2, 3));

var_dump($a, $b, $c);

?>

int(1)
int(2)
int(3)

例4 配列の添字を使用した list() の例

<?php

$info = array('coffee', 'brown', 'caffeine');

list($a[0], $a[1], $a[2]) = $info;

var_dump($a);

?>

次のような出力になります(list() の文法に書かれた順番と、要素の順番の違いに注
意):

array(3) {
  [2]=>
  string(8) "caffeine"
  [1]=>
  string(5) "brown"
  [0]=>
  string(6) "coffee"
}

注意

警告

list()は、最も右のパラメータから値を代入します。プレーンな変数を使用している場
合には、このことを気にする必要はありません。しかし、添字配列を使用している場合
には、配列の添字の順番が list() に書いたものと同じく左から右となることを通常は
期待しますが、そうはなりません。この配列の添字は逆の順番となります。

警告

list() を実行して配列を変更 (list($a, $b) = $b など) した場合の挙動は未定義です
。

    注意:

    list() は数値添字の配列のみを生成します。添字は 0 から始まります。

参考

  • each() - 配列から現在のキーと値のペアを返して、カーソルを進める
  • array() - 配列を生成する
  • extract() - 配列からシンボルテーブルに変数をインポートする



natcasesort> <ksort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes list
Ultimater at gmail dot com 08-May-2011 10:37
Note that list(...) isn't limited to scalar variables.
It can even create an associative array:

<?php
$html=<<<EOT
<table>
<tr class="row-odd">
<td><span class="username">Foo</span></td>
<td><span class="userid">30185</span></td>
</tr><tr class="row-even">
<td><span class="username">Bar</span></td>
<td><span class="userid">3093</span></td>
</tr>
</table>
EOT;

interface RegExps
{
    const PROFILE_CONTENT='/<tr[^>]*>.*?<span class="username">(.*?)<\/span>[
        ]?.*?<span class="userid">(.*?)<\/span>.*?<\/tr>/msi';
}

preg_match_all(RegExps::PROFILE_CONTENT,$html, $matches,PREG_SET_ORDER);
$profiles=array();
foreach($matches as $match)
{
    $profile=array();
    list(,$profile['username'],$profile['userid'])=$match;
    //$profile=array_reverse($profile);
    $profiles[]=$profile;
}
echo '<pre>'.print_r($profiles,true).'</pre>';
?>

Just be careful, as the manual warns us, regarding the right-most parameter
being handled first.
If this becomes a problem, I'd suggest using array_reverse as shown in my code.
boukeversteegh at gmail dot com 06-Apr-2011 07:49
If your array is shorter than the number of arguments in list(), you will get
an "undefined index" notice.

You can solve it by making sure the array is long enough:

<?php
   $array = Array( "one", "two" );

   # This will give a Notice: undefined index [2]:
   list( $one, $two, $three ) = $array;

   # This won't:
   list( $one, $two, $three ) = $array + Array( null, null, null );

   # If you know count($array) will be at least 1, you could skip the first
index:
   list( $one, $two, $three ) = $array + Array( 1 => null, null );

   # You could of course also use other default values:
   list( $one, $two, $three ) = $array + Array( "one", "two", "three" );
?>
lili at nikha dot org 04-Apr-2011 11:02
Keep it simple!
For associative arrays, my replacement for list() is this:
<?php
foreach ($associative_array as $key => $value) { $$key = $value; }
?>

Example:
<?php
$petnames = array();
$petnames['dog'] = 'Paul';
$petnames['cat'] = 'Lili';

foreach ($petnames as $name => $value) { $$name = $value; }

echo 'my pets are '.$dog.' and '.$cat;
?>

Will give you:
my pets are Paul and Lili
develop at dieploegers dot de 31-Mar-2010 11:37
Remember, that list starts from index 0. You can skip an index if you just
leave the column blank like this:

<?php
list(,$a,$b,$c) = array(1,2,3,4);
?>

You CAN'T (at least not in 5.3.1, what I have tested) set the column to null:

<?php
list(null,$a,$b,$c) = array(1,2,3,4);
?>

This will fail.
Anonymous 12-Mar-2010 05:29
Quick little function that is similar to list but for objects.

<?php
    function listObj() {
        $stack = debug_backtrace();
        if (isset($stack[0]['args'])) {
            $i = 0;
            $args = $stack[0]['args'];
            foreach ($args[0] as $key => $value)
                $args[++$i] = $value;
        }
    }

    class obj {public $var = "test"; public $vars = "test2"; function obj() {}}
    listObj(new obj, &$var, &$var2);
    echo $var, $var2;
?>
claude dot pache at gmail dot com 13-May-2009 10:26
A simple way to swap variables (correction of a note of mario dot mueller dot
work at gmail dot com below):
<?php
list($var1, $var2) = array($var2, $var1); // swaps the values of $var1 and
$var2
?>
Note that this is not equivalent to:
<?php
$var2 = $var1; $var1 = $var2; // $var1 and $var2 get both the old value of
$var1
?>
as one could fear. Indeed, the array is constructed with the values of $var1
and $var2 (and not with the variables $var1 and $var2 themselves) before the
assignment is carried out.

Similarly, it is possible to bypass the problem pointed by sasha in the
previous note by providing an expression rather than a variable on the
right-hand side of the assignment operator:
<?php
$var = array ("test" ,"blah");
list ($a,$var) = $var + array();
echo $a ; // prints "test", not "b"
echo $var ; // prints "blah"
?>
tristan in oregon 09-Apr-2008 02:44
Here's yet another way to make a list()-like construct for associative arrays.
This one has the advantage that it doesn't depend on the order of the keys, it
only extracts the keys that you specify, and only extracts them into the
current scope instead of the global scope (which you can still do, but at least
here you have the option).

<?php
    $arr  = array("foo" => 1, "bar" => 2, "baz" => 3);
    $keys = array("baz");

//  $foo = 10;
    $bar = 20;
    $baz = 30;

    extract(array_intersect_key($arr, $keys));

    var_dump($foo);
    var_dump($bar);
    var_dump($baz);
?>

Should print
NULL
int(20)
int(3)

If your version of PHP doesn't have array_intersect_key() yet (below 5.1 I
think), it's easy to write a limited feature replacement for this purpose.

<?php
function my_array_intersect_key ($assoc, $keys)
{
    $intersection = array();
    foreach ($assoc as $key => $val)
        if (in_array($key, $keys))
            $intersection[$key] = $val;

    return $intersection;
}
?>
kevin at vanzonneveld dot net 06-Feb-2008 03:12
Another way to do it associative (if your array isn't numeric), is to just use
array_values like this:

<?php
$os = array();
$os["main"] = "Linux";
$os["distro"] = "Ubuntu";
$os["version"] = "7.10";

list($main, $distro, $version) = array_values($os);
?>
danieljames3 at g mail 20-Jan-2008 01:51
With regard to the note written by ergalvan at bitam dot com:

You must take note that list() assigns variables starting from the rightmost
one (as stated in the warning). That makes $record having the value "value4"
and then $var1, $var2 and $var3 take their values from the "new" $record
variable.

It's clear that the behavior stated in the warning wasn't followed by version
5.0.4 (and perhaps previous versions?)

----------

I'm still seeing this behavior in PHP 5.2.5.  Hopefully someone can comment on
why it's been changed.
Hayley Watson 04-Nov-2007 08:36
In the code by tenz699 at hotmail dot com, the list() construct is taking
values from the result of the each() function, not from the associative array;
the example is therefore spurious.

each() returns an array of four elements, indexed in the order 1, 'value', 0,
'key'. As noted in the documentation, the associative keys are ignored, and the
numerically-indexed values are assigned in key order.

<?php
$array = array('foo'=>'bar');
$t = each($array);
print_r($t);
list($a,$b,$c,$d) = $t;
var_dump($a);
var_dump($b);
var_dump($c);
var_dump($d);
?>

Output:
Array
(
    [1] => bar
    [value] => bar
    [0] => foo
    [key] => foo
)
string(3) "foo"
string(3) "bar"
NULL
NULL
tenz699 at hotmail dot com 18-Sep-2007 05:50
PhP manual's NOTE says: list() only works on numerical arrays and assumes the
numerical indices start at 0.

I'm finding it do works for associative arrays too,as below:

<?
$tenzin = array ("1" => "one", "2" => "two","3"=>"three");
while(list($keys,$values) = each($tenzin))
echo($keys." ".$values."<br>");
?>

gives O/P
1 one 
2 two
3 three

tsarma
mick at wireframe dot com 08-Aug-2007 07:08
It's worth noting that, as expected, list() does not have to have as many
variables (and/or empty skips) as there are elements in the array. PHP will
disregard all elements that there are no variables for. So:

<?php
$Array_Letters = array('A', 'B', 'C', 'D', 'E', 'F');

list($Letter_1, $Letter_2) = $Array_Letters;

echo $Letter_1 . $Letter_2;
?>

Will output: AB

Mick
tobylewis at logogriph dot com 08-May-2007 10:55
The list construct assigns elements from a numbered array starting from element
zero.  It does not assign elements from associative arrays.  So

$arr = array();
$arr[1] = 'x';
list($a, $b) = $arr;
var_dump($a); //outputs NULL because there is no element [0]
var_dump($b); //outputs 'x'

and

$arr = array('red'=>'stop','green'=>'go');
list($a, $b) = $arr;
var_dump($a); //outputs NULL
var_dump($b); //outputs NULL

If there are not enough elements in the array for the variables in the list the
excess variables are assigned NULL.

If there are more elements in the array than variables in the list, the extra
array elements are ignored without error.

Also the warning above about order of assignment is confusing until you get
used to php arrays.  The order in which array elements are stored is the order
in which elements are assigned to the array.  So even in a numbered array if
you assign $may_arr[2] before you assign $my_array[0] then element [2] will be
in the array before [0].  This becomes apparent when using commands like, push,
shift or foreach which work with the stored order of the elements.  So the
warning only applies when the variables in the list are themselves array
elements which have not already been assigned to their array.
ergalvan at bitam dot com 04-May-2006 06:29
With regard to the note written by dolan at teamsapient dot com:

You must take note that list() assigns variables starting from the rightmost
one (as stated in the warning). That makes $record having the value "value4"
and then $var1, $var2 and $var3 take their values from the "new" $record
variable.

It's clear that the behavior stated in the warning wasn't followed by version
5.0.4 (and perhaps previous versions?)
dolan at teamsapient dot com 06-Apr-2006 06:08
I noticed w/ version 5.1.2, the behavior of list() has changed (this occurred
at some point between version 5.0.4 and 5.1.2).  When re-using a variable name
in list() that list() is being assigned to, instead of the values being
assigned all at once, the reused variable gets overwritten before all the
values are read.

Here's an example:
** disclaimer: obviously this is sloppy code, but I want to point out the
behavior change (in case anyone else comes across similar code) **

<?
$data = array();
$data[] = array("value1", "value2", "value3", "value4");
$data[] = array("value1", "value2", "value3", "value4");
$data[] = array("value1", "value2", "value3", "value4");
$data[] = array("value1", "value2", "value3", "value4");

foreach($data as $record)
{
    list($var1, $var2, $var3, $record) = $record;
    echo "var 1: $var1, var 2: $var2, var 3: $var3, record: $record\\n";
}
?>

OUTPUT on version 5.0.4:
var 1: value1, var 2: value2, var 3: value3, record: value4
var 1: value1, var 2: value2, var 3: value3, record: value4
var 1: value1, var 2: value2, var 3: value3, record: value4
var 1: value1, var 2: value2, var 3: value3, record: value4

OUTPUT on version 5.1.2:
var 1: v, var 2: a, var 3: l, record: value4
var 1: v, var 2: a, var 3: l, record: value4
var 1: v, var 2: a, var 3: l, record: value4
var 1: v, var 2: a, var 3: l, record: value4
mzizka at hotmail dot com 03-Jan-2006 04:49
Elements on the left-hand side that don't have a corresponding element on the
right-hand side will be set to NULL. For example,

<?php
$y = 0;
list($x, $y) = array("x");
var_dump($x);
var_dump($y);
?>

Results in:

string(1) "x"
NULL
Nearsighted 25-Jul-2005 02:34
list, coupled with while, makes for a handy way to populate arrays.

while (list($repcnt[], $replnk[], $date[]) = mysql_fetch_row($seek0))
{
// insert what you want to do here.
}

PHP will automatically assign numerical values for the array because of the []
signs after the variable.

From here, you can access their row values by array numbers.

eg.

for ($i=0;$i<$rowcount;$i++)
{
echo "The title number $repcnt[$i] was written on $date[$i].";
}
webmaster at miningstocks dot com 01-Jun-2005 06:05
One way to use the list function with non-numerical keys is to use the
array_values() function

<?php
$array = array ("value1" => "one", "value2" => "two");
list ($value1, $value2) = array_values($array);
?>
mortoray at ecircle-ag dot com 16-Feb-2005 09:29
There is no way to do reference assignment using the list function, therefore
list assignment is will always be a copy assignment (which is of course not
always what you want).

By example, and showing the workaround (which is to just not use list):

    function &pass_refs( &$a ) {
        return array( &$a );
    }

    $a = 1;
    list( $b ) = pass_refs( $a ); //*
    $a = 2;
    print( "$b" ); //prints 1

    $ret = pass_refs( $a );
    $b =& $ret[0];
    $a = 3;
    print( "$b" ); //prints 3

*This is where some syntax like the following would be desired:
   list( &$b ) = pass_refs( $a );
or maybe:
   list( $b ) =& pass_refs( $a );
jennevdmeer at zonnet dot nl 21-Oct-2004 03:29
This is a function simulair to that of 'list' it lists an array with the 'key'
as variable name and then those variables contain the value of the key in the
array.
This is a bit easier then list in my opinion since you dont have to list up all
variable names and it just names them as the key.

<?php
 function lista($a) {
  foreach ($a as $k => $v) {
   $s = "global \$".$k;
   eval($s.";");
   $s = "\$".$k ." = \"". $v."\"";
   eval($s.";");
  }
 }
?>
HW 14-Aug-2004 08:08
The list() construct can be used within other list() constructs (so that it can
be used to extract the elements of multidimensional arrays):
<?php
$matrix = array(array(1,2),
                array(3,4));

list(list($tl,$tr),list($bl,$br)) = $matrix;

echo "$tl $tr $bl $br";
?>
Outputs "1 2 3 4".
jeronimo at DELETE_THIS dot transartmedia dot com 29-Jan-2004 03:28
If you want to swap values between variables without using an intermediary, try
using the list() and array() language constructs. For instance:

<?

// Initial values.
$biggest = 1;
$smallest = 10;

// Instead of using a temporary variable...
$temp = $biggest;
$biggest = $smallest;
$smallest = $temp;

// ...Just swap the values.
list($biggest, $smallest) = array($smallest, $biggest);

?>

This works with any number of variables; you're not limited to just two.
Cheers,
Jeronimo
rubein at earthlink dot net 29-Dec-2000 01:15
Note: If you have an array full of arrays, you can't use list() in conjunction
to foreach() when traversing said array, e.g.

$someArray = array(
  array(1, "one"),
  array(2, "two"),
  array(3, "three")
);

foreach($somearray as list($num, $text)) { ... }


This, however will work

foreach($somearray as $subarray) {
  list($num, $text) = $subarray;
  ...
}
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Dec 25 17:41:07 2011 UTC
Received cookie: COUNTRY=JPN%2C114.48.84.245
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 変数操作
  • 変数操作関数
  • debug_ zval_ dump
  • doubleval
  • empty
  • floatval
  • get_ defined_ vars
  • get_ resource_ type
  • gettype
  • import_ request_ variables
  • intval
  • is_ array
  • is_ bool
  • is_ callable
  • is_ double
  • is_ float
  • is_ int
  • is_ integer
  • is_ long
  • is_ null
  • is_ numeric
  • is_ object
  • is_ real
  • is_ resource
  • is_ scalar
  • is_ string
  • isset
  • print_ r
  • serialize
  • settype
  • strval
  • unserialize
  • unset
  • var_ dump
  • var_ export

is_numeric> <is_long
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
is_null

(PHP 4 >= 4.0.4, PHP 5)

is_null — 変数が NULL かどうか調べる

説明

bool is_null ( mixed $var )

指定した変数が NULL かどうかを調べます。

パラメータ

var

    評価する変数。

返り値

var が null の場合に TRUE、それ以外の場合に FALSE を返します。

例

例1 is_null() の例

<?php

error_reporting(E_ALL);

$foo = NULL;
var_dump(is_null($inexistent), is_null($foo));

?>

Notice: Undefined variable: inexistent in ...
bool(true)
bool(true)

参考

  • NULL 型
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • is_bool() - 変数が boolean であるかを調べる
  • is_numeric() - 変数が数字または数値形式の文字列であるかを調べる
  • is_float() - 変数の型が float かどうか調べる
  • is_int() - 変数が整数型かどうかを検査する
  • is_string() - 変数の型が文字列かどうかを調べる
  • is_object() - 変数がオブジェクトかどうかを検査する
  • is_array() - 変数が配列かどうかを検査する



is_numeric> <is_long
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes is_null
claude dot pache at gmail dot com 09-May-2009 04:38
A small but important difference between "is_null" and "isset" is the
following: "is_null" tests if an *expression* (not a *variable*) is null, while
"isset" tests if a *variable* has null value or is undefined. The difference is
manifested in the two following experiments:

Experiment 1:
<?php
function test() { return null; }
var_dump(is_null(test())); // displays "true"
var_dump(isset(test())); // parse error, because "test()" is not a variable
?>

Experiment 2:
<?php
error_reporting(E_ALL);
var_dump(isset($an_undefined_variable)); // displays "false" since
"$an_undefined_variable" is not defined
var_dump(is_null($an_undefined_variable)); // displays "true" (as expected),
but throws a notice because "$an_undefined_variable" is not defined.
?>
george at fauxpanels dot com 01-Dec-2008 09:58
See how php parses different values. $var is the variable.

$var        =    NULL    ""    0    "0"    1

strlen($var)    =    0    0    1    1    1
is_null($var)    =    TRUE    FALSE    FALSE    FALSE    FALSE
$var == ""    =    TRUE    TRUE    TRUE    FALSE    FALSE
!$var        =    TRUE    TRUE    TRUE    TRUE    FALSE
!is_null($var)    =    FALSE    TRUE    TRUE    TRUE    TRUE
$var != ""    =    FALSE    FALSE    FALSE    TRUE    TRUE
$var        =    FALSE    FALSE    FALSE    FALSE    TRUE

Peace!
mdufour at gmail dot com 20-Aug-2008 04:31
Testing for a NULL field/column returned by a mySQL query.

Say you want to check if field/column “foo” from a given row of the table “bar”
when returned by a mySQL query is null.
You just use the “is_null()” function:

[connect…]
$qResult=mysql_query("Select foo from bar;");
while ($qValues=mysql_fetch_assoc($qResult))
     if (is_null($qValues["foo"]))
         echo "No foo data!";
     else
         echo "Foo data=".$qValues["foo"];
[…]
Malfist 01-Jul-2008 02:54
Micro optimization isn't worth it.

You had to do it ten million times to notice a difference, a little more than 2
seconds

$a===NULL; Took: 1.2424390316s
 is_null($a); Took: 3.70693397522s

difference = 2.46449494362
difference/10,000,000 = 0.000000246449494362

The execution time difference between ===NULL and is_null is less than 250
nanoseconds. Go optimize something that matters.
strrev xc.noxeh@ellij 03-Jun-2008 12:42
$var===NULL is much faster than is_null($var) (with the same result)

I did some benchmarking with 10 million iterations:

$a=null;
 isset($a); Took: 1.71841216087s
 $a==NULL; Took: 1.27205181122s
 $a===NULL; Took: 1.2424390316s
 is_null($a); Took: 3.70693397522s
$a=5;
 isset($a); Took: 1.15165400505s
 $a==NULL; Took: 1.41901302338s
 $a===NULL; Took: 1.21655392647s
 is_null($a); Took: 3.78501200676s
error_reporting(E_ALL&~E_NOTICE);
unset($a);
 isset($a); Took: 1.51441502571s
 $a==NULL; Took: 16.5414860249s
 $a===NULL; Took: 16.1273870468s
 is_null($a); Took: 23.1918480396s

Please note, that isset is only included because it gives a good performance in
any case; HOWEVER isset is NOT the same, or the opposite.
But you might be able to use isset() instead of null-checking.

You should not use is_null, except when you need a callback-function, or for
conformity with is_int, is_float, etc.
ai dot unstmann at combase dot de 14-Jan-2008 08:17
For what I realized is that  is_null($var)  returns exactly the opposite of 
isset($var) , except that is_null($var) throws a notice if $var hasn't been set
yet.

the following will prove that:

<?php

$quirks = array(null, true, false, 0, 1, '', "\0", "unset");

foreach($quirks as $var) {
    if ($var === "unset") unset($var);

    echo is_null($var) ? 1 : 0;
    echo isset($var) ? 1 : 0;
    echo "\n";
}

?>

this will print out something like:

10    // null
01    // true
01    // false
01    // 0
01    // 1
01    // ''
01    // "\0"
Notice:  Undefined variable: var in /srv/www/htdocs/sandbox/null/nulltest.php
on line 8
10    // (unset)

For the major quirky types/values is_null($var) obviously always returns the
opposite of isset($var), and the notice clearly points out the faulty line with
the is_null() statement. You might want to examine the return value of those
functions in detail, but since both are specified to return boolean types there
should be no doubt.

A second look into the PHP specs tells that is_null() checks whether a value is
null or not. So, you may pass any VALUE to it, eg. the result of a function.
isset() on the other hand is supposed to check for a VARIABLE's existence,
which makes it a language construct rather than a function. Its sole porpuse
lies in that checking. Passing anything else will result in an error.

Knowing that, allows us to draw the following unlikely conclusion:

isset() as a language construct is way faster, more reliable and powerful than
is_null() and should be prefered over is_null(), except for when you're
directly passing a function's result, which is considered bad programming
practice anyways.
powderz at gmail dot com 12-Aug-2006 04:41
Actually, since a wrapper is going to be written, you can check for your own
version null values...if you want to be creative for some reason.

<?php
function isnull($data)
{
  /** only if you need this
  if (is_string($data)) {
    $data = strtolower($data);
  }
  */
  switch ($data) {
    // Add whatever your definition of null is
    // This is just an example
    //-----------------------------
    case 'unknown': // continue
    case 'undefined': // continue
    //-----------------------------
    case 'null': // continue
    case 'NULL': // continue
    case NULL:
      return true;
  }
  // return false by default
  return false;
}
?>
MARSIK 31-Jul-2005 02:54
I've tested different values in order to compare 'em with NULL with the help of
different operators...

<?php
$arr=array(0, 0.0, '0', '0.0', '',FALSE,'false',NULL, 'NULL');
for ($i=0; $i<count($arr); $i++)
   $arr[$i]=array(
      $arr[$i],
      ((integer)($arr[$i]==NULL))
     .((integer)($arr[$i]===NULL))
     .((integer)is_null($arr[$i]))
      );

var_dump($arr);
?>

it gave the following results:

0 : ==NULL
0.0 : ==NULL
'0' : nothing worked =)
'0.0' : nothing...
'' : ==NULL
FALSE : ==NULL
'false' : nothing
NULL : ==NULL, ===NULL, is_null()
'NULL' : nothing

enjoy =)
michael at cannonbose dot com 30-Dec-2003 05:42
Regarding avoidance of NULLs in your MySQL queries, why not use  IS NULL and IS
NOT NULL in your WHERE clauses.

SELECT *
FROM someDatabase
WHERE someAttribute IS NOT NULL

Cheers,

Michael
uioreanu at hotmail dot com 23-Mar-2001 02:36
Don't try to test
if ($intSomething==NULL) {
 ...
}
use is_null() instead.
The first statement misses 0 values.

Regards,
Calin

[Ed. note: this is because == tests for equivalence of value, but not type.
NULL evaluates to
false, as does 0, so NULL == 0 is true--even though 0 is type int and NULL is
type null.
You should use either is_null() as noted or ===, which returns true only if its
operands are
equal and of the same type.]
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Dec 25 15:41:24 2011 UTC
Received cookie: COUNTRY=JPN%2C114.48.176.234
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 数学
  • Math
  • Math 関数
  • abs
  • acos
  • acosh
  • asin
  • asinh
  • atan2
  • atan
  • atanh
  • base_ convert
  • bindec
  • ceil
  • cos
  • cosh
  • decbin
  • dechex
  • decoct
  • deg2rad
  • exp
  • expm1
  • floor
  • fmod
  • getrandmax
  • hexdec
  • hypot
  • is_ finite
  • is_ infinite
  • is_ nan
  • lcg_ value
  • log10
  • log1p
  • log
  • max
  • min
  • mt_ getrandmax
  • mt_ rand
  • mt_ srand
  • octdec
  • pi
  • pow
  • rad2deg
  • rand
  • round
  • sin
  • sinh
  • sqrt
  • srand
  • tan
  • tanh

cos> <bindec
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011

view this page in

[English             ] Change language
ceil

(PHP 4, PHP 5)

ceil — 端数の切り上げ

説明

float ceil ( float $value )

value の次に大きい整数値を返します。

パラメータ

value

    丸める値。

返り値

value の次に大きい整数値を返します。 ceil() の返り値は float 型となります。これ
は、float 値の範囲は通常 int よりも広いためです。

例

例1 ceil() の例

<?php
echo ceil(4.3);    // 5
echo ceil(9.999);  // 10
echo ceil(-3.14);  // -3
?>

参考

  • floor() - 端数の切り捨て
  • round() - 浮動小数点数を丸める



cos> <bindec
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 23 Dec 2011
 
add a note add a note User Contributed Notes ceil
oktam 10-May-2011 10:12
Actual behaviour:
echo ceil(-0.1); //result "-0" but i expect "0"

Workaround:
echo ceil(-0.1)+0; //result "0"
AndrewS 07-Mar-2011 12:55
The code below rounds a value up to a nearest multiple, away from zero.  The
multiple does not have to be a integer.  So you could round, say, to the
nearest 25.4, allowing you to round measurements in mm to the nearest inch
longer.

<?php
// $x is the variable
// $c is the base multiple to round to, away from zero
$result =  ( ($y = $x/$c) == ($y = (int)$y) ) ? $x : ( $x>=0 ?++$y:--$y)*$c ;
?>

I originally developed this as an example of write-only code: to make the point
that being cleverly terse might save clock ticks but wastes more in programmer
time generating un-maintainable code.

The inline code above nests one conditional statement inside another.  The
value of y changes twice within the same line (three times, if you count the
pre-increment).  The value of each assignment is used to determine branching
within the conditional statement.

How it works can more easily be seen from the expansion below:

<?php
function myCeilingLong($x,$c)
{
    // $x is variable
    // $c is ceiling multiple
    $a = $x/$c ;
    $b = (int)$a ;
    if ($a == $b)
        return $x ;  // x is already a multiple of c;
    else
    {
        if ($x>=0)
            return ($b+1)*$c ;  // return ((int)(x/c)+1 ) * c
        else
            return ($b-1)*$c ;  // return ((int)(x/c)-1 ) * c
    }
}
?>

<?php
function myCeilingShort($x,$c)
{
    return ( ($y = $x/$c) == ($y = (int)$y) ) ? $x : ( $x>=0 ?++$y:--$y)*$c ;
}
?>

Comparing the versions for speed: the in-line version is about three times
faster than myCeilingLong() - but this is almost entirely down to function call
overhead. 

Putting the in-line code inside the function: the difference in execution speed
between myCeilingLong() and myCeilingShort() is around 1.5%.

ceil() is still around 25% faster than the in-line statement so if you are a
speed hound your efforts might be better devoted to compiling your own library
...
that_cow at gmail dot com 14-Jan-2009 12:05
Scott Weaver / scottmweaver * gmail I am not sure if this was a typo or what
but in your example

ceiling(1,1) is not 1000, it is 1
Chevy 30-Dec-2008 08:54
Quick and dirty `ceil` type function with precision capability.

<?php
function ceiling($value, $precision = 0) {
    return ceil($value * pow(10, $precision)) / pow(10, $precision);
}
?>
agadret at terra dot com dot br 14-Dec-2008 06:52
Be aware that

echo 5*0.2*7;          // results 7
echo ceil (5*0.2*7);   // results 7
echo ceil (5*(0.2*7)); // results 8
Scott Weaver / scottmweaver * gmail 29-Aug-2008 05:46
I needed this and couldn't find it so I thought someone else wouldn't have to
look through a bunch of Google results-

<?php

// duplicates m$ excel's ceiling function
if( !function_exists('ceiling') )
{
    function ceiling($number, $significance = 1)
    {
        return ( is_numeric($number) && is_numeric($significance) ) ? (ceil
($number/$significance)*$significance) : false;
    }
}

echo ceiling(0, 1000);     // 0
echo ceiling(1, 1);        // 1000
echo ceiling(1001, 1000);  // 2000
echo ceiling(1.27, 0.05);  // 1.30

?>
benjamwelker * gmail 29-May-2008 04:57
@ zariok

that function is nice, but it only works for positive numbers, causing negative
numbers to be grossly incorrect.

e.g.-

round_up(4.765, 2) => 4.77 as expected
round_up(-4.765, 2) => -3.23

a couple modified versions of your function (depending on which one you really
want):

<?php

// rounds towards positive infinity
function round_up($value, $precision = 0) {
    $sign = (0 <= $value) ? +1 : -1;
    $amt = explode('.', $value);
    $precision = (int) $precision;
   
    if (strlen($amt[1]) > $precision) {
        $next = (int) substr($amt[1], $precision);
        $amt[1] = (float) (('.'.substr($amt[1], 0, $precision)) * $sign);
       
        if (0 != $next) {
            if (+1 == $sign) {
                $amt[1] = $amt[1] + (float) (('.'.str_repeat('0', $precision -
1).'1') * $sign);
            }
        }
    }
    else {
        $amt[1] = (float) (('.'.$amt[1]) * $sign);
    }
   
    return $amt[0] + $amt[1];
}

// rounds away from zero
function round_out($value, $precision = 0) {
    $sign = (0 <= $value) ? +1 : -1;
    $amt = explode('.', $value);
    $precision = (int) $precision;
   
    if (strlen($amt[1]) > $precision) {
        $next = (int) substr($amt[1], $precision);
        $amt[1] = (float) (('.'.substr($amt[1], 0, $precision)) * $sign);
       
        if (0 != $next) {
            $amt[1] = $amt[1] + (float) (('.'.str_repeat('0', $precision -
1).'1') * $sign);
        }
    }
    else {
        $amt[1] = (float) (('.'.$amt[1]) * $sign);
    }
   
    return $amt[0] + $amt[1];
}

?>
InsideR(); 10-Aug-2007 01:01
Just to comment on zariok's comment (which is right below mine), his problem is
likely due to the fact that decimal numbers (such as 0.5500) cannot be exactly
represented in binary (and hence computers can't precisely determine that
0.5500 * 100 = 55).

This feature is great when you know that your result is going to be nowhere
near an integer (for example, finding ceil(1/3) will confidently give a 1). 
However in situations like his, this is probably not the better function to
use.
zariok 09-Aug-2007 02:28
the fCeil and round_up listed below are not reliable.  This could be due to a
broken ceil function:

CODE:
function fCeil($val,$pressision=2){
  $p = pow(10,$pressision);
  $val = $val*$p;
  $val = ceil($val);
  return $val /$p;
}
print "fCeil: ".fCeil("0.5500",2)."\n";
print "ceil:  ".ceil("55.00")."\n";
print "ceil:  ".ceil(0.5500 * 100)."\n"; // should be interpreted as ceil(55);

OUTPUT:
fCeil: 0.56
ceil:  55
ceil:  56

Tested: PHP v5.2.2, v5.1.6, v5.0.4 CLI

Quick function I used as replacement:

CODE:
function round_up ($value, $precision=2) {
  $amt = explode(".", $value);
  if(strlen($amt[1]) > $precision) {
    $next = (int)substr($amt[1],$precision);
    $amt[1] = (float)(".".substr($amt[1],0,$precision));
    if($next != 0) {
      $rUp = "";
      for($x=1;$x<$precision;$x++) $rUp .= "0";
      $amt[1] = $amt[1] + (float)(".".$rUp."1");
    }
  }
  else {
    $amt[1] = (float)(".".$amt[1]);
  }
  return $amt[0]+$amt[1];
}
print round_up("0.5500",2)."\n";
print round_up("2.4320",2)."\n";

print "\nprecision: 2\n";
print round_up("0.5",2)."\n";
print round_up("0.05",2)."\n";
print round_up("0.050",2)."\n";
print round_up("0.0501", 2)."\n";
print round_up("0.0500000000001", 2)."\n";

print "\nprecision: 3\n";
print round_up("0.5",3)."\n";
print round_up("0.05",3)."\n";
print round_up("0.050",3)."\n";
print round_up("0.0501",3)."\n";
print round_up("0.0500000000001",3)."\n";

OUTPUT:
0.55
2.44

precision: 2
0.5
0.05
0.05
0.06
0.06

precision: 3
0.5
0.05
0.05
0.051
0.051
themanwe at yahoo dot com 20-Mar-2007 07:35
float ceil

function fCeil($val,$pressision=2){
     $p = pow(10,$pressision);
    $val = $val*$p;
    $val = ceil($val);
  return $val /$p;
}
admin("AT")dbss('DOT')dk 21-Jan-2007 10:31
This note can be uset to eg. page shift.

$GbogRes = mysql_query("SELECT * FROM table WHERE felt = userid");
$CountRow = mysql_num_rows($GbogRes);
   
echo ceil($CountRow / 10);

so can you look X page you can shift.
rjones at i-ps dot net 05-Mar-2006 12:19
To eliftymes below:

To check if a numer is divisible by another number just check if the modulus is
zero:

if ($bigger_number % $lower_number == 0)
{
    echo "Can be wholey divided<br />";
}
else
{
    echo "Not wholey divisible";
}
tom pittlik 28-Feb-2006 12:02
ceil() is a useful way to quickly format bogus shopping cart quantities:

<?

ceil("str"); // 0
ceil("001"); // 1
ceil("0.1"); // 1
ceil("a34"); // 0
ceil("2fg"); // 2
ceil("$%%"); // 0

?>
eliftymes at gmail dot com 23-Feb-2006 08:20
Here's a little function I wrote that checks if a number is divisible by
another number.

function check_divisible($number, $divider) {
 if(ceil($number/$divider) == $number/$divider) {
   return TRUE;
 } else {
   return FALSE;
 }
}

Useage would be as so.

$bigger_number=10;
$smaller_number=2;
if(check_divisible($bigger_number, $smaller_number)) {
 echo "$bigger_number is divisible by $smaller_number!";
} else {
 echo "$bigger_number is NOT divisible by $smaller_number!";
}

It's possible uses would be for:

Every 3rd, fourth, fifth, or whatever row in a table could be treated uniquely

Simple games...

Teaching your little kid math.
ermolaeva_elena at mail dot ru 20-Dec-2005 03:27
To round a number up to the nearest power of 10,
I've used
= ceil(intval($val)/10)*10;
nobody 23-Nov-2005 05:00
Here's a more simple one to do ceil to nearest 10:

function ceilpow10(val) {
   if (val % 10 == 0) return val;
   return val + (10 - (val % 10));
}
schmad at miller dash group dot net 19-Apr-2005 04:38
To round a number up to the nearest power of 10 use this simple procedure:

$multiplier = .1;
while($number>1)
{
    $number /= 10;
    $multiplier *= 10;
}
$number = ceil($number) * $multiplier;
coxswain at navaldomination dot com 16-Mar-2005 10:06
steve_phpnet // nanovox \\ com wouldn't:

<?php
$ceil  = ceil(4.67 * 10) / 10;
?>

work just as well?
steve_phpnet // nanovox \\ com 28-Feb-2005 08:40
I couldn't find any functions to do what ceiling does while still leaving I
specified number of decimal places, so I wrote a couple functions myself. 
round_up is like ceil but allows you to specify a number of decimal places. 
round_out does the same, but rounds away from zero.

<?php
 // round_up:
 // rounds up a float to a specified number of decimal places
 // (basically acts like ceil() but allows for decimal places)
 function round_up ($value, $places=0) {
  if ($places < 0) { $places = 0; }
  $mult = pow(10, $places);
  return ceil($value * $mult) / $mult;
 }

 // round_out:
 // rounds a float away from zero to a specified number of decimal places
 function round_out ($value, $places=0) {
  if ($places < 0) { $places = 0; }
  $mult = pow(10, $places);
  return ($value >= 0 ? ceil($value * $mult):floor($value * $mult)) / $mult;
 }

 echo round_up (56.77001, 2); // displays 56.78
 echo round_up (-0.453001, 4); // displays -0.453
 echo round_out (56.77001, 2); // displays 56.78
 echo round_out (-0.453001, 4); // displays -0.4531
?>
sven at plus dot hr 10-Feb-2005 11:59
function roundaway($num) {
switch($num) {
case ($num > 0):
$n = ceil($num);
break;
case ($num < 0):
$n = floor($num);
break;
case ($num == 0):
$n = 0;
break;
}
return $n;
}
aaron at mind-design dot co dot uk 21-Jul-2004 08:10
Or for the terniary fans:

<?php

function roundaway($num) {
   return(($num > 0) ? ceil($num) : floor($num));
}

?>

Slightly pointless, but there you have it, in one line only..
rainfalling at yahoo dot com 22-Apr-2004 12:51
IceKarma said: "If you want, say, 2.6 to round to 3, and -2.6 to round to -3,
you want round(), which rounds away from zero."

That's not always true. round() doesn't work that way, like zomis2k said it
just rounds up _or_ down to the nearest non-decimal number. However this should
work.

<?php

function roundaway($num) {
    if ($num > 0)
      return ceil($num);
    elseif ($num < 0)
      return floor($num);
    elseif ($num == 0)
      return 0;
}

?>
roger_dupere at hotmail dot com 10-Nov-2003 10:02
Here is a navbar using the ceil function.

<?php
 function navbar($num_rows,$page,$link) {
   $nbrlink = 10; /* Number of link to display per page */
   $page = (int) $page; /* Page now displayed */
   $num_rows = (int) $num_rows;

   if( $num_rows > 0 ) {
     $total_page = ceil( $num_rows / $nbrlink );

     for( $i=1;$i<$total_page+1;$i++ ) {
       if( $i == $page ) {
         $ret .= " <b>$i</b> ";
       } else {
         if( strstr( $link,"?" ) ) {
           $ret .= " <a href=\"$link&page=$i\">$i</a> ";
         } else {
           $ret .= " <a href=\"$link?page=$i\">$i</a> ";
         }
       }
     }

     return $ret;
   }
 }
  /* Let say that $num_rows content the numbre of rows of your sql query */
  $navbar = navbar( $num_rows, $page, "listmovie.php?id=$id" );

  if( $navbar != null || $navbar != "" ) {
    print( "<p><div align=\"center\">$navbar</div></p>" );
  }
?>
zomis2k at hotmail dot com 22-May-2003 06:24
>If you want, say, 2.6 to round to 3, and -2.6 to round to -3, you want round
(), which rounds away from zero.

round() does not always round away from zero
round(2.4) = 2
round(2.6) = 3
round(-2.4) = -2
round(-2.6) = -3

round() rounds number to nearest non-decimal number.
IceKarma 22-Apr-2003 12:31
ceil() rounds towards positive infinity ("up"), floor() rounds towards negative
infinity ("down").

If you want, say, 2.6 to round to 3, and -2.6 to round to -3, you want round(),
which rounds away from zero.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Dec 25 01:21:25 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 16 Dec 2011

view this page in

[English             ] Change language
strstr

(PHP 4, PHP 5)

strstr — 文字列が最初に現れる位置を見つける

説明

string strstr ( string $haystack , mixed $needle [, bool $before_needle = false
] )

haystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。

    注意:

    この関数は大文字小文字を区別することに注意してください。大文字小文字を区別
    しない検索を行う場合は、stristr() を使用してください。

    注意:

    もし特定の haystack に needle があるかどうかを調べるだけの場合、より高速で
    メモリ消費も少ない strpos() を代わりに使用してください。

パラメータ

haystack

    入力文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

before_needle

    TRUE にすると、strstr() の返り値は、haystack の中で最初に needle があらわれ
    る箇所より前の部分となります。

返り値

部分文字列を返します。 needle が見つからない場合は FALSE を返します。

変更履歴

バージョン                          説明
5.3.0      オプションの before_needle パラメータが追加されました。
4.3.0      strstr() がバイナリセーフとなりました。

例

例1 strstr() の例

<?php
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // @example.com と表示します

$user = strstr($email, '@', true); // PHP 5.3.0 以降
echo $user; // name と表示します
?>

参考

  • preg_match() - 正規表現によるマッチングを行う
  • stristr() - 大文字小文字を区別しない strstr
  • strpos() - 文字列が最初に現れる場所を見つける
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す



strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 16 Dec 2011
 
add a note add a note User Contributed Notes strstr
xydon1 at yahoo dot com 31-Aug-2011 10:03
I explained this to my newbies the difference though it would be good to
demonstrate this here. If you are evaluating a list you cannot use strstr as it
looks for any occurance. The correct way is the function which evaluates a true
or false on the exact value to check.

In the following example I have a list of promotion ids I want to evaluate
whether or not a promotion exists:

<?php
//Wrong
$promotion = strstr("25,56","2");
if($promotion){
  echo "found";
}else{
  echo "not found";
}

//right
function detectPromotion($string,$promotion){
  foreach(explode(",",$string) as $promotionToCheck){   
    echo "checkin ".$promotionToCheck."==".$promotion."<br/>";   
    if($promotionToCheck==$promotion){
      $promotionFound=true;
    }
  }
  return $promotionFound;
}

echo detectPromotion("2,56","2");
?>
gruessle at gmail dot com 20-Apr-2011 08:39
Been using this for years:

<?php
/**
*
* @author : Dennis T Kaplan
*
* @version : 1.0
* Date : June 17, 2007
* Function : reverse strstr()
* Purpose : Returns part of haystack string from start to the first occurrence
of needle
* $haystack = 'this/that/whatever';
* $result = rstrstr($haystack, '/')
* $result == this
*
* @access public
* @param string $haystack, string $needle
* @return string
**/

function rstrstr($haystack,$needle)
    {
        return substr($haystack, 0,strpos($haystack, $needle));
    }
?>

You could change it to:
rstrstr ( string $haystack , mixed $needle [, int $start] )
<?php

function rstrstr($haystack,$needle, $start=0)
    {
        return substr($haystack, $start,strpos($haystack, $needle));
    }

?>
w3b_monk3y at yahoo dot com 20-Jan-2009 08:28
If you want to emulate strstr's new before_needle parameter pre 5.3 strtok is
faster than using strpos to find the needle and cutting with substr. The amount
of difference varies with string size but strtok is always faster.
tim 26-Nov-2007 12:42
I simplified prafe at prafesplace dot com's function:

<?php
function strstrbi($haystack, $needle, $before_needle=FALSE, $include_needle=
TRUE, $case_sensitive=FALSE) {
 //Find the position of $needle
 if($case_sensitive) {
  $pos=strpos($haystack,$needle);
 } else {
  $pos=strpos(strtolower($haystack),strtolower($needle));
 }
 
 //If $needle not found, abort
 if($pos===FALSE) return FALSE;
 
 //Adjust $pos to include/exclude the needle
 if($before_needle==$include_needle) $pos+=strlen($needle);
 
 //get everything from 0 to $pos?
 if($before_needle) return substr($haystack,0,$pos);
 
 //otherwise, go from $pos to end
 return substr($haystack,$pos);
}
?>

It's now 600 bytes, down from 2k.

Also, here are replacements for strstr and stristr:

<?php
function strstr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos($haystack,$needle))===FALSE) return FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}

function stristr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos(strtolower($haystack),strtolower($needle)))===FALSE) return
FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}
?>
brett dot jr dot alton at gmail dot com 25-Nov-2007 04:02
For the needle_before (first occurance) parameter when using PHP 5.x or less,
try:

<?php
$haystack = 'php-homepage-20071125.png';
$needle = '-';
$result = substr($haystack, 0, strpos($haystack, $needle)); // $result = php
?>
prafe at prafesplace dot com 22-Nov-2007 05:14
If you want to use the $before_needle parameter that's only in PHP 5.3.0, I
found a way to use it in lower versions.

The code is a bit hefty, but it works. It also has added $include_needle and
$case_sensitive.

<?php
// ==== I don't guarantee this is faster than the PHP 6 before needle, ====
// ====  but it works for PHP below 6 atleast. ====
// ==== IT ALSO HAS INCLUDE NEEDLE BOOLEAN.. ====
function strstrbi($haystack,$needle,$before_needle,
$include_needle,$case_sensitive)
{
  $strstr = ($case_sensitive) ? 'strstr' : 'stristr';
  if($before_needle!=true && $before_needle!=false && isset($before_needle)){
      die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' :  parameter
'. chr(39).'$before_needle'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$before_needle'

  if($include_needle!=true && $include_needle!=false && isset($include_needle))
{
    die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' : parameter '.
chr(39).'$include_needle'.chr(39). ' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$include_needle'

  if($case_sensitive!=true && $case_sensitive!=false && isset($case_sensitive))
{
    die('PHP: Error in function '.chr(39).'$strstrbi' .chr(39).' : parameter '.
chr(39).'$case_sensitive'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$case_sensitive'

  if(!isset($before_needle)){
    $before_needle=false;
  }

  if(!isset($include_needle)){
    $include_needle=true;
  }

  if(!isset($case_sensitive)){
    $case_sensitive=false;
  }

  switch($before_needle){
    case true:
      switch($include_needle){
        case true:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),0));
          break;
        // END case true : $include_needle
        case false:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),1));
          break;
        // END case false : $include_needle
      }
      break;
    // END case true : $before_needle
    case false:
      switch($include_needle){
        case true:
          $ret=$strstr($haystack,$needle);
          break;
        // END case true: $include_needle
        case false:
          $ret=substr($strstr($haystack,$needle),1);
          break;
        // END case false: $include_needle
    }
    break;
    // END case false : $before_needle
  }

  if(!empty($ret)){
    return $ret;
  }else{
    return false;
  }
}
// === END FUNCTION 'strstrbi'

// Example

$email  = 'user@example.com';
$domain = strstrbi($email, '@', false, false, false);
echo $domain; // prints example.com

$user = strstrbi($email, '@', true, false, false);
echo $user; // prints user
?>
root at mantoru dot de 10-Nov-2007 11:22
Please note that $needle is included in the return string, as shown in the
example above. This ist not always desired behavior, _especially_ in the
mentioned example. Use this if you want everything AFTER $needle.

<?php
function strstr_after($haystack, $needle, $case_insensitive = false) {
    $strpos = ($case_insensitive) ? 'stripos' : 'strpos';
    $pos = $strpos($haystack, $needle);
    if (is_int($pos)) {
        return substr($haystack, $pos + strlen($needle));
    }
    // Most likely false or null
    return $pos;
}

// Example
$email = 'name@example.com';
$domain = strstr_after($email, '@');
echo $domain; // prints example.com
?>
gigaman2003 at halfempty dot co dot uk 24-Feb-2007 08:48
Often you will need to find all occurrences of a string (for security escapes
and such)

So I wrote this function to return an array with the locations of all the
occurrences. Almost like an advanced strstr.

<?php
function findall($needle, $haystack)
{
    //Setting up
    $buffer=''; //We will use a 'frameshift' buffer for this search
    $pos=0; //Pointer
    $end = strlen($haystack); //The end of the string
    $getchar=''; //The next character in the string
    $needlelen=strlen($needle); //The length of the needle to find (speeds up
searching)
    $found = array(); //The array we will store results in
   
    while($pos<$end)//Scan file
    {
        $getchar = substr($haystack,$pos,1); //Grab next character from pointer
        if($getchar!="\n" || buffer<$needlelen) //If we fetched a line break,
or the buffer is still smaller than the needle, ignore and grab next character
        {
            $buffer = $buffer . $getchar; //Build frameshift buffer
            if(strlen($buffer)>$needlelen) //If the buffer is longer than the
needle
            {
                $buffer = substr($buffer,-$needlelen);//Truncunate backwards to
needle length (backwards so that the frame 'moves')
            }
            if($buffer==$needle) //If the buffer matches the needle
            {
                $found[]=$pos-$needlelen+1; //Add the location of the needle to
the array. Adding one fixes the offset.
            }
        }
        $pos++; //Increment the pointer
    }
    if(array_key_exists(0,$found)) //Check for an empty array
    {
        return $found; //Return the array of located positions
    }
    else
    {
        return false; //Or if no instances were found return false
    }
}
?>

Haven't had the chance to speed test it, but many optimizations should be
possible. It just works enough for me. Hope it saves someone a lot of time.
06-Jun-2005 04:13
suggestion for [leo dot nard at free dot fr]:
to be able to cut the string without having the html entities being cut in
half, use this instead:

<?php

$oldstr = "F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller
skandinaviska (eller Franska, f&ouml;r den delen) tecken, kan man g&ouml;ra s&
aring;h&auml;r...";

$length = 50;

# First, first we want to decode the entities (to get them as usual chars),
then cut the string at for example 50 chars, and then encoding the result of
that again.

# Or, as I had it done, in one line:
$newstr = htmlentities(substr(html_entity_decode($oldstr), 0, $length));
$newstr2 = substr($oldstr, 0, $length);
# It's not quite as much code as the snippet you've coded to remove the
half-portions... ;)
# Hopefully somebody finds this useful!
echo "Without the decode-encode snippet:
$newstr2

With the decode-encode snippet:
$newstr";
?>

The above outputs this:

Without the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&ar

With the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller skandin

First post in this db ;)
Best regards, Mikael R nn, FIN
leo dot nard at free dot fr 24-May-2005 09:12
When encoding ASCII strings to HTML size-limited strings, sometimes some HTML
special chars were cut.

For example, when encoding "��" to a string of size 10, you would get: "à&a" =>
the second character is cut.

This function will remove any unterminated HTML special characters from the
string...

<?php
function cut_html($string)
{
    $a=$string;

    while ($a = strstr($a, '&'))
    {
        echo "'".$a."'\n";
        $b=strstr($a, ';');
        if (!$b)
        {
            echo "couper...\n";
            $nb=strlen($a);
            return substr($string, 0, strlen($string)-$nb);
        }
        $a=substr($a,1,strlen($a)-1);
    }
    return $string;
}
?>
Romuald Brunet 21-Jan-2004 08:25
Regarding the note of the manual concerning the speed of strstr against strpos,
for people who wants to check a needle occurs within haystack, it apprears that
strstr() is in facts faster than strpos().

Example:
<?php
// [VERY] Quick email check:
if ( strstr("email@domain.tld", "@") ) {
// Ok
}
?>

is faster than

<?php
if ( strpos("email@domain.tld", "@") !== FALSE ) {
// Ok
}

Without using the true equality with !==, strpos() is faster. But then if the
haystack starts with needle the condition whould not be met.
php at silisoftware dot com 14-Feb-2003 11:37
PHP versions before 4.3.0 (tested on 4.2.2 and 4.2.3) return the $haystack from
$needle only up to the first null character. So for example:

<?php
$string = strstr("one#two\x00three", "#");
// PHP 4.2.x:  $string contains "#two"
// PHP 4.3.0:  $string contains "#two\x00three"
?>

If you're trying to match nulls, you will probably get back an empty string:

<?php
$string = strstr("one#two\x00three", "\x00");
// PHP 4.2.x:  $string contains ""
// PHP 4.3.0:  $string contains "\x00three"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 16 17:13:17 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • その他の基本モジュール
  • JSON
  • JSON 関数
  • json_ decode
  • json_ encode
  • json_ last_ error

json_last_error> <json_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 16 Dec 2011

view this page in

[English             ] Change language
json_encode

(PHP 5 >= 5.2.0, PECL json >= 1.2.0)

json_encode — 値を JSON 形式にして返す

説明

string json_encode ( mixed $value [, int $options = 0 ] )

value を JSON 形式にした文字列を返します。

パラメータ

value

    エンコードする値。 resource 型以外の任意の型を指定できます。

    この関数は、UTF-8 エンコードされたデータでのみ動作します。

options

    JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS,
    JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES,
    JSON_FORCE_OBJECT, JSON_UNESCAPED_UNICODE からなるビットマスク。

返り値

成功した場合に、JSON エンコードされた文字列を返します。

変更履歴

バージ                                   説明
 ョン
5.4.0  option に JSON_BIGINT_AS_STRING、JSON_PRETTY_PRINT、
       JSON_UNESCAPED_SLASHES および JSON_UNESCAPED_UNICODE が追加されました。
5.3.3  option に JSON_NUMERIC_CHECK が追加されました。
5.3.0  options パラメータが追加されました。

例

例1 json_encode() の例

<?php
$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);

echo json_encode($arr);
?>

上の例の出力は以下となります。

{"a":1,"b":2,"c":3,"d":4,"e":5}

例2 json_encode() で、アクションのすべてのオプションを表示する例

<?php
$a = array('<foo>',"'bar'",'"baz"','&blong&', "\xc3\xa9");

echo "Normal: ",  json_encode($a), "\n";
echo "Tags: ",    json_encode($a, JSON_HEX_TAG), "\n";
echo "Apos: ",    json_encode($a, JSON_HEX_APOS), "\n";
echo "Quot: ",    json_encode($a, JSON_HEX_QUOT), "\n";
echo "Amp: ",     json_encode($a, JSON_HEX_AMP), "\n";
echo "Unicode: ", json_encode($a, JSON_UNESCAPED_UNICODE), "\n";
echo "All: ",     json_encode($a, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT 
| JSON_HEX_AMP | JSON_UNESCAPED_UNICODE), "\n\n";

$b = array();

echo "Empty array output as array: ", json_encode($b), "\n";
echo "Empty array output as object: ", json_encode($b, JSON_FORCE_OBJECT), "\n\
n";

$c = array(array(1,2,3));

echo "Non-associative array output as array: ", json_encode($c), "\n";
echo "Non-associative array output as object: ", json_encode
($c, JSON_FORCE_OBJECT), "\n\n";

$d = array('foo' => 'bar', 'baz' => 'long');

echo "Associative array always output as object: ", json_encode($d), "\n";
echo "Associative array always output as object: ", json_encode
($d, JSON_FORCE_OBJECT), "\n\n";
?>

上の例の出力は以下となります。

Normal: ["<foo>","'bar'","\"baz\"","&blong&","\u00e9"]
Tags: ["\u003Cfoo\u003E","'bar'","\"baz\"","&blong&","\u00e9"]
Apos: ["<foo>","\u0027bar\u0027","\"baz\"","&blong&","\u00e9"]
Quot: ["<foo>","'bar'","\u0022baz\u0022","&blong&","\u00e9"]
Amp: ["<foo>","'bar'","\"baz\"","\u0026blong\u0026","\u00e9"]
Unicode: ["<foo>","'bar'","\"baz\"","&blong&","é"]
All: ["\u003Cfoo\u003E","\u0027bar\u0027","\u0022baz\u0022","\u0026blong\u0026","é"]

Empty array output as array: []
Empty array output as object: {}

Non-associative array output as array: [[1,2,3]]
Non-associative array output as object: {"0":{"0":1,"1":2,"2":3}}

Associative array always output as object: {"foo":"bar","baz":"long"}
Associative array always output as object: {"foo":"bar","baz":"long"}

例3 シーケンシャルな配列とそうでない配列の例

<?php
echo "Sequential array".PHP_EOL;
$sequential = array("foo", "bar", "baz", "blong");
var_dump(
 $sequential,
 json_encode($sequential)
);

echo PHP_EOL."Non-sequential array".PHP_EOL;
$nonsequential = array(1=>"foo", 2=>"bar", 3=>"baz", 4=>"blong");
var_dump(
 $nonsequential,
 json_encode($nonsequential)
);

echo PHP_EOL."Sequential array with one key unset".PHP_EOL;
unset($sequential[1]);
var_dump(
 $sequential,
 json_encode($sequential)
);
?>

上の例の出力は以下となります。

Sequential array
array(4) {
  [0]=>
  string(3) "foo"
  [1]=>
  string(3) "bar"
  [2]=>
  string(3) "baz"
  [3]=>
  string(5) "blong"
}
string(27) "["foo","bar","baz","blong"]"

Non-sequential array
array(4) {
  [1]=>
  string(3) "foo"
  [2]=>
  string(3) "bar"
  [3]=>
  string(3) "baz"
  [4]=>
  string(5) "blong"
}
string(43) "{"1":"foo","2":"bar","3":"baz","4":"blong"}"

Sequential array with one key unset
array(3) {
  [0]=>
  string(3) "foo"
  [2]=>
  string(3) "baz"
  [3]=>
  string(5) "blong"
}
string(33) "{"0":"foo","2":"baz","3":"blong"}"

注意

    注意:

    エンコードに失敗した場合は、json_last_error() を使ってエラーの内容を調べる
    ことができます。

    注意:

    配列をエンコードする場合、もし配列のキーが 0 からはじまる連続した数値でなけ
    れば、すべてのキーを文字列としてエンコードします。そして、個々のキー/値のペ
    アを明示的に指定します。

参考

  • json_decode() - JSON 文字列をデコードする
  • json_last_error() - 直近に発生したエラーを返す



json_last_error> <json_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 16 Dec 2011
 
add a note add a note User Contributed Notes json_encode
trevalayan at hotmail dot com 13-Dec-2011 03:44
me.pierB offered a solution for dealing with UTF8 characters in json_encode.
Unfortunately there is a minor bug so here is the complete code with the
bugfix:

"Combining last 2 comments, json_decode and json_encode can gain great
advantages from following:"

<?php
function array_ut8_encode_recursive(&$itm) {
    $new = $itm;
    if (is_string($new)) return utf8_encode($new);
    if (is_array($new)) return array_map('array_ut8_encode_recursive', $new);
    if (is_object($new)) foreach (get_object_vars($new) as $key => $value )
$new->$key = array_ut8_encode_recursive($new->$key);
    return $new;
} // array_ut8_encode_recursive()

function array_ut8_decode_recursive(&$itm) {
    $new = $itm;
    if (is_string($new)) return utf8_decode($new);
    if (is_array($new)) return array_map('array_ut8_decode_recursive', $new);
    if (is_object($new)) foreach (get_object_vars($new) as $key => $value )
$new->$key = array_ut8_decode_recursive($new->$key);
    return $new;
} // array_ut8_decode_recursive()
?>

"json_encode(array_ut8_encode_recursive($data))"
bohwaz 24-Nov-2011 01:05
Are you sure you want to use JSON_NUMERIC_CHECK, really really sure?

Just watch this usecase:

<?php
// International phone number
json_encode(array('phone_number' => '+33123456789'), JSON_NUMERIC_CHECK);
?>

And then you get this JSON:

{"phone_number":33123456789}

Maybe it makes sense for PHP (as is_numeric('+33123456789') returns true), but
really, casting it as an int?!

So be careful when using JSON_NUMERIC_CHECK, it may mess up with your data!
me 17-Nov-2011 07:17
::fast utf8-encoding of strings::

json_encode( array_map( function($t){ return is_string($t) ? utf8_encode($t) :
$t; }, $array ) )
spm at bf-team dot com 09-Nov-2011 07:29
json and utf8?

Fast Easy Method:)

Encode: json_encode(array_map('base64_encode', $array));

Decode: array_map('base64_decode', json_decode($array);
mmi at uhb-consulting dot de 08-Nov-2011 03:59
When you have trouble with json_encode and German umlauts. json_encode converts
Strings to NULL when detecting umlauts not being UTF8encoded.

Here's another recursive UTF8 conversion function and vice-versa. The object
handling might be buggy but works for me.

<?php
function array_utf8_encode_recursive($dat)
        { if (is_string($dat)) {
            return utf8_encode($dat);
          }
          if (is_object($dat)) {
            $ovs= get_object_vars($dat);
            $new=$dat;
            foreach ($ovs as $k =>$v)    {
                $new->$k=array_utf8_encode_recursive($new->$k);
            }
            return $new;
          }
         
          if (!is_array($dat)) return $dat;
          $ret = array();
          foreach($dat as $i=>$d) $ret[$i] = array_utf8_encode_recursive($d);
          return $ret;
        }
function array_utf8_decode_recursive($dat)
        { if (is_string($dat)) {
            return utf8_decode($dat);
          }
          if (is_object($dat)) {
            $ovs= get_object_vars($dat);
            $new=$dat;
            foreach ($ovs as $k =>$v)    {
                $new->$k=array_utf8_decode_recursive($new->$k);
            }
            return $new;
          }
         
          if (!is_array($dat)) return $dat;
          $ret = array();
          foreach($dat as $i=>$d) $ret[$i] = array_utf8_decode_recursive($d);
          return $ret;
        }
?>
yangmuxiang at gmail dot com 28-Oct-2011 11:28
I use base64_encode, it works fine.

<?php
 $a = array('msg' => '中文');

 $a['msg'] = base64_encode($a['msg']);

 $json = json_encode($a);

 echo $json;

 $b = json_decode($json) ;
 echo base64_decode($b->msg);
?>
rob at weeverapps dot com 26-Sep-2011 04:15
If, for some reason you need to force a single object to be an array, you can
use array_values() -- this can be necessary if you have an array with only one
entry, as json_encode will assign it as an object otherwise :

<?php
$object[0] = array("foo" => "bar", 12 => true);

$encoded_object = json_encode($object);
?>

output:

{"1": {"foo": "bar", "12": "true"}}

<?php $encoded = json_encode(array_values($object)); ?>

output:

[{"foo": "bar", "12": "true"}]
devilan (REMOVEIT) (at) o2 (dot) pl 15-Sep-2011 07:39
For PHP5.3 users who want to emulate JSON_UNESCAPED_UNICODE, there is simple
way to do it:
<?php
function my_json_encode($arr)
{
        //convmap since 0x80 char codes so it takes all multibyte codes (above
ASCII 127). So such characters are being "hidden" from normal json_encoding
        array_walk_recursive($arr, function (&$item, $key) { if (is_string
($item)) $item = mb_encode_numericentity($item, array (0x80, 0xffff, 0,
0xffff), 'UTF-8'); });
        return mb_decode_numericentity(json_encode($arr), array (0x80, 0xffff,
0, 0xffff), 'UTF-8');

}
?>
1rsv dog mail point ru 12-Sep-2011 11:19
Some time you may need to encode a javascript function into a JSON object.
json_encode does not support it yet.

array example:

<?php
$series = array("name"=>"N51",
                "data"=>array(1024,
                              array("y"=>2048,
                                    "events"=>array("mouseOver"=>'function()
{$reporting.html(\'description of value\');}')
                                   ),
                              4096)
               );
json_encode($series);
?>

output:

{"name":"N51","data":[1024,{"y":2048,"events":{"mouseOver":"function()
{$reporting.html('description of value');}"}},4096]}

<?php json_encode_jsfunc($series); ?>
output:

{"name":"N51","data":[1024,{"y":2048,"events":{"mouseOver":function()
{$reporting.html('description of value');}}},4096]}

The difference is quotes around function, there should not be quotes.

<?php
function json_encode_jsfunc($input=array(), $funcs=array(), $level=0)
 {
  foreach($input as $key=>$value)
         {
          if (is_array($value))
             {
              $ret = json_encode_jsfunc($value, $funcs, 1);
              $input[$key]=$ret[0];
              $funcs=$ret[1];
             }
          else
             {
              if (substr($value,0,10)=='function()')
                 {
                  $func_key="#".uniqid()."#";
                  $funcs[$func_key]=$value;
                  $input[$key]=$func_key;
                 }
             }
         }
  if ($level==1)
     {
      return array($input, $funcs);
     }
  else
     {
      $input_json = json_encode($input);
      foreach($funcs as $key=>$value)
             {
              $input_json = str_replace('"'.$key.'"', $value, $input_json);
             }
      return $input_json;
     }
 }
?>
anonymous at gmail dot com 12-Sep-2011 12:53
Since PHP5.3 does not yet have JSON_UNESCAPED_UNICODE I had to find a way of
leaving the unicode characters un-escaped in the json:
<?php
        array_walk_recursive($array, function(&$item, $key) {
            if(is_string($item)) {
                $item = htmlentities($item);
            }
        });
        $json = json_encode($array);
        $rson = html_entity_decode($rson);
?>
grkworld1 at yahoo dot co dot in 07-Sep-2011 09:45
copy the php tagged code in a page
this is use full for multy dimention array

<?php

function arr_2_str($arr,$counter=1,$str="")
{
    foreach( $arr as $key=>$value)
    {
        if(is_array($value))
        {
            $str.= $key."=$counter>".arr_2_str($value,($counter+1))."=
".$counter.">~Y~|".$counter."|";
        }
        else
        {
            $str.=$key."=$counter>".$value."|$counter|";
        }
    }
    return rtrim($str,"|$counter|");
}

function str_2_arr($str,$counter=1,$arr=array(),$temparr=array())
{
    $temparr=explode("|$counter|",$str);
   
    foreach( $temparr as $key=>$value)
    {
        $t1=explode("=$counter>",$value);
        $kk=$t1[0];
        $vv=$t1[1];
        if ($t1[2]=="~Y~")
        {
            $arr[$kk]=str_2_arr($vv,($counter+1));
        }
        else
        {
            $arr[$kk]=$vv;
        }
       
    }
    return $arr;
}

$arr=array();

$arr[1]="a";
$arr[2][1]="b";
$arr[2][2]="c";
$arr[2][3][1]="d";
$arr[2][3][2][1]="e1";
$arr[2][3][2][2]="e2";
$arr[2][3][3]="f";
print "<pre>";

print_r($arr);

print "<br><br><br>";

print $ssttrr=arr_2_str($arr);

print "<br><br><br>";

print_r(str_2_arr($ssttrr));

/*print "<br><br><br>";
print "use of json";
print "<br><br><br>";
print $sstr=json_encode($arr);
print "<br><br><br>";
print_r(json_decode($sstr));*/

print "</pre>";

?>
Tibor Halter 14-Aug-2011 12:21
json_encode($binary) problem: it results in an empty string "" without error.

You will see this happening when encoding binary images, for example.

Use utf8_encode first.

<?php

    $data = 'éáíúűóüöäÍÓ';
    $json = json_encode( utf8_encode($data) );

    // [..]

    $data = utf8_decode( json_decode($json) );

?>
Rijk van Wel 07-Jul-2011 09:18
The JSON_NUMERIC_CHECK flag introduced in 5.3.0 comes in very handy when
handling numbers encapsulated in a string (database results and post requests
are always encoded as string types, for example). Sending over variables from a
database result directly (as string) would cause the json_encode() function to
quote them, which in turn would make the Javascript store them as strings. As
Javascript isn't loosely typed, some libraries could break on this, when
attempting to use one of those variables as row id in a data store for
instance. Using the aforementioned flag can prevent this from happening.

<?php
$arr = array( 'row_id' => '1', 'name' => 'George' ); // fictional db result
echo json_encode( $arr, JSON_NUMERIC_CHECK ); // {"row_id":1,"name":"George"}
?>
Mr Swordsteel 05-Jun-2011 02:38
So i like to use ISO-8859-1 and a lot of åäöÅÄÖ and not that much for UTF-8 but
i need some json stuff so this is what I'm trying to use this lite thing i
made...

<?php
function my_json_encode($in) {
  $_escape = function ($str) {
    return addcslashes($str, "\v\t\n\r\f\"\\/");
  };
  $out = "";
  if (is_object($in)) {
    $class_vars = get_object_vars(($in));
    $arr = array();
    foreach ($class_vars as $key => $val) {
      $arr[$key] = "\"{$_escape($key)}\":\"{$val}\"";
    }
    $val = implode(',', $arr);
    $out .= "{{$val}}";
  }elseif (is_array($in)) {
    $obj = false;
    $arr = array();
    foreach($in AS $key => $val) {
      if(!is_numeric($key)) {
        $obj = true;
      }
      $arr[$key] = my_json_encode($val);
    }
    if($obj) {
      foreach($arr AS $key => $val) {
        $arr[$key] = "\"{$_escape($key)}\":{$val}";
      }
      $val = implode(',', $arr);
      $out .= "{{$val}}";
    }else {
      $val = implode(',', $arr);
      $out .= "[{$val}]";
    }
  }elseif (is_bool($in)) {
    $out .= $in ? 'true' : 'false';
  }elseif (is_null($in)) {
    $out .= 'null';
  }elseif (is_string($in)) {
    $out .= "\"{$_escape($in)}\"";
  }else {
    $out .= $in;
  }
  return "{$out}";
}
?>

have fun make money off it or what you like with you code... this is for
everyone...
Joe 06-May-2011 06:24
Just FYI, check out these other registered long constants from the PHP source
code for json_d/ecode:

JSON_PRETTY_PRINT
JSON_UNESCAPED_SLASHES
JSON_NUMERIC_CHECK

I certainly look forward to these being fully included, especially the pretty
print option for proof reading of javascript config props sent to things like
Highcharts.
pvl dot kolensikov at gmail dot com 28-Mar-2011 04:35
As json_encode() is recursive, you can use it to serialize whole structure of
objects.

<?php
class A {
    public $a = 1;
    public $b = 2;
    public $collection = array();

    function  __construct(){
        for ( $i=3; $i-->0;){
            array_push($this->collection, new B);
        }
    }
}

class B {
    public $a = 1;
    public $b = 2;
}

echo json_encode(new A);
?>

Will give:

{
    "a":1,
    "b":2,
    "collection":[{
        "a":1,
        "b":2
    },{
        "a":1,
        "b":2
    },{
        "a":1,
        "b":2
    }]
}
Mathias Leppich 25-Feb-2011 06:29
If you need a json_encode / json_decode which is array/object/assoc-array you
might want to use: http://gist.github.com/820694

<?php
$dataIn = (object)array(
    "assoc" => array("cow"=>"moo"),
    "object" => (object)array("cat"=>"miao"),
);
/*
== IN
object(stdClass)#2 (2) {
  ["assoc"]=>
  array(1) {
    ["cow"]=>
    string(3) "moo"
  }
  ["object"]=>
  object(stdClass)#1 (1) {
    ["cat"]=>
    string(4) "miao"
  }
}

== JSON
{"assoc":{"_PHP_ASSOC":{"cow":"moo"}},"object":{"cat":"miao"}}

== OUT
object(stdClass)#4 (2) {
  ["assoc"]=>
  array(1) {
    ["cow"]=>
    string(3) "moo"
  }
  ["object"]=>
  object(stdClass)#7 (1) {
    ["cat"]=>
    string(4) "miao"
  }
}
*/
?>
Joao Neto 16-Feb-2011 12:36
To solve the "problem" with encoded UTF8 chars, is easy:

for example:

<?php
$arr = array( 'áéíóúçã', 'áááééé´rŕŕ' );

echo json_encode( $arr );

foreach ($arr as &$a) {
  $a = ascii_to_entities( $a );
}

echo json_encode( $arr );

function ascii_to_entities($str)
    {
       $count    = 1;
       $out    = '';
       $temp    = array();
   
       for ($i = 0, $s = strlen($str); $i < $s; $i++)
       {
           $ordinal = ord($str[$i]);
   
           if ($ordinal < 128)
           {
                if (count($temp) == 1)
                {
                    $out  .= '&#'.array_shift($temp).';';
                    $count = 1;
                }
           
                $out .= $str[$i];
           }
           else
           {
               if (count($temp) == 0)
               {
                   $count = ($ordinal < 224) ? 2 : 3;
               }
       
               $temp[] = $ordinal;
       
               if (count($temp) == $count)
               {
                   $number = ($count == 3) ? (($temp['0'] % 16) * 4096) +
(($temp['1'] % 64) * 64) +
($temp['2'] % 64) : (($temp['0'] % 32) * 64) +
($temp['1'] % 64);

                   $out .= '&#'.$number.';';
                   $count = 1;
                   $temp = array();
               }
           }
       }

       return $out;
    }
?>

RESULT:

["\u00e1\u00e9\u00ed\u00f3\u00fa\u00e7\u00e3",
"\u00e1\u00e1\u00e1\u00e9\u00e9\u00e9\u00b4r\u0155\u0155"]

Array ( [0] => áéíóúçã [1] => áááééé´rŕŕ )

["áéíóúçã","áááééé´rŕŕ"]

Array ( [0] => áéíóúçã [1] => áááééé´rŕŕ )
vakondweb at gmail dot com 01-Feb-2011 09:01
json_encode() only works with UTF-8 charset.

In case if you work with other charset, use this very simple solution instead
of json_encode:

<?php
//$return_arr = the array of data to json encode
//$out = the output of the function
//don't forget to escape the data before use it!

$out = '["' . implode('","', $return_arr) . '"]';
?>
bohwaz 26-Jan-2011 10:00
This is intended to be a simple readable json encode function for PHP 5.3+ (and
licensed under GNU/AGPLv3 or GPLv3 like you prefer):

<?php

function json_readable_encode($in, $indent = 0, $from_array = false)
{
    $_myself = __FUNCTION__;
    $_escape = function ($str)
    {
        return preg_replace("!([\b\t\n\r\f\"\\'])!", "\\\\\\1", $str);
    };

    $out = '';

    foreach ($in as $key=>$value)
    {
        $out .= str_repeat("\t", $indent + 1);
        $out .= "\"".$_escape((string)$key)."\": ";

        if (is_object($value) || is_array($value))
        {
            $out .= "\n";
            $out .= $_myself($value, $indent + 1);
        }
        elseif (is_bool($value))
        {
            $out .= $value ? 'true' : 'false';
        }
        elseif (is_null($value))
        {
            $out .= 'null';
        }
        elseif (is_string($value))
        {
            $out .= "\"" . $_escape($value) ."\"";
        }
        else
        {
            $out .= $value;
        }

        $out .= ",\n";
    }

    if (!empty($out))
    {
        $out = substr($out, 0, -2);
    }

    $out = str_repeat("\t", $indent) . "{\n" . $out;
    $out .= "\n" . str_repeat("\t", $indent) . "}";

    return $out;
}

?>
dan at elearnapp dot com 13-Jan-2011 08:01
If you need to force an object (ex: empty array) you can also do:

         <?php json_encode( (object)$arr ); ?>

which acts the same as

         <?php json_encode($arr, JSON_FORCE_OBJECT); ?>
marc at leftek dot com 23-Dec-2010 06:08
Anybody having empty arrays and needing the JSON_FORCE_OBJECT option but not
using 5.3 yet, you can substitute assigning an empty object:

<?php
    if (empty($array)) $array = (object) null;
    $return = json_encode($array);
?>
rdheijer at reestyle dot net 21-Dec-2010 10:11
You may run into trouble when you need to call functions. In my case I had to
fire a function based on a button pressed in the flexigrid javascript
component.

My solution in the project was:

<?php

$jsonify = array('onpress'=>'functionName');

// The part between braces in the regex is somewhat rough
// but it will do the job. Afterall, you don't want this to be
// used by a visitor :)
$regex = '/"onpress":"([\w\-\.]+)"/i';
$replace = '"onpress":$1';
$jsonified = preg_replace($regex, $replace, json_encode($jsonify));

?>

But you can extend this for your own needs. By altering the regex and replace
vars:

<?php

$replace = '"$1":$2';
$regex = '/"(onpress|onclick|onmouseover|onmouseout)":"([\w_\-\.]+)"/i';

?>

Unfortunately you have to specify each call reference, but it does give you
full control over what to and what not to.
Andre M 06-Dec-2010 12:23
Regarding encoding issues, if you make sure the PHP files containing your
strings are encoded in UTF-8, you shouldn't need to call utf8_encode.
spam dot here dot pls at hotmail dot com 17-Nov-2010 08:42
Another way for pre-5.2.0 PHP users is using rawurlencode() in PHP to encode a
string and decodeURIComponent() in javascript to decode it. I have written
following class to handle PHP arrays and convert them to javascript format. It
uses object notation for associative arrays and arrays for the other. Nesting
is supported. True, false, integers, floats and null values are presented in
respective javascript syntax.

Use: convert an array in PHP using this class, load it into the browser using
ajax and then decode the strings in the resulting object using javascript
function decodeData (below).

All of the example results have passed json validator so it shoud be allright.
Feel free to use this.

PHP CLASS - encoding arrays
=======

<?php

class custom_json {

    /**
     * Convert array to javascript object/array
     * @param array $array the array
     * @return string
     */
    public static function encode($array)
    {

        // determine type
        if(is_numeric(key($array))) {

            // indexed (list)
            $output = '[';
            for($i = 0, $last = (sizeof($array) - 1); isset($array[$i]); ++$i)
{
                if(is_array($array[$i])) $output .= self::encode($array[$i]);
                else  $output .= self::_val($array[$i]);
                if($i !== $last) $output .= ',';
            }
            $output .= ']';

        } else {

            // associative (object)
            $output = '{';
            $last = sizeof($array) - 1;
            $i = 0;
            foreach($array as $key => $value) {
                $output .= '"'.$key.'":';
                if(is_array($value)) $output .= self::encode($value);
                else  $output .= self::_val($value);
                if($i !== $last) $output .= ',';
                ++$i;
            }
            $output .= '}';

        }

        // return
        return $output;

    }

    /**
     * [INTERNAL] Format value
     * @param mixed $val the value
     * @return string
     */
    private static function _val($val)
    {
        if(is_string($val)) return '"'.rawurlencode($val).'"';
        elseif(is_int($val)) return sprintf('%d', $val);
        elseif(is_float($val)) return sprintf('%F', $val);
        elseif(is_bool($val)) return ($val ? 'true' : 'false');
        else  return 'null';
    }

}

// prints ["apple","banana","blueberry"]
echo custom_json::encode(array('apple', 'banana', 'blueberry'));

// prints {"name":"orange","type":"fruit"}
echo custom_json::encode(array('name' => 'orange', 'type' => 'fruit'));

// prints: ** try it yourself, cannot post long lines here **
$big_test = array(
    array(
        'name' => array('John', 'Smith'),
        'age' => 27,
        'sex' => 0,
        'height' => 180.53,
        'is_human' => true,
        'string' => 'Hello',
    ),
    array(
        'name' => array('Green', 'Alien'),
        'age' => 642,
        'sex' => null,
        'height' => 92.21,
        'is_human' => false,
        'string' => 'こんにちは！', // test utf8 here
    )
);

echo custom_json::encode($big_test);

?>

JAVASCRIPT FUNCTION - decode rawurlencoded() strings
==================
function decodeData(data) {
        for(var item in data) {
            var type = typeof data[item];
            if(type === 'object') decodeData(data[item]);
            else if(type === 'string') data[item] = decodeURIComponent(data
[item]);
        }
    }
boukeversteegh at gmail dot com 10-Nov-2010 02:02
For users of php 5.1.6 or lower, a native json_encode function. This version
handles objects, and makes proper distinction between [lists] and {associative
arrays}, mixed arrays work as well. It can handle newlines and quotes in both
keys and data.

This function will convert non-ascii symbols to "\uXXXX" format as does
json_encode.

Besides that, it outputs exactly the same string as json_encode. Including
UTF-8 encoded 2-, 3- and 4-byte characters. It is a bit faster than PEAR/
JSON::encode, but still slow compared to php 5.3's json_encode. It encodes any
variable type exactly as the original.

Relative speeds:
PHP json_encode: 1x
__json_encode: 31x
PEAR/JSON: 46x

NOTE: I assume the input will be valid UTF-8. I don't know what happens if your
data contains illegal Unicode sequences. I tried to make the code fast and
compact.

<?php
function __json_encode( $data ) {           
    if( is_array($data) || is_object($data) ) {
        $islist = is_array($data) && ( empty($data) || array_keys($data) ===
range(0,count($data)-1) );
       
        if( $islist ) {
            $json = '[' . implode(',', array_map('__json_encode', $data) ) . ']
';
        } else {
            $items = Array();
            foreach( $data as $key => $value ) {
                $items[] = __json_encode("$key") . ':' . __json_encode($value);
            }
            $json = '{' . implode(',', $items) . '}';
        }
    } elseif( is_string($data) ) {
        # Escape non-printable or Non-ASCII characters.
        # I also put the \\ character first, as suggested in comments on the
'addclashes' page.
        $string = '"' . addcslashes($data, "\\\"\n\r\t/" . chr(8) . chr(12)) .
'"';
        $json    = '';
        $len    = strlen($string);
        # Convert UTF-8 to Hexadecimal Codepoints.
        for( $i = 0; $i < $len; $i++ ) {
           
            $char = $string[$i];
            $c1 = ord($char);
           
            # Single byte;
            if( $c1 <128 ) {
                $json .= ($c1 > 31) ? $char : sprintf("\\u%04x", $c1);
                continue;
            }
           
            # Double byte
            $c2 = ord($string[++$i]);
            if ( ($c1 & 32) === 0 ) {
                $json .= sprintf("\\u%04x", ($c1 - 192) * 64 + $c2 - 128);
                continue;
            }
           
            # Triple
            $c3 = ord($string[++$i]);
            if( ($c1 & 16) === 0 ) {
                $json .= sprintf("\\u%04x", (($c1 - 224) <<12) + (($c2 - 128)
<< 6) + ($c3 - 128));
                continue;
            }
               
            # Quadruple
            $c4 = ord($string[++$i]);
            if( ($c1 & 8 ) === 0 ) {
                $u = (($c1 & 15) << 2) + (($c2>>4) & 3) - 1;
           
                $w1 = (54<<10) + ($u<<6) + (($c2 & 15) << 2) + (($c3>>4) & 3);
                $w2 = (55<<10) + (($c3 & 15)<<6) + ($c4-128);
                $json .= sprintf("\\u%04x\\u%04x", $w1, $w2);
            }
        }
    } else {
        # int, floats, bools, null
        $json = strtolower(var_export( $data, true ));
    }
    return $json;
}
?>

[EDIT BY danbrown AT php DOT net: Contains a bugfix by the original poster on
08-DEC-2010 with the following message: "I discovered a rather bad bug in my
__json_encode function below. On versions prior to php 5.2.5, all 'f'
characters are escaped to '\f'. This is because addcslashes in php < 5.2
doesn't understand \f as 'formfeed'."]
php at ianco dot co dot uk 29-Oct-2010 11:02
Note that json_encode always escapes a solidus (forward slash, %x2F).
This may be a problem if you are encoding a URL.
It's been recognised and fixed in September 2010:
http://bugs.php.net/bug.php?id=49366
But escaping will still be the default behaviour.
A crude repair can be done with
str_replace('\\/', '/', $jsonEncoded)
josh [at] goals.com 23-Oct-2010 07:31
For anyone wondering whether umbrae's JSON pretty-printer will output invalid
JSON (I did), I ran some tests taking my valid JSON and replacing string values
with each of the possible edge cases: [, {, ,, :, ", }, and ]. I then ran the
output through JSONLint just to verify.

So far as I can tell, nothing breaks in these situations, and everything
pretty-prints as expected.

That said, quotes " will produce invalid JSON, but this is only an issue if
you're using json_encode() and just expect PHP to magically escape your quotes.
You need to do the escaping yourself.
migprj at gmail dot com 19-Oct-2010 02:46
Because json_encode() only deals with utf8, it is often necessary to convert
all the string values inside an array to utf8. I've created these two
functions:   

<?php
function utf8_encode_all($dat) // -- It returns $dat encoded to UTF8
{
  if (is_string($dat)) return utf8_encode($dat);
  if (!is_array($dat)) return $dat;
  $ret = array();
  foreach($dat as $i=>$d) $ret[$i] = utf8_encode_all($d);
  return $ret;
}
/* ....... */

function utf8_decode_all($dat) // -- It returns $dat decoded from UTF8
{
  if (is_string($dat)) return utf8_decode($dat);
  if (!is_array($dat)) return $dat;
  $ret = array();
  foreach($dat as $i=>$d) $ret[$i] = utf8_decode_all($d);
  return $ret;
}
/* ....... */
?>
tomas at matfyz dot cz 05-Oct-2010 02:43
As json_encode() won't work with character sets other than UTF-8, this
expression allows to encode strings for JSON regardless of the character set:

<?php
str_replace("\0", "\\u0000", addcslashes($string, "\t\r\n\"\\"));
?>

You need to replace the nul character manually as addcslashes() won't do it
right way. But BEWARE, this is only solution for common strings, other "unusual
wild characters" like ESC, \b, \a etc. are not handled.
matt dot parlane at gmail dot com 05-Oct-2010 07:05
To save some space, at the risk of it being illegal JSON, strictly speaking:

<?php
$json = preg_replace('/"([a-zA-Z]+[a-zA-Z0-9]*)":/', '$1:', json_encode
($whatever));
?>
Dave - s10sys.com 09-Sep-2010 03:46
This may help others who are seeing null strings returned by json_encode().

This function will encode all array values to utf8 so they are safe for
json_encode();

usage:

<?php
json_encode(utf8json($dataArray));

function utf8json($inArray) {

    static $depth = 0;

    /* our return object */
    $newArray = array();

    /* safety recursion limit */
    $depth ++;
    if($depth >= '30') {
        return false;
    }

    /* step through inArray */
    foreach($inArray as $key=>$val) {
        if(is_array($val)) {
            /* recurse on array elements */
            $newArray[$key] = utf8json($val);
        } else {
            /* encode string values */
            $newArray[$key] = utf8_encode($val);
        }
    }

    /* return utf8 encoded array */
    return $newArray;
}
?>

[NOTE BY danbrown AT php DOT net: Includes a bugfix by (robbiz233 AT hotmail
DOT com) on 18-SEP-2010, to replace:
    $newArray[$key] = utf8json($inArray);
with:
    $newArray[$key] = utf8json($val);"
in the given function.]
nicolas dot baptiste at gmail dot com 18-Aug-2010 03:49
Beware of index arrays :

<?php
echo json_encode(array("test","test","test"));
echo json_encode(array(0=>"test",3=>"test",7=>"test"));
?>

Will give :

["test","test","test"]
{"0":"test","3":"test","7":"test"}

arrays are returned only if you don't define index.
gansbrest 06-Aug-2010 07:42
If you have problems with quotes when encoding numeric data retrieved from the
database, you can just cast that value to integer and there will be no quotes:

<?php
$testArr['key'] = '1';
print json_encode($testArr);
?>

===> {"key":"1"}

<?php
$testArr['key'] = (int)'1';
print json_encode($testArr);
?>

===> {"key":1}

Don't forget that you have to deal with numbers, otherwise your string will be
converted to 0.
Arne Bech 20-Jul-2010 07:00
To battle the quoting of numbers when encoding data retrieved from mysql you
could do a simple preg_replace() to remove the quotes on numbers.

This has worked for me:
<?php
$json = json_encode($dataFromMysql);
$json = preg_replace('/"(-?\d+\.?\d*)"/', '$1', $json);
?>
mic dot sumner at gmail dot com 02-Jul-2010 01:39
Hey everyone,

In my application, I had objects that modeled database rows with a few one to
many relationships, so one object may have an array of other objects.

I wanted to make the object properties private and use getters and setters, but
I needed them to be serializable to json without losing the private variables.
(I wanted to promote good coding practices but I needed the properties on the
client side.) Because of this, I needed to encode not only the normal private
properties but also properties that were arrays of other model objects. I
looked for awhile with no luck, so I coded my own:

You can place these methods in each of your classes, or put them in a base
class, as I've done. (But note that for this to work, the children classes must
declare their properties as protected so the parent class has access)

<?php
abstract class Model {
  
   public function toArray() {
        return $this->processArray(get_object_vars($this));
    }
   
    private function processArray($array) {
        foreach($array as $key => $value) {
            if (is_object($value)) {
                $array[$key] = $value->toArray();
            }
            if (is_array($value)) {
                $array[$key] = $this->processArray($value);
            }
        }
        // If the property isn't an object or array, leave it untouched
        return $array;
    }
   
    public function __toString() {
        return json_encode($this->toArray());
    }
  
}
?>

Externally, you can just call

<?php
    echo $theObject;
    //or
    echo json_encode($theObject->toArray());
?>

And you'll get the json for that object. Hope this helps someone!
ryan at ryanparman dot com 27-Mar-2010 09:36
I came across the "bug" where running json_encode() over a SimpleXML object was
ignoring the CDATA. I ran across http://bugs.php.net/42001 and http://
bugs.php.net/41976, and while I agree with the poster that the documentation
should clarify gotchas like this, I was able to figure out how to workaround
it.

You need to convert the SimpleXML object back into an XML string, then
re-import it back into SimpleXML using the LIBXML_NOCDATA option. Once you do
this, then you can use json_encode() and still get back the CDATA.

<?php
// Pretend we already have a complex SimpleXML object stored in $xml
$json = json_encode(new SimpleXMLElement($xml->asXML(), LIBXML_NOCDATA));
?>
5hunter5 at mail dot ru 17-Feb-2010 11:03
If I want to encode object whith all it's private and protected properties,
then I implements that methods in my object:

<?php
public function encodeJSON()
{
    foreach ($this as $key => $value)
    {
        $json->$key = $value;
    }
    return json_encode($json);
}
public function decodeJSON($json_str)
{
    $json = json_decode($json_str, 1);
    foreach ($json as $key => $value)
    {
        $this->$key = $value;
    }
}
?>

Or you may extend your class from base class, wich is implements that methods.

Found that much more simple than regular expressions with PHP serialized
objects...
olivier dot pons dot no dot spam at gmail dot com 22-Jan-2010 03:13
Be careful about one thing:
With a string key Php will consider it's an object:

<?php
echo json_encode(array('id'=>'testtext'));
echo json_encode(array('testtext'));
?>

Will give:

{"id":"testtext"}
["testtext"]

Beware of the string keys!
garydavis at gmail dot com 14-Jan-2010 03:38
If you are planning on using this function to serve a json file, it's important
to note that the json generated by this function is not ready to be consumed by
javascript until you wrap it in parens and add ";" to the end.

It took me a while to figure this out so I thought I'd save others the
aggravation.

<?php
    header('Content-Type: text/javascript; charset=utf8');
    header('Access-Control-Allow-Origin: http://www.example.com/');
    header('Access-Control-Max-Age: 3628800');
    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE');
   
    $file='rss.xml';
    $arr = simplexml_load_file($file);//this creates an object from the xml
file
    $json= '('.json_encode($arr).');'; //must wrap in parens and end with
semicolon
    print_r($_GET['callback'].$json); //callback is prepended for json-p
?>
me at daniel dot ie 15-Nov-2009 04:45
I had trouble putting the results of mysql_fetch_assoc() through json_encode:
numbers being returned from the query were being quoted in the JSON output
(i.e., they were being treated as strings). In order to fix this, it is
necessary to explicitly cast each element of the array before json_encode() is
called.

The following code uses metadata from a MySQL query result to do this casting.

<?php
    $mysql = mysql_connect('localhost', 'user', 'password');
    mysql_select_db('my_db');

    $query = 'select * from my_table';
    $res = mysql_query($query);

    // iterate over every row
    while ($row = mysql_fetch_assoc($res)) {
        // for every field in the result..
        for ($i=0; $i < mysql_num_fields($res); $i++) {
            $info = mysql_fetch_field($res, $i);
            $type = $info->type;

            // cast for real
            if ($type == 'real')
                $row[$info->name] = doubleval($row[$info->name]);
            // cast for int
            if ($type == 'int')
                $row[$info->name] = intval($row[$info->name]);
        }

        $rows[] = $row;
    }

    // JSON-ify all rows together as one big array
    echo json_encode($rows);
   
    mysql_close($mysql);
?>
rlz_ar at yahoo dot com 30-Oct-2009 04:35
If you have problems with json_encode() on arrays, you can force json_encode()
to encode as object, and then use json_decode() casting the result as array:

<?php

$myarray = Array('isa', 'dalawa', 'tatlo');

unset($myarray[1]);

$json_encoded_array = json_encode ( $myarray, JSON_FORCE_OBJECT );

// do whatever you want with your data
// then you can retrive the data doing:

$myarray = (array) json_decode ( $json_encoded_array );

?>
simoncpu was here 20-Oct-2009 09:18
A note of caution: If you are wondering why json_encode() encodes your PHP
array as a JSON object instead of a JSON array, you might want to double check
your array keys because json_encode() assumes that you array is an object if
your keys are not sequential.

e.g.:

<?php
$myarray = Array('isa', 'dalawa', 'tatlo');
var_dump($myarray);
/* output
array(3) {
  [0]=>
  string(3) "isa"
  [1]=>
  string(6) "dalawa"
  [2]=>
  string(5) "tatlo"
}
*/
?>

As you can see, the keys are sequential; $myarray will be correctly encoded as
a JSON array.

<?php
$myarray = Array('isa', 'dalawa', 'tatlo');

unset($myarray[1]);
var_dump($myarray);
/* output
array(2) {
  [0]=>
  string(3) "isa"
  [2]=>
  string(5) "tatlo"
}
*/
?>

Unsetting an element will also remove the keys. json_encode() will now assume
that this is an object, and will encode it as such.

SOLUTION: Use array_values() to re-index the array.
http://mike.eire.ca/ 10-Aug-2009 08:54
Note that this function does not always produce legal JSON.

<?php
$json = json_encode('foo');
var_dump($json);
//string(5) ""foo""

$json = json_encode(23);
var_dump($json);
//string(2) "23"
?>

According to the JSON spec, only objects and arrays can be represented; the
JSON_FORCE_OBJECT flag available since PHP 5.3 does not change this behaviour.
If you're using this to produce JSON that will be exchanged with other systems,
adjust your output accordingly.

<?php
$json = preg_replace('/^([^[{].*)$/', '[$1]', $json);
?>

The json_decode function accepts these JSON fragments without complaint.
damon1977 at gmail dot com 28-Jul-2009 07:41
I wrote a function to make JSON strings more readable. It's very useful for
debugging JSON output...

<?php
function jsonReadable($json, $html=FALSE) {
    $tabcount = 0;
    $result = '';
    $inquote = false;
    $ignorenext = false;
   
    if ($html) {
        $tab = "&nbsp;&nbsp;&nbsp;";
        $newline = "<br/>";
    } else {
        $tab = "\t";
        $newline = "\n";
    }
   
    for($i = 0; $i < strlen($json); $i++) {
        $char = $json[$i];
       
        if ($ignorenext) {
            $result .= $char;
            $ignorenext = false;
        } else {
            switch($char) {
                case '{':
                    $tabcount++;
                    $result .= $char . $newline . str_repeat($tab, $tabcount);
                    break;
                case '}':
                    $tabcount--;
                    $result = trim($result) . $newline . str_repeat($tab,
$tabcount) . $char;
                    break;
                case ',':
                    $result .= $char . $newline . str_repeat($tab, $tabcount);
                    break;
                case '"':
                    $inquote = !$inquote;
                    $result .= $char;
                    break;
                case '\\':
                    if ($inquote) $ignorenext = true;
                    $result .= $char;
                    break;
                default:
                    $result .= $char;
            }
        }
    }
   
    return $result;
}
?>
Istratov Vadim 10-Jun-2009 06:54
Be careful with floating values in some locales (e.g. russian) with comma (",")
as decimal point. Code:

<?php
setlocale(LC_ALL, 'ru_RU.utf8');

$arr = array('element' => 12.34);
echo json_encode( $arr );
?>

Output will be:
--------------
{"element":12,34}
--------------

Which is NOT a valid JSON markup. You should convert floating point variable to
strings or set locale to something like "LC_NUMERIC, 'en_US.utf8'" before using
json_encode.
other at killermonk dot com 20-May-2009 09:55
If you are trying to flatten a multi dimensional array, you can also just use
serialize and unserialize. It just depends on what you are trying to do.
Sam Barnum 21-Apr-2009 06:01
Note that if you try to encode an array containing non-utf values, you'll get
null values in the resulting JSON string.  You can batch-encode all the
elements of an array with the array_map function:
<?php
$encodedArray = array_map(utf8_encode, $rawArray);
?>
atrauzzi at gmail dot com 08-Apr-2009 07:39
Here's an idea for people trying to figure out an alternative to implode() to
flatten multi-dimensional arrays.

Use json_encode()!

I needed a way to create a hash from an array:

md5(json_encode($multiDimensionalArray)) does the trick!

Happy caching!
andyrusterholz at g-m-a-i-l dot c-o-m 27-Mar-2009 07:17
For anyone who would like to encode arrays into JSON, but is using PHP 4, and
doesn't want to wrangle PECL around, here is a function I wrote in PHP4 to
convert nested arrays into JSON.

Note that, because javascript converts JSON data into either nested named
objects OR vector arrays, it's quite difficult to represent mixed PHP arrays
(arrays with both numerical and associative indexes) well in JSON. This
function does something funky if you pass it a mixed array -- see the comments
for details.

I don't make a claim that this function is by any means complete (for example,
it doesn't handle objects) so if you have any improvements, go for it.

<?php

/**
 * Converts an associative array of arbitrary depth and dimension into JSON
representation.
 *
 * NOTE: If you pass in a mixed associative and vector array, it will prefix
each numerical
 * key with "key_". For example array("foo", "bar" => "baz") will be translated
into
 * {'key_0': 'foo', 'bar': 'baz'} but array("foo", "bar") would be translated
into [ 'foo', 'bar' ].
 *
 * @param $array The array to convert.
 * @return mixed The resulting JSON string, or false if the argument was not an
array.
 * @author Andy Rusterholz
 */
function array_to_json( $array ){

    if( !is_array( $array ) ){
        return false;
    }

    $associative = count( array_diff( array_keys($array), array_keys(
array_keys( $array )) ));
    if( $associative ){

        $construct = array();
        foreach( $array as $key => $value ){

            // We first copy each key/value pair into a staging array,
            // formatting each key and value properly as we go.

            // Format the key:
            if( is_numeric($key) ){
                $key = "key_$key";
            }
            $key = "'".addslashes($key)."'";

            // Format the value:
            if( is_array( $value )){
                $value = array_to_json( $value );
            } else if( !is_numeric( $value ) || is_string( $value ) ){
                $value = "'".addslashes($value)."'";
            }

            // Add to staging array:
            $construct[] = "$key: $value";
        }

        // Then we collapse the staging array into the JSON form:
        $result = "{ " . implode( ", ", $construct ) . " }";

    } else { // If the array is a vector (not associative):

        $construct = array();
        foreach( $array as $value ){

            // Format the value:
            if( is_array( $value )){
                $value = array_to_json( $value );
            } else if( !is_numeric( $value ) || is_string( $value ) ){
                $value = "'".addslashes($value)."'";
            }

            // Add to staging array:
            $construct[] = $value;
        }

        // Then we collapse the staging array into the JSON form:
        $result = "[ " . implode( ", ", $construct ) . " ]";
    }

    return $result;
}

?>
aangel at spam dot com 08-Feb-2009 01:50
Here is a bit more on creating an iterator to get at those pesky private/
protected variables:

<?php
   class Kit implements IteratorAggregate {

    public function __construct($var) {
        if (is_object($var)) {
            // if passed an object, we are cloning
           $this->kitID = $var->kitID;
           $this->kitName = $var->kitName;
           foreach ($var->productArray as $key => $value) {
               $this->productArray[$key] = (array)$value;
           }
        }
    }
   ...
    // Create an iterator because private/protected vars can't
    // be seen by json_encode().
    public function getIterator() {
        $iArray['kitID'] = $this->kitID;
        $iArray['kitName'] = $this->kitName;
        $iArray['productArray'] = (array)$this->productArray;
        return new ArrayIterator($iArray);
    }
}
?>

Calling something like  $t = json_encode($this->getIterator());  will give you
almost what you want:
<?php
{"kitID":"Kit_Essentials-Books.txt",
"kitName":"Essential Books",
"productArray":{"0470043601":{"Category":"Food","ASIN":"0470043601"} } }
?>

Notice that the productArray is converted to an object ignoring the cast I put
in front, which is not what I wanted. I haven't figured out how to make sure
that encodes as an array.

Regardless, bringing that JSON back into an object using json_decode() will
give you just a std object, and the only way I've found to get it into the
proper object type is to use a constructor that instantiates the object the way
it's supposed to be (see __construct($var) above). Like this:
<?php

        $newKit = new Kit(json_decode($t));
?>
Garrett 22-Oct-2008 06:17
A note about json_encode automatically quoting numbers:

It appears that the json_encode function pays attention to the data type of the
value. Let me explain what we came across:

We have found that when retrieving data from our database, there are occasions
when numbers appear as strings to json_encode which results in double quotes
around the values.

This can lead to problems within javascript functions expecting the values to
be numeric.

This was discovered when were were retrieving fields from the database which
contained serialized arrays. After unserializing them and sending them through
the json_encode function the numeric values in the original array were now
being treated as strings and showing up with double quotes around them.

The fix: Prior to encoding the array, send it to a function which checks for
numeric types and casts accordingly. Encoding from then on worked as expected.
stboisvert at nowantspam dot gmail dot com 14-Oct-2008 07:27
When Using Libraries such as Prototype you may find that once in a while when
you return what you believe to be a empty array it will have a different
behavior (vis a vis enumerables) than when you give it an associative array. To
"fix" this, on your JS you may want to look for extended object properties to
verify if it is an empty array or an ocject.

example:

<?php
if (transport.responseJSON['User'].length == undefined){
        var user = $H(transport.responseJSON['User']);
}else{
        var user = transport.responseJSON['User'];     
}
?>

Thanks goes out to :
jani@php.net

This is totally expected behaviour. Please read this:
http://www.json.org/

Note: array and assoc-array are different things. Latter being "object"
in json.

http://bugs.php.net/bug.php?id=45162

[RQuadling] See http://bugs.php.net/bug.php?id=47493. Fixed by using
json_encode(array(), JSON_FORCE_OBJECT);
spam.goes.in.here AT gmail.com 09-Aug-2008 06:05
For anyone who has run into the problem of private properties not being added,
you can simply implement the IteratorAggregate interface with the getIterator()
method. Add the properties you want to be included in the output into an array
in the getIterator() method and return it.
umbrae at gmail dot com 10-Jan-2008 06:21
Here's a quick function to pretty-print some JSON. Optimizations welcome, as
this was a 10-minute dealie without efficiency in mind:

<?php
// Pretty print some JSON
function json_format($json)
{
    $tab = "  ";
    $new_json = "";
    $indent_level = 0;
    $in_string = false;

    $json_obj = json_decode($json);

    if($json_obj === false)
        return false;

    $json = json_encode($json_obj);
    $len = strlen($json);

    for($c = 0; $c < $len; $c++)
    {
        $char = $json[$c];
        switch($char)
        {
            case '{':
            case '[':
                if(!$in_string)
                {
                    $new_json .= $char . "\n" . str_repeat($tab,
$indent_level+1);
                    $indent_level++;
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case '}':
            case ']':
                if(!$in_string)
                {
                    $indent_level--;
                    $new_json .= "\n" . str_repeat($tab, $indent_level) .
$char;
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case ',':
                if(!$in_string)
                {
                    $new_json .= ",\n" . str_repeat($tab, $indent_level);
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case ':':
                if(!$in_string)
                {
                    $new_json .= ": ";
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case '"':
                if($c > 0 && $json[$c-1] != '\\')
                {
                    $in_string = !$in_string;
                }
            default:
                $new_json .= $char;
                break;                   
        }
    }

    return $new_json;
}
?>
jjoss 24-Oct-2007 07:07
Another way to work with Russian characters. This procedure just handles
Cyrillic characters without UTF conversion. Thanks to JsHttpRequest developers.

<?php
function php2js($a=false)
{
  if (is_null($a)) return 'null';
  if ($a === false) return 'false';
  if ($a === true) return 'true';
  if (is_scalar($a))
  {
    if (is_float($a))
    {
      // Always use "." for floats.
      $a = str_replace(",", ".", strval($a));
    }

    // All scalars are converted to strings to avoid indeterminism.
    // PHP's "1" and 1 are equal for all PHP operators, but
    // JS's "1" and 1 are not. So if we pass "1" or 1 from the PHP backend,
    // we should get the same result in the JS frontend (string).
    // Character replacements for JSON.
    static $jsonReplaces = array(array("\\", "/", "\n", "\t", "\r", "\b", "\f",
'"'),
    array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));
    return '"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $a) . '"';
  }
  $isList = true;
  for ($i = 0, reset($a); $i < count($a); $i++, next($a))
  {
    if (key($a) !== $i)
    {
      $isList = false;
      break;
    }
  }
  $result = array();
  if ($isList)
  {
    foreach ($a as $v) $result[] = php2js($v);
    return '[ ' . join(', ', $result) . ' ]';
  }
  else
  {
    foreach ($a as $k => $v) $result[] = php2js($k).': '.php2js($v);
    return '{ ' . join(', ', $result) . ' }';
  }
}
?>
jfdsmit at gmail dot com 23-Oct-2007 02:31
json_encode also won't handle objects that do not directly expose their
internals but through the Iterator interface. These two function will take care
of that:

<?php

/**
 * Convert an object into an associative array
 *
 * This function converts an object into an associative array by iterating
 * over its public properties. Because this function uses the foreach
 * construct, Iterators are respected. It also works on arrays of objects.
 *
 * @return array
 */
function object_to_array($var) {
    $result = array();
    $references = array();

    // loop over elements/properties
    foreach ($var as $key => $value) {
        // recursively convert objects
        if (is_object($value) || is_array($value)) {
            // but prevent cycles
            if (!in_array($value, $references)) {
                $result[$key] = object_to_array($value);
                $references[] = $value;
            }
        } else {
            // simple values are untouched
            $result[$key] = $value;
        }
    }
    return $result;
}

/**
 * Convert a value to JSON
 *
 * This function returns a JSON representation of $param. It uses json_encode
 * to accomplish this, but converts objects and arrays containing objects to
 * associative arrays first. This way, objects that do not expose (all) their
 * properties directly but only through an Iterator interface are also encoded
 * correctly.
 */
function json_encode2($param) {
    if (is_object($param) || is_array($param)) {
        $param = object_to_array($param);
    }
    return json_encode($param);
}
dennispopel(at)gmail.com 26-Aug-2007 05:43
Obviously, this function has trouble encoding arrays with empty string keys
(''). I have just noticed that (because I was using a function in PHP under
PHP4). When I switched to PHP5's json_encode, I noticed that browsers could not
correctly parse the encoded data. More investigation maybe needed for a bug
report, but this quick note may save somebody several hours.

Also, it manifests on Linux in 5.2.1 (tested on two boxes), on my XP with
PHP5.2.3 json_encode() works just great! However, both 5.2.1 and 5.2.3 phpinfo
()s show that the json version is 1.2.1 so might be Linux issue
php at mikeboers dot com 05-Jul-2007 02:49
Here is a way to convert an object to an array which will include all protected
and private members before you send it to json_encode()

<?php

function objectArray( $object ) {

    if ( is_array( $object ))
        return $object ;
       
    if ( !is_object( $object ))
        return false ;
       
    $serial = serialize( $object ) ;
    $serial = preg_replace( '/O:\d+:".+?"/' ,'a' , $serial ) ;
    if( preg_match_all( '/s:\d+:"\\0.+?\\0(.+?)"/' , $serial, $ms,
PREG_SET_ORDER )) {
        foreach( $ms as $m ) {
            $serial = str_replace( $m[0], 's:'. strlen( $m[1] ) . ':"'.$m[1] .
'"', $serial ) ;
        }
    }
   
    return @unserialize( $serial ) ;

}

// TESTING

class A {
   
    public $a = 'public for a' ;
    protected $b = true ;
    private $c = 123 ;
   
}

class B {
   
    public $d = 'public for b' ;
    protected $e = false ;
    private $f = 456 ;
   
}

$a = new A() ;
$a -> d = new B() ;

echo '<pre>' ;
print_r( $a ) ;
print_r( objectArray( $a )) ;

?>

Cheers!

mike
Yi-Ren Chen at NCTU CSIE 02-May-2007 04:55
I write a function "php_json_encode"
for early version of php which support "multibyte" but doesn't support
"json_encode".
<?php
  function json_encode_string($in_str)
  {
    mb_internal_encoding("UTF-8");
    $convmap = array(0x80, 0xFFFF, 0, 0xFFFF);
    $str = "";
    for($i=mb_strlen($in_str)-1; $i>=0; $i--)
    {
      $mb_char = mb_substr($in_str, $i, 1);
      if(mb_ereg("&#(\\d+);", mb_encode_numericentity($mb_char, $convmap,
"UTF-8"), $match))
      {
        $str = sprintf("\\u%04x", $match[1]) . $str;
      }
      else
      {
        $str = $mb_char . $str;
      }
    }
    return $str;
  }
  function php_json_encode($arr)
  {
    $json_str = "";
    if(is_array($arr))
    {
      $pure_array = true;
      $array_length = count($arr);
      for($i=0;$i<$array_length;$i++)
      {
        if(! isset($arr[$i]))
        {
          $pure_array = false;
          break;
        }
      }
      if($pure_array)
      {
        $json_str ="[";
        $temp = array();
        for($i=0;$i<$array_length;$i++)       
        {
          $temp[] = sprintf("%s", php_json_encode($arr[$i]));
        }
        $json_str .= implode(",",$temp);
        $json_str .="]";
      }
      else
      {
        $json_str ="{";
        $temp = array();
        foreach($arr as $key => $value)
        {
          $temp[] = sprintf("\"%s\":%s", $key, php_json_encode($value));
        }
        $json_str .= implode(",",$temp);
        $json_str .="}";
      }
    }
    else
    {
      if(is_string($arr))
      {
        $json_str = "\"". json_encode_string($arr) . "\"";
      }
      else if(is_numeric($arr))
      {
        $json_str = $arr;
      }
      else
      {
        $json_str = "\"". json_encode_string($arr) . "\"";
      }
    }
    return $json_str;
  }
giunta dot gaetano at sea-aeroportimilano dot it 04-Sep-2006 03:11
Take care that json_encode() expects strings to be encoded to be in UTF8
format, while by default PHP strings are ISO-8859-1 encoded.
This means that

json_encode(array('àü'));

will produce a json representation of an empty string, while

json_encode(array(utf8_encode('àü')));

will work.
The same applies to decoding, too, of course...
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 16 17:13:17 2011 UTC
Received cookie: COUNTRY=JPN%2C111.191.2.113
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • その他の基本モジュール
  • JSON
  • JSON 関数
  • json_ decode
  • json_ encode
  • json_ last_ error

json_last_error> <json_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 16 Dec 2011

view this page in

[English             ] Change language
json_encode

(PHP 5 >= 5.2.0, PECL json >= 1.2.0)

json_encode — 値を JSON 形式にして返す

説明

string json_encode ( mixed $value [, int $options = 0 ] )

value を JSON 形式にした文字列を返します。

パラメータ

value

    エンコードする値。 resource 型以外の任意の型を指定できます。

    この関数は、UTF-8 エンコードされたデータでのみ動作します。

options

    JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS,
    JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES,
    JSON_FORCE_OBJECT, JSON_UNESCAPED_UNICODE からなるビットマスク。

返り値

成功した場合に、JSON エンコードされた文字列を返します。

変更履歴

バージ                                   説明
 ョン
5.4.0  option に JSON_BIGINT_AS_STRING、JSON_PRETTY_PRINT、
       JSON_UNESCAPED_SLASHES および JSON_UNESCAPED_UNICODE が追加されました。
5.3.3  option に JSON_NUMERIC_CHECK が追加されました。
5.3.0  options パラメータが追加されました。

例

例1 json_encode() の例

<?php
$arr = array('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4, 'e' => 5);

echo json_encode($arr);
?>

上の例の出力は以下となります。

{"a":1,"b":2,"c":3,"d":4,"e":5}

例2 json_encode() で、アクションのすべてのオプションを表示する例

<?php
$a = array('<foo>',"'bar'",'"baz"','&blong&', "\xc3\xa9");

echo "Normal: ",  json_encode($a), "\n";
echo "Tags: ",    json_encode($a, JSON_HEX_TAG), "\n";
echo "Apos: ",    json_encode($a, JSON_HEX_APOS), "\n";
echo "Quot: ",    json_encode($a, JSON_HEX_QUOT), "\n";
echo "Amp: ",     json_encode($a, JSON_HEX_AMP), "\n";
echo "Unicode: ", json_encode($a, JSON_UNESCAPED_UNICODE), "\n";
echo "All: ",     json_encode($a, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT 
| JSON_HEX_AMP | JSON_UNESCAPED_UNICODE), "\n\n";

$b = array();

echo "Empty array output as array: ", json_encode($b), "\n";
echo "Empty array output as object: ", json_encode($b, JSON_FORCE_OBJECT), "\n\
n";

$c = array(array(1,2,3));

echo "Non-associative array output as array: ", json_encode($c), "\n";
echo "Non-associative array output as object: ", json_encode
($c, JSON_FORCE_OBJECT), "\n\n";

$d = array('foo' => 'bar', 'baz' => 'long');

echo "Associative array always output as object: ", json_encode($d), "\n";
echo "Associative array always output as object: ", json_encode
($d, JSON_FORCE_OBJECT), "\n\n";
?>

上の例の出力は以下となります。

Normal: ["<foo>","'bar'","\"baz\"","&blong&","\u00e9"]
Tags: ["\u003Cfoo\u003E","'bar'","\"baz\"","&blong&","\u00e9"]
Apos: ["<foo>","\u0027bar\u0027","\"baz\"","&blong&","\u00e9"]
Quot: ["<foo>","'bar'","\u0022baz\u0022","&blong&","\u00e9"]
Amp: ["<foo>","'bar'","\"baz\"","\u0026blong\u0026","\u00e9"]
Unicode: ["<foo>","'bar'","\"baz\"","&blong&","é"]
All: ["\u003Cfoo\u003E","\u0027bar\u0027","\u0022baz\u0022","\u0026blong\u0026","é"]

Empty array output as array: []
Empty array output as object: {}

Non-associative array output as array: [[1,2,3]]
Non-associative array output as object: {"0":{"0":1,"1":2,"2":3}}

Associative array always output as object: {"foo":"bar","baz":"long"}
Associative array always output as object: {"foo":"bar","baz":"long"}

例3 シーケンシャルな配列とそうでない配列の例

<?php
echo "Sequential array".PHP_EOL;
$sequential = array("foo", "bar", "baz", "blong");
var_dump(
 $sequential,
 json_encode($sequential)
);

echo PHP_EOL."Non-sequential array".PHP_EOL;
$nonsequential = array(1=>"foo", 2=>"bar", 3=>"baz", 4=>"blong");
var_dump(
 $nonsequential,
 json_encode($nonsequential)
);

echo PHP_EOL."Sequential array with one key unset".PHP_EOL;
unset($sequential[1]);
var_dump(
 $sequential,
 json_encode($sequential)
);
?>

上の例の出力は以下となります。

Sequential array
array(4) {
  [0]=>
  string(3) "foo"
  [1]=>
  string(3) "bar"
  [2]=>
  string(3) "baz"
  [3]=>
  string(5) "blong"
}
string(27) "["foo","bar","baz","blong"]"

Non-sequential array
array(4) {
  [1]=>
  string(3) "foo"
  [2]=>
  string(3) "bar"
  [3]=>
  string(3) "baz"
  [4]=>
  string(5) "blong"
}
string(43) "{"1":"foo","2":"bar","3":"baz","4":"blong"}"

Sequential array with one key unset
array(3) {
  [0]=>
  string(3) "foo"
  [2]=>
  string(3) "baz"
  [3]=>
  string(5) "blong"
}
string(33) "{"0":"foo","2":"baz","3":"blong"}"

注意

    注意:

    エンコードに失敗した場合は、json_last_error() を使ってエラーの内容を調べる
    ことができます。

    注意:

    配列をエンコードする場合、もし配列のキーが 0 からはじまる連続した数値でなけ
    れば、すべてのキーを文字列としてエンコードします。そして、個々のキー/値のペ
    アを明示的に指定します。

参考

  • json_decode() - JSON 文字列をデコードする
  • json_last_error() - 直近に発生したエラーを返す



json_last_error> <json_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 16 Dec 2011
 
add a note add a note User Contributed Notes json_encode
trevalayan at hotmail dot com 13-Dec-2011 03:44
me.pierB offered a solution for dealing with UTF8 characters in json_encode.
Unfortunately there is a minor bug so here is the complete code with the
bugfix:

"Combining last 2 comments, json_decode and json_encode can gain great
advantages from following:"

<?php
function array_ut8_encode_recursive(&$itm) {
    $new = $itm;
    if (is_string($new)) return utf8_encode($new);
    if (is_array($new)) return array_map('array_ut8_encode_recursive', $new);
    if (is_object($new)) foreach (get_object_vars($new) as $key => $value )
$new->$key = array_ut8_encode_recursive($new->$key);
    return $new;
} // array_ut8_encode_recursive()

function array_ut8_decode_recursive(&$itm) {
    $new = $itm;
    if (is_string($new)) return utf8_decode($new);
    if (is_array($new)) return array_map('array_ut8_decode_recursive', $new);
    if (is_object($new)) foreach (get_object_vars($new) as $key => $value )
$new->$key = array_ut8_decode_recursive($new->$key);
    return $new;
} // array_ut8_decode_recursive()
?>

"json_encode(array_ut8_encode_recursive($data))"
bohwaz 24-Nov-2011 01:05
Are you sure you want to use JSON_NUMERIC_CHECK, really really sure?

Just watch this usecase:

<?php
// International phone number
json_encode(array('phone_number' => '+33123456789'), JSON_NUMERIC_CHECK);
?>

And then you get this JSON:

{"phone_number":33123456789}

Maybe it makes sense for PHP (as is_numeric('+33123456789') returns true), but
really, casting it as an int?!

So be careful when using JSON_NUMERIC_CHECK, it may mess up with your data!
me 17-Nov-2011 07:17
::fast utf8-encoding of strings::

json_encode( array_map( function($t){ return is_string($t) ? utf8_encode($t) :
$t; }, $array ) )
spm at bf-team dot com 09-Nov-2011 07:29
json and utf8?

Fast Easy Method:)

Encode: json_encode(array_map('base64_encode', $array));

Decode: array_map('base64_decode', json_decode($array);
mmi at uhb-consulting dot de 08-Nov-2011 03:59
When you have trouble with json_encode and German umlauts. json_encode converts
Strings to NULL when detecting umlauts not being UTF8encoded.

Here's another recursive UTF8 conversion function and vice-versa. The object
handling might be buggy but works for me.

<?php
function array_utf8_encode_recursive($dat)
        { if (is_string($dat)) {
            return utf8_encode($dat);
          }
          if (is_object($dat)) {
            $ovs= get_object_vars($dat);
            $new=$dat;
            foreach ($ovs as $k =>$v)    {
                $new->$k=array_utf8_encode_recursive($new->$k);
            }
            return $new;
          }
         
          if (!is_array($dat)) return $dat;
          $ret = array();
          foreach($dat as $i=>$d) $ret[$i] = array_utf8_encode_recursive($d);
          return $ret;
        }
function array_utf8_decode_recursive($dat)
        { if (is_string($dat)) {
            return utf8_decode($dat);
          }
          if (is_object($dat)) {
            $ovs= get_object_vars($dat);
            $new=$dat;
            foreach ($ovs as $k =>$v)    {
                $new->$k=array_utf8_decode_recursive($new->$k);
            }
            return $new;
          }
         
          if (!is_array($dat)) return $dat;
          $ret = array();
          foreach($dat as $i=>$d) $ret[$i] = array_utf8_decode_recursive($d);
          return $ret;
        }
?>
yangmuxiang at gmail dot com 28-Oct-2011 11:28
I use base64_encode, it works fine.

<?php
 $a = array('msg' => '中文');

 $a['msg'] = base64_encode($a['msg']);

 $json = json_encode($a);

 echo $json;

 $b = json_decode($json) ;
 echo base64_decode($b->msg);
?>
rob at weeverapps dot com 26-Sep-2011 04:15
If, for some reason you need to force a single object to be an array, you can
use array_values() -- this can be necessary if you have an array with only one
entry, as json_encode will assign it as an object otherwise :

<?php
$object[0] = array("foo" => "bar", 12 => true);

$encoded_object = json_encode($object);
?>

output:

{"1": {"foo": "bar", "12": "true"}}

<?php $encoded = json_encode(array_values($object)); ?>

output:

[{"foo": "bar", "12": "true"}]
devilan (REMOVEIT) (at) o2 (dot) pl 15-Sep-2011 07:39
For PHP5.3 users who want to emulate JSON_UNESCAPED_UNICODE, there is simple
way to do it:
<?php
function my_json_encode($arr)
{
        //convmap since 0x80 char codes so it takes all multibyte codes (above
ASCII 127). So such characters are being "hidden" from normal json_encoding
        array_walk_recursive($arr, function (&$item, $key) { if (is_string
($item)) $item = mb_encode_numericentity($item, array (0x80, 0xffff, 0,
0xffff), 'UTF-8'); });
        return mb_decode_numericentity(json_encode($arr), array (0x80, 0xffff,
0, 0xffff), 'UTF-8');

}
?>
1rsv dog mail point ru 12-Sep-2011 11:19
Some time you may need to encode a javascript function into a JSON object.
json_encode does not support it yet.

array example:

<?php
$series = array("name"=>"N51",
                "data"=>array(1024,
                              array("y"=>2048,
                                    "events"=>array("mouseOver"=>'function()
{$reporting.html(\'description of value\');}')
                                   ),
                              4096)
               );
json_encode($series);
?>

output:

{"name":"N51","data":[1024,{"y":2048,"events":{"mouseOver":"function()
{$reporting.html('description of value');}"}},4096]}

<?php json_encode_jsfunc($series); ?>
output:

{"name":"N51","data":[1024,{"y":2048,"events":{"mouseOver":function()
{$reporting.html('description of value');}}},4096]}

The difference is quotes around function, there should not be quotes.

<?php
function json_encode_jsfunc($input=array(), $funcs=array(), $level=0)
 {
  foreach($input as $key=>$value)
         {
          if (is_array($value))
             {
              $ret = json_encode_jsfunc($value, $funcs, 1);
              $input[$key]=$ret[0];
              $funcs=$ret[1];
             }
          else
             {
              if (substr($value,0,10)=='function()')
                 {
                  $func_key="#".uniqid()."#";
                  $funcs[$func_key]=$value;
                  $input[$key]=$func_key;
                 }
             }
         }
  if ($level==1)
     {
      return array($input, $funcs);
     }
  else
     {
      $input_json = json_encode($input);
      foreach($funcs as $key=>$value)
             {
              $input_json = str_replace('"'.$key.'"', $value, $input_json);
             }
      return $input_json;
     }
 }
?>
anonymous at gmail dot com 12-Sep-2011 12:53
Since PHP5.3 does not yet have JSON_UNESCAPED_UNICODE I had to find a way of
leaving the unicode characters un-escaped in the json:
<?php
        array_walk_recursive($array, function(&$item, $key) {
            if(is_string($item)) {
                $item = htmlentities($item);
            }
        });
        $json = json_encode($array);
        $rson = html_entity_decode($rson);
?>
grkworld1 at yahoo dot co dot in 07-Sep-2011 09:45
copy the php tagged code in a page
this is use full for multy dimention array

<?php

function arr_2_str($arr,$counter=1,$str="")
{
    foreach( $arr as $key=>$value)
    {
        if(is_array($value))
        {
            $str.= $key."=$counter>".arr_2_str($value,($counter+1))."=
".$counter.">~Y~|".$counter."|";
        }
        else
        {
            $str.=$key."=$counter>".$value."|$counter|";
        }
    }
    return rtrim($str,"|$counter|");
}

function str_2_arr($str,$counter=1,$arr=array(),$temparr=array())
{
    $temparr=explode("|$counter|",$str);
   
    foreach( $temparr as $key=>$value)
    {
        $t1=explode("=$counter>",$value);
        $kk=$t1[0];
        $vv=$t1[1];
        if ($t1[2]=="~Y~")
        {
            $arr[$kk]=str_2_arr($vv,($counter+1));
        }
        else
        {
            $arr[$kk]=$vv;
        }
       
    }
    return $arr;
}

$arr=array();

$arr[1]="a";
$arr[2][1]="b";
$arr[2][2]="c";
$arr[2][3][1]="d";
$arr[2][3][2][1]="e1";
$arr[2][3][2][2]="e2";
$arr[2][3][3]="f";
print "<pre>";

print_r($arr);

print "<br><br><br>";

print $ssttrr=arr_2_str($arr);

print "<br><br><br>";

print_r(str_2_arr($ssttrr));

/*print "<br><br><br>";
print "use of json";
print "<br><br><br>";
print $sstr=json_encode($arr);
print "<br><br><br>";
print_r(json_decode($sstr));*/

print "</pre>";

?>
Tibor Halter 14-Aug-2011 12:21
json_encode($binary) problem: it results in an empty string "" without error.

You will see this happening when encoding binary images, for example.

Use utf8_encode first.

<?php

    $data = 'éáíúűóüöäÍÓ';
    $json = json_encode( utf8_encode($data) );

    // [..]

    $data = utf8_decode( json_decode($json) );

?>
Rijk van Wel 07-Jul-2011 09:18
The JSON_NUMERIC_CHECK flag introduced in 5.3.0 comes in very handy when
handling numbers encapsulated in a string (database results and post requests
are always encoded as string types, for example). Sending over variables from a
database result directly (as string) would cause the json_encode() function to
quote them, which in turn would make the Javascript store them as strings. As
Javascript isn't loosely typed, some libraries could break on this, when
attempting to use one of those variables as row id in a data store for
instance. Using the aforementioned flag can prevent this from happening.

<?php
$arr = array( 'row_id' => '1', 'name' => 'George' ); // fictional db result
echo json_encode( $arr, JSON_NUMERIC_CHECK ); // {"row_id":1,"name":"George"}
?>
Mr Swordsteel 05-Jun-2011 02:38
So i like to use ISO-8859-1 and a lot of åäöÅÄÖ and not that much for UTF-8 but
i need some json stuff so this is what I'm trying to use this lite thing i
made...

<?php
function my_json_encode($in) {
  $_escape = function ($str) {
    return addcslashes($str, "\v\t\n\r\f\"\\/");
  };
  $out = "";
  if (is_object($in)) {
    $class_vars = get_object_vars(($in));
    $arr = array();
    foreach ($class_vars as $key => $val) {
      $arr[$key] = "\"{$_escape($key)}\":\"{$val}\"";
    }
    $val = implode(',', $arr);
    $out .= "{{$val}}";
  }elseif (is_array($in)) {
    $obj = false;
    $arr = array();
    foreach($in AS $key => $val) {
      if(!is_numeric($key)) {
        $obj = true;
      }
      $arr[$key] = my_json_encode($val);
    }
    if($obj) {
      foreach($arr AS $key => $val) {
        $arr[$key] = "\"{$_escape($key)}\":{$val}";
      }
      $val = implode(',', $arr);
      $out .= "{{$val}}";
    }else {
      $val = implode(',', $arr);
      $out .= "[{$val}]";
    }
  }elseif (is_bool($in)) {
    $out .= $in ? 'true' : 'false';
  }elseif (is_null($in)) {
    $out .= 'null';
  }elseif (is_string($in)) {
    $out .= "\"{$_escape($in)}\"";
  }else {
    $out .= $in;
  }
  return "{$out}";
}
?>

have fun make money off it or what you like with you code... this is for
everyone...
Joe 06-May-2011 06:24
Just FYI, check out these other registered long constants from the PHP source
code for json_d/ecode:

JSON_PRETTY_PRINT
JSON_UNESCAPED_SLASHES
JSON_NUMERIC_CHECK

I certainly look forward to these being fully included, especially the pretty
print option for proof reading of javascript config props sent to things like
Highcharts.
pvl dot kolensikov at gmail dot com 28-Mar-2011 04:35
As json_encode() is recursive, you can use it to serialize whole structure of
objects.

<?php
class A {
    public $a = 1;
    public $b = 2;
    public $collection = array();

    function  __construct(){
        for ( $i=3; $i-->0;){
            array_push($this->collection, new B);
        }
    }
}

class B {
    public $a = 1;
    public $b = 2;
}

echo json_encode(new A);
?>

Will give:

{
    "a":1,
    "b":2,
    "collection":[{
        "a":1,
        "b":2
    },{
        "a":1,
        "b":2
    },{
        "a":1,
        "b":2
    }]
}
Mathias Leppich 25-Feb-2011 06:29
If you need a json_encode / json_decode which is array/object/assoc-array you
might want to use: http://gist.github.com/820694

<?php
$dataIn = (object)array(
    "assoc" => array("cow"=>"moo"),
    "object" => (object)array("cat"=>"miao"),
);
/*
== IN
object(stdClass)#2 (2) {
  ["assoc"]=>
  array(1) {
    ["cow"]=>
    string(3) "moo"
  }
  ["object"]=>
  object(stdClass)#1 (1) {
    ["cat"]=>
    string(4) "miao"
  }
}

== JSON
{"assoc":{"_PHP_ASSOC":{"cow":"moo"}},"object":{"cat":"miao"}}

== OUT
object(stdClass)#4 (2) {
  ["assoc"]=>
  array(1) {
    ["cow"]=>
    string(3) "moo"
  }
  ["object"]=>
  object(stdClass)#7 (1) {
    ["cat"]=>
    string(4) "miao"
  }
}
*/
?>
Joao Neto 16-Feb-2011 12:36
To solve the "problem" with encoded UTF8 chars, is easy:

for example:

<?php
$arr = array( 'áéíóúçã', 'áááééé´rŕŕ' );

echo json_encode( $arr );

foreach ($arr as &$a) {
  $a = ascii_to_entities( $a );
}

echo json_encode( $arr );

function ascii_to_entities($str)
    {
       $count    = 1;
       $out    = '';
       $temp    = array();
   
       for ($i = 0, $s = strlen($str); $i < $s; $i++)
       {
           $ordinal = ord($str[$i]);
   
           if ($ordinal < 128)
           {
                if (count($temp) == 1)
                {
                    $out  .= '&#'.array_shift($temp).';';
                    $count = 1;
                }
           
                $out .= $str[$i];
           }
           else
           {
               if (count($temp) == 0)
               {
                   $count = ($ordinal < 224) ? 2 : 3;
               }
       
               $temp[] = $ordinal;
       
               if (count($temp) == $count)
               {
                   $number = ($count == 3) ? (($temp['0'] % 16) * 4096) +
(($temp['1'] % 64) * 64) +
($temp['2'] % 64) : (($temp['0'] % 32) * 64) +
($temp['1'] % 64);

                   $out .= '&#'.$number.';';
                   $count = 1;
                   $temp = array();
               }
           }
       }

       return $out;
    }
?>

RESULT:

["\u00e1\u00e9\u00ed\u00f3\u00fa\u00e7\u00e3",
"\u00e1\u00e1\u00e1\u00e9\u00e9\u00e9\u00b4r\u0155\u0155"]

Array ( [0] => áéíóúçã [1] => áááééé´rŕŕ )

["áéíóúçã","áááééé´rŕŕ"]

Array ( [0] => áéíóúçã [1] => áááééé´rŕŕ )
vakondweb at gmail dot com 01-Feb-2011 09:01
json_encode() only works with UTF-8 charset.

In case if you work with other charset, use this very simple solution instead
of json_encode:

<?php
//$return_arr = the array of data to json encode
//$out = the output of the function
//don't forget to escape the data before use it!

$out = '["' . implode('","', $return_arr) . '"]';
?>
bohwaz 26-Jan-2011 10:00
This is intended to be a simple readable json encode function for PHP 5.3+ (and
licensed under GNU/AGPLv3 or GPLv3 like you prefer):

<?php

function json_readable_encode($in, $indent = 0, $from_array = false)
{
    $_myself = __FUNCTION__;
    $_escape = function ($str)
    {
        return preg_replace("!([\b\t\n\r\f\"\\'])!", "\\\\\\1", $str);
    };

    $out = '';

    foreach ($in as $key=>$value)
    {
        $out .= str_repeat("\t", $indent + 1);
        $out .= "\"".$_escape((string)$key)."\": ";

        if (is_object($value) || is_array($value))
        {
            $out .= "\n";
            $out .= $_myself($value, $indent + 1);
        }
        elseif (is_bool($value))
        {
            $out .= $value ? 'true' : 'false';
        }
        elseif (is_null($value))
        {
            $out .= 'null';
        }
        elseif (is_string($value))
        {
            $out .= "\"" . $_escape($value) ."\"";
        }
        else
        {
            $out .= $value;
        }

        $out .= ",\n";
    }

    if (!empty($out))
    {
        $out = substr($out, 0, -2);
    }

    $out = str_repeat("\t", $indent) . "{\n" . $out;
    $out .= "\n" . str_repeat("\t", $indent) . "}";

    return $out;
}

?>
dan at elearnapp dot com 13-Jan-2011 08:01
If you need to force an object (ex: empty array) you can also do:

         <?php json_encode( (object)$arr ); ?>

which acts the same as

         <?php json_encode($arr, JSON_FORCE_OBJECT); ?>
marc at leftek dot com 23-Dec-2010 06:08
Anybody having empty arrays and needing the JSON_FORCE_OBJECT option but not
using 5.3 yet, you can substitute assigning an empty object:

<?php
    if (empty($array)) $array = (object) null;
    $return = json_encode($array);
?>
rdheijer at reestyle dot net 21-Dec-2010 10:11
You may run into trouble when you need to call functions. In my case I had to
fire a function based on a button pressed in the flexigrid javascript
component.

My solution in the project was:

<?php

$jsonify = array('onpress'=>'functionName');

// The part between braces in the regex is somewhat rough
// but it will do the job. Afterall, you don't want this to be
// used by a visitor :)
$regex = '/"onpress":"([\w\-\.]+)"/i';
$replace = '"onpress":$1';
$jsonified = preg_replace($regex, $replace, json_encode($jsonify));

?>

But you can extend this for your own needs. By altering the regex and replace
vars:

<?php

$replace = '"$1":$2';
$regex = '/"(onpress|onclick|onmouseover|onmouseout)":"([\w_\-\.]+)"/i';

?>

Unfortunately you have to specify each call reference, but it does give you
full control over what to and what not to.
Andre M 06-Dec-2010 12:23
Regarding encoding issues, if you make sure the PHP files containing your
strings are encoded in UTF-8, you shouldn't need to call utf8_encode.
spam dot here dot pls at hotmail dot com 17-Nov-2010 08:42
Another way for pre-5.2.0 PHP users is using rawurlencode() in PHP to encode a
string and decodeURIComponent() in javascript to decode it. I have written
following class to handle PHP arrays and convert them to javascript format. It
uses object notation for associative arrays and arrays for the other. Nesting
is supported. True, false, integers, floats and null values are presented in
respective javascript syntax.

Use: convert an array in PHP using this class, load it into the browser using
ajax and then decode the strings in the resulting object using javascript
function decodeData (below).

All of the example results have passed json validator so it shoud be allright.
Feel free to use this.

PHP CLASS - encoding arrays
=======

<?php

class custom_json {

    /**
     * Convert array to javascript object/array
     * @param array $array the array
     * @return string
     */
    public static function encode($array)
    {

        // determine type
        if(is_numeric(key($array))) {

            // indexed (list)
            $output = '[';
            for($i = 0, $last = (sizeof($array) - 1); isset($array[$i]); ++$i)
{
                if(is_array($array[$i])) $output .= self::encode($array[$i]);
                else  $output .= self::_val($array[$i]);
                if($i !== $last) $output .= ',';
            }
            $output .= ']';

        } else {

            // associative (object)
            $output = '{';
            $last = sizeof($array) - 1;
            $i = 0;
            foreach($array as $key => $value) {
                $output .= '"'.$key.'":';
                if(is_array($value)) $output .= self::encode($value);
                else  $output .= self::_val($value);
                if($i !== $last) $output .= ',';
                ++$i;
            }
            $output .= '}';

        }

        // return
        return $output;

    }

    /**
     * [INTERNAL] Format value
     * @param mixed $val the value
     * @return string
     */
    private static function _val($val)
    {
        if(is_string($val)) return '"'.rawurlencode($val).'"';
        elseif(is_int($val)) return sprintf('%d', $val);
        elseif(is_float($val)) return sprintf('%F', $val);
        elseif(is_bool($val)) return ($val ? 'true' : 'false');
        else  return 'null';
    }

}

// prints ["apple","banana","blueberry"]
echo custom_json::encode(array('apple', 'banana', 'blueberry'));

// prints {"name":"orange","type":"fruit"}
echo custom_json::encode(array('name' => 'orange', 'type' => 'fruit'));

// prints: ** try it yourself, cannot post long lines here **
$big_test = array(
    array(
        'name' => array('John', 'Smith'),
        'age' => 27,
        'sex' => 0,
        'height' => 180.53,
        'is_human' => true,
        'string' => 'Hello',
    ),
    array(
        'name' => array('Green', 'Alien'),
        'age' => 642,
        'sex' => null,
        'height' => 92.21,
        'is_human' => false,
        'string' => 'こんにちは！', // test utf8 here
    )
);

echo custom_json::encode($big_test);

?>

JAVASCRIPT FUNCTION - decode rawurlencoded() strings
==================
function decodeData(data) {
        for(var item in data) {
            var type = typeof data[item];
            if(type === 'object') decodeData(data[item]);
            else if(type === 'string') data[item] = decodeURIComponent(data
[item]);
        }
    }
boukeversteegh at gmail dot com 10-Nov-2010 02:02
For users of php 5.1.6 or lower, a native json_encode function. This version
handles objects, and makes proper distinction between [lists] and {associative
arrays}, mixed arrays work as well. It can handle newlines and quotes in both
keys and data.

This function will convert non-ascii symbols to "\uXXXX" format as does
json_encode.

Besides that, it outputs exactly the same string as json_encode. Including
UTF-8 encoded 2-, 3- and 4-byte characters. It is a bit faster than PEAR/
JSON::encode, but still slow compared to php 5.3's json_encode. It encodes any
variable type exactly as the original.

Relative speeds:
PHP json_encode: 1x
__json_encode: 31x
PEAR/JSON: 46x

NOTE: I assume the input will be valid UTF-8. I don't know what happens if your
data contains illegal Unicode sequences. I tried to make the code fast and
compact.

<?php
function __json_encode( $data ) {           
    if( is_array($data) || is_object($data) ) {
        $islist = is_array($data) && ( empty($data) || array_keys($data) ===
range(0,count($data)-1) );
       
        if( $islist ) {
            $json = '[' . implode(',', array_map('__json_encode', $data) ) . ']
';
        } else {
            $items = Array();
            foreach( $data as $key => $value ) {
                $items[] = __json_encode("$key") . ':' . __json_encode($value);
            }
            $json = '{' . implode(',', $items) . '}';
        }
    } elseif( is_string($data) ) {
        # Escape non-printable or Non-ASCII characters.
        # I also put the \\ character first, as suggested in comments on the
'addclashes' page.
        $string = '"' . addcslashes($data, "\\\"\n\r\t/" . chr(8) . chr(12)) .
'"';
        $json    = '';
        $len    = strlen($string);
        # Convert UTF-8 to Hexadecimal Codepoints.
        for( $i = 0; $i < $len; $i++ ) {
           
            $char = $string[$i];
            $c1 = ord($char);
           
            # Single byte;
            if( $c1 <128 ) {
                $json .= ($c1 > 31) ? $char : sprintf("\\u%04x", $c1);
                continue;
            }
           
            # Double byte
            $c2 = ord($string[++$i]);
            if ( ($c1 & 32) === 0 ) {
                $json .= sprintf("\\u%04x", ($c1 - 192) * 64 + $c2 - 128);
                continue;
            }
           
            # Triple
            $c3 = ord($string[++$i]);
            if( ($c1 & 16) === 0 ) {
                $json .= sprintf("\\u%04x", (($c1 - 224) <<12) + (($c2 - 128)
<< 6) + ($c3 - 128));
                continue;
            }
               
            # Quadruple
            $c4 = ord($string[++$i]);
            if( ($c1 & 8 ) === 0 ) {
                $u = (($c1 & 15) << 2) + (($c2>>4) & 3) - 1;
           
                $w1 = (54<<10) + ($u<<6) + (($c2 & 15) << 2) + (($c3>>4) & 3);
                $w2 = (55<<10) + (($c3 & 15)<<6) + ($c4-128);
                $json .= sprintf("\\u%04x\\u%04x", $w1, $w2);
            }
        }
    } else {
        # int, floats, bools, null
        $json = strtolower(var_export( $data, true ));
    }
    return $json;
}
?>

[EDIT BY danbrown AT php DOT net: Contains a bugfix by the original poster on
08-DEC-2010 with the following message: "I discovered a rather bad bug in my
__json_encode function below. On versions prior to php 5.2.5, all 'f'
characters are escaped to '\f'. This is because addcslashes in php < 5.2
doesn't understand \f as 'formfeed'."]
php at ianco dot co dot uk 29-Oct-2010 11:02
Note that json_encode always escapes a solidus (forward slash, %x2F).
This may be a problem if you are encoding a URL.
It's been recognised and fixed in September 2010:
http://bugs.php.net/bug.php?id=49366
But escaping will still be the default behaviour.
A crude repair can be done with
str_replace('\\/', '/', $jsonEncoded)
josh [at] goals.com 23-Oct-2010 07:31
For anyone wondering whether umbrae's JSON pretty-printer will output invalid
JSON (I did), I ran some tests taking my valid JSON and replacing string values
with each of the possible edge cases: [, {, ,, :, ", }, and ]. I then ran the
output through JSONLint just to verify.

So far as I can tell, nothing breaks in these situations, and everything
pretty-prints as expected.

That said, quotes " will produce invalid JSON, but this is only an issue if
you're using json_encode() and just expect PHP to magically escape your quotes.
You need to do the escaping yourself.
migprj at gmail dot com 19-Oct-2010 02:46
Because json_encode() only deals with utf8, it is often necessary to convert
all the string values inside an array to utf8. I've created these two
functions:   

<?php
function utf8_encode_all($dat) // -- It returns $dat encoded to UTF8
{
  if (is_string($dat)) return utf8_encode($dat);
  if (!is_array($dat)) return $dat;
  $ret = array();
  foreach($dat as $i=>$d) $ret[$i] = utf8_encode_all($d);
  return $ret;
}
/* ....... */

function utf8_decode_all($dat) // -- It returns $dat decoded from UTF8
{
  if (is_string($dat)) return utf8_decode($dat);
  if (!is_array($dat)) return $dat;
  $ret = array();
  foreach($dat as $i=>$d) $ret[$i] = utf8_decode_all($d);
  return $ret;
}
/* ....... */
?>
tomas at matfyz dot cz 05-Oct-2010 02:43
As json_encode() won't work with character sets other than UTF-8, this
expression allows to encode strings for JSON regardless of the character set:

<?php
str_replace("\0", "\\u0000", addcslashes($string, "\t\r\n\"\\"));
?>

You need to replace the nul character manually as addcslashes() won't do it
right way. But BEWARE, this is only solution for common strings, other "unusual
wild characters" like ESC, \b, \a etc. are not handled.
matt dot parlane at gmail dot com 05-Oct-2010 07:05
To save some space, at the risk of it being illegal JSON, strictly speaking:

<?php
$json = preg_replace('/"([a-zA-Z]+[a-zA-Z0-9]*)":/', '$1:', json_encode
($whatever));
?>
Dave - s10sys.com 09-Sep-2010 03:46
This may help others who are seeing null strings returned by json_encode().

This function will encode all array values to utf8 so they are safe for
json_encode();

usage:

<?php
json_encode(utf8json($dataArray));

function utf8json($inArray) {

    static $depth = 0;

    /* our return object */
    $newArray = array();

    /* safety recursion limit */
    $depth ++;
    if($depth >= '30') {
        return false;
    }

    /* step through inArray */
    foreach($inArray as $key=>$val) {
        if(is_array($val)) {
            /* recurse on array elements */
            $newArray[$key] = utf8json($val);
        } else {
            /* encode string values */
            $newArray[$key] = utf8_encode($val);
        }
    }

    /* return utf8 encoded array */
    return $newArray;
}
?>

[NOTE BY danbrown AT php DOT net: Includes a bugfix by (robbiz233 AT hotmail
DOT com) on 18-SEP-2010, to replace:
    $newArray[$key] = utf8json($inArray);
with:
    $newArray[$key] = utf8json($val);"
in the given function.]
nicolas dot baptiste at gmail dot com 18-Aug-2010 03:49
Beware of index arrays :

<?php
echo json_encode(array("test","test","test"));
echo json_encode(array(0=>"test",3=>"test",7=>"test"));
?>

Will give :

["test","test","test"]
{"0":"test","3":"test","7":"test"}

arrays are returned only if you don't define index.
gansbrest 06-Aug-2010 07:42
If you have problems with quotes when encoding numeric data retrieved from the
database, you can just cast that value to integer and there will be no quotes:

<?php
$testArr['key'] = '1';
print json_encode($testArr);
?>

===> {"key":"1"}

<?php
$testArr['key'] = (int)'1';
print json_encode($testArr);
?>

===> {"key":1}

Don't forget that you have to deal with numbers, otherwise your string will be
converted to 0.
Arne Bech 20-Jul-2010 07:00
To battle the quoting of numbers when encoding data retrieved from mysql you
could do a simple preg_replace() to remove the quotes on numbers.

This has worked for me:
<?php
$json = json_encode($dataFromMysql);
$json = preg_replace('/"(-?\d+\.?\d*)"/', '$1', $json);
?>
mic dot sumner at gmail dot com 02-Jul-2010 01:39
Hey everyone,

In my application, I had objects that modeled database rows with a few one to
many relationships, so one object may have an array of other objects.

I wanted to make the object properties private and use getters and setters, but
I needed them to be serializable to json without losing the private variables.
(I wanted to promote good coding practices but I needed the properties on the
client side.) Because of this, I needed to encode not only the normal private
properties but also properties that were arrays of other model objects. I
looked for awhile with no luck, so I coded my own:

You can place these methods in each of your classes, or put them in a base
class, as I've done. (But note that for this to work, the children classes must
declare their properties as protected so the parent class has access)

<?php
abstract class Model {
  
   public function toArray() {
        return $this->processArray(get_object_vars($this));
    }
   
    private function processArray($array) {
        foreach($array as $key => $value) {
            if (is_object($value)) {
                $array[$key] = $value->toArray();
            }
            if (is_array($value)) {
                $array[$key] = $this->processArray($value);
            }
        }
        // If the property isn't an object or array, leave it untouched
        return $array;
    }
   
    public function __toString() {
        return json_encode($this->toArray());
    }
  
}
?>

Externally, you can just call

<?php
    echo $theObject;
    //or
    echo json_encode($theObject->toArray());
?>

And you'll get the json for that object. Hope this helps someone!
ryan at ryanparman dot com 27-Mar-2010 09:36
I came across the "bug" where running json_encode() over a SimpleXML object was
ignoring the CDATA. I ran across http://bugs.php.net/42001 and http://
bugs.php.net/41976, and while I agree with the poster that the documentation
should clarify gotchas like this, I was able to figure out how to workaround
it.

You need to convert the SimpleXML object back into an XML string, then
re-import it back into SimpleXML using the LIBXML_NOCDATA option. Once you do
this, then you can use json_encode() and still get back the CDATA.

<?php
// Pretend we already have a complex SimpleXML object stored in $xml
$json = json_encode(new SimpleXMLElement($xml->asXML(), LIBXML_NOCDATA));
?>
5hunter5 at mail dot ru 17-Feb-2010 11:03
If I want to encode object whith all it's private and protected properties,
then I implements that methods in my object:

<?php
public function encodeJSON()
{
    foreach ($this as $key => $value)
    {
        $json->$key = $value;
    }
    return json_encode($json);
}
public function decodeJSON($json_str)
{
    $json = json_decode($json_str, 1);
    foreach ($json as $key => $value)
    {
        $this->$key = $value;
    }
}
?>

Or you may extend your class from base class, wich is implements that methods.

Found that much more simple than regular expressions with PHP serialized
objects...
olivier dot pons dot no dot spam at gmail dot com 22-Jan-2010 03:13
Be careful about one thing:
With a string key Php will consider it's an object:

<?php
echo json_encode(array('id'=>'testtext'));
echo json_encode(array('testtext'));
?>

Will give:

{"id":"testtext"}
["testtext"]

Beware of the string keys!
garydavis at gmail dot com 14-Jan-2010 03:38
If you are planning on using this function to serve a json file, it's important
to note that the json generated by this function is not ready to be consumed by
javascript until you wrap it in parens and add ";" to the end.

It took me a while to figure this out so I thought I'd save others the
aggravation.

<?php
    header('Content-Type: text/javascript; charset=utf8');
    header('Access-Control-Allow-Origin: http://www.example.com/');
    header('Access-Control-Max-Age: 3628800');
    header('Access-Control-Allow-Methods: GET, POST, PUT, DELETE');
   
    $file='rss.xml';
    $arr = simplexml_load_file($file);//this creates an object from the xml
file
    $json= '('.json_encode($arr).');'; //must wrap in parens and end with
semicolon
    print_r($_GET['callback'].$json); //callback is prepended for json-p
?>
me at daniel dot ie 15-Nov-2009 04:45
I had trouble putting the results of mysql_fetch_assoc() through json_encode:
numbers being returned from the query were being quoted in the JSON output
(i.e., they were being treated as strings). In order to fix this, it is
necessary to explicitly cast each element of the array before json_encode() is
called.

The following code uses metadata from a MySQL query result to do this casting.

<?php
    $mysql = mysql_connect('localhost', 'user', 'password');
    mysql_select_db('my_db');

    $query = 'select * from my_table';
    $res = mysql_query($query);

    // iterate over every row
    while ($row = mysql_fetch_assoc($res)) {
        // for every field in the result..
        for ($i=0; $i < mysql_num_fields($res); $i++) {
            $info = mysql_fetch_field($res, $i);
            $type = $info->type;

            // cast for real
            if ($type == 'real')
                $row[$info->name] = doubleval($row[$info->name]);
            // cast for int
            if ($type == 'int')
                $row[$info->name] = intval($row[$info->name]);
        }

        $rows[] = $row;
    }

    // JSON-ify all rows together as one big array
    echo json_encode($rows);
   
    mysql_close($mysql);
?>
rlz_ar at yahoo dot com 30-Oct-2009 04:35
If you have problems with json_encode() on arrays, you can force json_encode()
to encode as object, and then use json_decode() casting the result as array:

<?php

$myarray = Array('isa', 'dalawa', 'tatlo');

unset($myarray[1]);

$json_encoded_array = json_encode ( $myarray, JSON_FORCE_OBJECT );

// do whatever you want with your data
// then you can retrive the data doing:

$myarray = (array) json_decode ( $json_encoded_array );

?>
simoncpu was here 20-Oct-2009 09:18
A note of caution: If you are wondering why json_encode() encodes your PHP
array as a JSON object instead of a JSON array, you might want to double check
your array keys because json_encode() assumes that you array is an object if
your keys are not sequential.

e.g.:

<?php
$myarray = Array('isa', 'dalawa', 'tatlo');
var_dump($myarray);
/* output
array(3) {
  [0]=>
  string(3) "isa"
  [1]=>
  string(6) "dalawa"
  [2]=>
  string(5) "tatlo"
}
*/
?>

As you can see, the keys are sequential; $myarray will be correctly encoded as
a JSON array.

<?php
$myarray = Array('isa', 'dalawa', 'tatlo');

unset($myarray[1]);
var_dump($myarray);
/* output
array(2) {
  [0]=>
  string(3) "isa"
  [2]=>
  string(5) "tatlo"
}
*/
?>

Unsetting an element will also remove the keys. json_encode() will now assume
that this is an object, and will encode it as such.

SOLUTION: Use array_values() to re-index the array.
http://mike.eire.ca/ 10-Aug-2009 08:54
Note that this function does not always produce legal JSON.

<?php
$json = json_encode('foo');
var_dump($json);
//string(5) ""foo""

$json = json_encode(23);
var_dump($json);
//string(2) "23"
?>

According to the JSON spec, only objects and arrays can be represented; the
JSON_FORCE_OBJECT flag available since PHP 5.3 does not change this behaviour.
If you're using this to produce JSON that will be exchanged with other systems,
adjust your output accordingly.

<?php
$json = preg_replace('/^([^[{].*)$/', '[$1]', $json);
?>

The json_decode function accepts these JSON fragments without complaint.
damon1977 at gmail dot com 28-Jul-2009 07:41
I wrote a function to make JSON strings more readable. It's very useful for
debugging JSON output...

<?php
function jsonReadable($json, $html=FALSE) {
    $tabcount = 0;
    $result = '';
    $inquote = false;
    $ignorenext = false;
   
    if ($html) {
        $tab = "&nbsp;&nbsp;&nbsp;";
        $newline = "<br/>";
    } else {
        $tab = "\t";
        $newline = "\n";
    }
   
    for($i = 0; $i < strlen($json); $i++) {
        $char = $json[$i];
       
        if ($ignorenext) {
            $result .= $char;
            $ignorenext = false;
        } else {
            switch($char) {
                case '{':
                    $tabcount++;
                    $result .= $char . $newline . str_repeat($tab, $tabcount);
                    break;
                case '}':
                    $tabcount--;
                    $result = trim($result) . $newline . str_repeat($tab,
$tabcount) . $char;
                    break;
                case ',':
                    $result .= $char . $newline . str_repeat($tab, $tabcount);
                    break;
                case '"':
                    $inquote = !$inquote;
                    $result .= $char;
                    break;
                case '\\':
                    if ($inquote) $ignorenext = true;
                    $result .= $char;
                    break;
                default:
                    $result .= $char;
            }
        }
    }
   
    return $result;
}
?>
Istratov Vadim 10-Jun-2009 06:54
Be careful with floating values in some locales (e.g. russian) with comma (",")
as decimal point. Code:

<?php
setlocale(LC_ALL, 'ru_RU.utf8');

$arr = array('element' => 12.34);
echo json_encode( $arr );
?>

Output will be:
--------------
{"element":12,34}
--------------

Which is NOT a valid JSON markup. You should convert floating point variable to
strings or set locale to something like "LC_NUMERIC, 'en_US.utf8'" before using
json_encode.
other at killermonk dot com 20-May-2009 09:55
If you are trying to flatten a multi dimensional array, you can also just use
serialize and unserialize. It just depends on what you are trying to do.
Sam Barnum 21-Apr-2009 06:01
Note that if you try to encode an array containing non-utf values, you'll get
null values in the resulting JSON string.  You can batch-encode all the
elements of an array with the array_map function:
<?php
$encodedArray = array_map(utf8_encode, $rawArray);
?>
atrauzzi at gmail dot com 08-Apr-2009 07:39
Here's an idea for people trying to figure out an alternative to implode() to
flatten multi-dimensional arrays.

Use json_encode()!

I needed a way to create a hash from an array:

md5(json_encode($multiDimensionalArray)) does the trick!

Happy caching!
andyrusterholz at g-m-a-i-l dot c-o-m 27-Mar-2009 07:17
For anyone who would like to encode arrays into JSON, but is using PHP 4, and
doesn't want to wrangle PECL around, here is a function I wrote in PHP4 to
convert nested arrays into JSON.

Note that, because javascript converts JSON data into either nested named
objects OR vector arrays, it's quite difficult to represent mixed PHP arrays
(arrays with both numerical and associative indexes) well in JSON. This
function does something funky if you pass it a mixed array -- see the comments
for details.

I don't make a claim that this function is by any means complete (for example,
it doesn't handle objects) so if you have any improvements, go for it.

<?php

/**
 * Converts an associative array of arbitrary depth and dimension into JSON
representation.
 *
 * NOTE: If you pass in a mixed associative and vector array, it will prefix
each numerical
 * key with "key_". For example array("foo", "bar" => "baz") will be translated
into
 * {'key_0': 'foo', 'bar': 'baz'} but array("foo", "bar") would be translated
into [ 'foo', 'bar' ].
 *
 * @param $array The array to convert.
 * @return mixed The resulting JSON string, or false if the argument was not an
array.
 * @author Andy Rusterholz
 */
function array_to_json( $array ){

    if( !is_array( $array ) ){
        return false;
    }

    $associative = count( array_diff( array_keys($array), array_keys(
array_keys( $array )) ));
    if( $associative ){

        $construct = array();
        foreach( $array as $key => $value ){

            // We first copy each key/value pair into a staging array,
            // formatting each key and value properly as we go.

            // Format the key:
            if( is_numeric($key) ){
                $key = "key_$key";
            }
            $key = "'".addslashes($key)."'";

            // Format the value:
            if( is_array( $value )){
                $value = array_to_json( $value );
            } else if( !is_numeric( $value ) || is_string( $value ) ){
                $value = "'".addslashes($value)."'";
            }

            // Add to staging array:
            $construct[] = "$key: $value";
        }

        // Then we collapse the staging array into the JSON form:
        $result = "{ " . implode( ", ", $construct ) . " }";

    } else { // If the array is a vector (not associative):

        $construct = array();
        foreach( $array as $value ){

            // Format the value:
            if( is_array( $value )){
                $value = array_to_json( $value );
            } else if( !is_numeric( $value ) || is_string( $value ) ){
                $value = "'".addslashes($value)."'";
            }

            // Add to staging array:
            $construct[] = $value;
        }

        // Then we collapse the staging array into the JSON form:
        $result = "[ " . implode( ", ", $construct ) . " ]";
    }

    return $result;
}

?>
aangel at spam dot com 08-Feb-2009 01:50
Here is a bit more on creating an iterator to get at those pesky private/
protected variables:

<?php
   class Kit implements IteratorAggregate {

    public function __construct($var) {
        if (is_object($var)) {
            // if passed an object, we are cloning
           $this->kitID = $var->kitID;
           $this->kitName = $var->kitName;
           foreach ($var->productArray as $key => $value) {
               $this->productArray[$key] = (array)$value;
           }
        }
    }
   ...
    // Create an iterator because private/protected vars can't
    // be seen by json_encode().
    public function getIterator() {
        $iArray['kitID'] = $this->kitID;
        $iArray['kitName'] = $this->kitName;
        $iArray['productArray'] = (array)$this->productArray;
        return new ArrayIterator($iArray);
    }
}
?>

Calling something like  $t = json_encode($this->getIterator());  will give you
almost what you want:
<?php
{"kitID":"Kit_Essentials-Books.txt",
"kitName":"Essential Books",
"productArray":{"0470043601":{"Category":"Food","ASIN":"0470043601"} } }
?>

Notice that the productArray is converted to an object ignoring the cast I put
in front, which is not what I wanted. I haven't figured out how to make sure
that encodes as an array.

Regardless, bringing that JSON back into an object using json_decode() will
give you just a std object, and the only way I've found to get it into the
proper object type is to use a constructor that instantiates the object the way
it's supposed to be (see __construct($var) above). Like this:
<?php

        $newKit = new Kit(json_decode($t));
?>
Garrett 22-Oct-2008 06:17
A note about json_encode automatically quoting numbers:

It appears that the json_encode function pays attention to the data type of the
value. Let me explain what we came across:

We have found that when retrieving data from our database, there are occasions
when numbers appear as strings to json_encode which results in double quotes
around the values.

This can lead to problems within javascript functions expecting the values to
be numeric.

This was discovered when were were retrieving fields from the database which
contained serialized arrays. After unserializing them and sending them through
the json_encode function the numeric values in the original array were now
being treated as strings and showing up with double quotes around them.

The fix: Prior to encoding the array, send it to a function which checks for
numeric types and casts accordingly. Encoding from then on worked as expected.
stboisvert at nowantspam dot gmail dot com 14-Oct-2008 07:27
When Using Libraries such as Prototype you may find that once in a while when
you return what you believe to be a empty array it will have a different
behavior (vis a vis enumerables) than when you give it an associative array. To
"fix" this, on your JS you may want to look for extended object properties to
verify if it is an empty array or an ocject.

example:

<?php
if (transport.responseJSON['User'].length == undefined){
        var user = $H(transport.responseJSON['User']);
}else{
        var user = transport.responseJSON['User'];     
}
?>

Thanks goes out to :
jani@php.net

This is totally expected behaviour. Please read this:
http://www.json.org/

Note: array and assoc-array are different things. Latter being "object"
in json.

http://bugs.php.net/bug.php?id=45162

[RQuadling] See http://bugs.php.net/bug.php?id=47493. Fixed by using
json_encode(array(), JSON_FORCE_OBJECT);
spam.goes.in.here AT gmail.com 09-Aug-2008 06:05
For anyone who has run into the problem of private properties not being added,
you can simply implement the IteratorAggregate interface with the getIterator()
method. Add the properties you want to be included in the output into an array
in the getIterator() method and return it.
umbrae at gmail dot com 10-Jan-2008 06:21
Here's a quick function to pretty-print some JSON. Optimizations welcome, as
this was a 10-minute dealie without efficiency in mind:

<?php
// Pretty print some JSON
function json_format($json)
{
    $tab = "  ";
    $new_json = "";
    $indent_level = 0;
    $in_string = false;

    $json_obj = json_decode($json);

    if($json_obj === false)
        return false;

    $json = json_encode($json_obj);
    $len = strlen($json);

    for($c = 0; $c < $len; $c++)
    {
        $char = $json[$c];
        switch($char)
        {
            case '{':
            case '[':
                if(!$in_string)
                {
                    $new_json .= $char . "\n" . str_repeat($tab,
$indent_level+1);
                    $indent_level++;
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case '}':
            case ']':
                if(!$in_string)
                {
                    $indent_level--;
                    $new_json .= "\n" . str_repeat($tab, $indent_level) .
$char;
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case ',':
                if(!$in_string)
                {
                    $new_json .= ",\n" . str_repeat($tab, $indent_level);
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case ':':
                if(!$in_string)
                {
                    $new_json .= ": ";
                }
                else
                {
                    $new_json .= $char;
                }
                break;
            case '"':
                if($c > 0 && $json[$c-1] != '\\')
                {
                    $in_string = !$in_string;
                }
            default:
                $new_json .= $char;
                break;                   
        }
    }

    return $new_json;
}
?>
jjoss 24-Oct-2007 07:07
Another way to work with Russian characters. This procedure just handles
Cyrillic characters without UTF conversion. Thanks to JsHttpRequest developers.

<?php
function php2js($a=false)
{
  if (is_null($a)) return 'null';
  if ($a === false) return 'false';
  if ($a === true) return 'true';
  if (is_scalar($a))
  {
    if (is_float($a))
    {
      // Always use "." for floats.
      $a = str_replace(",", ".", strval($a));
    }

    // All scalars are converted to strings to avoid indeterminism.
    // PHP's "1" and 1 are equal for all PHP operators, but
    // JS's "1" and 1 are not. So if we pass "1" or 1 from the PHP backend,
    // we should get the same result in the JS frontend (string).
    // Character replacements for JSON.
    static $jsonReplaces = array(array("\\", "/", "\n", "\t", "\r", "\b", "\f",
'"'),
    array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));
    return '"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $a) . '"';
  }
  $isList = true;
  for ($i = 0, reset($a); $i < count($a); $i++, next($a))
  {
    if (key($a) !== $i)
    {
      $isList = false;
      break;
    }
  }
  $result = array();
  if ($isList)
  {
    foreach ($a as $v) $result[] = php2js($v);
    return '[ ' . join(', ', $result) . ' ]';
  }
  else
  {
    foreach ($a as $k => $v) $result[] = php2js($k).': '.php2js($v);
    return '{ ' . join(', ', $result) . ' }';
  }
}
?>
jfdsmit at gmail dot com 23-Oct-2007 02:31
json_encode also won't handle objects that do not directly expose their
internals but through the Iterator interface. These two function will take care
of that:

<?php

/**
 * Convert an object into an associative array
 *
 * This function converts an object into an associative array by iterating
 * over its public properties. Because this function uses the foreach
 * construct, Iterators are respected. It also works on arrays of objects.
 *
 * @return array
 */
function object_to_array($var) {
    $result = array();
    $references = array();

    // loop over elements/properties
    foreach ($var as $key => $value) {
        // recursively convert objects
        if (is_object($value) || is_array($value)) {
            // but prevent cycles
            if (!in_array($value, $references)) {
                $result[$key] = object_to_array($value);
                $references[] = $value;
            }
        } else {
            // simple values are untouched
            $result[$key] = $value;
        }
    }
    return $result;
}

/**
 * Convert a value to JSON
 *
 * This function returns a JSON representation of $param. It uses json_encode
 * to accomplish this, but converts objects and arrays containing objects to
 * associative arrays first. This way, objects that do not expose (all) their
 * properties directly but only through an Iterator interface are also encoded
 * correctly.
 */
function json_encode2($param) {
    if (is_object($param) || is_array($param)) {
        $param = object_to_array($param);
    }
    return json_encode($param);
}
dennispopel(at)gmail.com 26-Aug-2007 05:43
Obviously, this function has trouble encoding arrays with empty string keys
(''). I have just noticed that (because I was using a function in PHP under
PHP4). When I switched to PHP5's json_encode, I noticed that browsers could not
correctly parse the encoded data. More investigation maybe needed for a bug
report, but this quick note may save somebody several hours.

Also, it manifests on Linux in 5.2.1 (tested on two boxes), on my XP with
PHP5.2.3 json_encode() works just great! However, both 5.2.1 and 5.2.3 phpinfo
()s show that the json version is 1.2.1 so might be Linux issue
php at mikeboers dot com 05-Jul-2007 02:49
Here is a way to convert an object to an array which will include all protected
and private members before you send it to json_encode()

<?php

function objectArray( $object ) {

    if ( is_array( $object ))
        return $object ;
       
    if ( !is_object( $object ))
        return false ;
       
    $serial = serialize( $object ) ;
    $serial = preg_replace( '/O:\d+:".+?"/' ,'a' , $serial ) ;
    if( preg_match_all( '/s:\d+:"\\0.+?\\0(.+?)"/' , $serial, $ms,
PREG_SET_ORDER )) {
        foreach( $ms as $m ) {
            $serial = str_replace( $m[0], 's:'. strlen( $m[1] ) . ':"'.$m[1] .
'"', $serial ) ;
        }
    }
   
    return @unserialize( $serial ) ;

}

// TESTING

class A {
   
    public $a = 'public for a' ;
    protected $b = true ;
    private $c = 123 ;
   
}

class B {
   
    public $d = 'public for b' ;
    protected $e = false ;
    private $f = 456 ;
   
}

$a = new A() ;
$a -> d = new B() ;

echo '<pre>' ;
print_r( $a ) ;
print_r( objectArray( $a )) ;

?>

Cheers!

mike
Yi-Ren Chen at NCTU CSIE 02-May-2007 04:55
I write a function "php_json_encode"
for early version of php which support "multibyte" but doesn't support
"json_encode".
<?php
  function json_encode_string($in_str)
  {
    mb_internal_encoding("UTF-8");
    $convmap = array(0x80, 0xFFFF, 0, 0xFFFF);
    $str = "";
    for($i=mb_strlen($in_str)-1; $i>=0; $i--)
    {
      $mb_char = mb_substr($in_str, $i, 1);
      if(mb_ereg("&#(\\d+);", mb_encode_numericentity($mb_char, $convmap,
"UTF-8"), $match))
      {
        $str = sprintf("\\u%04x", $match[1]) . $str;
      }
      else
      {
        $str = $mb_char . $str;
      }
    }
    return $str;
  }
  function php_json_encode($arr)
  {
    $json_str = "";
    if(is_array($arr))
    {
      $pure_array = true;
      $array_length = count($arr);
      for($i=0;$i<$array_length;$i++)
      {
        if(! isset($arr[$i]))
        {
          $pure_array = false;
          break;
        }
      }
      if($pure_array)
      {
        $json_str ="[";
        $temp = array();
        for($i=0;$i<$array_length;$i++)       
        {
          $temp[] = sprintf("%s", php_json_encode($arr[$i]));
        }
        $json_str .= implode(",",$temp);
        $json_str .="]";
      }
      else
      {
        $json_str ="{";
        $temp = array();
        foreach($arr as $key => $value)
        {
          $temp[] = sprintf("\"%s\":%s", $key, php_json_encode($value));
        }
        $json_str .= implode(",",$temp);
        $json_str .="}";
      }
    }
    else
    {
      if(is_string($arr))
      {
        $json_str = "\"". json_encode_string($arr) . "\"";
      }
      else if(is_numeric($arr))
      {
        $json_str = $arr;
      }
      else
      {
        $json_str = "\"". json_encode_string($arr) . "\"";
      }
    }
    return $json_str;
  }
giunta dot gaetano at sea-aeroportimilano dot it 04-Sep-2006 03:11
Take care that json_encode() expects strings to be encoded to be in UTF8
format, while by default PHP strings are ISO-8859-1 encoded.
This means that

json_encode(array('àü'));

will produce a json representation of an empty string, while

json_encode(array(utf8_encode('àü')));

will work.
The same applies to decoding, too, of course...
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Dec 16 17:13:17 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • PCRE
  • PCRE 関数
  • preg_ filter
  • preg_ grep
  • preg_ last_ error
  • preg_ match_ all
  • preg_ match
  • preg_ quote
  • preg_ replace_ callback
  • preg_ replace
  • preg_ split

preg_quote> <preg_match_all
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Dec 2011

view this page in

[English             ] Change language
preg_match

(PHP 4, PHP 5)

preg_match — 正規表現によるマッチングを行う

説明

int preg_match ( string $pattern , string $subject [, array &$matches [, int
$flags = 0 [, int $offset = 0 ]]] )

pattern で指定した正規表現により subject を検索します。

パラメータ

pattern

    検索するパターンを表す文字列。

subject

    入力文字列。

matches

    matches を指定した場合、検索結果が代入されます。 $matches[0] にはパターン全
    体にマッチしたテキストが代入され、 $matches[1] には 1 番目ののキャプチャ用
    サブパターンにマッチした文字列が代入され、といったようになります。

flags

    flags には以下のフラグを指定できます。

    PREG_OFFSET_CAPTURE
        このフラグを設定した場合、各マッチに対応する文字列のオフセットも返され
        ます。これにより matches の値は配列となり、配列の要素 0 はマッチした文
        字列、要素 1は対象文字列中におけるマッチした文字列のオフセット値となる
        ことに注意してください。

offset

    通常、検索は対象文字列の先頭から開始されます。オプションのパラメータ offset
    を使用して検索の開始位置を (バイト単位で) 指定することも可能です。

        注意:

        offset を用いるのと、 substr($subject, $offset) を preg_match()の対象文
        字列として指定するのとは等価ではありません。これは、pattern には、 ^, $
        や (?<=x) のような言明を含めることができるためです。以下を比べてみてく
        ださい。
        <?php
        $subject = "abcdef";
        $pattern = '/^def/';
        preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
        print_r($matches);
        ?>

        上の例の出力は以下となります。

        Array
        (
        )

        一方、この例を見てください。

        <?php
        $subject = "abcdef";
        $pattern = '/^def/';
        preg_match($pattern, substr
        ($subject,3), $matches, PREG_OFFSET_CAPTURE);
        print_r($matches);
        ?>

        出力は以下のようになります。

        Array
        (
            [0] => Array
                (
                    [0] => def
                    [1] => 0
                )

        )


返り値

preg_match() は、pattern がマッチした回数を返します。つまり、0 回（マッチせず）
または 1 回となります。これは、最初にマッチした時点でpreg_match() は検索を止め
るためです。逆にpreg_match_all()は、 subject の終わりまで検索を続けます。
preg_match() は、エラーが発生した場合にFALSEを返します。

変更履歴

バー
ジョ                                    説明
 ン
5.3.6 offset が subject よりも長いときに FALSE を返すようになりました。
      名前つきサブパターンで、 (?<name>) や (?'name') といった構文が (?P<name>)
5.2.2 のほかに使えるようになりました. 以前のバージョンでは (?P<name>) しか使え
      ませんでした。
4.3.3 パラメータ offset が追加されました。
4.3.0 フラグ PREG_OFFSET_CAPTURE が追加されました。
4.3.0 パラメータ flags が追加されました。

例

例1 文字列 "php" を探す

<?php
// パターンのデリミタの後の "i" は、大小文字を区別しない検索を示す
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

例2 単語 "web" を探す

<?php
/* パターン内の \b は単語の境界を示す。このため、独立した単語の
 *  "web"にのみマッチし、"webbing" や "cobweb" のような単語の一部にはマッチしな
い */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}

if (preg_match("/\bweb\b/
i", "PHP is the website scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

例3 URL からドメイン名を得る

<?php
// get host name from URL
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// get last two segments of host name
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "domain name is: {$matches[0]}\n";
?>

上の例の出力は以下となります。

domain name is: php.net

例4 名前つきサブパターンの使用法

<?php

$str = 'foobar: 2008';

preg_match('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* PHP 5.2.2 (PCRE 7.0) 以降ではこの形式でも動作しますが、
 * 過去との互換性を考慮して上の形式のほうを推奨します */
// preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>

上の例の出力は以下となります。

Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [digit] => 2008
    [2] => 2008
)

注意

ヒント

ある文字列が他の文字列内に含まれているかどうかを調べるためだけに preg_match()
を使うのは避けた方が良いでしょう。 strpos() か strstr() 関数を使う方が速くなり
ます。

参考

  • PCRE のパターン
  • preg_match_all() - 繰り返し正規表現検索を行う
  • preg_replace() - 正規表現検索および置換を行う
  • preg_split() - 正規表現で文字列を分割する
  • preg_last_error() - 直近の PCRE 正規表現処理のエラーコードを返す



preg_quote> <preg_match_all
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Dec 2011
 
add a note add a note User Contributed Notes preg_match
Jonny 5 07-Dec-2011 05:55
Workaround for getting the offset in UTF-8
(in some cases mb_strpos might be an option as well)

<?php
if(preg_match($pattern,$haystack,$out,PREG_OFFSET_CAPTURE)) {
    $offset = strlen(utf8_decode(substr($haystack,0,$out[0][1])));
}
?>
force at md-t dot org 26-Sep-2011 06:38
Simple regex

Regex quick reference
[abc]     A single character: a, b or c
[^abc]     Any single character but a, b, or c
[a-z]     Any single character in the range a-z
[a-zA-Z]     Any single character in the range a-z or A-Z
^     Start of line
$     End of line
\A     Start of string
\z     End of string
.     Any single character
\s     Any whitespace character
\S     Any non-whitespace character
\d     Any digit
\D     Any non-digit
\w     Any word character (letter, number, underscore)
\W     Any non-word character
\b     Any word boundary character
(...)     Capture everything enclosed
(a|b)     a or b
a?     Zero or one of a
a*     Zero or more of a
a+     One or more of a
a{3}     Exactly 3 of a
a{3,}     3 or more of a
a{3,6}     Between 3 and 6 of a

options: i case insensitive m make dot match newlines x ignore whitespace in
regex o perform #{...} substitutions only once
cmallabon at homesfactory dot com 31-Aug-2011 05:28
Just an interesting note. Was just updating code to replace ereg() with strpos
() and preg_match and the thought occured that preg_match() could be optimized
to quit early when only searching if a string begins with something, for
example
<?php
if(preg_match("/^http/", $url))
{
 //do something
}
?>

 vs

<?php
if(strpos($url, "http") === 0)
{
//do something
}
?>

As I guessed, strpos() is always faster (about 2x) for short strings like a URL
but for very long strings of several paragraphs (e.g. a block of XML) when the
string doesn't start with the needle preg_match as twice as fast as strpos() as
it doesn't scan the entire string.

So, if you are searching long strings and expect it to normally be true (e.g.
validating XML), strpos() is a much faster BUT if you expect if to often fail,
preg_match is the better choice.
ayman2243 at gmail dot com 30-Aug-2011 11:55
highlight Search Words

<?php
function highlight($word, $subject) {
   
    $split_subject = explode(" ", $subject);
    $split_word = explode(" ", $word);

    foreach ($split_subject as $k => $v){
           foreach ($split_word as $k2 => $v2){
               if($v2 == $v){
                  
                   $split_subject[$k] = "<span class='highlight'>".$v."</span>
";
              
               }
           }
      }
     
      return implode(' ', $split_subject);
}
?>
Khalid_Moharram at hotmail dot com 25-Aug-2011 08:36
Well for anyone looking for email validation, according to the RFC
specifications (ONLY FOR ((ENGLISH ASCII)) E-Mails).

<?php
function email_valid($temp_email) {
######## Three functions to HELP ########
        function valid_dot_pos($email) {
            $str_len = strlen($email);
            for($i=0; $i<$str_len; $i++) {
                $current_element = $email[$i];
                if($current_element == "." && ($email[$i+1] == ".")) {
                    return false;
                    break;
                }
                else {

                }
            }
            return true;
        }
        function valid_local_part($local_part) {
            if(preg_match("/[^a-zA-Z0-9-_@.!#$%&'*\/+=?^`{\|}~]/",
$local_part)) {
                return false;
            }
            else {
                return true;
            }
        }
        function valid_domain_part($domain_part) {
            if(preg_match("/[^a-zA-Z0-9@#\[\].]/", $domain_part)) {
                return false;
            }
            elseif(preg_match("/[@]/", $domain_part) && preg_match("/[#]/",
$domain_part)) {
                return false;
            }
            elseif(preg_match("/[\[]/", $domain_part) || preg_match("/[\]]/",
$domain_part)) {
                $dot_pos = strrpos($domain_part, ".");
                if(($dot_pos < strrpos($domain_part, "]")) || (strrpos
($domain_part, "]") < strrpos($domain_part, "["))) {
                    return true;
                }
                elseif(preg_match("/[^0-9.]/", $domain_part)) {
                    return false;
                }
                else {
                    return false;
                }
            }
            else {
                return true;
            }
        }
        // trim() the entered E-Mail
        $str_trimmed = trim($temp_email);
        // find the @ position
        $at_pos = strrpos($str_trimmed, "@");
        // find the . position
        $dot_pos = strrpos($str_trimmed, ".");
        // this will cut the local part and return it in $local_part
        $local_part = substr($str_trimmed, 0, $at_pos);
        // this will cut the domain part and return it in $domain_part
        $domain_part = substr($str_trimmed, $at_pos);
        if(!isset($str_trimmed) || is_null($str_trimmed) || empty($str_trimmed)
|| $str_trimmed == "") {
            $this->email_status = "You must insert something";
            return false;
        }
        elseif(!valid_local_part($local_part)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(!valid_domain_part($domain_part)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif($at_pos > $dot_pos) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(!valid_local_part($local_part)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(($str_trimmed[$at_pos + 1]) == ".") {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(!preg_match("/[(@)]/", $str_trimmed) || !preg_match("/[(.)]/",
$str_trimmed)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        else {
            $this->email_status = "";
            return true;
        }
}
?>
workhorse at op dot pl 11-Aug-2011 07:53
Preg_match returns empty result trying to validate $subject with carriege
returns (/n/r).
To solve it one need to use /s modifier in $pattern string.
<?php
$pattern='/.*/s';
$valid=preg_match($pattern, $subject, $match);
?>
itworkarounds at gmail dot com 09-Aug-2011 04:08
You can use the following code to detect non-latin (Cyrilic, Arabic, Greek...)
characters:

<?php
preg_match("/^[a-zA-Z\p{Cyrillic}0-9\s\-]+$/u", "ABC abc 1234 АБВ абв");
?>
mohammad40g at gmail dot com 02-Aug-2011 04:23
This sample is for checking persian character:

<?php
   preg_match("/[\x{0600}-\x{06FF}\x]{1,32}/u", 'محمد');
?>
sun at drupal dot org 24-Jun-2011 12:56
Basic test for invalid UTF-8 that can hi-jack IE:

<?php
$valid = (preg_match('/^./us', $text) == 1);
?>
See http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/
drupal_validate_utf8/7 for details.

---

Test for valid UTF-8 and XML/XHTML character range compatibility:

<?php
$invalid = preg_match('@[^\x9\xA\xD\x20-\x{D7FF}\x{E000}-\x{FFFD}\x{10000}-\x
{10FFFF}]@u', $text)
?>
Ref: http://www.w3.org/TR/2000/REC-xml-20001006#charsets
juanmadss at gmail dot com 25-May-2011 11:00
Testing the speed of preg_match against stripos doing insensitive case search
in strings:

<?php
$string = "Hey, how are you? I'm a string.";

// PCRE
$start = microtime(true);
for ($i = 1; $i < 10000000; $i++) {
    $bool = preg_match('/you/i', $string);
}
$end = microtime(true);
$pcre_lasted = $end - $start; // 8.3078360557556

// Stripos, we believe in you
$start = microtime(true);
for ($i = 1; $i < 10000000; $i++) {
    $bool = stripos($string, 'you') !== false;
}
$end = microtime(true);
$stripos_lasted = $end - $start; // 6.0306038856506

echo "Preg_match lasted: {$pcre_lasted}<br />Stripos lasted: {$stripos_lasted}
";
?>

So unless you really need to test a string against a regular expression, always
use strpos / stripos and other string functions to find characters and strings
within other strings.
mulllhausen 16-May-2011 08:57
i do a fair bit of html scraping in conjunction with curl. i always need to
know if i have reached the right page or if the curl request failed. the main
problem i have encountered is html tags having unexpected spaces or other
characters (especially the &nbsp; character sequence) between them. for example
when requesting a page with a certain manner set of post or get variables the
response might be

<a href='blah'><span>data data data</span></a>

but requesting the same page with different post/get variables might give the
following result:

<a href='blah'>
         &nbsp;<span>data data data</span>
</a>

to match both of these tag sequences with the same pattern i use the [\S\s]*?
wildcard which basically means 'match anything at all...but not if you can help
it'

so the pattern for the above sequence would be:

<?php

$page1 = "........<a href='blah'><span>data data data</span></a>.........";

$page2 = "........<a href='blah'>
         &nbsp;<span>data data data</span>
</a>
........";

$w = "[\s\S]*?"; //ungreedy wildcard
$pattern = "/\<a href='blah'\>$w\<span\>data data data\<\/span\>$w\<\/a\>/";

if(preg_match($pattern, $page1, $matches)) echo "got to page 1. match:
[".print_r($matches, true)."]\n";
else echo "did not get to page 1\n";

if(preg_match($pattern, $page2, $matches)) echo "got to page 2. match:
[".print_r($matches, true)."]\n";
else echo "did not get to page 2\n";

?>
MrBull 20-Mar-2011 03:32
Sometimes its useful to negate a string. The first method which comes to mind
to do this is: [^(string)] but this of course won't work. There is a solution,
but it is not very well known. This is the simple piece of code on how a
negation of a string is done:

(?:(?!string).)

?: makes a subpattern (see http://www.php.net/manual/en/
regexp.reference.subpatterns.php) and ?! is a negative look ahead. You put the
negative look ahead in front of the dot because you want the regex engine to
first check if there is an occurrence of the string you are negating. Only if
it is not there, you want to match an arbitrary character.

Hope this helps some ppl.
arash dot hemmat at gmail dot com 03-Feb-2011 03:15
For those who search for a unicode regular expression example using preg_match
here it is:

Check for Persian digits
preg_match( "/[^\x{06F0}-\x{06F9}\x]+/u" , '۱۲۳۴۵۶۷۸۹۰' );
Frank 26-Jan-2011 08:12
If someone is from a country that accepts decimal numbers in format 9.00 and
9,00 (point or comma), number validation would be like that:
<?php
$number_check = "9,99";
if (preg_match( '/^[\-+]?[0-9]*\.*\,?[0-9]+$/', $number_check)) {
    return TRUE;
}
?>

However, if the number will be written in the database, most probably this
comma needs to be replaced with a dot.
This can be done with use of str_replace, i.e :
<?php
$number_database = str_replace("," , "." , $number_check);
?>
sainnr at gmail dot com 30-Dec-2010 02:12
This sample regexp may be useful if you are working with DB field types.

(?P<type>\w+)($|\((?P<length>(\d+|(.*)))\))

For example, if you are have a such type as "varchar(255)" or "text", the next
fragment

<?php
   $type = 'varchar(255)';  // type of field
   preg_match('/(?P<type>\w+)($|\((?P<length>(\d+|(.*)))\))/', $type, $field);
   print_r($field);
?>

will output something like this:
Array ( [0] => varchar(255) [type] => varchar [1] => varchar [2] => (255)
[length] => 255 [3] => 255 [4] => 255 )
ian_channing at hotmail dot com 27-Dec-2010 09:55
When trying to check a file path that could be windows or unix it took me quite
a few tries to get the escape characters right.

The Unix directory separator must be escaped once and the windows directory
separator must be escaped twice.

This will match path/to/file and path\to\file.exe

preg_match('/^[a-z0-9_.\/\\\]*$/i', $file_string);
SoN9ne at gmail dot com 08-Jun-2010 05:10
I have been working on a email system that will automatically generate a text
email from a given HTML email by using strip_tags().
The only issue I ran into, for my needs, were that the anchors would not keep
their links.
I search for a little while and could not find anything to strip the links from
the tags so I generated my own little snippet.
I am posting it here in hopes that others may find it useful and for later
reference.

A note to keep in mind:
I was primarily concerned with valid HTML so if attributes do no use ' or " to
contain the values then this will need to be tweaked.
If you can edit this to work better, please let me know.
<?php
/**
 * Replaces anchor tags with text
 * - Will search string and replace all anchor tags with text (case
insensitive)
 *
 * How it works:
 * - Searches string for an anchor tag, checks to make sure it matches the
criteria
 *         Anchor search criteria:
 *             - 1 - <a (must have the start of the anchor tag )
 *             - 2 - Can have any number of spaces or other attributes before
and after the href attribute
 *             - 3 - Must close the anchor tag
 *
 * - Once the check has passed it will then replace the anchor tag with the
string replacement
 * - The string replacement can be customized
 *
 * Know issue:
 * - This will not work for anchors that do not use a ' or " to contain the
attributes.
 *         (i.e.- <a href=http: //php.net>PHP.net</a> will not be replaced)
 */
function replaceAnchorsWithText($data) {
    /**
     * Had to modify $regex so it could post to the site... so I broke it into
6 parts.
     */
    $regex  = '/(<a\s*'; // Start of anchor tag
    $regex .= '(.*?)\s*'; // Any attributes or spaces that may or may not exist
    $regex .= 'href=[\'"]+?\s*(?P<link>\S+)\s*[\'"]+?'; // Grab the link
    $regex .= '\s*(.*?)\s*>\s*'; // Any attributes or spaces that may or may
not exist before closing tag
    $regex .= '(?P<name>\S+)'; // Grab the name
    $regex .= '\s*<\/a>)/i'; // Any number of spaces between the closing anchor
tag (case insensitive)
   
    if (is_array($data)) {
        // This is what will replace the link (modify to you liking)
        $data = "{$data['name']}({$data['link']})";
    }
    return preg_replace_callback($regex, 'replaceAnchorsWithText', $data);
}

$input  = 'Test 1: <a href="http: //php.net1">PHP.NET1</a>.<br />';
$input .= 'Test 2: <A name="test" HREF=\'HTTP: //PHP.NET2\' target="_blank">
PHP.NET2</A>.<BR />';
$input .= 'Test 3: <a hRef=http: //php.net3>php.net3</a><br />';
$input .= 'This last line had nothing to do with any of this';

echo replaceAnchorsWithText($input).'<hr/>';
?>
Will output:
Test 1: PHP.NET1(http: //php.net1).
Test 2: PHP.NET2(HTTP: //PHP.NET2).
Test 3: php.net3 (is still an anchor)
This last line had nothing to do with any of this

Posting to this site is painful...
Had to break up the regex and had to break the test links since it was being
flagged as spam...
teracci2002 09-Apr-2010 04:00
When you use preg_match() for security purpose or huge data processing,
mayby you should make consideration for backtrack_limit and recursion_limit.
http://www.php.net/manual/en/pcre.configuration.php

These limits may bring wrong matching result.
You can verify whether you hit these limits by checking preg_last_error().
http://www.php.net/manual/en/function.preg-last-error.php
Kae Cyphet 18-Mar-2010 02:29
for those coming over from ereg, preg_match can be quite intimidating. to get
started here is a migration tip.

<?php
if(ereg('[^0-9A-Za-z]',$test_string)) // will be true if characters arnt 0-9,
A-Z or a-z.

if(preg_match('/[^0-9A-Za-z]/',$test_string)) // this is the preg_match
version. the /'s are now required.
?>
plasma 22-Feb-2010 12:53
To extract scheme, host, path, ect. simply use

<?php

  $url  = 'http://name:pass@';
  $url .= 'example.com:10000';
  $url .= '/path/to/file.php?a=1&amp;b=2#anchor';

  $url_data = parse_url ( $url );

  print_r ( $url_data );

?>
___
prints out something like:

Array
(
    [scheme] => http
    [host] => wild.subdomain.orgy.domain.co.uk
    [port] => 10000
    [user] => name
    [pass] => pass
    [path] => /path/to/file.php
    [query] => a=1&b=2
    [fragment] => anchor
)

In my tests parse_url is up to 15x faster than preg_match(_all)!
Dr@ke 18-Feb-2010 03:58
Hello,
There is a bug with somes new PCRE versions (like:7.9 2009-04-1),
In patterns:
\w+ !== [a-zA-Z0-9]+

But it's ok, if i replace \w+ by [a-z0-9]+ or [a-zA-Z0-9]+
saberdream at live dot fr 10-Feb-2010 11:53
I made a function to circumvent the problem of length of a string... This
verifies that the link is an image.

<?php
function verifiesimage($lien, $limite) {
    if( preg_match('#^http:\/\/(.*)\.(gif|png|jpg)$#i', $lien) && strlen($lien)
< $limite )
    {
        $msg = TRUE; // link ok
    }
    else
    {
        $msg = FALSE; // the link isn't image
    }
    return $msg; // return TRUE or FALSE
}
?>

Example :

<?php
if(verifierimage($votrelien, 50) == TRUE)
{
    // we display the content...
}
?>
Anonymous 06-Feb-2010 04:00
The regular expression for breaking-down a URI reference into its components:

      ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
       12            3  4          5       6  7        8 9

Source: ietf.org/rfc/rfc2396.txt
cebelab at gmail dot com 24-Jan-2010 06:43
I noticed that in order to deal with UTF-8 texts, without having to recompile
php with the PCRE UTF-8 flag enabled, you can just add the following sequence
at the start of your pattern: (*UTF8)

for instance : '#(*UTF8)[[:alnum:]]#' will return TRUE for 'é' where '#
[[:alnum:]]#' will return FALSE

found this very very useful tip after hours of research over the web directly
in pcre website right here : http://www.pcre.org/pcre.txt
there are many further informations about UTF-8 support in the lib

hop that will help!

--
cedric
Stefan 17-Nov-2009 10:47
I spent a while replacing all my ereg() calls to preg_match(), since ereg() is
now deprecated and will not be supported as of v 6.0.

Just a warning regarding the conversion, the two functions behave very
similarly, but not exactly alike. Obviously, you will need to delimit your
pattern with '/' or '|' characters.

The difference that stumped me was that preg_replace overwrites the $matches
array regardless if a match was found. If no match was found, $matches is
simply empty.

ereg(), however, would leave $matches alone if a match was not found. In my
code, I had repeated calls to ereg, and was populating $matches with each
match. I was only interested in the last match. However, with preg_match, if
the very last call to the function did not result in a match, the $matches
array would be overwritten with a blank value.

Here is an example code snippet to illustrate:

<?php
$test = array('yes','no','yes','no','yes','no');

foreach ($test as $key=>$value) {
  ereg("yes",$value,$matches1);
  preg_match("|yes|",$value,$matches2);
}
  print "ereg result: $matches1[0]<br>";
  print "preg_match result: $matches2[0]<br>";
?>

The output is:
ereg result: yes
preg_match result:

($matches2[0] in this case is empty)

I believe the preg_match behavior is cleaner. I just thought I would report
this to hopefully save others some time.
ruakuu at NOSPAM dot com 04-Nov-2009 05:32
Was working on a site that needed japanese and alphabetic letters and needed to
validate input using preg_match, I tried using \p{script} but didn't work:

<?php
$pattern ='/^([-a-zA-Z0-9_\p{Katakana}\p{Hiragana}\p{Han}]*)$/u'; // Didn't
work
?>

So I tried with ranges and it worked:

<?php
$pattern ='/^[-a-zA-Z0-9_\x{30A0}-\x{30FF}'
         .'\x{3040}-\x{309F}\x{4E00}-\x{9FBF}\s]*$/u';
$match_string = '印刷最安ニキビ跡除去ゲームボーイ';

if (preg_match($pattern, $match_string)) {
    echo "Found - pattern $pattern";
} else {
    echo "Not found - pattern $pattern";
}
?>

U+4E00–U+9FBF Kanji
U+3040–U+309F Hiragana
U+30A0–U+30FF Katakana

Hope its useful, it took me several hours to figure it out.
Anonymous 12-Oct-2009 09:24
If your regular expression does not match with long input text when you think
it should, you might have hit the PCRE backtrack default limit of 100000. See
http://php.net/pcre.backtrack-limit.
splattermania at freenet dot de 01-Oct-2009 12:01
As I wasted lots of time finding a REAL regex for URLs and resulted in building
it on my own, I now have found one, that seems to work for all kinds of urls:

<?php
    $regex = "((https?|ftp)\:\/\/)?"; // SCHEME
    $regex .= "([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?"; //
User and Pass
    $regex .= "([a-z0-9-.]*)\.([a-z]{2,3})"; // Host or IP
    $regex .= "(\:[0-9]{2,5})?"; // Port
    $regex .= "(\/([a-z0-9+\$_-]\.?)+)*\/?"; // Path
    $regex .= "(\?[a-z+&\$_.-][a-z0-9;:@&%=+\/\$_.-]*)?"; // GET Query
    $regex .= "(#[a-z_.-][a-z0-9+\$_.-]*)?"; // Anchor
?>

Then, the correct way to check against the regex ist as follows:

<?php
       if(preg_match("/^$regex$/", $url))
       {
               return true;
       }
?>
luc _ santeramo at t yahoo dot com 03-Sep-2009 02:46
If you want to validate an email in one line, use filter_var() function !
http://fr.php.net/manual/en/function.filter-var.php

easy use, as described in the document example :
var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));
marcosc at tekar dot net 27-Aug-2009 04:31
When using accented characters and "ñ" (áéíóúñ), preg_match does not work. It
is a charset problem, use utf8_decode/decode to fix.
ian_channing at hotmail dot com 20-Aug-2009 01:13
This is a function that uses regular expressions to match against the various
VAT formats required across the EU.

<?php
/**
 * @param integer $country Country name
 * @param integer $vat_number VAT number to test e.g. GB123 4567 89
 * @return integer -1 if country not included OR 1 if the VAT Num matches for
the country OR 0 if no match
*/
function checkVatNumber( $country, $vat_number ) {
    switch($country) {
        case 'Austria':
            $regex = '/^(AT){0,1}U[0-9]{8}$/i';
            break;
        case 'Belgium':
            $regex = '/^(BE){0,1}[0]{0,1}[0-9]{9}$/i';
            break;
        case 'Bulgaria':
            $regex = '/^(BG){0,1}[0-9]{9,10}$/i';
            break;
        case 'Cyprus':
            $regex = '/^(CY){0,1}[0-9]{8}[A-Z]$/i';
            break;
        case 'Czech Republic':
            $regex = '/^(CZ){0,1}[0-9]{8,10}$/i';
            break;
        case 'Denmark':
            $regex = '/^(DK){0,1}([0-9]{2}[\ ]{0,1}){3}[0-9]{2}$/i';
            break;
        case 'Estonia':
        case 'Germany':
        case 'Greece':
        case 'Portugal':
            $regex = '/^(EE|EL|DE|PT){0,1}[0-9]{9}$/i';
            break;
        case 'France':
            $regex = '/^(FR){0,1}[0-9A-Z]{2}[\ ]{0,1}[0-9]{9}$/i';
            break;
        case 'Finland':
        case 'Hungary':
        case 'Luxembourg':
        case 'Malta':
        case 'Slovenia':
            $regex = '/^(FI|HU|LU|MT|SI){0,1}[0-9]{8}$/i';
            break;
        case 'Ireland':
            $regex = '/^(IE){0,1}[0-9][0-9A-Z\+\*][0-9]{5}[A-Z]$/i';
            break;
        case 'Italy':
        case 'Latvia':
            $regex = '/^(IT|LV){0,1}[0-9]{11}$/i';
            break;
        case 'Lithuania':
            $regex = '/^(LT){0,1}([0-9]{9}|[0-9]{12})$/i';
            break;
        case 'Netherlands':
            $regex = '/^(NL){0,1}[0-9]{9}B[0-9]{2}$/i';
            break;
        case 'Poland':
        case 'Slovakia':
            $regex = '/^(PL|SK){0,1}[0-9]{10}$/i';
            break;
        case 'Romania':
            $regex = '/^(RO){0,1}[0-9]{2,10}$/i';
            break;
        case 'Sweden':
            $regex = '/^(SE){0,1}[0-9]{12}$/i';
            break;
        case 'Spain':
            $regex = '/^(ES){0,1}([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}
[0-9A-Z])$/i';
            break;
        case 'United Kingdom':
            $regex = '/^(GB){0,1}([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]
{2})|([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]{2}[\ ]{0,1}[0-9]{3})|((GD|
HA)[0-9]{3})$/i';
            break;
        default:
            return -1;
            break;
    }
   
    return preg_match($regex, $vat_number);
}
?>
Rob 19-Aug-2009 07:03
The following function works well for validating ip addresses

<?php
function valid_ip($ip) {
    return preg_match("/^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])" .
            "(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/",
$ip);
}
?>
KOmaSHOOTER at gmx dot de 09-Aug-2009 01:12
reading files from a dir without "." or ".."
<?php
$handle = opendir('content/pages/');
$pages = array();
while (false !== ($file = readdir($handle))) {
      $case=preg_match("/^[.]/",$file,$out, PREG_OFFSET_CAPTURE);
      //echo($case);
      if(!$case){
       echo("$file<br />");
       array_push($pages,$file);
       }
}
echo(count($pages));
?>
matt 08-May-2009 08:07
To support large Unicode ranges (ie: [\x{E000}-\x{FFFD}] or \x{10FFFFF}) you
must use the modifier '/u' at the end of your expression.
daniel dot chcouri at gmail dot com 03-May-2009 01:09
Html tags delete using regular expression

<?php
function removeHtmlTagsWithExceptions($html, $exceptions = null){
    if(is_array($exceptions) && !empty($exceptions))
    {
        foreach($exceptions as $exception)
        {
            $openTagPattern  = '/<(' . $exception . ')(\s.*?)?>/msi';
            $closeTagPattern = '/<\/(' . $exception . ')>/msi';

            $html = preg_replace(
                array($openTagPattern, $closeTagPattern),
                array('||l|\1\2|r||', '||l|/\1|r||'),
                $html
            );
        }
    }

    $html = preg_replace('/<.*?>/msi', '', $html);

    if(is_array($exceptions))
    {
        $html = str_replace('||l|', '<', $html);
        $html = str_replace('|r||', '>', $html);
    }

    return $html;
}

// example:
print removeHtmlTagsWithExceptions(<<<EOF
<h1>Whatsup?!</h1>
Enjoy <span style="text-color:blue;">that</span> script<br />
<br />
EOF
, array('br'));
?>
corey [works at] effim [delete] .com 25-Apr-2009 03:52
I see a lot of people trying to put together phone regex's and struggling (hey,
no worries...they're complicated). Here's one that we use that's pretty nifty.
It's not perfect, but it should work for most non-idealists.

*** Note: Only matches U.S. phone numbers. ***

<?php

// all on one line...
$regex = '/^(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})(?:(?<=\(\d{3})\))? ?
(?:(?<=\d{3})[.-])?([2-9]\d{2})[. -]?(\d{4})(?: (?i:ext)\.? ?(\d{1,5}))?$/';

// or broken up
$regex = '/^(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})'
        .'(?:(?<=\(\d{3})\))? ?(?:(?<=\d{3})[.-])?([2-9]\d{2})'
        .'[. -]?(\d{4})(?: (?i:ext)\.? ?(\d{1,5}))?$/';

?>

If you're wondering why all the non-capturing subpatterns (which look like this
"(?:", it's so that we can do this:

<?php

$formatted = preg_replace($regex, '($1) $2-$3 ext. $4', $phoneNumber);

// or, provided you use the $matches argument in preg_match

$formatted = "($matches[1]) $matches[2]-$matches[3]";
if ($matches[4]) $formatted .= " $matches[4]";

?>

*** Results: ***
520-555-5542 :: MATCH
520.555.5542 :: MATCH
5205555542 :: MATCH
520 555 5542 :: MATCH
520) 555-5542 :: FAIL
(520 555-5542 :: FAIL
(520)555-5542 :: MATCH
(520) 555-5542 :: MATCH
(520) 555 5542 :: MATCH
520-555.5542 :: MATCH
520 555-0555 :: MATCH
(520)5555542 :: MATCH
520.555-4523 :: MATCH
19991114444 :: FAIL
19995554444 :: MATCH
514 555 1231 :: MATCH
1 555 555 5555 :: MATCH
1.555.555.5555 :: MATCH
1-555-555-5555 :: MATCH
520-555-5542 ext.123 :: MATCH
520.555.5542 EXT 123 :: MATCH
5205555542 Ext. 7712 :: MATCH
520 555 5542 ext 5 :: MATCH
520) 555-5542 :: FAIL
(520 555-5542 :: FAIL
(520)555-5542 ext .4 :: FAIL
(512) 555-1234 ext. 123 :: MATCH
1(555)555-5555 :: MATCH
daevid at daevid dot com 06-Mar-2009 11:18
I just learned about named groups from a Python friend today and was curious if
PHP supported them, guess what -- it does!!!

http://www.regular-expressions.info/named.html

<?php
   preg_match("/(?P<foo>abc)(.*)(?P<bar>xyz)/",
                       'abcdefghijklmnopqrstuvwxyz',
                       $matches);
   print_r($matches);
?>

will produce:

Array
(
    [0] => abcdefghijklmnopqrstuvwxyz
    [foo] => abc
    [1] => abc
    [2] => defghijklmnopqrstuvw
    [bar] => xyz
    [3] => xyz
)

Note that you actually get the named group as well as the numerical key
value too, so if you do use them, and you're counting array elements, be
aware that your array might be bigger than you initially expect it to be.
wjaspers4 [at] gmail [dot] com 27-Feb-2009 11:16
I recently encountered a problem trying to capture multiple instances of named
subpatterns from filenames.
Therefore, I came up with this function.

The function allows you to pass through flags (in this version it applies to
all expressions tested), and generates an array of search results.

Enjoy!

<?php

/**
 * Allows multiple expressions to be tested on one string.
 * This will return a boolean, however you may want to alter this.
 *
 * @author William Jaspers, IV <wjaspers4@gmail.com>
 * @created 2009-02-27 17:00:00 +6:00:00 GMT
 * @access public
 *
 * @param array $patterns An array of expressions to be tested.
 * @param String $subject The data to test.
 * @param array $findings Optional argument to store our results.
 * @param mixed $flags Pass-thru argument to allow normal flags to apply to all
tested expressions.
 * @param array $errors A storage bin for errors
 *
 * @returns bool Whether or not errors occurred.
 */
function preg_match_multiple(
  array $patterns=array(),
  $subject=null,
  &$findings=array(),
  $flags=false,
  &$errors=array()
) {
  foreach( $patterns as $name => $pattern )
  {
    if( 1 <= preg_match_all( $pattern, $subject, $found, $flags ) )
    {
      $findings[$name] = $found;
    } else
    {
      if( PREG_NO_ERROR !== ( $code = preg_last_error() ))
      {
        $errors[$name] = $code;
      } else $findings[$name] = array();
    }
  }
  return (0===sizeof($errors));
}
?>
skds1433 at hotmail dot com 19-Feb-2009 02:41
here is a small tool for someone learning to use regular expressions. it's very
basic, and allows you to try different patterns and combinations. I made it to
help me, because I like to try different things, to get a good understanding of
how things work.

<?php
$search = isset($_POST['search'])?$_POST['search']:"//";
$match = isset($_POST['match'])?$_POST['match']:"<>";

echo '<form method="post">';
echo 's: <input style="width:400px;" name="search" type="text" value=
"'.$search.'" /><br />';
echo 'm:<input style="width:400px;" name="match" type="text" value="'.$match.'"
/><input type="submit" value="go" /></form><br />';
if (preg_match($search, $match)){echo "matches";}else{echo "no match";}
?>
akniep at rayo dot info 30-Jan-2009 11:05
Bugs of preg_match (PHP-version 5.2.5)

In most cases, the following example will show one of two PHP-bugs discovered
with preg_match depending on your PHP-version and configuration.

<?php

$text = "test=";
// creates a rather long text
for ($i = 0; $i++ < 100000;)
    $text .= "%AB";

// a typical URL_query validity-checker (the pattern's function does not matter
for this example)
$pattern    = '/^(?:[;\/?:@&=+$,]|(?:[^\W_]|[-_.!~*\()\[\] ])|(?:%[\da-fA-F]
{2}))*$/';
   
var_dump( preg_match( $pattern, $text ) );

?>

Possible bug (1):
=============
On one of our Linux-Servers the above example crashes PHP-execution with a C(?)
Segmentation Fault(!). This seems to be a known bug (see http://bugs.php.net/
bug.php?id=40909), but I don't know if it has been fixed, yet.
If you are looking for a work-around, the following code-snippet is what I
found helpful. It wraps the possibly crashing preg_match call by decreasing the
PCRE recursion limit in order to result in a Reg-Exp error instead of a
PHP-crash.

<?php
[...]

// decrease the PCRE recursion limit for the (possibly dangerous) preg_match
call
$former_recursion_limit = ini_set( "pcre.recursion_limit", 10000 );

// the wrapped preg_match call
$result = preg_match( $pattern, $text );

// reset the PCRE recursion limit to its original value
ini_set( "pcre.recursion_limit", $former_recursion_limit );

// if the reg-exp fails due to the decreased recursion limit we may not make
any statement, but PHP-execution continues
if ( PREG_RECURSION_LIMIT_ERROR === preg_last_error() )
{
    // react on the failed regular expression here
    $result = [...];
   
    // do logging or email-sending here
    [...]
} //if

?>

Possible bug (2):
=============
On one of our Windows-Servers the above example does not crash PHP, but
(directly) hits the recursion-limit. Here, the problem is that preg_match does
not return boolean(false) as expected by the description / manual of above.
In short, preg_match seems to return an int(0) instead of the expected boolean
(false) if the regular expression could not be executed due to the PCRE
recursion-limit. So, if preg_match results in int(0) you seem to have to check
preg_last_error() if maybe an error occurred.
Alex Zinchenko 11-Dec-2008 02:15
If you need to check whether string is a serialized representation of variable
(sic!) you can use this :

<?php

$string = "a:0:{}";
if(preg_match("/(a|O|s|b)\x3a[0-9]*?
((\x3a((\x7b?(.+)\x7d)|(\x22(.+)\x22\x3b)))|(\x3b))/", $string))
{
echo "Serialized.";
}
else
{
echo "Not serialized.";
}

?>

But don't forget, string in serialized representation could be VERY big,
so match work can be slow, even with fast preg_* functions.
phil dot taylor at gmail dot com 23-Oct-2008 12:01
If you need to check for .com.br and .com.au and .uk and all the other crazy
domain endings i found the following expression works well if you want to
validate an email address. Its quite generous in what it will allow

<?php

        $email_address = "phil.taylor@a_domain.tv";

    if (preg_match("/^[^@]*@[^@]*\.[^@]*$/", $email_address)) {
        return "E-mail address";       
    }
       
?>
Steve Todorov 03-Oct-2008 01:23
While I was reading the preg_match documentation I didn't found how to match an
IP..
Let's say you need to make a script that is working with ip/host and you want
to show the hostname - not the IP.

Well this is the way to go:

<?php
/* This is an ip that is "GET"/"POST" from somewhere */
$ip = $_POST['ipOrHost'];

if(preg_match('/(\d+).(\d+).(\d+).(\d+)/',$ip))
  $host = gethostbyaddr($ip);
else
  $host = gethostbyname($ip);

echo $host;
?>

This is a really simple script made for beginners !
If you'd like you could add restriction to the numbers.
The code above will accept all kind of numbers and we know that IP address
could be MAX 255.255.255.255 and the example accepts to 999.999.999.999.

Wish you luck!

Best wishes,
Steve
Ashus 12-Sep-2008 03:18
If you need to match specific wildcards in IP address, you can use this regexp:

<?php

$ip = '10.1.66.22';
$cmp = '10.1.??.*';

$cnt = preg_match('/^'
     .str_replace(
     array('\*','\?'),
     array('(.*?)','[0-9]'),
     preg_quote($cmp)).'$/',
     $ip);

echo $cnt;

?>

where '?' is exactly one digit and '*' is any number of any characters. $cmp
mask can be provided wild by user, $cnt equals (int) 1 on match or 0.
wjaspers4[at]gmail[dot]com 28-Aug-2008 02:55
I found this rather useful for testing mutliple strings when developing a regex
pattern.
<?php
/**
 * Runs preg_match on an array of strings and returns a result set.
 * @author wjaspers4[at]gmail[dot]com
 * @param String $expr The expression to match against
 * @param Array $batch The array of strings to test.
 * @return Array
 */
function preg_match_batch( $expr, $batch=array() )
{
// create a placeholder for our results
    $returnMe = array();

// for every string in our batch ...
    foreach( $batch as $str )
    {
// test it, and dump our findings into $found
        preg_match($expr, $str, $found);

// append our findings to the placeholder
        $returnMe[$str] = $found;
    }

    return $returnMe;
}
?>
Dino Korah AT webroot DOT com 08-Jul-2008 11:11
preg_match and preg_replace_callback doesnt match up in the structure of the
array that they fill-up for a match.
preg_match, as the example shows, supports named patterns, whereas
preg_replace_callback doesnt seem to support it at all. It seem to ignore any
named pattern matched.
jonathan dot lydall at gmail dot removethispart dot com 26-May-2008 07:50
Because making a truly correct email validation function is harder than one may
think, consider using this one which comes with PHP through the filter_var
function (http://www.php.net/manual/en/function.filter-var.php):

<?php
$email = "someone@domain .local";

if(!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "E-mail is not valid";
} else {
    echo "E-mail is valid";
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Dec 14 17:22:50 2011 UTC
Received cookie: COUNTRY=JPN%2C111.191.130.224
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • PCRE
  • PCRE 関数
  • preg_ filter
  • preg_ grep
  • preg_ last_ error
  • preg_ match_ all
  • preg_ match
  • preg_ quote
  • preg_ replace_ callback
  • preg_ replace
  • preg_ split

preg_replace_callback> <preg_match
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Dec 2011

view this page in

[English             ] Change language
preg_quote

(PHP 4, PHP 5)

preg_quote — 正規表現文字をクオートする

説明

string preg_quote ( string $str [, string $delimiter = NULL ] )

preg_quote() は、str を引数とし、正規表現構文の特殊文字の前にバックスラッシュを
挿入します。この関数は、実行時に生成される文字列をパターンとしてマッチングを行
う必要があり、その文字列には正規表現の特殊文字が含まれているかも知れない場合に
有用です。

正規表現の特殊文字は、次のものです。 . \ + * ? [ ^ ] $ ( ) { } = ! < > | : -

パラメータ

str

    入力文字列。

delimiter

    オプションの delimiter を指定すると、ここで指定した文字もエスケープされます
    。これは、PCRE 関数が使用するデリミタをエスケープする場合に便利です。'/' が
    デリミタとしては最も一般的に使用されています。

返り値

クォートされた文字列を返します。

変更履歴

バージョン                   説明
5.3.0      - 文字がクォートされるようになりました。

例

例1 preg_quote() の例

<?php
$keywords = '$40 for a g3/400';
$keywords = preg_quote($keywords, '/');
echo $keywords; // \$40 for a g3\/400 を返します
?>

例2 テキスト内の単語の斜体変換

<?php
// この例では、preg_quote($word) を使って、アスタリスクが
// 正規表現での特殊な意味を帯びないようにしています

$textbody = "This book is *very* difficult to find.";
$word = "*very*";
$textbody = preg_replace ("/" . preg_quote($word) . "/",
                          "<i>" . $word . "</i>",
                          $textbody);
?>

注意

    注意: この関数はバイナリデータに対応しています。



preg_replace_callback> <preg_match
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Dec 2011
 
add a note add a note User Contributed Notes preg_quote
admin at nilamo dot com 04-Aug-2010 03:21
@zooly:

And what if $myvar = 'te\\E.t'?  It will match, when it shouldn't.  That's why
you should use preg_quote().
zooly 21-Jul-2009 08:07
To escape characters with special meaning, like: .-[]() and so on, use \Q and \
E.

For example:

<?php echo ( preg_match('/^'.( $myvar = 'te.t' ).'$/i', 'test') ? 'match' :
'nomatch' ); ?>

Will result in: match

But:

<?php echo ( preg_match('/^\Q'.( $myvar = 'te.t' ).'\E$/i', 'test') ? 'match' :
'nomatch' ); ?>

Will result in: nomatch
alexc223 at NOSPAM dot googlemail dot com 15-Jun-2009 07:41
Not sure why this note got deleted, but hey lets try again:

As of PHP 5.3, bug #47229 has been fixed and preg_quote *will* escape a hyphen
(-). This may effect your code so ensure this is one thing you check when
moving to 5.3.
frostschutz 20-Mar-2009 10:01
I wanted to escape a string of characters so I could match them in [], i.e.
[.,-!"§$%\\\[\]\^].

Unfortunately preg_quote does not escape the - character which has a special
meaning in [], i.e. [a-z].

So I used this hack: make - the delimiter of the expression, i.e.

preg_quote(userinput, "-")
preg_replace("-[$userinput]-u", "", $str)

Apparently using a special char as a delimiter of a regular expression disables
this character, i.e. even if it's escaped it's not understood as special
character for the expression anymore.

so the pattern "-[a\\-z]-u" matches the characters a, - and z, and not
abc...xyz.

It would be nice if preg_quote also escaped characters that have special
meanings even if they have this meaning only under certain conditions, such as
inside [].
krishoog at gmail dot com 13-Oct-2008 02:51
To bizzigul at hotmail dot fr:
It's not a good practice to make somthing work *almost* all of the time. If the
input contains a '`' you will still get an error. I recommend using the default
delimiter ('/') and also feed this to preg_quote as second argument.
bizzigul at hotmail dot fr 30-Jul-2008 04:10
To prevent any problems, try to always use a delimiter that will *almost* not
be used inside the regex, such as ` (back quote)

for example: instead of
<?php preg_match('/foo\/bar\//',$somevar); ?>

use

<?php preg_match('`foo/bar/`',$somevar); ?>

it's that simple! like this, you won't have to bother with delimiters
anymore...
Anonymous 26-Dec-2007 11:13
Wondering why your preg_replace fails, even if you have used preg_quote?

Try adding the delimiter / - preg_quote($string, '/');
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Dec 14 17:22:50 2011 UTC
Received cookie: COUNTRY=JPN%2C1.112.189.105
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 自然言語および文字エンコーディング
  • マルチバイト文字列
  • マルチバイト文字列関数
  • mb_ check_ encoding
  • mb_ convert_ case
  • mb_ convert_ encoding
  • mb_ convert_ kana
  • mb_ convert_ variables
  • mb_ decode_ mimeheader
  • mb_ decode_ numericentity
  • mb_ detect_ encoding
  • mb_ detect_ order
  • mb_ encode_ mimeheader
  • mb_ encode_ numericentity
  • mb_ encoding_ aliases
  • mb_ ereg_ match
  • mb_ ereg_ replace
  • mb_ ereg_ search_ getpos
  • mb_ ereg_ search_ getregs
  • mb_ ereg_ search_ init
  • mb_ ereg_ search_ pos
  • mb_ ereg_ search_ regs
  • mb_ ereg_ search_ setpos
  • mb_ ereg_ search
  • mb_ ereg
  • mb_ eregi_ replace
  • mb_ eregi
  • mb_ get_ info
  • mb_ http_ input
  • mb_ http_ output
  • mb_ internal_ encoding
  • mb_ language
  • mb_ list_ encodings
  • mb_ output_ handler
  • mb_ parse_ str
  • mb_ preferred_ mime_ name
  • mb_ regex_ encoding
  • mb_ regex_ set_ options
  • mb_ send_ mail
  • mb_ split
  • mb_ strcut
  • mb_ strimwidth
  • mb_ stripos
  • mb_ stristr
  • mb_ strlen
  • mb_ strpos
  • mb_ strrchr
  • mb_ strrichr
  • mb_ strripos
  • mb_ strrpos
  • mb_ strstr
  • mb_ strtolower
  • mb_ strtoupper
  • mb_ strwidth
  • mb_ substitute_ character
  • mb_ substr_ count
  • mb_ substr

Pspell> <mb_substr_count
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Dec 2011

view this page in

[English             ] Change language
mb_substr

(PHP 4 >= 4.0.6, PHP 5)

mb_substr — 文字列の一部を得る

説明

string mb_substr ( string $str , int $start [, int $length [, string $encoding
]] )

文字数に基づきマルチバイト対応の substr() 処理を行います。位置は、 str の始めか
ら数えられます。最初の文字の位置は 0、2 番目の文字の位置は 1、といったようにな
ります。

パラメータ

str

    部分文字列を取り出したい文字列。

start

    str の中から最初に取り出す文字の位置。

length

    str の中から取り出す最大文字数。

encoding

    encoding パラメータには文字エンコーディングを指定します。省略した場合は、内
    部文字エンコーディングを使用します。

返り値

mb_substr() は、start および length パラメータで指定した str の一部を返します。

参考

  • mb_strcut() - 文字列の一部を得る
  • mb_internal_encoding() - 内部文字エンコーディングを設定あるいは取得する



Pspell> <mb_substr_count
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 09 Dec 2011
 
add a note add a note User Contributed Notes mb_substr
p dot assenov at aip-solutions dot com 02-Dec-2011 05:17
I'm trying to capitalize only the first character of the string and tried some
of the examples above but they didn't work. It seems mb_substr() cannot
calculate the length of the string in multi-byte encoding (UTF-8) and it should
be set explicitly. Here is the corrected version:

<?php
function mb_ucfirst($str, $enc = 'utf-8') {
    return mb_strtoupper(mb_substr($str, 0, 1, $enc), $enc).mb_substr($str, 1,
mb_strlen($str, $enc), $enc);
}
?>

cheers!
levani9191 at gmail dot com 18-Jul-2010 10:37
A simple code that check if the latest symbol in the string is a question mark
and adds one if it doesn't...

<?php $string = (mb_substr($string, -1, 1, 'UTF-8') != '?') ? $string.'?' :
$string; ?>
Anonymous 26-Feb-2010 01:15
If start  is negative, the returned string will start at the start'th character
from the end of string
dziamid at gmail dot com 06-Feb-2009 04:27
Here is my solution to highlighting search queries in multibyte text:

<?php
function mb_highlight($data, $query, $ins_before, $ins_after)
{
 $result = '';
 while (($poz = mb_strpos(mb_strtolower($data), mb_strtolower($query))) !==
false)
 {
       $query_len = mb_strlen ($query);
       $result .= mb_substr ($data, 0, $poz).
               $ins_before.
               mb_substr ($data, $poz, $query_len).
               $ins_after;
       $data = mb_substr ($data, $poz+$query_len);
 }
 return $result;
}
?>

Enjoy!

[EDIT BY danbrown AT php DOT net: Reclassified to a more appropriate function
manual page.]
projektas at gmail dot com 21-Oct-2008 01:29
First letter in upper case <hr />

<?php
header ('Content-type: text/html; charset=utf-8');

if (isset($_POST['check']) && !empty($_POST['check'])) {
    echo htmlspecialchars(ucfirst_utf8($_POST['check']));
} else {
    echo htmlspecialchars(ucfirst_utf8('Žąsinų'));
}

function ucfirst_utf8($str) {
    if (mb_check_encoding($str,'UTF-8')) {
        $first = mb_substr(
            mb_strtoupper($str, "utf-8"),0,1,'utf-8'
        );
        return $first.mb_substr(
            mb_strtolower($str,"utf-8"),1,mb_strlen($str),'utf-8'
        );
    } else {
        return $str;
    }
}
?>

<form method="post" action="" >
    <input type="input" name="check" />
    <input type="submit" />
</form>
Silvan 01-Sep-2007 10:30
Passing null as length will not make mb_substr use it's default, instead it
will interpret it as 0.
<?php
mb_substr($str,$start,null,$encoding); //Returns '' (empty string) just like
substr()
?>
Instead use:
<?php
mb_substr($str,$start,mb_strlen($str),$encoding);
?>
xiaogil at yahoo dot fr 02-Aug-2005 03:33
Thanks Darien from /freenode #php for the following example (a little bit
changed).

It just prints the 6th character of $string.
You can replace the digits by the same in japanese, chinese or whatever
language to make a test, it works perfect.

<?php
mb_internal_encoding("UTF-8");
$string = "0123456789";
$mystring = mb_substr($string,5,1);
echo $mystring;
?>

(I couldn't replace 0123456789 by chinese numbers for example here, because
it's automatically converted into latin digits on this website, look :
&#38646;&#19968;&#20108;&#19977;&#22235;
&#20116;&#20845;&#19971;&#20843;&#20061;)

gilv
drraf at tlen dot pl 23-Feb-2005 02:44
Note: If borders are out of string - mb_string() returns empty _string_, when
function substr() returns _boolean_ false in this case.
Keep this in mind when using "===" comparisions.

Example code:
<?php

var_dump( substr( 'abc', 5, 2 ) ); // returns "false"
var_dump( mb_substr( 'abc', 5, 2 ) ); // returns ""

?>

It's especially confusing when using mbstring with function overloading turned
on.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Dec 11 11:23:16 2011 UTC
Received cookie: COUNTRY=JPN%2C114.48.185.180
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • PCRE
  • PCRE 関数
  • preg_ filter
  • preg_ grep
  • preg_ last_ error
  • preg_ match_ all
  • preg_ match
  • preg_ quote
  • preg_ replace_ callback
  • preg_ replace
  • preg_ split

preg_quote> <preg_match_all
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 02 Dec 2011

view this page in

[English             ] Change language
preg_match

(PHP 4, PHP 5)

preg_match — 正規表現によるマッチングを行う

説明

int preg_match ( string $pattern , string $subject [, array &$matches [, int
$flags = 0 [, int $offset = 0 ]]] )

pattern で指定した正規表現により subject を検索します。

パラメータ

pattern

    検索するパターンを表す文字列。

subject

    入力文字列。

matches

    matches を指定した場合、検索結果が代入されます。 $matches[0] にはパターン全
    体にマッチしたテキストが代入され、 $matches[1] には 1 番目ののキャプチャ用
    サブパターンにマッチした文字列が代入され、といったようになります。

flags

    flags には以下のフラグを指定できます。

    PREG_OFFSET_CAPTURE
        このフラグを設定した場合、各マッチに対応する文字列のオフセットも返され
        ます。これにより matches の値は配列となり、配列の要素 0 はマッチした文
        字列、要素 1は対象文字列中におけるマッチした文字列のオフセット値となる
        ことに注意してください。

offset

    通常、検索は対象文字列の先頭から開始されます。オプションのパラメータ offset
    を使用して検索の開始位置を (バイト単位で) 指定することも可能です。

        注意:

        offset を用いるのと、 substr($subject, $offset) を preg_match()の対象文
        字列として指定するのとは等価ではありません。これは、pattern には、 ^, $
        や (?<=x) のような言明を含めることができるためです。以下を比べてみてく
        ださい。
        <?php
        $subject = "abcdef";
        $pattern = '/^def/';
        preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
        print_r($matches);
        ?>

        上の例の出力は以下となります。

        Array
        (
        )

        一方、この例を見てください。

        <?php
        $subject = "abcdef";
        $pattern = '/^def/';
        preg_match($pattern, substr
        ($subject,3), $matches, PREG_OFFSET_CAPTURE);
        print_r($matches);
        ?>

        出力は以下のようになります。

        Array
        (
            [0] => Array
                (
                    [0] => def
                    [1] => 0
                )

        )


返り値

preg_match() は、pattern がマッチした回数を返します。つまり、0 回（マッチせず）
または 1 回となります。これは、最初にマッチした時点でpreg_match() は検索を止め
るためです。逆にpreg_match_all()は、 subject の終わりまで検索を続けます。
preg_match() は、エラーが発生した場合にFALSEを返します。

変更履歴

バー
ジョ                                    説明
 ン
5.3.6 offset が subject よりも長いときに FALSE を返すようになりました。
      名前つきサブパターンで、 (?<name>) や (?'name') といった構文が (?P<name>)
5.2.2 のほかに使えるようになりました. 以前のバージョンでは (?P<name>) しか使え
      ませんでした。
4.3.3 パラメータ offset が追加されました。
4.3.0 フラグ PREG_OFFSET_CAPTURE が追加されました。
4.3.0 パラメータ flags が追加されました。

例

例1 文字列 "php" を探す

<?php
// パターンのデリミタの後の "i" は、大小文字を区別しない検索を示す
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

例2 単語 "web" を探す

<?php
/* パターン内の \b は単語の境界を示す。このため、独立した単語の
 *  "web"にのみマッチし、"webbing" や "cobweb" のような単語の一部にはマッチしな
い */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}

if (preg_match("/\bweb\b/
i", "PHP is the website scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

例3 URL からドメイン名を得る

<?php
// get host name from URL
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// get last two segments of host name
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "domain name is: {$matches[0]}\n";
?>

上の例の出力は以下となります。

domain name is: php.net

例4 名前つきサブパターンの使用法

<?php

$str = 'foobar: 2008';

preg_match('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* PHP 5.2.2 (PCRE 7.0) 以降ではこの形式でも動作しますが、
 * 過去との互換性を考慮して上の形式のほうを推奨します */
// preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>

上の例の出力は以下となります。

Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [digit] => 2008
    [2] => 2008
)

注意

ヒント

ある文字列が他の文字列内に含まれているかどうかを調べるためだけに preg_match()
を使うのは避けた方が良いでしょう。 strpos() か strstr() 関数を使う方が速くなり
ます。

参考

  • PCRE のパターン
  • preg_match_all() - 繰り返し正規表現検索を行う
  • preg_replace() - 正規表現検索および置換を行う
  • preg_split() - 正規表現で文字列を分割する
  • preg_last_error() - 直近の PCRE 正規表現処理のエラーコードを返す



preg_quote> <preg_match_all
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 02 Dec 2011
 
add a note add a note User Contributed Notes preg_match
force at md-t dot org 26-Sep-2011 06:38
Simple regex

Regex quick reference
[abc]     A single character: a, b or c
[^abc]     Any single character but a, b, or c
[a-z]     Any single character in the range a-z
[a-zA-Z]     Any single character in the range a-z or A-Z
^     Start of line
$     End of line
\A     Start of string
\z     End of string
.     Any single character
\s     Any whitespace character
\S     Any non-whitespace character
\d     Any digit
\D     Any non-digit
\w     Any word character (letter, number, underscore)
\W     Any non-word character
\b     Any word boundary character
(...)     Capture everything enclosed
(a|b)     a or b
a?     Zero or one of a
a*     Zero or more of a
a+     One or more of a
a{3}     Exactly 3 of a
a{3,}     3 or more of a
a{3,6}     Between 3 and 6 of a

options: i case insensitive m make dot match newlines x ignore whitespace in
regex o perform #{...} substitutions only once
cmallabon at homesfactory dot com 31-Aug-2011 05:28
Just an interesting note. Was just updating code to replace ereg() with strpos
() and preg_match and the thought occured that preg_match() could be optimized
to quit early when only searching if a string begins with something, for
example
<?php
if(preg_match("/^http/", $url))
{
 //do something
}
?>

 vs

<?php
if(strpos($url, "http") === 0)
{
//do something
}
?>

As I guessed, strpos() is always faster (about 2x) for short strings like a URL
but for very long strings of several paragraphs (e.g. a block of XML) when the
string doesn't start with the needle preg_match as twice as fast as strpos() as
it doesn't scan the entire string.

So, if you are searching long strings and expect it to normally be true (e.g.
validating XML), strpos() is a much faster BUT if you expect if to often fail,
preg_match is the better choice.
ayman2243 at gmail dot com 30-Aug-2011 11:55
highlight Search Words

<?php
function highlight($word, $subject) {
   
    $split_subject = explode(" ", $subject);
    $split_word = explode(" ", $word);

    foreach ($split_subject as $k => $v){
           foreach ($split_word as $k2 => $v2){
               if($v2 == $v){
                  
                   $split_subject[$k] = "<span class='highlight'>".$v."</span>
";
              
               }
           }
      }
     
      return implode(' ', $split_subject);
}
?>
Khalid_Moharram at hotmail dot com 25-Aug-2011 08:36
Well for anyone looking for email validation, according to the RFC
specifications (ONLY FOR ((ENGLISH ASCII)) E-Mails).

<?php
function email_valid($temp_email) {
######## Three functions to HELP ########
        function valid_dot_pos($email) {
            $str_len = strlen($email);
            for($i=0; $i<$str_len; $i++) {
                $current_element = $email[$i];
                if($current_element == "." && ($email[$i+1] == ".")) {
                    return false;
                    break;
                }
                else {

                }
            }
            return true;
        }
        function valid_local_part($local_part) {
            if(preg_match("/[^a-zA-Z0-9-_@.!#$%&'*\/+=?^`{\|}~]/",
$local_part)) {
                return false;
            }
            else {
                return true;
            }
        }
        function valid_domain_part($domain_part) {
            if(preg_match("/[^a-zA-Z0-9@#\[\].]/", $domain_part)) {
                return false;
            }
            elseif(preg_match("/[@]/", $domain_part) && preg_match("/[#]/",
$domain_part)) {
                return false;
            }
            elseif(preg_match("/[\[]/", $domain_part) || preg_match("/[\]]/",
$domain_part)) {
                $dot_pos = strrpos($domain_part, ".");
                if(($dot_pos < strrpos($domain_part, "]")) || (strrpos
($domain_part, "]") < strrpos($domain_part, "["))) {
                    return true;
                }
                elseif(preg_match("/[^0-9.]/", $domain_part)) {
                    return false;
                }
                else {
                    return false;
                }
            }
            else {
                return true;
            }
        }
        // trim() the entered E-Mail
        $str_trimmed = trim($temp_email);
        // find the @ position
        $at_pos = strrpos($str_trimmed, "@");
        // find the . position
        $dot_pos = strrpos($str_trimmed, ".");
        // this will cut the local part and return it in $local_part
        $local_part = substr($str_trimmed, 0, $at_pos);
        // this will cut the domain part and return it in $domain_part
        $domain_part = substr($str_trimmed, $at_pos);
        if(!isset($str_trimmed) || is_null($str_trimmed) || empty($str_trimmed)
|| $str_trimmed == "") {
            $this->email_status = "You must insert something";
            return false;
        }
        elseif(!valid_local_part($local_part)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(!valid_domain_part($domain_part)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif($at_pos > $dot_pos) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(!valid_local_part($local_part)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(($str_trimmed[$at_pos + 1]) == ".") {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        elseif(!preg_match("/[(@)]/", $str_trimmed) || !preg_match("/[(.)]/",
$str_trimmed)) {
            $this->email_status = "Invalid E-Mail Address";
            return false;
        }
        else {
            $this->email_status = "";
            return true;
        }
}
?>
workhorse at op dot pl 11-Aug-2011 07:53
Preg_match returns empty result trying to validate $subject with carriege
returns (/n/r).
To solve it one need to use /s modifier in $pattern string.
<?php
$pattern='/.*/s';
$valid=preg_match($pattern, $subject, $match);
?>
itworkarounds at gmail dot com 09-Aug-2011 04:08
You can use the following code to detect non-latin (Cyrilic, Arabic, Greek...)
characters:

<?php
preg_match("/^[a-zA-Z\p{Cyrillic}0-9\s\-]+$/u", "ABC abc 1234 АБВ абв");
?>
mohammad40g at gmail dot com 02-Aug-2011 04:23
This sample is for checking persian character:

<?php
   preg_match("/[\x{0600}-\x{06FF}\x]{1,32}/u", 'محمد');
?>
sun at drupal dot org 24-Jun-2011 12:56
Basic test for invalid UTF-8 that can hi-jack IE:

<?php
$valid = (preg_match('/^./us', $text) == 1);
?>
See http://api.drupal.org/api/drupal/includes--bootstrap.inc/function/
drupal_validate_utf8/7 for details.

---

Test for valid UTF-8 and XML/XHTML character range compatibility:

<?php
$invalid = preg_match('@[^\x9\xA\xD\x20-\x{D7FF}\x{E000}-\x{FFFD}\x{10000}-\x
{10FFFF}]@u', $text)
?>
Ref: http://www.w3.org/TR/2000/REC-xml-20001006#charsets
juanmadss at gmail dot com 25-May-2011 11:00
Testing the speed of preg_match against stripos doing insensitive case search
in strings:

<?php
$string = "Hey, how are you? I'm a string.";

// PCRE
$start = microtime(true);
for ($i = 1; $i < 10000000; $i++) {
    $bool = preg_match('/you/i', $string);
}
$end = microtime(true);
$pcre_lasted = $end - $start; // 8.3078360557556

// Stripos, we believe in you
$start = microtime(true);
for ($i = 1; $i < 10000000; $i++) {
    $bool = stripos($string, 'you') !== false;
}
$end = microtime(true);
$stripos_lasted = $end - $start; // 6.0306038856506

echo "Preg_match lasted: {$pcre_lasted}<br />Stripos lasted: {$stripos_lasted}
";
?>

So unless you really need to test a string against a regular expression, always
use strpos / stripos and other string functions to find characters and strings
within other strings.
mulllhausen 16-May-2011 08:57
i do a fair bit of html scraping in conjunction with curl. i always need to
know if i have reached the right page or if the curl request failed. the main
problem i have encountered is html tags having unexpected spaces or other
characters (especially the &nbsp; character sequence) between them. for example
when requesting a page with a certain manner set of post or get variables the
response might be

<a href='blah'><span>data data data</span></a>

but requesting the same page with different post/get variables might give the
following result:

<a href='blah'>
         &nbsp;<span>data data data</span>
</a>

to match both of these tag sequences with the same pattern i use the [\S\s]*?
wildcard which basically means 'match anything at all...but not if you can help
it'

so the pattern for the above sequence would be:

<?php

$page1 = "........<a href='blah'><span>data data data</span></a>.........";

$page2 = "........<a href='blah'>
         &nbsp;<span>data data data</span>
</a>
........";

$w = "[\s\S]*?"; //ungreedy wildcard
$pattern = "/\<a href='blah'\>$w\<span\>data data data\<\/span\>$w\<\/a\>/";

if(preg_match($pattern, $page1, $matches)) echo "got to page 1. match:
[".print_r($matches, true)."]\n";
else echo "did not get to page 1\n";

if(preg_match($pattern, $page2, $matches)) echo "got to page 2. match:
[".print_r($matches, true)."]\n";
else echo "did not get to page 2\n";

?>
MrBull 20-Mar-2011 03:32
Sometimes its useful to negate a string. The first method which comes to mind
to do this is: [^(string)] but this of course won't work. There is a solution,
but it is not very well known. This is the simple piece of code on how a
negation of a string is done:

(?:(?!string).)

?: makes a subpattern (see http://www.php.net/manual/en/
regexp.reference.subpatterns.php) and ?! is a negative look ahead. You put the
negative look ahead in front of the dot because you want the regex engine to
first check if there is an occurrence of the string you are negating. Only if
it is not there, you want to match an arbitrary character.

Hope this helps some ppl.
arash dot hemmat at gmail dot com 03-Feb-2011 03:15
For those who search for a unicode regular expression example using preg_match
here it is:

Check for Persian digits
preg_match( "/[^\x{06F0}-\x{06F9}\x]+/u" , '۱۲۳۴۵۶۷۸۹۰' );
Frank 26-Jan-2011 08:12
If someone is from a country that accepts decimal numbers in format 9.00 and
9,00 (point or comma), number validation would be like that:
<?php
$number_check = "9,99";
if (preg_match( '/^[\-+]?[0-9]*\.*\,?[0-9]+$/', $number_check)) {
    return TRUE;
}
?>

However, if the number will be written in the database, most probably this
comma needs to be replaced with a dot.
This can be done with use of str_replace, i.e :
<?php
$number_database = str_replace("," , "." , $number_check);
?>
sainnr at gmail dot com 30-Dec-2010 02:12
This sample regexp may be useful if you are working with DB field types.

(?P<type>\w+)($|\((?P<length>(\d+|(.*)))\))

For example, if you are have a such type as "varchar(255)" or "text", the next
fragment

<?php
   $type = 'varchar(255)';  // type of field
   preg_match('/(?P<type>\w+)($|\((?P<length>(\d+|(.*)))\))/', $type, $field);
   print_r($field);
?>

will output something like this:
Array ( [0] => varchar(255) [type] => varchar [1] => varchar [2] => (255)
[length] => 255 [3] => 255 [4] => 255 )
ian_channing at hotmail dot com 27-Dec-2010 09:55
When trying to check a file path that could be windows or unix it took me quite
a few tries to get the escape characters right.

The Unix directory separator must be escaped once and the windows directory
separator must be escaped twice.

This will match path/to/file and path\to\file.exe

preg_match('/^[a-z0-9_.\/\\\]*$/i', $file_string);
SoN9ne at gmail dot com 08-Jun-2010 05:10
I have been working on a email system that will automatically generate a text
email from a given HTML email by using strip_tags().
The only issue I ran into, for my needs, were that the anchors would not keep
their links.
I search for a little while and could not find anything to strip the links from
the tags so I generated my own little snippet.
I am posting it here in hopes that others may find it useful and for later
reference.

A note to keep in mind:
I was primarily concerned with valid HTML so if attributes do no use ' or " to
contain the values then this will need to be tweaked.
If you can edit this to work better, please let me know.
<?php
/**
 * Replaces anchor tags with text
 * - Will search string and replace all anchor tags with text (case
insensitive)
 *
 * How it works:
 * - Searches string for an anchor tag, checks to make sure it matches the
criteria
 *         Anchor search criteria:
 *             - 1 - <a (must have the start of the anchor tag )
 *             - 2 - Can have any number of spaces or other attributes before
and after the href attribute
 *             - 3 - Must close the anchor tag
 *
 * - Once the check has passed it will then replace the anchor tag with the
string replacement
 * - The string replacement can be customized
 *
 * Know issue:
 * - This will not work for anchors that do not use a ' or " to contain the
attributes.
 *         (i.e.- <a href=http: //php.net>PHP.net</a> will not be replaced)
 */
function replaceAnchorsWithText($data) {
    /**
     * Had to modify $regex so it could post to the site... so I broke it into
6 parts.
     */
    $regex  = '/(<a\s*'; // Start of anchor tag
    $regex .= '(.*?)\s*'; // Any attributes or spaces that may or may not exist
    $regex .= 'href=[\'"]+?\s*(?P<link>\S+)\s*[\'"]+?'; // Grab the link
    $regex .= '\s*(.*?)\s*>\s*'; // Any attributes or spaces that may or may
not exist before closing tag
    $regex .= '(?P<name>\S+)'; // Grab the name
    $regex .= '\s*<\/a>)/i'; // Any number of spaces between the closing anchor
tag (case insensitive)
   
    if (is_array($data)) {
        // This is what will replace the link (modify to you liking)
        $data = "{$data['name']}({$data['link']})";
    }
    return preg_replace_callback($regex, 'replaceAnchorsWithText', $data);
}

$input  = 'Test 1: <a href="http: //php.net1">PHP.NET1</a>.<br />';
$input .= 'Test 2: <A name="test" HREF=\'HTTP: //PHP.NET2\' target="_blank">
PHP.NET2</A>.<BR />';
$input .= 'Test 3: <a hRef=http: //php.net3>php.net3</a><br />';
$input .= 'This last line had nothing to do with any of this';

echo replaceAnchorsWithText($input).'<hr/>';
?>
Will output:
Test 1: PHP.NET1(http: //php.net1).
Test 2: PHP.NET2(HTTP: //PHP.NET2).
Test 3: php.net3 (is still an anchor)
This last line had nothing to do with any of this

Posting to this site is painful...
Had to break up the regex and had to break the test links since it was being
flagged as spam...
teracci2002 09-Apr-2010 04:00
When you use preg_match() for security purpose or huge data processing,
mayby you should make consideration for backtrack_limit and recursion_limit.
http://www.php.net/manual/en/pcre.configuration.php

These limits may bring wrong matching result.
You can verify whether you hit these limits by checking preg_last_error().
http://www.php.net/manual/en/function.preg-last-error.php
Kae Cyphet 18-Mar-2010 02:29
for those coming over from ereg, preg_match can be quite intimidating. to get
started here is a migration tip.

<?php
if(ereg('[^0-9A-Za-z]',$test_string)) // will be true if characters arnt 0-9,
A-Z or a-z.

if(preg_match('/[^0-9A-Za-z]/',$test_string)) // this is the preg_match
version. the /'s are now required.
?>
plasma 22-Feb-2010 12:53
To extract scheme, host, path, ect. simply use

<?php

  $url  = 'http://name:pass@';
  $url .= 'example.com:10000';
  $url .= '/path/to/file.php?a=1&amp;b=2#anchor';

  $url_data = parse_url ( $url );

  print_r ( $url_data );

?>
___
prints out something like:

Array
(
    [scheme] => http
    [host] => wild.subdomain.orgy.domain.co.uk
    [port] => 10000
    [user] => name
    [pass] => pass
    [path] => /path/to/file.php
    [query] => a=1&b=2
    [fragment] => anchor
)

In my tests parse_url is up to 15x faster than preg_match(_all)!
Dr@ke 18-Feb-2010 03:58
Hello,
There is a bug with somes new PCRE versions (like:7.9 2009-04-1),
In patterns:
\w+ !== [a-zA-Z0-9]+

But it's ok, if i replace \w+ by [a-z0-9]+ or [a-zA-Z0-9]+
saberdream at live dot fr 10-Feb-2010 11:53
I made a function to circumvent the problem of length of a string... This
verifies that the link is an image.

<?php
function verifiesimage($lien, $limite) {
    if( preg_match('#^http:\/\/(.*)\.(gif|png|jpg)$#i', $lien) && strlen($lien)
< $limite )
    {
        $msg = TRUE; // link ok
    }
    else
    {
        $msg = FALSE; // the link isn't image
    }
    return $msg; // return TRUE or FALSE
}
?>

Example :

<?php
if(verifierimage($votrelien, 50) == TRUE)
{
    // we display the content...
}
?>
Anonymous 06-Feb-2010 04:00
The regular expression for breaking-down a URI reference into its components:

      ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
       12            3  4          5       6  7        8 9

Source: ietf.org/rfc/rfc2396.txt
cebelab at gmail dot com 24-Jan-2010 06:43
I noticed that in order to deal with UTF-8 texts, without having to recompile
php with the PCRE UTF-8 flag enabled, you can just add the following sequence
at the start of your pattern: (*UTF8)

for instance : '#(*UTF8)[[:alnum:]]#' will return TRUE for 'é' where '#
[[:alnum:]]#' will return FALSE

found this very very useful tip after hours of research over the web directly
in pcre website right here : http://www.pcre.org/pcre.txt
there are many further informations about UTF-8 support in the lib

hop that will help!

--
cedric
Stefan 17-Nov-2009 10:47
I spent a while replacing all my ereg() calls to preg_match(), since ereg() is
now deprecated and will not be supported as of v 6.0.

Just a warning regarding the conversion, the two functions behave very
similarly, but not exactly alike. Obviously, you will need to delimit your
pattern with '/' or '|' characters.

The difference that stumped me was that preg_replace overwrites the $matches
array regardless if a match was found. If no match was found, $matches is
simply empty.

ereg(), however, would leave $matches alone if a match was not found. In my
code, I had repeated calls to ereg, and was populating $matches with each
match. I was only interested in the last match. However, with preg_match, if
the very last call to the function did not result in a match, the $matches
array would be overwritten with a blank value.

Here is an example code snippet to illustrate:

<?php
$test = array('yes','no','yes','no','yes','no');

foreach ($test as $key=>$value) {
  ereg("yes",$value,$matches1);
  preg_match("|yes|",$value,$matches2);
}
  print "ereg result: $matches1[0]<br>";
  print "preg_match result: $matches2[0]<br>";
?>

The output is:
ereg result: yes
preg_match result:

($matches2[0] in this case is empty)

I believe the preg_match behavior is cleaner. I just thought I would report
this to hopefully save others some time.
ruakuu at NOSPAM dot com 04-Nov-2009 05:32
Was working on a site that needed japanese and alphabetic letters and needed to
validate input using preg_match, I tried using \p{script} but didn't work:

<?php
$pattern ='/^([-a-zA-Z0-9_\p{Katakana}\p{Hiragana}\p{Han}]*)$/u'; // Didn't
work
?>

So I tried with ranges and it worked:

<?php
$pattern ='/^[-a-zA-Z0-9_\x{30A0}-\x{30FF}'
         .'\x{3040}-\x{309F}\x{4E00}-\x{9FBF}\s]*$/u';
$match_string = '印刷最安ニキビ跡除去ゲームボーイ';

if (preg_match($pattern, $match_string)) {
    echo "Found - pattern $pattern";
} else {
    echo "Not found - pattern $pattern";
}
?>

U+4E00–U+9FBF Kanji
U+3040–U+309F Hiragana
U+30A0–U+30FF Katakana

Hope its useful, it took me several hours to figure it out.
Anonymous 12-Oct-2009 09:24
If your regular expression does not match with long input text when you think
it should, you might have hit the PCRE backtrack default limit of 100000. See
http://php.net/pcre.backtrack-limit.
splattermania at freenet dot de 01-Oct-2009 12:01
As I wasted lots of time finding a REAL regex for URLs and resulted in building
it on my own, I now have found one, that seems to work for all kinds of urls:

<?php
    $regex = "((https?|ftp)\:\/\/)?"; // SCHEME
    $regex .= "([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?"; //
User and Pass
    $regex .= "([a-z0-9-.]*)\.([a-z]{2,3})"; // Host or IP
    $regex .= "(\:[0-9]{2,5})?"; // Port
    $regex .= "(\/([a-z0-9+\$_-]\.?)+)*\/?"; // Path
    $regex .= "(\?[a-z+&\$_.-][a-z0-9;:@&%=+\/\$_.-]*)?"; // GET Query
    $regex .= "(#[a-z_.-][a-z0-9+\$_.-]*)?"; // Anchor
?>

Then, the correct way to check against the regex ist as follows:

<?php
       if(preg_match("/^$regex$/", $url))
       {
               return true;
       }
?>
luc _ santeramo at t yahoo dot com 03-Sep-2009 02:46
If you want to validate an email in one line, use filter_var() function !
http://fr.php.net/manual/en/function.filter-var.php

easy use, as described in the document example :
var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));
marcosc at tekar dot net 27-Aug-2009 04:31
When using accented characters and "ñ" (áéíóúñ), preg_match does not work. It
is a charset problem, use utf8_decode/decode to fix.
ian_channing at hotmail dot com 20-Aug-2009 01:13
This is a function that uses regular expressions to match against the various
VAT formats required across the EU.

<?php
/**
 * @param integer $country Country name
 * @param integer $vat_number VAT number to test e.g. GB123 4567 89
 * @return integer -1 if country not included OR 1 if the VAT Num matches for
the country OR 0 if no match
*/
function checkVatNumber( $country, $vat_number ) {
    switch($country) {
        case 'Austria':
            $regex = '/^(AT){0,1}U[0-9]{8}$/i';
            break;
        case 'Belgium':
            $regex = '/^(BE){0,1}[0]{0,1}[0-9]{9}$/i';
            break;
        case 'Bulgaria':
            $regex = '/^(BG){0,1}[0-9]{9,10}$/i';
            break;
        case 'Cyprus':
            $regex = '/^(CY){0,1}[0-9]{8}[A-Z]$/i';
            break;
        case 'Czech Republic':
            $regex = '/^(CZ){0,1}[0-9]{8,10}$/i';
            break;
        case 'Denmark':
            $regex = '/^(DK){0,1}([0-9]{2}[\ ]{0,1}){3}[0-9]{2}$/i';
            break;
        case 'Estonia':
        case 'Germany':
        case 'Greece':
        case 'Portugal':
            $regex = '/^(EE|EL|DE|PT){0,1}[0-9]{9}$/i';
            break;
        case 'France':
            $regex = '/^(FR){0,1}[0-9A-Z]{2}[\ ]{0,1}[0-9]{9}$/i';
            break;
        case 'Finland':
        case 'Hungary':
        case 'Luxembourg':
        case 'Malta':
        case 'Slovenia':
            $regex = '/^(FI|HU|LU|MT|SI){0,1}[0-9]{8}$/i';
            break;
        case 'Ireland':
            $regex = '/^(IE){0,1}[0-9][0-9A-Z\+\*][0-9]{5}[A-Z]$/i';
            break;
        case 'Italy':
        case 'Latvia':
            $regex = '/^(IT|LV){0,1}[0-9]{11}$/i';
            break;
        case 'Lithuania':
            $regex = '/^(LT){0,1}([0-9]{9}|[0-9]{12})$/i';
            break;
        case 'Netherlands':
            $regex = '/^(NL){0,1}[0-9]{9}B[0-9]{2}$/i';
            break;
        case 'Poland':
        case 'Slovakia':
            $regex = '/^(PL|SK){0,1}[0-9]{10}$/i';
            break;
        case 'Romania':
            $regex = '/^(RO){0,1}[0-9]{2,10}$/i';
            break;
        case 'Sweden':
            $regex = '/^(SE){0,1}[0-9]{12}$/i';
            break;
        case 'Spain':
            $regex = '/^(ES){0,1}([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}
[0-9A-Z])$/i';
            break;
        case 'United Kingdom':
            $regex = '/^(GB){0,1}([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]
{2})|([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]{2}[\ ]{0,1}[0-9]{3})|((GD|
HA)[0-9]{3})$/i';
            break;
        default:
            return -1;
            break;
    }
   
    return preg_match($regex, $vat_number);
}
?>
Rob 19-Aug-2009 07:03
The following function works well for validating ip addresses

<?php
function valid_ip($ip) {
    return preg_match("/^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])" .
            "(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/",
$ip);
}
?>
KOmaSHOOTER at gmx dot de 09-Aug-2009 01:12
reading files from a dir without "." or ".."
<?php
$handle = opendir('content/pages/');
$pages = array();
while (false !== ($file = readdir($handle))) {
      $case=preg_match("/^[.]/",$file,$out, PREG_OFFSET_CAPTURE);
      //echo($case);
      if(!$case){
       echo("$file<br />");
       array_push($pages,$file);
       }
}
echo(count($pages));
?>
matt 08-May-2009 08:07
To support large Unicode ranges (ie: [\x{E000}-\x{FFFD}] or \x{10FFFFF}) you
must use the modifier '/u' at the end of your expression.
daniel dot chcouri at gmail dot com 03-May-2009 01:09
Html tags delete using regular expression

<?php
function removeHtmlTagsWithExceptions($html, $exceptions = null){
    if(is_array($exceptions) && !empty($exceptions))
    {
        foreach($exceptions as $exception)
        {
            $openTagPattern  = '/<(' . $exception . ')(\s.*?)?>/msi';
            $closeTagPattern = '/<\/(' . $exception . ')>/msi';

            $html = preg_replace(
                array($openTagPattern, $closeTagPattern),
                array('||l|\1\2|r||', '||l|/\1|r||'),
                $html
            );
        }
    }

    $html = preg_replace('/<.*?>/msi', '', $html);

    if(is_array($exceptions))
    {
        $html = str_replace('||l|', '<', $html);
        $html = str_replace('|r||', '>', $html);
    }

    return $html;
}

// example:
print removeHtmlTagsWithExceptions(<<<EOF
<h1>Whatsup?!</h1>
Enjoy <span style="text-color:blue;">that</span> script<br />
<br />
EOF
, array('br'));
?>
corey [works at] effim [delete] .com 25-Apr-2009 03:52
I see a lot of people trying to put together phone regex's and struggling (hey,
no worries...they're complicated). Here's one that we use that's pretty nifty.
It's not perfect, but it should work for most non-idealists.

*** Note: Only matches U.S. phone numbers. ***

<?php

// all on one line...
$regex = '/^(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})(?:(?<=\(\d{3})\))? ?
(?:(?<=\d{3})[.-])?([2-9]\d{2})[. -]?(\d{4})(?: (?i:ext)\.? ?(\d{1,5}))?$/';

// or broken up
$regex = '/^(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})'
        .'(?:(?<=\(\d{3})\))? ?(?:(?<=\d{3})[.-])?([2-9]\d{2})'
        .'[. -]?(\d{4})(?: (?i:ext)\.? ?(\d{1,5}))?$/';

?>

If you're wondering why all the non-capturing subpatterns (which look like this
"(?:", it's so that we can do this:

<?php

$formatted = preg_replace($regex, '($1) $2-$3 ext. $4', $phoneNumber);

// or, provided you use the $matches argument in preg_match

$formatted = "($matches[1]) $matches[2]-$matches[3]";
if ($matches[4]) $formatted .= " $matches[4]";

?>

*** Results: ***
520-555-5542 :: MATCH
520.555.5542 :: MATCH
5205555542 :: MATCH
520 555 5542 :: MATCH
520) 555-5542 :: FAIL
(520 555-5542 :: FAIL
(520)555-5542 :: MATCH
(520) 555-5542 :: MATCH
(520) 555 5542 :: MATCH
520-555.5542 :: MATCH
520 555-0555 :: MATCH
(520)5555542 :: MATCH
520.555-4523 :: MATCH
19991114444 :: FAIL
19995554444 :: MATCH
514 555 1231 :: MATCH
1 555 555 5555 :: MATCH
1.555.555.5555 :: MATCH
1-555-555-5555 :: MATCH
520-555-5542 ext.123 :: MATCH
520.555.5542 EXT 123 :: MATCH
5205555542 Ext. 7712 :: MATCH
520 555 5542 ext 5 :: MATCH
520) 555-5542 :: FAIL
(520 555-5542 :: FAIL
(520)555-5542 ext .4 :: FAIL
(512) 555-1234 ext. 123 :: MATCH
1(555)555-5555 :: MATCH
daevid at daevid dot com 06-Mar-2009 11:18
I just learned about named groups from a Python friend today and was curious if
PHP supported them, guess what -- it does!!!

http://www.regular-expressions.info/named.html

<?php
   preg_match("/(?P<foo>abc)(.*)(?P<bar>xyz)/",
                       'abcdefghijklmnopqrstuvwxyz',
                       $matches);
   print_r($matches);
?>

will produce:

Array
(
    [0] => abcdefghijklmnopqrstuvwxyz
    [foo] => abc
    [1] => abc
    [2] => defghijklmnopqrstuvw
    [bar] => xyz
    [3] => xyz
)

Note that you actually get the named group as well as the numerical key
value too, so if you do use them, and you're counting array elements, be
aware that your array might be bigger than you initially expect it to be.
wjaspers4 [at] gmail [dot] com 27-Feb-2009 11:16
I recently encountered a problem trying to capture multiple instances of named
subpatterns from filenames.
Therefore, I came up with this function.

The function allows you to pass through flags (in this version it applies to
all expressions tested), and generates an array of search results.

Enjoy!

<?php

/**
 * Allows multiple expressions to be tested on one string.
 * This will return a boolean, however you may want to alter this.
 *
 * @author William Jaspers, IV <wjaspers4@gmail.com>
 * @created 2009-02-27 17:00:00 +6:00:00 GMT
 * @access public
 *
 * @param array $patterns An array of expressions to be tested.
 * @param String $subject The data to test.
 * @param array $findings Optional argument to store our results.
 * @param mixed $flags Pass-thru argument to allow normal flags to apply to all
tested expressions.
 * @param array $errors A storage bin for errors
 *
 * @returns bool Whether or not errors occurred.
 */
function preg_match_multiple(
  array $patterns=array(),
  $subject=null,
  &$findings=array(),
  $flags=false,
  &$errors=array()
) {
  foreach( $patterns as $name => $pattern )
  {
    if( 1 <= preg_match_all( $pattern, $subject, $found, $flags ) )
    {
      $findings[$name] = $found;
    } else
    {
      if( PREG_NO_ERROR !== ( $code = preg_last_error() ))
      {
        $errors[$name] = $code;
      } else $findings[$name] = array();
    }
  }
  return (0===sizeof($errors));
}
?>
skds1433 at hotmail dot com 19-Feb-2009 02:41
here is a small tool for someone learning to use regular expressions. it's very
basic, and allows you to try different patterns and combinations. I made it to
help me, because I like to try different things, to get a good understanding of
how things work.

<?php
$search = isset($_POST['search'])?$_POST['search']:"//";
$match = isset($_POST['match'])?$_POST['match']:"<>";

echo '<form method="post">';
echo 's: <input style="width:400px;" name="search" type="text" value=
"'.$search.'" /><br />';
echo 'm:<input style="width:400px;" name="match" type="text" value="'.$match.'"
/><input type="submit" value="go" /></form><br />';
if (preg_match($search, $match)){echo "matches";}else{echo "no match";}
?>
akniep at rayo dot info 30-Jan-2009 11:05
Bugs of preg_match (PHP-version 5.2.5)

In most cases, the following example will show one of two PHP-bugs discovered
with preg_match depending on your PHP-version and configuration.

<?php

$text = "test=";
// creates a rather long text
for ($i = 0; $i++ < 100000;)
    $text .= "%AB";

// a typical URL_query validity-checker (the pattern's function does not matter
for this example)
$pattern    = '/^(?:[;\/?:@&=+$,]|(?:[^\W_]|[-_.!~*\()\[\] ])|(?:%[\da-fA-F]
{2}))*$/';
   
var_dump( preg_match( $pattern, $text ) );

?>

Possible bug (1):
=============
On one of our Linux-Servers the above example crashes PHP-execution with a C(?)
Segmentation Fault(!). This seems to be a known bug (see http://bugs.php.net/
bug.php?id=40909), but I don't know if it has been fixed, yet.
If you are looking for a work-around, the following code-snippet is what I
found helpful. It wraps the possibly crashing preg_match call by decreasing the
PCRE recursion limit in order to result in a Reg-Exp error instead of a
PHP-crash.

<?php
[...]

// decrease the PCRE recursion limit for the (possibly dangerous) preg_match
call
$former_recursion_limit = ini_set( "pcre.recursion_limit", 10000 );

// the wrapped preg_match call
$result = preg_match( $pattern, $text );

// reset the PCRE recursion limit to its original value
ini_set( "pcre.recursion_limit", $former_recursion_limit );

// if the reg-exp fails due to the decreased recursion limit we may not make
any statement, but PHP-execution continues
if ( PREG_RECURSION_LIMIT_ERROR === preg_last_error() )
{
    // react on the failed regular expression here
    $result = [...];
   
    // do logging or email-sending here
    [...]
} //if

?>

Possible bug (2):
=============
On one of our Windows-Servers the above example does not crash PHP, but
(directly) hits the recursion-limit. Here, the problem is that preg_match does
not return boolean(false) as expected by the description / manual of above.
In short, preg_match seems to return an int(0) instead of the expected boolean
(false) if the regular expression could not be executed due to the PCRE
recursion-limit. So, if preg_match results in int(0) you seem to have to check
preg_last_error() if maybe an error occurred.
Alex Zinchenko 11-Dec-2008 02:15
If you need to check whether string is a serialized representation of variable
(sic!) you can use this :

<?php

$string = "a:0:{}";
if(preg_match("/(a|O|s|b)\x3a[0-9]*?
((\x3a((\x7b?(.+)\x7d)|(\x22(.+)\x22\x3b)))|(\x3b))/", $string))
{
echo "Serialized.";
}
else
{
echo "Not serialized.";
}

?>

But don't forget, string in serialized representation could be VERY big,
so match work can be slow, even with fast preg_* functions.
phil dot taylor at gmail dot com 23-Oct-2008 12:01
If you need to check for .com.br and .com.au and .uk and all the other crazy
domain endings i found the following expression works well if you want to
validate an email address. Its quite generous in what it will allow

<?php

        $email_address = "phil.taylor@a_domain.tv";

    if (preg_match("/^[^@]*@[^@]*\.[^@]*$/", $email_address)) {
        return "E-mail address";       
    }
       
?>
Steve Todorov 03-Oct-2008 01:23
While I was reading the preg_match documentation I didn't found how to match an
IP..
Let's say you need to make a script that is working with ip/host and you want
to show the hostname - not the IP.

Well this is the way to go:

<?php
/* This is an ip that is "GET"/"POST" from somewhere */
$ip = $_POST['ipOrHost'];

if(preg_match('/(\d+).(\d+).(\d+).(\d+)/',$ip))
  $host = gethostbyaddr($ip);
else
  $host = gethostbyname($ip);

echo $host;
?>

This is a really simple script made for beginners !
If you'd like you could add restriction to the numbers.
The code above will accept all kind of numbers and we know that IP address
could be MAX 255.255.255.255 and the example accepts to 999.999.999.999.

Wish you luck!

Best wishes,
Steve
Ashus 12-Sep-2008 03:18
If you need to match specific wildcards in IP address, you can use this regexp:

<?php

$ip = '10.1.66.22';
$cmp = '10.1.??.*';

$cnt = preg_match('/^'
     .str_replace(
     array('\*','\?'),
     array('(.*?)','[0-9]'),
     preg_quote($cmp)).'$/',
     $ip);

echo $cnt;

?>

where '?' is exactly one digit and '*' is any number of any characters. $cmp
mask can be provided wild by user, $cnt equals (int) 1 on match or 0.
wjaspers4[at]gmail[dot]com 28-Aug-2008 02:55
I found this rather useful for testing mutliple strings when developing a regex
pattern.
<?php
/**
 * Runs preg_match on an array of strings and returns a result set.
 * @author wjaspers4[at]gmail[dot]com
 * @param String $expr The expression to match against
 * @param Array $batch The array of strings to test.
 * @return Array
 */
function preg_match_batch( $expr, $batch=array() )
{
// create a placeholder for our results
    $returnMe = array();

// for every string in our batch ...
    foreach( $batch as $str )
    {
// test it, and dump our findings into $found
        preg_match($expr, $str, $found);

// append our findings to the placeholder
        $returnMe[$str] = $found;
    }

    return $returnMe;
}
?>
Dino Korah AT webroot DOT com 08-Jul-2008 11:11
preg_match and preg_replace_callback doesnt match up in the structure of the
array that they fill-up for a match.
preg_match, as the example shows, supports named patterns, whereas
preg_replace_callback doesnt seem to support it at all. It seem to ignore any
named pattern matched.
jonathan dot lydall at gmail dot removethispart dot com 26-May-2008 07:50
Because making a truly correct email validation function is harder than one may
think, consider using this one which comes with PHP through the filter_var
function (http://www.php.net/manual/en/function.filter-var.php):

<?php
$email = "someone@domain .local";

if(!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "E-mail is not valid";
} else {
    echo "E-mail is valid";
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Dec 4 10:24:12 2011 UTC
Received cookie: COUNTRY=JPN%2C1.113.88.92
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

ucfirst> <substr
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 28 Oct 2011

view this page in

[English             ] Change language
trim

(PHP 4, PHP 5)

trim — 文字列の先頭および末尾にあるホワイトスペースを取り除く

説明

string trim ( string $str [, string $charlist ] )

この関数は str の最初および最後から空白文字を取り除き、取り除かれた文字列を返し
ます。2番目のパラメータを指定しない場合、 trim()は以下の文字を削除します。

  • " " (ASCII 32 (0x20)), 通常の空白。
  • "\t" (ASCII 9 (0x09)), タブ。
  • "\n" (ASCII 10 (0x0A)), リターン。
  • "\r" (ASCII 13 (0x0D)), 改行。
  • "\0" (ASCII 0 (0x00)), NULバイト
  • "\x0B" (ASCII 11 (0x0B)), 垂直タブ

パラメータ

str

    ホワイトスペースを取り除く string

charlist

    charlistパラメータにより、削除する文字を指定することも可能です。削除したい
    全ての文字をリストにしてください。..を文字の範囲を指定する際に使用可能です
    。

返り値

ホワイトスペースを取り除いた文字列

変更履歴

バージョン                     説明
4.1.0      charlist オプションパラメータが追加されました

例

例1 trim()の使用例

<?php

$text   = "\t\tThese are a few words :) ...  ";
$binary = "\x09Example string\x0A";
$hello  = "Hello World";
var_dump($text, $binary, $hello);

print "\n";

$trimmed = trim($text);
var_dump($trimmed);

$trimmed = trim($text, " \t.");
var_dump($trimmed);

$trimmed = trim($hello, "Hdle");
var_dump($trimmed);

$trimmed = trim($hello, 'HdWr');
var_dump($trimmed);

// ASCII 制御文字 (0 から 31 まで) を
// $binary の先頭および末尾から取り除きます
$clean = trim($binary, "\x00..\x1F");
var_dump($clean);

?>

上の例の出力は以下となります。

string(32) "        These are a few words :) ...  "
string(16) "    Example string
"
string(11) "Hello World"

string(28) "These are a few words :) ..."
string(24) "These are a few words :)"
string(5) "o Wor"
string(9) "ello Worl"
string(14) "Example string"

例2 trim() を用いて配列の値をトリミングする

<?php
function trim_value(&$value)
{
    $value = trim($value); 
}

$fruit = array('apple','banana ', ' cranberry ');
var_dump($fruit);

array_walk($fruit, 'trim_value');
var_dump($fruit);

?>

上の例の出力は以下となります。

array(3) {
  [0]=>
  string(5) "apple"
  [1]=>
  string(7) "banana "
  [2]=>
  string(11) " cranberry "
}
array(3) {
  [0]=>
  string(5) "apple"
  [1]=>
  string(6) "banana"
  [2]=>
  string(9) "cranberry"
}


注意

    注意: わかるかな?: 途中の文字が取り除かれる

    trim() は string の先頭と末尾から文字を取り除くので、文字列の途中にある文字
    がを取り除かれたり (あるいは取り除かれなかったり) すると少し戸惑うことでし
    ょう。 trim('abc', 'bad') は 'a' と 'b' を両方取り除きます。なぜなら、まず
    'a' を取り除いた時点で 'b' が先頭の文字となり、それも取り除く対象だからです
    。したがって、この処理は正しく動きます。一方、 trim('abc', 'b') は動かない
    でしょう。

参考

  • ltrim() - 文字列の最初から空白 (もしくはその他の文字) を取り除く
  • rtrim() - 文字列の最後から空白 (もしくは他の文字) を削除する
  • str_replace() - 検索文字列に一致したすべての文字列を置換する



ucfirst> <substr
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 28 Oct 2011
 
add a note add a note User Contributed Notes trim
Lea Hayes 10-Aug-2011 12:22
Combined filter and trim array.

<?php
function _trim_value(&$value) {
    if (is_string($value))
        $value = trim($value);
}

function array_filter_and_trim($arr) {
    array_walk($arr, '_trim_value');
    return array_filter($arr);
}
?>
gerjoo at gmail dot com 03-Jun-2011 03:38
On my application I had several users submit what to me appeared as "empty
strings", whereas in fact they were submitting the &shy; character.

Trim, by default, does not strip this character (Though arguably it should).
The following code strips this character from your input:

<?php

// As the &shy; character is invisible we'll simply use the ASCII numeric
representation, and decode via chr():
$string = trim($string, chr(173));

// If you wish to strip all occurences this will work:
$string = str_replace(chr(173), "", $string);

?>

Gerard
akarmenia at gmail dot com 05-Apr-2011 01:49
Here's a function to trim strings recursively within an array.

<?php

// Trim a string or an array of strings recursively
function trim_r($array) {
    if (is_string($array)) {
        return trim($array);
    } else if (!is_array($array)) {
        return '';
    }
    $keys = array_keys($array);
    for ($i=0; $i<count($keys); $i++) {
        $key = $keys[$i];
        if ( is_array($array[$key]) ) {
            $array[$key] = trim_r($array[$key]);
        } else if ( is_string($array[$key]) ) {
            $array[$key] = trim($array[$key]);
        }
    }
    return $array;
}

// Test
$a = array(' cat ', ' dog ' => ' mouse ', 234);
print_r(trim_r($a));

?>

Array
(
    [0] => cat
    [ dog ] => mouse
    [1] => 234
)
gmutale at yahoo dot com 01-Oct-2010 09:11
To trim all strings and remove CR.

<?php
$arr = array('apple', 'orange');
$arr2 = array('name' => 'James', 'zipcode' => '1234', $arr);
$data = array($arr2, 'peach');

array_walk_recursive($data, 'trim_all');
print_r($data);

function trim_all(&$value)
{ 
  if (is_array($value))
  {   
    array_walk_recursive($value, 'trim_all');
  }
  else
  {   
    $value = trim(str_replace("\r\n", "\n", $value));
  }
}
?>
Knut Kohl 25-Aug-2010 12:59
Please consider the following:

<?php
$a = '0';

if (trim($a)) {
  echo 'Never ever ...';
} else {
  echo 'YES, "(bool)trim(\'0\')" is FALSE';
}
?>

So never forget to use:

if (trim($a) != '') ...

This cast costs me some time...
ludko2 at gmail dot com 09-Jul-2010 09:28
Non-breaking spaces can be troublesome with trim:

<?php
// turn some HTML with non-breaking spaces into a "normal" string
$myHTML = "&nbsp;abc";
$converted = strtr($myHTML, array_flip(get_html_translation_table
(HTML_ENTITIES, ENT_QUOTES)));

// this WILL NOT work as expected
// $converted will still appear as " abc" in view source
// (but not in od -x)
$converted = trim($converted);

// &nbsp; are translated to 0xA0, so use:
$converted = trim($converted, "\xA0"); // <- THIS DOES NOT WORK

// EDITED>>
// UTF encodes it as chr(0xC2).chr(0xA0)
$converted = trim($converted,chr(0xC2).chr(0xA0)); // should work

// PS: Thanks to John for saving my sanity!
?>
Onur Nizam ( onur dot nizam at yahoo dot com ) 16-May-2010 02:45
While inserting data from web forms to databases, trimming the posted values to
remove the spaces from the left and right sides can be a good idea to avoid the
user faults. This code have to be located before the DB operations.

<?php

/* Stripping whitespaces from left and right sides of all posted data.
 * Put this before working with posted data.
 *
*/

// Remove whitespaces from left and right sides.
function removeSpaces($str) {
  $newStr = trim($str);
  return $newStr;
}

// If any data posted to the page, send them for trimming.
if ($_POST) {
  foreach ($_POST as $var => $value) {
    $value=removeSpaces($value);
    $_POST[$var] = $value;
  }
}

?>
james [at] bandit -dot- co -dot- nz 09-Apr-2010 11:29
Trims occurances of every word in an array from the beginning and end of a
string + whitespace and optionally extra single characters as per normal trim()

<?php
function trim_words($what, $words, $char_list = '') {
    if(!is_array($words)) return false;
    $char_list .= " \t\n\r\0\x0B"; // default trim chars
    $pattern = "(".implode("|", array_map('preg_quote', $words)).")\b";
    $str = trim(preg_replace('~'.$pattern.'$~i', '', preg_replace('~^
'.$pattern.'~i', '', trim($what, $char_list))), $char_list);
    return $str;
}

// for example:
$trim_list = array('AND', 'OR');

$what = ' OR x = 1 AND b = 2 AND ';
print_r(trim_words($what, $trim_list)); // => "x = 1 AND b = 2"

$what = ' ORDER BY x DESC, b ASC, ';
print_r(trim_words($what, $trim_list, ',')); // => "ORDER BY x DESC, b ASC"
?>
thek at o2 dot pl 17-Feb-2010 10:36
There is a trap when making "form prefilters". Something like
$_POST = array_map('trim', $_POST)
may be not what we wanted, because when there are arrays in form made by field
[] this "prefilter" return not an array but, according to his behavior, string.
So as a effect we see in var_dump not array but field = "Array" what can mess
up our validation.
holek dot n at gmail dot com 09-Sep-2009 10:59
Admendum to this note:
<?php
// trim the ASCII control characters at the beginning and end of $binary
// (from 0 to 31 inclusive)
$clean = trim($binary, "\x00..\x1F");
?>
I had a big time with my WWW parser, which produced XML errors because of
illegal characters in the outside files. So I decided to wipe them out.
If you want to remove all illegal SGML characters (ASCII coces 0 to 31
inclusive and 127 to 159 inclusive) from the whole string, (remember that trim
doesn't work inside a string, just on the borders) here's how to do that:

<?php
$title = "Autobus zamiast \x1EHetmana\x1D ";
$replaceArray = array(array(), array()); // this is a replace array for illegal
SGML characters;
for ($i=0; $i<32; $i++)                  // produces a correct XML output
{
    $replaceArray[0][] = chr($i);
    $replaceArray[1][] = "";
}
for ($i=127; $i<160; $i++)
{
    $replaceArray[0][] = chr($i);
    $replaceArray[1][] = "";
}
$title = str_replace($replaceArray[0], $replaceArray[1], $title); // get rid of
illegal SGML chars
echo $title; // prints out "Autobus zamiast Hetmana"
?>

Now $title can be printed into an XML/XHTML file without worries.
jamesp at westcoastaerospace dot com 06-Aug-2009 04:54
As another poster has pointed out, chr(160) is also important to filter out.
This is the ascii representation of an html "hard space", and it will show up
sometimes in your datasources, especially if the data was copied-and-pasted
from a web browser from a page that used hard spaces to force layout.

This is not just a Windows problem. I am on a Mac and I have had to deal with
it too (although the data in question may have indeed originally come from a
windows user, I don't know.)
chrisstocktonaz at gmail dot com 22-May-2009 07:39
Note for trimming arrays that you can easily use array_map if you don't want to
specify the characters.

<?php
var_dump(array_map('trim', Array(' Test ', 'Test ', ' Test')));
?>
Andrew 15-May-2009 04:01
It should be mentioned that if you use the second charlist parameter, you are
overriding the defaults, not adding to them. You would need to either
explicitly add them to the charlist or call trim twice, like so:

<?php

$str = trim(trim($str), './@#$');

?>
andycbio at gmail dot com 21-Apr-2009 10:37
A cell read from an Excel sheet appeared to have a whitespace, and this was not
getting trimmed. By converting to hex, it seems the char was a hard return.

Successfully trimmed it by:

<?php
trim($value, "\xc2\xa0");
?>

The actual hex values may vary by character set, check with bin2hex() for
what's actually there.
info at jlammertink dot nl 08-Apr-2009 08:35
I made this function to trim texts.
Removes al double horizontal and vertical whitespace chars.

<?php
function trimText($str)
{
    $str = trim($str);
    $str = preg_replace('/\h+/', ' ', $str);
    $str = preg_replace('/\v{3,}/', PHP_EOL.PHP_EOL, $str);

    return $str;
}
?>
Anonymous 21-Mar-2009 11:48
small fix for the trimString function to proof against slash and backslash:

<?php
function trimString($input, $string){
        $input = trim($input);
        $string = str_replace("\\", "\\\\", $string);
        $string = str_replace('/', '\\/', $string);
        $startPattern = "/^($string)+/i";
        $endPattern = "/($string)+$/i";
        return trim(preg_replace($endPattern, '', preg_replace
($startPattern,'',$input)));
}
?>
dev dot ivangc at gmail dot com 26-Feb-2009 02:23
If what you need is delete a string instead of character, this function could
help you:

<?php
function trimString($input, $string){
        $input = trim($input);
        $startPattern = "/^($string)+/i";
        $endPattern = "/($string)+$/i";
        return trim(preg_replace($endPattern, '', preg_replace
($startPattern,'',$input)));
}
?>

Use:
<?php
echo trimString("      Hello world!. I said hello", "hello")
?>
Will return:
world!. I said
dead dot screamer at seznam dot cz 27-Jan-2009 11:29
some of "trim array" functions
this trim strings, arrays and objects:
<?php
function trimA($str, $set=null)
{
    if(is_Array($str) || is_Object($str))
        foreach($str as &$s)
            $s=trimA($s,$set);
    elseif($set===null)$str=trim($str);
    else $str=trim($str,$set);
    return $str;
}
?>
josecruz at josecruz dot com dot br 22-Nov-2008 01:50
A simple function to clear extra white spaces along a string.
<?php
function TrimStr($str)
{
    $str = trim($str);
    for($i=0;$i < strlen($str);$i++)
    {

        if(substr($str, $i, 1) != " ")
        {

            $ret_str .= trim(substr($str, $i, 1));

        }
        else
        {
            while(substr($str,$i,1) == " ")
          
            {
                $i++;
            }
            $ret_str.= " ";
            $i--; // ***
        }
    }
    return $ret_str;
}
?>

[EDIT BY danbrown AT php DOT net: Contains a fix provided by (info AT deep-soft
DOT com) to address the issue where "it deletes the first char after spaces
(because of while)."]
colnector at colnect dot com 26-Aug-2008 01:21
The following function will assist you in case you wish to trim a string but
keep the parts trimmed. I'm using it to strip phrases for translation on my
site.

Example:
cleanPhrase('  (this () is it)');

Will return:
Array
(
    [left] =>   ( 
    [right] => )
    [clean] => this () is it
)

<?php
    /**
     * Trims some of the characters from the phrase
     *
     * @param string $phrase - to be "cleaned"
     * @param string $dirtyChars - the characters that need be removed
     * @return string
     */
    public static function cleanPhrase($phrase, $dirtyChars = " \t\n()[]:.\"'")
{
        $len = strlen($phrase);
        for($i=0; $i < $len; $i++) {
            $pos = strpos($dirtyChars, substr($phrase, $i, 1));
            if ($pos === false) break;
        }
        for($j=$len-1; $j >= 0; $j--) {
            $pos = strpos($dirtyChars, substr($phrase, $j, 1));
            if ($pos === false) break;
        }
       
        $res = array();
        $res['left'] = substr($phrase, 0, $i);
        $res['right'] = substr($phrase, $j+1);
        $res['clean'] = substr($phrase, $i, $j-$i+1);
       
        return $res;
    }
?>
aalaap at gmail dot com 18-Jun-2008 06:42
If you want to remove all excessive spaces and leave just a single one, like
the way HTML text gets rendered in the browser, this function (modified from
one posted here earlier) will work:

function str_squeeze($test) {
    return trim(ereg_replace( ' +', ' ', $test));
}

The result is that a string such as "hello___how_are__you_" (where the _ is a
space) will result in a more sane "hello_how_are_you".
luciano[dot]longo[at]gmail 26-Apr-2008 05:17
Yet another array trim, recursive too.
I think this one is pretty usefull, though it lacks charlist, you can add that
functionality if you need to, it's not that hard ;)
Anyway, one feature that I added, and I find pretty usefull, is that it can
splice an empty position if you want to

<?php
function array_trim_recursive(&$array, $splice_empty = true) {
    foreach($array as $k => &$v) {
        if(is_array($v)) {
            array_trim_recursive($v, $splice_empty);
        } else {
            $array[$k] = trim($v);
            iif(!$v && $splice_empty) {
                array_splice($array, $k, 1);
            }
        }
    }
}
?>
davidsteinsland [at] gmail [dot] com 25-Apr-2008 05:19
I've noticed that many needs to remove multiple lines in the end of a string,
so I made this function. Pretty easy, actually. It removes all unnecessary
newlines (or something else, if $char is set)

<?php
function remove_unnecessary ($str, $char = "\n") {
    while (true) {
        if (substr ($str, -(strlen($char))) == $char) {
            $str = substr ($str, 0, -(strlen($char)));
        } else {
            break;
        }
    }
   
    return $str;
}

$Str = "Hello\nHello\n\n\n\n\n\n\n\n\n";

// Outputs: Hello\nHello
echo remove_unnecessary ($Str);
?>
me at robhaswell dot co dot uk 16-Apr-2008 11:50
admin at semaster dot ru's array_trim function is flawed in that it will change
the type of nulls and numeric variables (to strings).

Here is a better version, although it lacks charlist support:

<?php
function array_trim($var) {
    if (is_array($var))
        return array_map("array_trim", $var);
    if (is_string($var))
        return trim($var);
    return $var;
}
?>

-Rob
carl at rusco dot com 24-Dec-2007 05:53
as mentioned, a str_replace(' ', '', $string) does execute faster than Robin
Leffmann's ereg_replace; however, the regular expression Leffmann supplied has
the ability of also stripping out only -single- whitespaces as by his comment,
whereas the blunt str_replace will simply sweep all of them away, single as
cascading. one tool for each job.
Pinco Pallino 01-Sep-2007 07:08
As already commented by thers the solution from Robin Leffmann to remove "all"
the spaces from a string not only does not trim the "other" chars besides plain
spaces but is at all not faster than jayoungh5's proposal.

The only faster way I can imagine of is:

function trimall($str, $charlist = " \t\n\r\0\x0B")
{
  return str_replace(str_split($charlist), '', $str);
}

However jayoungh5's one might still be faster for very large sets of characters
to be stripped.
hkb at hkb dot it 24-Aug-2007 10:03
I have made this simple function to trim the whole string instead of just the
beginning and end...

<?php

function strTrimTotal($input) {

    $input = trim($input);

    for($i=0;$i<strlen($input);$i++) {

        if(substr($input, $i, 1) != " ") {

            $output .= trim(substr($input, $i, 1));

        } else {

            $output .= " ";

        }

    }

    return $output;
}

?>
lxg 16-Aug-2007 12:26
masteremployment's solution in a function, and with preg_replace() instead of
ereg_replace():

<?php
function removeWhitespace($string)
{
    if (!is_string($string))
        return false;

    $string = preg_quote($string, '|');
    return preg_replace('|  +|', ' ', $string);
}
?>
Hayley Watson 10-Aug-2007 05:49
Robin Leffman's code could be improved further...
<?php
$string = 'This string  has   no    whitespaces.';
echo str_replace(' ', '', $string );
?>

Of course, like Leffman's code, that only removes space characters, not
necessarily all whitespace (or characters in some arbitrary $whiteSpace
string). For that
<?php
function trimlrm ($hayStack, $whiteSpaceChars)
{
    $char = $whiteSpaceChars[0];
    $chars = str_repeat($char, strlen($whiteSpaceChars);
    $trimmed = strtr($hayStack, $whiteSpaceChars, $chars)));
    return str_replace($char, '', $trimmed);
}
?>
would probably work, but like the others, fails to give '..' the same
specialness that it has in trim().
moehbass at gmail dot com 06-Jul-2007 07:48
Responding to Robin Leffmann:
jayoungh5 wrote a function to trim whitespace on the left, on the right, in the
middle, everywhere (Below). It iterates through the string's characters. Yours,
claimed to be faster, uses a regex function. I think it should be slower since
I believe that dealing with a regex is iterative in nature and add to that the
possibility of recursion! Perhaps your function is shorter in code lines.
I am not absolutely positive, so take this as a clue but research for a more
solid truth.
Robin Leffmann 27-Jun-2007 12:13
Here's a faster way to do what's described below:

<?php
$string = 'This string  has   no    whitespaces.';
echo ereg_replace( ' +', '', $string );
?>

Output: Thisstringhasnowhitespaces.

If you want it to replace only single whitespaces instead of both single and
cascading dito, remove the + in the first parameter of ereg_replace().
Hayley 19-Mar-2007 10:36
trim's code can of course be simplified with some use of the trim()
function....

<?php
$str = "  Words with  lots      of  spaces    ";
$str = preg_replace('/\s\s+/', ' ', trim($str));
?>

Doing the trim() first reduces the workload being put on the more expensive
preg_replace().
24-Jan-2007 04:04
I use this to remove leading, trailing and "more than one" space in between
words.

$pat[0] = "/^\s+/";
$pat[1] = "/\s{2,}/";
$pat[2] = "/\s+\$/";
$rep[0] = "";
$rep[1] = " ";
$rep[2] = "";
$str = "  Words with   lots      of  spaces     ";
$str = preg_replace($pat,$rep,$str);
// Output
"Words with lots of spaces"
Piopier 12-Jan-2007 02:06
It may be useful to know that trim() returns an empty string when the argument
is an unset/null variable.
asbo/at\iserv/dot\net 19-Nov-2006 08:40
If you need to trim a string from the beginning and end of a string, then this
function maybe prove handy.

<?php
function lrclean($str,$rm) {
  $i = strlen($rm);
  do {
    if (substr($str,0,$i) == $rm) {$str = substr($str,$i);}
  } while (substr($str,0,$i) == $rm);

  do {
    if (substr($str,-$i,$i) == $rm) {$str = substr($str,0,-$i);}
  } while (substr($str,-$i,$i) == $rm);
 
  return $str;
}

// prints 'text'
echo lrclean('xyztextxyz','xyz');
?>
phazei at excite dot com 10-Jul-2006 11:39
I had some issues using <? array_map('trim',$array) ?> when there was an array
in array.  All arrays were replaced by the string "Array", drove me crazy.
Hopefully this will help someone:
<?php
function trim_array($totrim) {
    if (is_array($totrim)) {
        $totrim = array_map("trim_array", $totrim);
    } else {
        $totrim = trim($totrim);
    }
    return $totrim;
}
?>
USE:
<?php
$trimmed_array = trim_array($untrimmed_array);
?>

This function should recurse all embeded arrays.
rchaube at staff dot atlantic dot net 18-Feb-2006 09:03
I was accepting text pasted from a csv file into a textarea in my code. I found
that even using trim was not able to get rid of the whitespace characters at
the end of the string.
Finally, using this helped:

$result = trim($source,"\x7f..\xff\x0..\x1f");

Hope this saves someone few hours. All thanks to previous comment from HW for
this
asharm4 at ilstu dot edu 17-Jan-2006 05:30
This staetment removes the trailing and leading whitespaces from the
string..Really useful when handling the form values submitted by a visitor or
analyzing a log file.

$trimmed_string = preg_replace ( "/\s\s+/" , " " , $untrimmed_string );

Note : thsi would only remove leading and trailing whitespaces. For the
whitespaces in the string use any of the above methods.
Martin Kealey 14-Dec-2005 10:10
Using "trim" to minimize the format of a decimal number strikes me as awkward.
I would just use:

   $str += 0;

This even has the added benefit of ensuring that you have at least one digit
(and thus have a valid number) even if the original was empty.
warhog at warhog dot net 07-Dec-2005 08:28
I was wondering about much of the examples given below, but the current
(2005-12-07) function definition in the manual is not correct.

The function trim is defined as

trim(string string [, string charlist])

you must give the string-parameter and you can optionally add a parameter
charlist - these chars are the chars to strip from the beginning and the end of
the file.
(its self-evident that the default of this parameter is "\n\t\r\h\v\0 ")

hope that'll help - and that the docs are updated.. i don't know since which
php-version that optional parameter can be used - i know that it works with PHP
>= 4.3 & >= 5.0 . Maybe it's beeing there since 10 years and just an enormous
insider :-)
davis_utah at yahoo dot com 01-Sep-2005 06:30
Just a word of caution when looping through a batch of strings (in the
thousands or more). Using trim to take off a left over character (like a comma
in a csv output) will result in a much slower execution. It is better to use a
tiny bit of conditional logic instead.

I believe the reason this is the case is because of having to create a new spot
in memory to temporarily handle the result of trim.

Hope this helps.
rifter at cox dot net 16-Jul-2005 07:49
Chris wrote:
> Here's a neat function to trim off extraneous zeros and  the > decimal,
leaving important numbers intact:
> ...

  Actually use:
<?php
...
  return rtrim(trim($num, '0'), '.');
...
?>
This ensures that a left leading decimal place doesn't get removed i.e. 00.010
should return .01 and not 01.
chris dot cowart at gmail dot com 05-Jul-2005 05:20
Here's a neat function to trim off extraneous zeros and  the decimal, leaving
important numbers intact:

<?php

function clean_num($num){
  return trim(trim($num, '0'), '.');
}

echo clean_num('06000.3050');
echo clean_num('500.00');

?>

Output:
6000.305
500

I find it very handy to use when pulling data from decimal fields in MySQL and
putting them into <input> fields. Makes everything cleaner :)
15-Jun-2005 04:54
here's a heads up folks.

in the event that you want to check the result of a trim for being empty the
following code fails::

$emptyvar = " ";
if ( empty(trim($emptyvar)) )
{
    echo "It was empty";
}

this code works as expected::

$emptyvar = " ";
$check = trim($emptyvar);
if ( empty($check) )
{
    echo "It was empty";
}
okumurya at hotmail dot com 05-Jun-2005 11:01
fread/fwrite blocks program when no data available.
so, you consider use select system call.
following is example.

<?php
  /**
   *
   * write/read pipe
   *
   * @param resource $w_fp write file handle
   * @param resource $r_fp read file handle
   * @param string $input
   * @return string
   */
  function _writeread_pipe(&$w_fp, &$r_fp, $input) {
    $output = '';
    $write_bytes = 0;

    //
    while (True) {
      if (!isset($r_fp) && !isset($w_fp)) break;

      $read = isset($r_fp) ? array($r_fp) : Null;
      $write = isset($w_fp) ? array($w_fp) : Null;

      // select pipes
      $r = stream_select($read,
                         $write,
                         $except = Null,
                         30
                         );
      if ($r === False) {
        return PEAR::raiseError('process timeout');
      }

      // read pipe
      if (isset($read) && isset($read[0])) {
        do {
          $buf = fread($r_fp, 1024);
          if (strlen($buf) == 0) {
            fclose($r_fp);
            $r_fp = Null;
            break;
          }
          $output .= $buf;
        } while (True);
      }

      // write pipe
      if (isset($write) && isset($write[0])) {
        $r = fwrite($w_fp, substr($input, $write_bytes));
        if ($r === False) {
          return PEAR::raiseError('process write error');
        }

        $write_bytes += $r;
        if ($write_bytes == strlen($input)) {
          fclose($w_fp);
          $w_fp = Null;
        }
      }
    }

    return $output;
  }

?>
dmr37 at cornell dot edu 17-May-2005 07:47
Note that manithu's post on 29-Mar-2005 02:49 for identifying strings that only
contain whitespaces will also identify strings like "0" and " 0   " as being
empty.  If you want to check whether something ONLY has whitespaces, use the
following:

<?php

if (trim($foobar)=='') {
   echo 'The string $foobar only contains whitespace!';
}

?>
admin at semaster dot ru 31-Mar-2005 03:37
Another recursive trim function for multi-dimensional arrays ( uses only trim
function :)

function array_trim($arr, $charlist=null){
    foreach($arr as $key => $value){
        if (is_array($value)) $result[$key] = array_trim($value, $charlist);
        else $result[$key] = trim($value, $charlist);
    }
    return $result;
}
manithu 29-Mar-2005 07:49
An faster (and eleganter) way than using regular expressions to check if a
string only contains whitespaces is to use trim().

Example:

<?php

if (!trim($foobar)) {
    echo 'The string $foobar is empty!';
}

?>

I hope this helps somebody.
04-Mar-2005 06:25
It is important to stress that trim() only removes whitespace characters from
the *beginning* and *end* of str.  To remove whitespace characters embedded
within a string (newlines, for instance) you can use str_replace(), searching
for and destroying both \n and \r characters.
Hayley Watson 08-Feb-2005 12:46
Another way to trim all the elements of an array
<?php
$newarray = array_map('trim', $array);
?>
abderzack host provider hotmail dot com 12-Nov-2004 03:44
To eliminate all the empty strings from my array, I used the array_filter, that
way :

1.
I defined a function returning true iff the passed as parameter string is NOT
empty.
function notEmpty($string)
{
return !empty($string);
}

2.Use array filter :
$myarray = array_filter($myarray ,"notEmpty");

That's it.
Of course, if you want to prove your mama you can write unreadable code, you
can create an anonymous function, by using the create_function, instead of
declaring the function notEmpty.

Hope that will help you.
webmaster __AT__ digitalanime __DOT__ nl 26-May-2004 09:50
To:
mrizzo at advancedsl dot com dot ar

And what about array_map()? :)

<?php
$myarray = array(
    'hello' => '    bye    ',
    'hey' => '      howdie',
    'haai' => '      today'
);

array_map('trim', $myarray);
?>

:)
jubi at irc dot pl 20-Apr-2004 01:48
To remove multiple occurences of whitespace characters in a string an convert
them all into single spaces, use this:

<?

$text = preg_replace('/\s+/', ' ', $text);

?>

------------
JUBI
http://www.jubi.buum.pl
mrizzo at advancedsl dot com dot ar 16-Jul-2003 09:00
About trim all elements in an array.

array_filter($db, 'trim') doesn't work becouse it does NOT modify array's
elements, it only returns a copy from those elements which return true on the
callback function.

I think that:
foreach ($db as $key=>$value) { $db[$key]=trim($value); }
still being the best option.
rwelti at yahoo dot com 03-Jul-2003 12:45
Regarding the editor's note to rhelic above about how to trim all elements in
an array:

I wanted a perl "chomp" of newlines for all elements in an array.
I tried array_filter for a long time, but  rhelic's straightforward way is what
worked.

// chomp newlines off all elements in stations array
$stations = array_filter($stations, 'trim');   // editor's way - nope
foreach ($stations as $key => $value) {
            $stations[$key] = trim($value); }  // works fine

using PHP 4.3.1 on Solaris
HW 06-Jun-2003 01:32
You can combine character ranges and individual characters in trim()'s second
argument (ditto for ltrim and rtrim). All of the specified characters and
ranges will be used concurrently (i.e., if a character on either end of the
string matches any of the specified charaters or character ranges, it will be
trimmed). The characters and character ranges can be in any order (except of
course that the character ranges need to be specified in increasing order) and
may overlap.
E.g., trim any nongraphical non-ASCII character:
trim($text,"\x7f..\xff\x0..\x1f");
olivierdsm at hotmail dot com 02-Jun-2003 05:42
I just wanted to say that when you want to do a LDAP query based on a form
value (i mean something like : <form method="POST" action=
"script_createnewticket.php" name="demande2">) dynamicaly updated from a popup
javascript , (for example <a onclick=" opener.document.forms
['demande2'].elements['thename3'].value='my name') it doesn't work.

It took me 2 days to find out that when you use trim, to "convert" the value,
then it works.

-------------------------
$thename4=trim($thename3);

$ds=ldap_connect("$myldapserver");  // connects to the LDAP SERVER
if (!($ds = ldap_connect("$myldapserver") ) ) {
die ("Could not connect to LDAP server");
}
    $r=ldap_bind($ds, "cn=".$NTusername, $NTpassword);
    $sr = ldap_search($ds, '  ', "uid=".$thename4); 
    $info = ldap_get_entries($ds, $sr);
-------------------------------------

only on this case you will get results.
Strange and good to know
bishop 25-Apr-2003 10:56
[Editor: I botched my last note; please delete and use this one]

Non-breaking spaces can be troublesome with trim (as per an earlier comment):

// turn some HTML with non-breaking spaces into a "normal" string
$myHTML = "&nbsp;abc";
$converted = strtr($myHTML, array_flip(get_html_translation_table
(HTML_ENTITIES, ENT_QUOTES)));

// this WILL NOT work as expected
// $converted will still appear as " abc" in view source
// (but not in od -x)
$converted = trim($converted);

// &nbsp; are translated to 0xA0, so use:
$converted = trim($converted, "\xA0");

// PS: Thanks to John for saving my sanity!
Joshua dot Logsdon at ohiou dot edu 30-Jan-2003 11:51
In response to the line mentioned above...
$clean = trim($binary,"\0x00..\0x1F");

I was also able to get
$clean = trim($binary,"\0x00-\0x1F");

to function.
daggillies at yahoo dot com 03-Jun-2002 06:57
NOTE:

All the above examples using ereg_replace with an escape code of \v are BROKEN!
\v is NOT an escape code in PHP. Using a regexp of \v e.g.
$str=ereg_replace("[\r\t\n\v]","",$str);

will remove any instances of the letter 'v' from your string. So 'Activity'
becomes 'Actiity'. Probably not what you want.

Here is a small function I use to strip whitespace from the end of strings and
squash repeated whitespace down to a single space in the middle of strings:

function wsstrip(&$str)
{
$str=ereg_replace (' +', ' ', trim($str));
$str=ereg_replace("[\r\t\n]","",$str);
}

David Gillies
San Jose
Costa Rica
j dot metzger at steptown dot com 26-May-2002 05:21
Be careful when you use the charlist with the hex-codes...

use e.g. \x22 instead of \0x22 (this last thing won't work).

An example to strip quotes ' " ' (double quotes) and " ' " (single quotes) is
to do this:

$example[0]='"hello"';
$example[1]="'baby'"

foreach ($example as $key => $val)
  $example[$key]=trim($val,"\x22\x27");

# this works brilliant, but be aware:
# $example[$key]=trim($val,"\0x22\0x27");
# won't work !!!

-> tested on php 4.2.1
REMOVETHISNOSPAMkilling at bluecarrots dot com 19-Mar-2002 05:30
If you want to totally stop windows (dunno about other os's) peeps from adding
spaces (say, you need to check there name against a special one to stop
impersonations) use this:

$nick = ereg_replace("[\r\n\t\v\  ]", "", trim($nick));

It has the alt code 0160 added to it
tbm.at.home.dot.nl 14-Mar-2002 07:30
Windows uses two characters for definining newlines, namely ASCII 13 (carriage
return, "\r") and ASCII 10 (line feed, "\n") aka CRLF. So if you have a string
with CRLF's, trim() won't recognize them as being one newline. To solve this
you can use str_replace() to replace the CRLF's with with a space or something.

<?php
// string with bunch of CRLF's
$my_string = "Liquid\r\nTension Experiment\r\n\r\n\r\n";

// replace CRLF's with spaces
$my_wonderful_string = str_replace("\r\n", " ", $my_string);
// would result in "Liquid Tension Experiment   "

// or just delete the CRLF's (by replacing them with nothing)
$my_wonderful_string = str_replace("\r\n", "", $my_string);
// would result in "LiquidTension Experiment"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Oct 31 16:22:49 2011 UTC
Received cookie: COUNTRY=JPN%2C114.49.7.56
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 自然言語および文字エンコーディング
  • マルチバイト文字列
  • マルチバイト文字列関数
  • mb_ check_ encoding
  • mb_ convert_ case
  • mb_ convert_ encoding
  • mb_ convert_ kana
  • mb_ convert_ variables
  • mb_ decode_ mimeheader
  • mb_ decode_ numericentity
  • mb_ detect_ encoding
  • mb_ detect_ order
  • mb_ encode_ mimeheader
  • mb_ encode_ numericentity
  • mb_ encoding_ aliases
  • mb_ ereg_ match
  • mb_ ereg_ replace
  • mb_ ereg_ search_ getpos
  • mb_ ereg_ search_ getregs
  • mb_ ereg_ search_ init
  • mb_ ereg_ search_ pos
  • mb_ ereg_ search_ regs
  • mb_ ereg_ search_ setpos
  • mb_ ereg_ search
  • mb_ ereg
  • mb_ eregi_ replace
  • mb_ eregi
  • mb_ get_ info
  • mb_ http_ input
  • mb_ http_ output
  • mb_ internal_ encoding
  • mb_ language
  • mb_ list_ encodings
  • mb_ output_ handler
  • mb_ parse_ str
  • mb_ preferred_ mime_ name
  • mb_ regex_ encoding
  • mb_ regex_ set_ options
  • mb_ send_ mail
  • mb_ split
  • mb_ strcut
  • mb_ strimwidth
  • mb_ stripos
  • mb_ stristr
  • mb_ strlen
  • mb_ strpos
  • mb_ strrchr
  • mb_ strrichr
  • mb_ strripos
  • mb_ strrpos
  • mb_ strstr
  • mb_ strtolower
  • mb_ strtoupper
  • mb_ strwidth
  • mb_ substitute_ character
  • mb_ substr_ count
  • mb_ substr

mb_strrchr> <mb_strlen
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011

view this page in

[English             ] Change language
mb_strpos

(PHP 4 >= 4.0.6, PHP 5)

mb_strpos — 文字列の中に指定した文字列が最初に現れる位置を見つける

説明

int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string
$encoding ]] )

ある文字列の中で別の文字列が最初に現れる位置を見つけます。

マルチバイト文字列に正しくマッチするように strpos() を拡張したもので、最初の 1
文字目の位置が 0 、2 文字目の文字が 1 というようになります。

パラメータ

haystack

    調べたい文字列。

needle

    haystack の中から探す文字列。 strpos() とは違い、数値を指定しても文字コード
    の値と見なされることはありません。

offset

    検索オフセット。指定されない場合は、0 が使用されます。

encoding

    encoding パラメータには文字エンコーディングを指定します。省略した場合は、内
    部文字エンコーディングを使用します。

返り値

文字列 haystack の中で needle が最初に現れる位置を数字で返します。 needle が見
付からなかった場合、FALSE を返します。

参考

  • mb_internal_encoding() - 内部文字エンコーディングを設定あるいは取得する
  • strpos() - 文字列が最初に現れる場所を見つける



mb_strrchr> <mb_strlen
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011
 
add a note add a note User Contributed Notes mb_strpos
brendel at krumedia dot de 11-Mar-2008 12:42
mb_strpos() used in a loop on a long string may become very slow even if you
provide the $offset. Unlike strpos(), mb_strpos() has to skip the number of
characters
 every call specified by $offset to get the real byte position used internally.
(Whereas strpos can just add the offset.)

If your encoding is UTF-8 and you try to find only single characters with
ordinal <= 127 you may still use strpos(), substr(), ... This works cause every
byte of a UTF-8 sequence is >= 128.

Greetz maz
zangaru at hotmail dot com 06-Jul-2007 05:42
Hello,

Just replaced strpos() with mb_strpos() and now I am getting following error:

PHP Warning:  mb_strpos() [<a href='function.mb-strpos'>function.mb-strpos</
a>]: Empty delimiter

PHP version: 5.2.3
OS: Win XP Prof
Web Server: IIS

I checked your bugs and mentioned that mb_string functions have been fixed as
of 5.2.0 but it does not seem to be the case (Bug #39400).

My code:
==============================================

$charOut = mb_substr($tmpStr, $tmpKey[0], 1);
$posOut = mb_strpos($charList, $charOut);
if ($posOut !== FALSE) {
    // do something here
}

==============================================
stestagg at talk21 dot com 06-Aug-2006 12:12
sorry, my previous post had an error.  replace the 1000 with strlen($haystack)
to handle strings longer than 1000 chars.

btw. This is an issue with the mbstring functions.  you can't specify the
$encoding without specifying a $length, thus this reduces the functionality of
mb_substr compared to substr
stestagg at talk21 dot com 04-Aug-2006 04:42
a sample mb_str_replace function:

function mb_str_replace($haystack, $search,$replace, $offset=0,$encoding=
'auto'){
    $len_sch=mb_strlen($search,$encoding);
    $len_rep=mb_strlen($replace,$encoding);
   
    while (($offset=mb_strpos($haystack,$search,$offset,$encoding))!==false){
        $haystack=mb_substr($haystack,0,$offset,$encoding)
            .$replace
            .mb_substr($haystack,$offset+$len_sch,1000,$encoding);
        $offset=$offset+$len_rep;
        if ($offset>mb_strlen($haystack,$encoding))break;
    }
    return $haystack;
}
stestagg at talk21 dot com 04-Aug-2006 04:39
It appears that the $offset value is a character count not a byte count.  (This
may seem obvious but it isn't explicitly stated)
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Oct 26 06:02:28 2011 UTC
Received cookie: COUNTRY=JPN%2C114.48.142.226
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

htmlspecialchars> <htmlentities
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011

view this page in

[English             ] Change language
htmlspecialchars_decode

(PHP 5 >= 5.1.0)

htmlspecialchars_decode — 特殊な HTML エンティティを文字に戻す

説明

string htmlspecialchars_decode ( string $string [, int $quote_style =
ENT_COMPAT ] )

この関数は htmlspecialchars() の反対です。特殊な HTML エンティティを文字に戻し
ます。

変換されるエンティティは次のものです。&amp;、 &quot; (ENT_NOQUOTES が設定されて
いない場合)、 &#039; (ENT_QUOTES が設定されている場合)、 &lt; および &gt;。

パラメータ

string

    デコードする文字列。

quote_style

    クォートの形式。以下の定数のいずれかです。

                               quote_style 定数
       定数名                                 説明
    ENT_COMPAT   ダブルクォートを変換し、シングルクォートはそのままにします(デ
                 フォルト)。
    ENT_QUOTES   ダブルクォート、シングルクォートの両方を変換します。
    ENT_NOQUOTES ダブルクォート、シングルクォートの両方をそのままにします。

返り値

デコードされた文字列を返します。

例

例1 htmlspecialchars_decode() の例

<?php
$str = '<p>this -&gt; &quot;</p>';

echo htmlspecialchars_decode($str);

// クォートが変換されないことに注意しましょう
echo htmlspecialchars_decode($str, ENT_NOQUOTES);
?>

上の例の出力は以下となります。

<p>this -> "</p>
<p>this -> &quot;</p>

参考

  • htmlspecialchars() - 特殊文字を HTML エンティティに変換する
  • html_entity_decode() - HTML エンティティを適切な文字に変換する
  • get_html_translation_table() - htmlspecialchars および htmlentities で使用
    される変換テーブルを返す



htmlspecialchars> <htmlentities
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011
 
add a note add a note User Contributed Notes htmlspecialchars_decode
selimx at live dot com 20-Apr-2011 09:35
this function

<?php
function htmlkarakter($string)
{
   $string = str_replace(array("&lt;", "&gt;", '&amp;', '&#039;', '&quot;','&
lt;', '&gt;'), array("<", ">",'&','\'','"','<','>'), htmlspecialchars_decode
($string, ENT_NOQUOTES));

       return $string;
  
}
?>

Before
<description>&lt;div class=&quot;google-ad1&quot;&gt;
  &lt;script type=&#039;text/javascript&#039;&gt;
    GA_googleFillSlot(&quot;EW_News_300x250&quot;);
  &lt;/script&gt;

&lt;/div&gt;

after using the function

<div class="google-ad1">
  <script type='text/javascript'>
    GA_googleFillSlot("EW_News_300x250");
  </script>
pinkgothic at gmail dot com 10-Jun-2010 04:24
Keep in mind that you should never trust user input - particularly for
"mixed-bag" input containing a combination of plain text and markup or
scripting code.

Why?

Well, consider someone sending '&amp;<script>alert('XSS');</script>' to your
PHP script:

<?php
$var = "&amp;<script>alert('XSS');</script>";
$var = (htmlspecialchars_decode($var) == $var) ? htmlspecialchars($var) : $var;
echo $var;
?>

Since '&amp;' decodes into '&', (htmlspecialchars_decode($var) == $var) will be
-false-, thus returning $var without that it's escaped. In consequence, the
script-tags are untouched, and you've just opened yourself to XSS.

There is, unfortunately, no reliable way to determine whether HTML is escaped
or not that does not come with this caveat that I know of. Rather than try and
catch the case 'I've already encoded this', you are better off avoiding
double-escaping by simply escaping the HTML as close to the actual output as
you can muster, e.g. in the view in an MVC development structure.
benharold at mac dot com 27-Jan-2009 12:48
or of course:

<?php

$var = "Blue & yellow make green.";

$var = (htmlspecialchars_decode($var) == $var) ? htmlspecialchars($var) : $var;
echo $var; // outputs Blue &amp; yellow make green.

// you can do it a bunch of times, it still won't screw you!

$var = (htmlspecialchars_decode($var) == $var) ? htmlspecialchars($var) : $var;
$var = (htmlspecialchars_decode($var) == $var) ? htmlspecialchars($var) : $var;
echo $var; // still outputs Blue &amp; yellow make green.

?>

Put it in a function. Add it to the method of some abstract data class.
benharold at mac dot com 26-Jan-2009 09:30
If you use `htmlspecialchars()` to change things like the ampersand (&) into
it's HTML equivalent (&amp;), you might run into a situation where you
mistakenly pass the same string to the function twice, resulting in things
appearing on your website like, as I call it, the ampersanded amp; "&amp;".
Clearly nobody want's "&amp;" on his or her web page where there is supposed to
be just an ampersand. Here's a quick and easy trick to make sure this doesn't
happen:

<?php

$var = "This is a string that could be passed to htmlspecialchars multiple
times.";

if (htmlspecialchars_decode($var) == $var) {
    $var = htmlspecialchars($var);
}

echo $var;

?>

Now, if your dealing with text that is a mixed bag (has HTML entities and
non-HTML entities) you're on your own.
thomas at xci[ignore_this]teit dot commm 28-Mar-2008 11:03
The example for "htmlspecialchars_decode()" below sadly does not work for all
PHP4 versions.

Quote from the PHP manual:
"get_html_translation_table() will return the translation table that is used
internally for htmlspecialchars() and htmlentities()."

But it does NOT! At least not for PHP version 4.4.2.
This was already reported in a bug report (http://bugs.php.net/bug.php?id=25927
), but it was marked as BOGUS.

Proof:
  Code:
--------------------
<?php
    var_dump(get_html_translation_table(HTML_SPECIALCHARS,ENT_QUOTES));
    var_dump(htmlspecialchars('\'',ENT_QUOTES));
?>
--------------------

  Output:
--------------------
array
  '"' => '&quot;'
  ''' => '&#39;'
  '<' => '&lt;'
  '>' => '&gt;'
  '&' => '&amp;'

'&#039;'
--------------------

This comment now is not to report this bug again (though I really believe it is
one), but to complete the example and warn people of this pitfall.

To make sure your htmlspecialchars_decode fake for PHP4 works, you should do
something like this:

<?php
    function htmlspecialchars_decode($string,$style=ENT_COMPAT)
    {
        $translation = array_flip(get_html_translation_table
(HTML_SPECIALCHARS,$style));
        if($style === ENT_QUOTES){ $translation['&#039;'] = '\''; }
        return strtr($string,$translation);
    }
?>

Br, Thomas
Wout 28-Jul-2007 04:06
The following replacement for PHP 4 is a little more complete, as the
quote_style is taken into account as well:

if (!function_exists("htmlspecialchars_decode")) {
    function htmlspecialchars_decode($string, $quote_style = ENT_COMPAT) {
        return strtr($string, array_flip(get_html_translation_table
(HTML_SPECIALCHARS, $quote_style)));
    }
}
17-Aug-2006 12:49
This should be the best way to do it.
(Reposted because the other one seems a bit slower and because those who used
the code under called it htmlspecialchars_decode_php4)

<?php

if ( !function_exists('htmlspecialchars_decode') )
{
    function htmlspecialchars_decode($text)
    {
        return strtr($text, array_flip(get_html_translation_table
(HTML_SPECIALCHARS)));
    }
}

?>
TheSin 09-May-2006 09:51
Here is how you can get this function in php < 5.1, just make sure this
function is before you try and call the function.

if (!function_exists('htmlspecialchars_decode')) {
        function htmlspecialchars_decode($str, $options="") {
                $trans = get_html_translation_table(HTML_SPECIALCHARS,
$options);

                $decode = ARRAY();
                foreach ($trans AS $char=>$entity) {
                        $decode[$entity] = $char;
                }

                $str = strtr($str, $decode);

                return $str;
        }
}
se at designlinks dot net 14-Dec-2005 04:43
The code supplied by or-k at or-k dot com (14-Sep-2005 09:15) is better served
using html_entity_decode() for PHP>=4.3.0.
geoffers@gmail (14-Jul-2005 01:38) offers the best htmlspecialchars_decode()
for php4 users.
or-k at or-k dot com 14-Sep-2005 09:15
that works also with &auml; and &quot; and so on.
get_html_translation_table(HTML_ENTITIES) => offers more characters than
HTML_SPECIALCHARS

function htmlspecialchars_decode_PHP4($uSTR)
{
 return strtr($uSTR, array_flip(get_html_translation_table(HTML_ENTITIES,
ENT_QUOTES)));
}
geoffers@gmail 14-Jul-2005 01:38
[Update of previous note, having noticed I forgot to put in quote style]

PHP4 Compatible function:

<?php

function htmlspecialchars_decode_php4 ($str, $quote_style = ENT_COMPAT) {
    return strtr($str, array_flip(get_html_translation_table(HTML_SPECIALCHARS,
$quote_style)));
}

?>
geoffers at gmail dot com 14-Jul-2005 01:30
For PHP4 Compatibility:

<?php

function htmlspecialchars_decode_php4 ($str) {
    return strtr($str, array_flip(get_html_translation_table
(HTML_SPECIALCHARS)));
}

?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Oct 24 17:33:31 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れた位置を数字で返します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    オプションのパラメータ offset により、検索を開始する haystack の文字を指定
    することができます。この場合でも、返される位置は haystack の先頭からの相対
    位置となります。

返り値

位置を表す整数値を返します。 needle が見つからない場合、 strpos() は boolean
FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される 0 や ""
といった値を返す可能性もあります。詳細については論理値のセクションを参照してく
ださい。この関数の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す
  • stristr() - 大文字小文字を区別しない strstr
  • strstr() - 文字列が最初に現れる位置を見つける



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011
 
add a note add a note User Contributed Notes strpos
jim at terrys dot net 30-Sep-2011 06:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 03:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 12:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 10:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 09:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 10:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 12:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 11:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 03:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 10:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 10:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 04:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 01-Oct-2009 03:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 08:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 04:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 08:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 06:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 02:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 08:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 05:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 07:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 28-Dec-2008 12:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 18-Nov-2008 01:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 23-Oct-2008 01:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 28-Sep-2008 06:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 06:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 07:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 10:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 01:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 02-Apr-2008 12:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 11:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 11:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 08:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 09:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 03:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 12:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 04:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 08:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 10:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 05:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 27-Sep-2006 02:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 03:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 02:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 10:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 12:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 02:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 21-Jan-2005 02:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 05:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 10:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 05:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 10:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 05:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 10-Mar-2004 01:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 06:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 04:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Oct 22 23:32:02 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011
 
add a note add a note User Contributed Notes substr
leon weidauer 08-Jul-2011 08:07
When using a value of a wrong type as second parameter , substr() does not
return FALSE but NULL although the docs say, it should return FALSE on error.

Prior to PHP 5.3, substr() tries to cast the second parameter to int and
doesn't throw any errors. Since PHP 5.3 a warning is thrown.
Quicker 06-May-2011 11:17
If you need to parse utf-8 strings char by char, try this one:

<?php
     $utf8marker=chr(128);
     $count=0;
     while(isset($string{$count})){
       if($string{$count}>=$utf8marker) {
         $parsechar=substr($string,$count,2);
         $count+=2;
       } else {
         $parsechar=$string{$count};
         $count++;
       }
       /* do what you like with parsechar ... , eg.:*/  echo $parsechar."<BR>\r
\n";
     }
?>

- it works without mb_substr
- it is fast, because it grabs characters based on indexes  when possible and
avoids any count and split functions
slow at acedsl dot com 28-Mar-2011 09:47
Anyone coming from the Python world will be accustomed to making substrings by
using a "slice index" on a string.  The following function emulates basic
Python string slice behavior. (A more elaborate version could be made to
support array input as well as string, and the optional third "step" argument.)

<?php

function py_slice($input, $slice) {
    $arg = explode(':', $slice);
    $start = intval($arg[0]);
    if ($start < 0) {
        $start += strlen($input);
    }
    if (count($arg) === 1) {
        return substr($input, $start, 1);
    }
    if (trim($arg[1]) === '') {
        return substr($input, $start);
    }
    $end = intval($arg[1]);
    if ($end < 0) {
        $end += strlen($input);
    }
    return substr($input, $start, $end - $start);
}

print py_slice('abcdefg', '2') . "\n";
print py_slice('abcdefg', '2:4') . "\n";
print py_slice('abcdefg', '2:') . "\n";
print py_slice('abcdefg', ':4') . "\n";
print py_slice('abcdefg', ':-3') . "\n";
print py_slice('abcdefg', '-3:') . "\n";

?>

The $slice parameter can be a single character index, or a range separated by a
colon. The start of the range is inclusive and the end is exclusive, which may
be  counterintuitive. (Eg, py_slice('abcdefg', '2:4') yields 'cd' not 'cde'). A
negative range value means to count from the end of the string instead of the
beginning. Both the start and end of the range may be omitted; the start
defaults to 0 and the end defaults to the total length of the input.

The output from the examples:
c
cd
cdefg
abcd
abcd
efg
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Oct 22 22:31:36 2011 UTC
Received cookie: COUNTRY=JPN%2C1.112.110.75
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • hex2bin
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れた位置を数字で返します。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    オプションのパラメータ offset により、検索を開始する haystack の文字を指定
    することができます。この場合でも、返される位置は haystack の先頭からの相対
    位置となります。

返り値

位置を表す整数値を返します。 needle が見つからない場合、 strpos() は boolean
FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される 0 や ""
といった値を返す可能性もあります。詳細については論理値のセクションを参照してく
ださい。この関数の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す
  • stristr() - 大文字小文字を区別しない strstr
  • strstr() - 文字列が最初に現れる位置を見つける



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 21 Oct 2011
 
add a note add a note User Contributed Notes strpos
jim at terrys dot net 30-Sep-2011 06:53
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
----------------------------
http://www.show-ip.org
a at bc dot de 23-Jun-2011 03:32
A simple way to get the FIRST occurence of any $needle.
Needed if more than one $needle could occur in $haystack and you want the first
occurence of any $needle.
<?php
function strpos_arr($haystack, $needle) {
    $First = strlen($haystack);
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        $pos = strpos($haystack, $what);
        if($pos !== false)
        {
            if($pos < $First) $First = $pos;
        }
    }
    return $First == strlen($haystack) ? false : $First;
}
?>
akarmenia at gmail dot com 05-Mar-2011 12:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 10:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 09:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 10:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 12:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 11:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 03:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 10:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 10:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 04:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 01-Oct-2009 03:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 08:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 04:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 08:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 06:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 02:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 08:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 05:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 07:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 28-Dec-2008 12:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 18-Nov-2008 01:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 23-Oct-2008 01:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 28-Sep-2008 06:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
mickRacky 19-Sep-2008 06:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 07:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 10:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 01:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 02-Apr-2008 12:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 11:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
Benjie 14-Oct-2007 11:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 08:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 09:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 03:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 12:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 04:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 08:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 10:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 05:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 27-Sep-2006 02:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 03:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 02:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 10:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 12:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
arias at elleondeoro dot com 07-Feb-2005 02:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 21-Jan-2005 02:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 05:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 10:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 05:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 10:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 05:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 10-Mar-2004 01:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 06:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 04:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Oct 22 22:31:36 2011 UTC
Received cookie: COUNTRY=NA%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 22 Jul 2011

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )

needle で haystack を検索します。 strict が設定されていない限りは型の比較は行い
ません。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
    haystack の中の needle の型も確認します。

返り値

配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[edit] Last updated: Fri, 22 Jul 2011
 
add a note add a note User Contributed Notes in_array
Anonymous 18-Jun-2011 07:16
known issue
when checking a string vs a integer

$testarray = array(0,1,2,3,4);

in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false

"bla" as a integer value returns the number zero
"bla6" as a integer value returns the number zero
 "6bla" returns the number six as its the only vaild part of that

if you checking for unknown types eg string vs integer
then you would need the strict value to be true.
Sascha Luedi 28-Feb-2011 05:33
strange behaviour of in_array:

If you have an array like:
<?php
$a = array(0,1,2,3,4,5);
in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false
?>

If you have an array like (without 0):
<?php
$a = array(1,2,3,4,5);
in_array("bla", $a) returns false
in_array("6bla", $a) returns false
in_array("5bla", $a) returns true
?>

so better use strict arg!
Joris Meijer 15-Feb-2011 01:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 04:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 08:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 09:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 06:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
Willian Gustavo Veiga 16-Jun-2010 02:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 06:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 03:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 14-Feb-2010 12:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 10:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 11:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 07:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 11:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 07:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 11:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 05:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 07:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 10:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 01:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 12:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 09:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 03:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 09:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 30-Oct-2008 05:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 09:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 07:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 03:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 09:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 11:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 07:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 10:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 05:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 21-May-2007 03:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 06:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 12:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 09-Apr-2006 03:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 03:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 02:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
14-Jan-2006 05:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 09:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 02:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 12:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 08-Jan-2003 01:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 02:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 10-Aug-2002 02:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 10:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 03:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Aug 1 17:22:54 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 自然言語および文字エンコーディング
  • マルチバイト文字列
  • マルチバイト文字列関数
  • mb_ check_ encoding
  • mb_ convert_ case
  • mb_ convert_ encoding
  • mb_ convert_ kana
  • mb_ convert_ variables
  • mb_ decode_ mimeheader
  • mb_ decode_ numericentity
  • mb_ detect_ encoding
  • mb_ detect_ order
  • mb_ encode_ mimeheader
  • mb_ encode_ numericentity
  • mb_ encoding_ aliases
  • mb_ ereg_ match
  • mb_ ereg_ replace
  • mb_ ereg_ search_ getpos
  • mb_ ereg_ search_ getregs
  • mb_ ereg_ search_ init
  • mb_ ereg_ search_ pos
  • mb_ ereg_ search_ regs
  • mb_ ereg_ search_ setpos
  • mb_ ereg_ search
  • mb_ ereg
  • mb_ eregi_ replace
  • mb_ eregi
  • mb_ get_ info
  • mb_ http_ input
  • mb_ http_ output
  • mb_ internal_ encoding
  • mb_ language
  • mb_ list_ encodings
  • mb_ output_ handler
  • mb_ parse_ str
  • mb_ preferred_ mime_ name
  • mb_ regex_ encoding
  • mb_ regex_ set_ options
  • mb_ send_ mail
  • mb_ split
  • mb_ strcut
  • mb_ strimwidth
  • mb_ stripos
  • mb_ stristr
  • mb_ strlen
  • mb_ strpos
  • mb_ strrchr
  • mb_ strrichr
  • mb_ strripos
  • mb_ strrpos
  • mb_ strstr
  • mb_ strtolower
  • mb_ strtoupper
  • mb_ strwidth
  • mb_ substitute_ character
  • mb_ substr_ count
  • mb_ substr

mb_strimwidth> <mb_split
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011

view this page in

[English             ] Change language
mb_strcut

(PHP 4 >= 4.0.6, PHP 5)

mb_strcut — 文字列の一部を得る

説明

string mb_strcut ( string $str , int $start [, int $length [, string $encoding
]] )

mb_strcut() は、mb_substr() と同じ処理を異なった方法で行います。位置 start がマ
ルチバイト文字の 2 バイト目以降である場合、マルチバイト文字の最初のバイトから開
始されます。

この関数は、length より短く、かつマルチバイト文字列の一部でないかシフトシーケン
スの中にない文字を取りだします。

パラメータ

str

    取り出しの対象となる文字列。

start

    取り出しの開始位置。

length

    取り出す長さ。

encoding

    encoding パラメータには文字エンコーディングを指定します。省略した場合は、内
    部文字エンコーディングを使用します。

返り値

mb_strcut() は、 start および length パラメータで指定した str の一部を返します
。

参考

  • mb_substr() - 文字列の一部を得る
  • mb_internal_encoding() - 内部文字エンコーディングを設定あるいは取得する



mb_strimwidth> <mb_split
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011
 
add a note add a note User Contributed Notes mb_strcut
php_engineer_bk at yahoo dot com 08-Oct-2010 10:52
function cut_sense($matne_harf, $l_harf ,$return=1 ) {
if ( strlen($matne_harf) > $l_harf){
$end='...';
}else{
$end='';
}
    if ( function_exists('mb_strcut') ){
        $matne_harf = mb_strcut ( $matne_harf, 0 , $l_harf , "UTF-8" );
    }else{
        $matne_harf =substr($matne_harf, 0, $l_harf);
    }
$text=''.$matne_harf.''.$end.'';
  if ( $return == 1){
  return $text;
  }else{
  print $text;
  }
}

Iranian php programmer (farhad zand +989383015266)
egoalesum at IHATEBOTS dot youarchive dot it 21-May-2009 04:07
I found this function to be extremely useful.

Here is a practical example, showing the difference between substr(), mb_substr
() and mb_strcut():

<?php
mb_internal_encoding('UTF-8');
$string = 'cioèòà';
var_dump(
substr($string, 0, 6),
mb_substr($string, 0, 6),
mb_strcut($string, 0, 6)
);
?>

Output:
string(6) "cioè?"
string(9) "cioèòà"
string(5) "cioè"

Explanation:
$string is long 9 bytes
c - 1 byte
i - 1 byte
o - 1 byte
è - 2 bytes
ò - 2 bytes
à - 2 bytes

substr() works with bytes, so it returns a string which is exactly 6 bytes
long. Thus, it truncates the ò character.
mb_substr(), instead, works with characters, so it returns a string which is
exactly 6 characters long (but in this case is 9 bytes long).
mb_strcut() works exactly as substr(), but, if the last byte appears to be
truncated, it simply omits the character.

When you use
$string = mb_strcut($string, 6);
you can know for sure that strlen($string) <= 6. But no unicode characters will
be truncated.

I hope my comment could finally be a simple explanation.
t dot starling at physics dot unimelb dot edu dot au 27-Aug-2004 11:01
What the manual and the first commenter are trying to say is that mb_strcut
uses byte offsets, as opposed to mb_substr which uses character offsets.

Both mb_strcut and mb_substr appear to treat negative and out-of-range offsets
and lengths in the basically the same way as substr. An exception is that if
start is too large, an empty string will be returned rather than FALSE. Testing
indicates that mb_strcut first works out start and end byte offsets, then moves
each offset left to the nearest character boundary.
oyag02 at yahoo dot co dot jp 26-Sep-2003 10:53
diffrence between mb_substr and mb_substr

example:
mb_strcut('I_ROHA', 1, 2) returns 'I_'. Treated as byte stream.
mb_substr('I_ROHA', 1, 2) returns 'ROHA' Treated as character stream.

# 'I_' 'RO' 'HA' means multi-byte character
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Jun 17 19:22:16 2011 UTC
  • vprintf
  • vsprintf
  • wordwrap

implode> <htmlspecialchars_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011

view this page in

[English             ] Change language
htmlspecialchars

(PHP 4, PHP 5)
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 自然言語および文字エンコーディング
  • マルチバイト文字列
  • マルチバイト文字列関数
  • mb_ check_ encoding
  • mb_ convert_ case
  • mb_ convert_ encoding
  • mb_ convert_ kana
  • mb_ convert_ variables
  • mb_ decode_ mimeheader
  • mb_ decode_ numericentity
  • mb_ detect_ encoding
  • mb_ detect_ order
  • mb_ encode_ mimeheader
  • mb_ encode_ numericentity
  • mb_ encoding_ aliases
  • mb_ ereg_ match
  • mb_ ereg_ replace
  • mb_ ereg_ search_ getpos
  • mb_ ereg_ search_ getregs
  • mb_ ereg_ search_ init
  • mb_ ereg_ search_ pos
  • mb_ ereg_ search_ regs
  • mb_ ereg_ search_ setpos
  • mb_ ereg_ search
  • mb_ ereg
  • mb_ eregi_ replace
  • mb_ eregi
  • mb_ get_ info
  • mb_ http_ input
  • mb_ http_ output
  • mb_ internal_ encoding
  • mb_ language
  • mb_ list_ encodings
  • mb_ output_ handler
  • mb_ parse_ str
  • mb_ preferred_ mime_ name
  • mb_ regex_ encoding
  • mb_ regex_ set_ options
  • mb_ send_ mail
  • mb_ split
  • mb_ strcut
  • mb_ strimwidth
  • mb_ stripos
  • mb_ stristr
  • mb_ strlen
  • mb_ strpos
  • mb_ strrchr
  • mb_ strrichr
  • mb_ strripos
  • mb_ strrpos
  • mb_ strstr
  • mb_ strtolower
  • mb_ strtoupper
  • mb_ strwidth
  • mb_ substitute_ character
  • mb_ substr_ count
  • mb_ substr

mb_strimwidth> <mb_split
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011

view this page in

[English             ] Change language
mb_strcut

(PHP 4 >= 4.0.6, PHP 5)

mb_strcut — 文字列の一部を得る

説明

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 自然言語および文字エンコーディング
  • マルチバイト文字列
  • マルチバイト文字列関数
  • mb_ check_ encoding
  • mb_ convert_ case
  • mb_ convert_ encoding
  • mb_ convert_ kana
  • mb_ convert_ variables
  • mb_ decode_ mimeheader
  • mb_ decode_ numericentity
  • mb_ detect_ encoding
  • mb_ detect_ order
  • mb_ encode_ mimeheader
  • mb_ encode_ numericentity
  • mb_ encoding_ aliases
  • mb_ ereg_ match
  • mb_ ereg_ replace
  • mb_ ereg_ search_ getpos
  • mb_ ereg_ search_ getregs
  • mb_ ereg_ search_ init
  • mb_ ereg_ search_ pos
  • mb_ ereg_ search_ regs
  • mb_ ereg_ search_ setpos
  • mb_ ereg_ search
  • mb_ ereg
  • mb_ eregi_ replace
  • mb_ eregi
  • mb_ get_ info
  • mb_ http_ input
  • mb_ http_ output
  • mb_ internal_ encoding
  • mb_ language
  • mb_ list_ encodings
  • mb_ output_ handler
  • mb_ parse_ str
  • mb_ preferred_ mime_ name
  • mb_ regex_ encoding
  • mb_ regex_ set_ options
  • mb_ send_ mail
  • mb_ split
  • mb_ strcut
  • mb_ strimwidth
  • mb_ stripos
  • mb_ stristr
  • mb_ strlen
  • mb_ strpos
  • mb_ strrchr
  • mb_ strrichr
  • mb_ strripos
  • mb_ strrpos
  • mb_ strstr
  • mb_ strtolower
  • mb_ strtoupper
  • mb_ strwidth
  • mb_ substitute_ character
  • mb_ substr_ count
  • mb_ substr

mb_strimwidth> <mb_split
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011

view this page in

[English             ] Change language
mb_strcut

(PHP 4 >= 4.0.6, PHP 5)

mb_strcut — 文字列の一部を得る

説明

string mb_strcut ( string $str , int $start [, int $length [, string $encoding
]] )

mb_strcut() は、mb_substr() と同じ処理を異なった方法で行います。位置 start がマ
ルチバイト文字の 2 バイト目以降である場合、マルチバイト文字の最初のバイトから開
始されます。

この関数は、length より短く、かつマルチバイト文字列の一部でないかシフトシーケン
スの中にない文字を取りだします。

パラメータ

str

    取り出しの対象となる文字列。

start

    取り出しの開始位置。

length

    取り出す長さ。

encoding

    encoding パラメータには文字エンコーディングを指定します。省略した場合は、内
    部文字エンコーディングを使用します。

返り値

mb_strcut() は、 start および length パラメータで指定した str の一部を返します
。

参考

  • mb_substr() - 文字列の一部を得る
  • mb_internal_encoding() - 内部文字エンコーディングを設定あるいは取得する



mb_strimwidth> <mb_split
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011
 
add a note add a note User Contributed Notes mb_strcut
php_engineer_bk at yahoo dot com 08-Oct-2010 10:52
function cut_sense($matne_harf, $l_harf ,$return=1 ) {
if ( strlen($matne_harf) > $l_harf){
$end='...';
}else{
$end='';
}
    if ( function_exists('mb_strcut') ){
        $matne_harf = mb_strcut ( $matne_harf, 0 , $l_harf , "UTF-8" );
    }else{
        $matne_harf =substr($matne_harf, 0, $l_harf);
    }
$text=''.$matne_harf.''.$end.'';
  if ( $return == 1){
  return $text;
  }else{
  print $text;
  }
}

Iranian php programmer (farhad zand +989383015266)
egoalesum at IHATEBOTS dot youarchive dot it 21-May-2009 04:07
I found this function to be extremely useful.

Here is a practical example, showing the difference between substr(), mb_substr
() and mb_strcut():

<?php
mb_internal_encoding('UTF-8');
$string = 'cioèòà';
var_dump(
substr($string, 0, 6),
mb_substr($string, 0, 6),
mb_strcut($string, 0, 6)
);
?>

Output:
string(6) "cioè?"
string(9) "cioèòà"
string(5) "cioè"

Explanation:
$string is long 9 bytes
c - 1 byte
i - 1 byte
o - 1 byte
è - 2 bytes
ò - 2 bytes
à - 2 bytes

substr() works with bytes, so it returns a string which is exactly 6 bytes
long. Thus, it truncates the ò character.
mb_substr(), instead, works with characters, so it returns a string which is
exactly 6 characters long (but in this case is 9 bytes long).
mb_strcut() works exactly as substr(), but, if the last byte appears to be
truncated, it simply omits the character.

When you use
$string = mb_strcut($string, 6);
you can know for sure that strlen($string) <= 6. But no unicode characters will
be truncated.

I hope my comment could finally be a simple explanation.
t dot starling at physics dot unimelb dot edu dot au 27-Aug-2004 11:01
What the manual and the first commenter are trying to say is that mb_strcut
uses byte offsets, as opposed to mb_substr which uses character offsets.

Both mb_strcut and mb_substr appear to treat negative and out-of-range offsets
and lengths in the basically the same way as substr. An exception is that if
start is too large, an empty string will be returned rather than FALSE. Testing
indicates that mb_strcut first works out start and end byte offsets, then moves
each offset left to the nearest character boundary.
oyag02 at yahoo dot co dot jp 26-Sep-2003 10:53
diffrence between mb_substr and mb_substr

example:
mb_strcut('I_ROHA', 1, 2) returns 'I_'. Treated as byte stream.
mb_substr('I_ROHA', 1, 2) returns 'ROHA' Treated as character stream.

# 'I_' 'RO' 'HA' means multi-byte character
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Jun 17 19:22:16 2011 UTC
]] )

mb_strcut() は、mb_substr() と同じ処理を異なった方法で行います。位置 start がマ
ルチバイト文字の 2 バイト目以降である場合、マルチバイト文字の最初のバイトから開
始されます。

この関数は、length より短く、かつマルチバイト文字列の一部でないかシフトシーケン
スの中にない文字を取りだします。

パラメータ

str

    取り出しの対象となる文字列。

start

    取り出しの開始位置。

length

    取り出す長さ。

encoding

    encoding パラメータには文字エンコーディングを指定します。省略した場合は、内
    部文字エンコーディングを使用します。

返り値

mb_strcut() は、 start および length パラメータで指定した str の一部を返します
。

参考

  • mb_substr() - 文字列の一部を得る
  • mb_internal_encoding() - 内部文字エンコーディングを設定あるいは取得する



mb_strimwidth> <mb_split
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011
 
add a note add a note User Contributed Notes mb_strcut
php_engineer_bk at yahoo dot com 08-Oct-2010 10:52
function cut_sense($matne_harf, $l_harf ,$return=1 ) {
if ( strlen($matne_harf) > $l_harf){
$end='...';
}else{
$end='';
}
    if ( function_exists('mb_strcut') ){
        $matne_harf = mb_strcut ( $matne_harf, 0 , $l_harf , "UTF-8" );
    }else{
        $matne_harf =substr($matne_harf, 0, $l_harf);
    }
$text=''.$matne_harf.''.$end.'';
  if ( $return == 1){
  return $text;
  }else{
  print $text;
  }
}

Iranian php programmer (farhad zand +989383015266)
egoalesum at IHATEBOTS dot youarchive dot it 21-May-2009 04:07
I found this function to be extremely useful.

Here is a practical example, showing the difference between substr(), mb_substr
() and mb_strcut():

<?php
mb_internal_encoding('UTF-8');
$string = 'cioèòà';
var_dump(
substr($string, 0, 6),
mb_substr($string, 0, 6),
mb_strcut($string, 0, 6)
);
?>

Output:
string(6) "cioè?"
string(9) "cioèòà"
string(5) "cioè"

Explanation:
$string is long 9 bytes
c - 1 byte
i - 1 byte
o - 1 byte
è - 2 bytes
ò - 2 bytes
à - 2 bytes

substr() works with bytes, so it returns a string which is exactly 6 bytes
long. Thus, it truncates the ò character.
mb_substr(), instead, works with characters, so it returns a string which is
exactly 6 characters long (but in this case is 9 bytes long).
mb_strcut() works exactly as substr(), but, if the last byte appears to be
truncated, it simply omits the character.

When you use
$string = mb_strcut($string, 6);
you can know for sure that strlen($string) <= 6. But no unicode characters will
be truncated.

I hope my comment could finally be a simple explanation.
t dot starling at physics dot unimelb dot edu dot au 27-Aug-2004 11:01
What the manual and the first commenter are trying to say is that mb_strcut
uses byte offsets, as opposed to mb_substr which uses character offsets.

Both mb_strcut and mb_substr appear to treat negative and out-of-range offsets
and lengths in the basically the same way as substr. An exception is that if
start is too large, an empty string will be returned rather than FALSE. Testing
indicates that mb_strcut first works out start and end byte offsets, then moves
each offset left to the nearest character boundary.
oyag02 at yahoo dot co dot jp 26-Sep-2003 10:53
diffrence between mb_substr and mb_substr

example:
mb_strcut('I_ROHA', 1, 2) returns 'I_'. Treated as byte stream.
mb_substr('I_ROHA', 1, 2) returns 'ROHA' Treated as character stream.

# 'I_' 'RO' 'HA' means multi-byte character
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Jun 17 19:22:16 2011 UTC
htmlspecialchars — 特殊文字を HTML エンティティに変換する

説明

string htmlspecialchars ( string $string [, int $flags = ENT_COMPAT [, string
$charset [, bool $double_encode = true ]]] )

文字の中には HTML において特殊な意味を持つものがあり、それらの本来の値を表示し
たければ HTML の表現形式に変換してやらなければなりません。この関数は、これらの
変換を行った結果の文字列を返します。これは、日常的な Web プログラミングにおいて
最も有用な変換を行います。全ての HTML 文字エンティティを変換する必要がある場合
には、代わりに htmlentities() を使用してください。

この関数は、掲示板やゲストブックなどでユーザが書きこんだテキストから HTML のマ
ークアップ用文字を取り除く場合に有用です。

変換対象となる文字は以下の通りです。

  • '&' (アンパサンド) は '&amp;' になります。
  • ENT_NOQUOTES が設定されていない場合、 '"' (ダブルクォート) は '&quot;'にな
    ります。
  • ENT_QUOTES が設定されている場合のみ、 ''' (シングルクオート) は '&#039;'に
    なります。
  • '<' (小なり) は '&lt;' になります。
  • '>' (大なり) は '&gt;' になります。

パラメータ

string

    変換される文字列。

flags

    オプションの 2 番目の引数 flags は、シングルおよびダブルクオートされた文字
    や無効なマルチバイトシーケンスをどのように扱うかを指定します。デフォルトの
    ENT_COMPAT は下位互換性のためのモードで、ダブルクオートは変換しますがシング
    ルクオートは変換しません。 ENT_QUOTES が設定されている場合は、シングルクオ
    ートとダブルクオートを共に変換します。 ENT_NOQUOTES が設定されている場合は
    、シングルクオートとダブルクオートは共に変換されません。さらに、5.3.0 以降
    ではこれらの定数を ENT_IGNORE と組み合わせることができるようになりました。
    ENT_IGNORE と組み合わせると、無効なコードシーケンスが含まれる文字列を渡した
    場合に空の文字列を返すのではなく無効な部分を切り捨てるようになります。脆弱
    性の元となることがあるので、これは使わないようにしましょう。

charset

    変換に使用される文字セットを指定します。デフォルトの文字セットは、
    ISO-8859-1 です。

    この関数を使ううえでは ISO-8859-1 と ISO-8859-15、 UTF-8、cp866、 cp1251、
    cp1252 そして KOI8-R は事実上同等です。 string 自体がその文字セットにおける
    有効な文字列である限り、これらの文字セットでは htmlspecialchars() の影響が
    及ぶ文字がみな同じ位置にあるからです。

    PHP 4.3.0 以降では、以下の文字セットをサポートします。

                            サポートする文字セット
    文字セット    エイリアス                         説明
    ISO-8859-1  ISO8859-1      西欧、Latin-1
                               西欧、Latin-9 。Latin-1(ISO-8859-1) に欠けている
    ISO-8859-15 ISO8859-15     ユーロ記号やフランス・フィンランドの文字を追加し
                               たもの。
    UTF-8                      ASCII 互換のマルチバイト 8 ビット Unicode 。
    cp866       ibm866, 866    DOS 固有のキリル文字セット。 4.3.2 以降でサポー
                               トされます。
    cp1251      Windows-1251,  Windows 固有のキリル文字セット。 4.3.2 以降でサ
                win-1251, 1251 ポートされます。
    cp1252      Windows-1252,  西欧のための Windows 固有の文字セット。
                1252
    KOI8-R      koi8-ru, koi8r ロシア語。4.3.2 以降でサポートされます。
    BIG5        950            繁体字中国語。主に台湾で使用されます。
    GB2312      936            簡体字中国語。国の標準文字セットです。
    BIG5-HKSCS                 Big5 に香港の拡張を含めたもの。繁体字中国語。
    Shift_JIS   SJIS, 932      日本語。
    EUC-JP      EUCJP          日本語。

        注意: これら以外の文字セットは理解できず、かわりに ISO-8859-1 を使用し
        ます。

double_encode

    double_encode をオフにすると、PHP は既存の html エンティティをエンコードし
    ません。デフォルトでは、既存のエンティティも含めてすべてを変換します。

返り値

変換後の文字列を返します。

入力の string の中に文字セット charset における無効なコードユニットシーケンスが
含まれており、かつ ENT_IGNORE フラグが設定されていなければ、 htmlspecialchars()
は空文字列を返します。

変更履歴

バージョン                    説明
5.2.3      double_encode パラメータが追加されました。
4.1.0      charset パラメータが追加されました。

例

例1 htmlspecialchars() の例

<?php
$new = htmlspecialchars("<a href='test'>Test</a>", ENT_QUOTES);
echo $new; // &lt;a href=&#039;test&#039;&gt;Test&lt;/a&gt;
?>

注意

    注意:

    この関数は上記のあげたもの以外に関しては一切の変換を行わないことに注意して
    ください。すべての変換を行うには htmlentities() を参照してください。

参考

  • get_html_translation_table() - htmlspecialchars および htmlentities で使用
    される変換テーブルを返す
  • htmlspecialchars_decode() - 特殊な HTML エンティティを文字に戻す
  • strip_tags() - 文字列から HTML および PHP タグを取り除く
  • htmlentities() - 適用可能な文字を全て HTML エンティティに変換する
  • nl2br() - 改行文字の前に HTML の改行タグを挿入する



implode> <htmlspecialchars_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011
 
add a note add a note User Contributed Notes htmlspecialchars
ivan at lutrov dot com 15-Jun-2011 08:30
Be careful, the "charset" argument IS case sensitive. This is counter-intuitive
and serves no practical purpose because the HTML spec actually has the
opposite.
info at 8th dot at 12-May-2011 06:28
English:
I'd found THE Final Solution!
it finds and replaces all unknown letters!
(like Ä, Ö, Ü, ß, and much much more)

it turn em in a HTML AND XML compatible format

parameter: $text: a String with unsuported letters in it
return: a String where all unsupported(XML und HTML) letters are changed into
the Unicode value (for example &#196;)

Deutsch/German:
Ich hab die perfekte Lösung gefunden!
Es findet und tauscht alle unbekannten Buchstaben!
(wie Ä, Ö, Ü, ß, und viel viel mehr)

es tauscht sie in ein HTML und XML kompatibles Format

parameter: $text: ein String mit nichtunterstüzten Buchstaben
return: ein String wo alle von XML und HTML ununterstützten Buchstaben ins
Unicode-Format getauscht sind (z.B. &#196;)

FUNCTION:

<?php
function umlaute($text){
    $returnvalue="";
    for($i=0;$i<strlen($text);$i++){
        $teil=hexdec(rawurlencode(substr($text, $i, 1)));
        if($teil<32||$teil>1114111){
            $returnvalue.=substr($text, $i, 1);
        }else{
            $returnvalue.="&#".$teil.";";
        }
    }
    return $returnvalue;
}
?>
pinkgothic at gmail dot com 11-Mar-2011 01:00
Please note that this function results in an E_WARNING when display_errors is
off and an invalid multibyte string is passed to it (e.g. with 'utf-8' as the
encoding parameter and broken utf-8 characters somewhere in the string).

This is ESPECIALLY IMPORTANT if you have an EXCEPTION-THROWING ERROR HANDLER,
since even though you can't reproduce it in a development mode where
display_errors is on, you MUST wrap your function call in a try-catch, or your
application will crash.

[ The reason PHP makes this distinction is because this is a core function and
many production servers are misconfigured to have display_errors on (to prevent
such things as path disclosure from error messages from accidentally cropping
up). See: http://bugs.php.net/bug.php?id=47494 ]
Thomasvdbulk at gmail dot com 28-Dec-2010 06:05
i searched for a while for a script, that could see the difference between an
html tag and just < and > placed in the text,
the reason is that i recieve text from a database,
wich is inserted by an html form, and contains text and html tags,
the text can contain < and >, so does the tags,
with htmlspecialchars you can validate your text to XHTML,
but you'll also change the tags, like <b> to &lt;b&gt;,
so i needed a script that could see the difference between those two...
but i couldn't find one so i made my own one,
i havent fully tested it, but the parts i tested worked perfect!
just for people that were searching for something like this,
it may looks big, could be done easier, but it works for me, so im happy.

<?php
function fixtags($text){
$text = htmlspecialchars($text);
$text = preg_replace("/=/", "=\"\"", $text);
$text = preg_replace("/&quot;/", "&quot;\"", $text);
$tags = "/&lt;(\/|)(\w*)(\ |)(\w*)([\\\=]*)(?|(\")\"&quot;\"|)(?|(.*)?&quot;(\
")|)([\ ]?)(\/|)&gt;/i";
$replacement = "<$1$2$3$4$5$6$7$8$9$10>";
$text = preg_replace($tags, $replacement, $text);
$text = preg_replace("/=\"\"/", "=", $text);
return $text;
}
?>

an example:

<?php
$string = "
this is smaller < than this<br />
this is greater > than this<br />
this is the same = as this<br />
<a href=\"http://www.example.com/example.php?test=test\">This is a link</a><br
/>
<b>Bold</b> <i>italic</i> etc...";
echo fixtags($string);
?>

will echo:
this is smaller &lt; than this<br />
this is greater &gt; than this<br />
this is the same = as this<br />
<a href="http://www.example.com/example.php?test=test">This is a link</a><br />
<b>Bold</b> <i>italic</i> etc...

I hope its helpfull!!
Anonymous 01-Aug-2010 08:48
This may seem obvious, but if you want to output arbitrary (i.e. user-input)
data as an attribute inside an HTML tag (such as the INPUT tags on a FORM), be
aware of whether you are using ENT_QUOTES or ENT_COMPAT.  If you're using
ENT_COMPAT, the attribute must be wrapped in double-quotes, as single-quotes
will not be encoded and the user will be able to inject arbitrary HTML
attributes (including javascript behavior) inside the tag, even though they
will not be able to inject arbitrary HTML tags.

Also, if you want to allow users to input HTML attributes without them being
double-encoded on display, there are two ways to accomplish this:

1 - Run their input through htmlentities_decode() followed by htmlspecialchars
().

2 - Call htmlspecialchars() with $double_encode=false.

There is one functional difference between these two methods:  If you want to
perform any search-replace on a user's input (such as word censoring in a
message-board application), the second method will allow users to circumvent it
by HTML-encoding their input, whereas the first will not.
nachitox2000 [at] hotmail [dot] com 01-Jul-2010 12:57
I had problems with spanish special characters. So i think in using
htmlspecialchars but my strings also contain HTML.
So I used this :) Hope it help

<?php
function htmlspanishchars($str)
{
    return str_replace(array("&lt;", "&gt;"), array("<", ">"), htmlspecialchars
($str, ENT_NOQUOTES, "UTF-8"));
}
?>
nessthehero at gmail dot com 19-May-2010 06:53
Here's a simple function I wrote for parsing form data.

It checks if it's an array and it is recursive (it calls itself).

It also decodes things that have already been encoded so it doesn't change &
amp; to &amp;amp;

[In this version,] I found it easier to use a regular expression to check and
see if any previously encoded data exists, then decode it repeatedly until
there is none left, then re-encode it.

<?php
function formspecialchars($var)
    {
        $pattern = '/&(#)?[a-zA-Z0-9]{0,};/';
       
        if (is_array($var)) {    // If variable is an array
            $out = array();      // Set output as an array
            foreach ($var as $key => $v) {     
                $out[$key] = formspecialchars($v);         // Run
formspecialchars on every element of the array and return the result. Also
maintains the keys.
            }
        } else {
            $out = $var;
            while (preg_match($pattern,$out) > 0) {
                $out = htmlspecialchars_decode($out,ENT_QUOTES);      
            }                            
            $out = htmlspecialchars(stripslashes(trim($out)),
ENT_QUOTES,'UTF-8',true);     // Trim the variable, strip all slashes, and
encode it
           
        }
       
        return $out;
    }
?>
alif 11-Feb-2010 05:17
I had XML files with both '&amp;' , '&copyright;' and '&' characters. So,
basically, I wrote this preg_replace, which replaces all '&' thats not an 
entity to '&amp;'.

So '&amp;' doesnot get converted to '&ampamp;', only '&' gets converted to '&
amp;'. Also, '&copyright;' , '&#160;' remains unaffected. Its basic, feel free
to modify it.

preg_replace('/&(?![A-Za-z0-9#]{1,7};)/','&amp;',$theString);
timgvdh at gmail dot com 16-Dec-2009 04:54
Here's something that replicates the appearance of <pre> but still allows for
word wrap:

<?php
function special_formatting($input) {
    $output = htmlspecialchars($input, ENT_QUOTES);
    $output = str_replace(array('  ', "\n"), array('&nbsp;&nbsp;', '<br>'),
$output);
    return str_replace('&nbsp; ', '&nbsp;&nbsp;', $output);
}
?>
Anonymous 18-Sep-2009 05:16
This may seem obvious, but it caused me some frustration. If you try and use
htmlspecialchars with the $charset argument set and the string you run it on is
not actually the same charset you specify, you get any empty string returned
without any notice/warning/error.

<?php

$ok_utf8 = "A valid UTF-8 string";
$bad_utf8 = "An invalid UTF-8 string";

var_dump(htmlspecialchars($bad_utf8, ENT_NOQUOTES, 'UTF-8'));  // string(0) ""

var_dump(htmlspecialchars($ok_utf8, ENT_NOQUOTES, 'UTF-8'));  // string(20) "A
valid UTF-8 string"

?>

So make sure your charsets are consistent

<?php

$bad_utf8 = "An invalid UTF-8 string";

// make sure it's really UTF-8
$bad_utf8 = mb_convert_encoding($bad_utf8, 'UTF-8', mb_detect_encoding
($bad_utf8));

var_dump(htmlspecialchars($bad_utf8, ENT_NOQUOTES, 'UTF-8'));  // string(23)
"An invalid UTF-8 string"

?>

I had this problem because a Mac user was submitting posts copy/pasted from a
program and it contained weird chars in it.
Anonymous 17-Sep-2009 04:43
Just a few notes on how one can use htmlspecialchars() and htmlentities() to
filter user input on forms for later display and/or database storage...

1. Use htmlspecialchars() to filter text input values for html input tags. 
i.e.,

echo '<input name=userdata type=text value="'.htmlspecialchars($data).'" />';

 
2. Use htmlentities() to filter the same data values for most other kinds of
html tags, i.e.,

echo '<p>'.htmlentities($data).'</p>';

3. Use your database escape string function to filter the data for database
updates & insertions, for instance, using postgresql,

pg_query($connection,"UPDATE datatable SET datavalue='".pg_escape_string
($data)."'");
 

This strategy seems to work well and consistently, without restricting anything
the user might like to type and display, while still providing a good deal of
protection against a wide variety of html and database escape sequence
injections, which might otherwise be introduced through deliberate and/or
accidental input of such character sequences by users submitting their input
data via html forms.
chuck at N0SPAM1command dot com 12-Aug-2009 02:06
NOTE:
I made an error in my last post.

The last 3 lines should have read
<?php

...

$text = get_page($url);
--------^^^^^^^^
$new = htmlspecialchars($text, ENT_QUOTES); // here is the magic :)

    echo '<pre>' .$new. '</pre>';

?>

OOPS!
chuck at N0SPAM1command dot com 12-Aug-2009 12:57
Need to dump the source of page retrieved via <a href="http://us3.php.net/curl
">CURL</a>?
I found it's easily done with htmlspecialchars()

eg;

<?php

function get_page($url)
{
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_USERAGENT, 'some bot');
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
  curl_setopt($curl, CURLOPT_REFERER, '-');
  curl_setopt($curl, CURLOPT_ENCODING, 'gzip,deflate');
  curl_setopt($curl, CURLOPT_FOLLOWLOCATION, 1);
...
    curl_setopt($curl, CURLOPT_HEADER, 1);
    curl_setopt($curl, CURLOPT_NOBODY, 0);
  curl_setopt($curl, CURLOPT_TIMEOUT, 10);
  $html = curl_exec($curl);
  curl_close($curl);

  return $html;
}

$text = get_page($url);
$new = htmlspecialchars($text, ENT_QUOTES); // here is the magic :)

    echo '<pre>' .$new. '</pre>';


?>

HTH
hm2k at php.net 22-Jun-2009 05:02
<?php
/**
 * A recursive version of htmlspecialchars() for arrays and strings.
 *
 */

function htmlspecialchars_deep($mixed, $quote_style = ENT_QUOTES, $charset =
'UTF-8')
{
    if (is_array($mixed)) {
        foreach($mixed as $key => $value) {
            $mixed[$key] = htmlspecialchars_deep($value, $quote_style,
$charset);
        }
    } elseif (is_string($mixed)) {
        $mixed = htmlspecialchars(htmlspecialchars_decode($mixed,
$quote_style), $quote_style, $charset);
    }
    return $mixed;
}
?>
hello at haroonahmad dot co dot uk 23-Mar-2009 09:56
a common confusion among beginner is that what is the difference between
htmlentities() and htmlspecialchars() really, because the manual examples are
converting angular brackets for both.

well, htmlentities() will ALSO look for other language characters in the string
e.g German, French or Italian etc. So if you think your attacker can use some
foreign language characters for a XSS attack in URL etc then use htmlentities()
instead of htmlspecialchars().

I hope it helps,

Haroon Ahmad
Kenneth Kin Lum 09-Oct-2008 01:45
if your goal is just to protect your page from Cross Site Scripting (XSS)
attack, or just to show HTML tags on a web page (showing <body> on the page,
for example), then using htmlspecialchars() is good enough and better than
using htmlentities().  A minor point is htmlspecialchars() is faster than
htmlentities().  A more important point is, when we use  htmlspecialchars($s)
in our code, it is automatically compatible with UTF-8 string.  Otherwise, if
we use htmlentities($s), and there happens to be foreign characters in the
string $s in UTF-8 encoding, then htmlentities() is going to mess it up, as it
modifies the byte 0x80 to 0xFF in the string to entities like &eacute;. 
(unless you specifically provide a second argument and a third argument to
htmlentities(), with the third argument being "UTF-8").

The reason htmlspecialchars($s) already works with UTF-8 string is that, it
changes bytes that are in the range 0x00 to 0x7F to &lt; etc, while leaving
bytes in the range 0x80 to 0xFF unchanged.  We may wonder whether
htmlspecialchars() may accidentally change any byte in a 2 to 4 byte UTF-8
character to &lt; etc.  The answer is, it won't.  When a UTF-8 character is 2
to 4 bytes long, all the bytes in this character is in the 0x80 to 0xFF range.
None can be in the 0x00 to 0x7F range.  When a UTF-8 character is 1 byte long,
it is just the same as ASCII, which is 7 bit, from 0x00 to 0x7F.  As a result,
when a UTF-8 character is 1 byte long, htmlspecialchars($s) will do its job,
and when the UTF-8 character is 2 to 4 bytes long, htmlspecialchars($s) will
just pass those bytes unchanged.  So htmlspecialchars($s) will do the same job
no matter whether $s is in ASCII, ISO-8859-1 (Latin-1), or UTF-8.
brendel at krumedia dot de 15-May-2008 05:28
I know some people posted similar functions but may be you are looking for this
version:

function jschars($str)
{
    $str = mb_ereg_replace("\\\\", "\\\\", $str);
    $str = mb_ereg_replace("\"", "\\\"", $str);
    $str = mb_ereg_replace("'", "\\'", $str);
    $str = mb_ereg_replace("\r\n", "\\n", $str);
    $str = mb_ereg_replace("\r", "\\n", $str);
    $str = mb_ereg_replace("\n", "\\n", $str);
    $str = mb_ereg_replace("\t", "\\t", $str);
    $str = mb_ereg_replace("<", "\\x3C", $str); // for inclusion in HTML
    $str = mb_ereg_replace(">", "\\x3E", $str);
    return $str;
}

if you use smarty your code may look like:

<a onclick="alert('{$text|jschars|htmlchars}');return false;">Test</a>

(Yes, we have the shortcur htmlchars instead of htmlspecialchars, so we are
able to tell the encoding e.g. UTF-8 or ISO-8859-1 to htmlspecialchars)
php dot net at orakio dot net 10-Apr-2008 06:26
I was recently exploring some code when I saw this being used to make data safe
for "SQL".

This function should not be used to make data SQL safe (although to prevent
phishing it is perfectly good).

Here is an example of how NOT to use this function:

<?php
$username = htmlspecialchars(trim("$_POST[username]"));

$uniqueuser = $realm_db->query("SELECT `login` FROM `accounts` WHERE `login` =
'$username'");
?>

(Only other check on $_POST['username'] is to make sure it isn't empty which it
is after trim on a white space only name)

The problem here is that it is left to default which allows single quote marks
which are used in the sql query. Turning on magic quotes might fix it but you
should not rely on magic quotes, in fact you should never use it and fix the
code instead. There are also problems with \ not being escaped. Even if magic
quotes were used there would be the problem of allowing usernames longer than
the limit and having some really weird usernames given they are to be used
outside of html, this just provide a front end for registering to another
system using mysql. Of course using it on the output wouldn;t cause that
problem.

Another way to make something of a fix would be to use ENT_QUOTE or do:

<?php
$uniqueuser = $realm_db->query('SELECT `login` FROM `accounts` WHERE `login` =
"'.$username.'";');
?>

Eitherway none of these solutions are good practice and are not entirely
unflawed. This function should simply never be used in such a fashion.

I hope this will prevent newbies using this function incorrectly (as they
apparently do).
treyh 09-Apr-2008 06:41
Here is a function that wraps htmlspecialchars and makes it work for xml.

function xmlspecialchars($text) {
   return str_replace('&#039;', '&apos;', htmlspecialchars($text, ENT_QUOTES));
}
crestfresh at gmail dot com 19-Feb-2008 03:02
Re ish1301's jsspecialchars() function: use json_encode() instead.
ish1301 at gmail doooot com 20-Nov-2007 10:56
used this function for making a variable javascript compatible

<?php
function jsspecialchars( $string = '') {
    $string = preg_replace("/\r*\n/","\\n",$string);
    $string = preg_replace("/\//","\\\/",$string);
    $string = preg_replace("/\"/","\\\"",$string);
    $string = preg_replace("/'/"," ",$string);
    return $string;
}
?>
hope this may help those embedding php in javascripts
drew at august-harper dot com 23-Aug-2007 04:21
:// Escapes strings to be included in javascript
:function jsspecialchars($s) {
:    return preg_replace('/([^ :!#$%@()*+,-.\x30-\x5b\x5d-\x7e])/e',
:        "'\\x'.(ord('\\1')<16? '0': '').dechex(ord('\\1'))",$s);
:}

This function DOES NOT produce correct output in PHP5. Any strings containing a
” will be improperly escaped to \x5c, when it should be \x22.

I am not very good with regular expressions, so this is my solution to the
problem.
//this is a workaround for jsspecialchars!
function ord2($s) {
if (strlen($s) == 2) {
return ord(substr($s,1,1));
} else {
return ord($s);
}
}
function JS_SpecialChars($s) {
return preg_replace(’/([^ !#$%@()*+,.\x30\x5b\x5d-\x7e])/e’,
”’\\x’.(ord2(’\\1’)&lt;16? ‘0’: ’’).dechex(ord2(’\\1’))”,$s);
}

I am sure that there is a better solution, but I can’t figure one out. This
approach will probably also fix any other characters that end up being
improperly escaped.
solar-energy 16-Jun-2007 10:21
also see function "urlencode()", useful for passing text with ampersand and
other special chars through url

(i.e. the text is encoded as if sent from form using GET method)

e.g.

<?php
echo "<a href='foo.php?text=".urlencode("foo?&bar!")."'>link</a>";
?>

produces

<a href='foo.php?text=foo%3F%26bar%21'>link</a>

and if the link is followed, the $_GET["text"] in foo.php will contain "foo?&
bar!"
galvao at galvao dot eti dot br 19-May-2007 01:19
There's a tiny error on alex-0 at hotmail dot co dot uk example:

The line:

$new = htmlspecialchars($_POST[message], ENT_QUOTES);

Should be written as:

$new = htmlspecialchars($_POST['message'], ENT_QUOTES);

Regards,
terminatorul at gmail dot com 27-Apr-2007 05:04
To html-encode Unicode characters that may not be part of your document
character set (given in the META tag of your page), and so can not be output
directly into your document source, you need to use mb_encode_numericentity().
Pay attention to it's conversion map argument.
frank at codedor dot be 16-Jan-2007 09:25
If you seem to have a problem with rendering dynamic RSS files from a database
- try using htmlspecialchars() or htmlentities() on the text you are rendering.

Since XML and RSS is very strict about what is allowed inside nodes, you need
to make sure everything is "A-OK" according to XML standards ...

Especially if the database you're pulling data from is fi. Latin-Swedish
encoding, which seems to be the standard setting for MySQL databases.
alex-0 at hotmail dot co dot uk 23-Dec-2006 09:09
You can also use variables.
This is handy when working with forms to clear out an malicious html

<?php
$new = htmlspecialchars($_POST[message], ENT_QUOTES);
echo $new;
?>
richard at mf2fm dot com 03-Mar-2006 09:06
I had a script which detected swearing and wanted to make sure that words such
as 'f &uuml; c k' didn't slip through the system.

After using htmlentities(), the following line converts most extended alphabet
characters back to the standard alphabet so you can spot such problems..

$text=eregi_replace("&([a-z])[a-z0-9]{3,};", "\\\\1", $text);

This changes, for example, '&uuml;' into 'u' and '&szlig' into 's'.  Sadly it
also converts '&pound;' and '&para;' into 'p' so it's not perfect but does
solve a lot of the problems
mikiwoz at yahoo dot co dot uk 06-Oct-2005 09:40
I am not sure, maybe I'm missing something, but I have found something
interesting:
I've been working on a project, where I had to use htmlspecialchars (for
opbvious reasons). I olso needed to de-code the encoded string. What I have
done was almost a copy and paste from php.net:
$trans=get_html_translation_table(HTML_SPECIALCHARS, ENT_QUOTES);
$trans=array_flip($trans);
$string=strtr($encoded, $trans);
(it looked a bit different in my code, but the idea is clear)
I couldn't get the apostrophe sign de-coded, and I needed it for the <A> tags.
After an hour or so of debuging, I decided do print_r($trans). What I got was:
...
[&#39;] => '
...
BUT the apostrophe was encoded to $#039; -> note the zero.
I don't suppose it's a bug, but it definetely IS a potential pitfall, watch out
for this one.
Luiz Miguel Axcar (lmaxcar at yahoo dot com dot br) 01-Sep-2005 01:16
Hello,

If you are getting trouble to SGDB write/read HTML data, try to use this:

<?php

//from html_entity_decode() manual page
function unhtmlentities ($string) {
   $trans_tbl =get_html_translation_table (HTML_ENTITIES );
   $trans_tbl =array_flip ($trans_tbl );
   return strtr ($string ,$trans_tbl );
}

//read from db
$content = stripslashes (htmlspecialchars ($field['content']));

//write to db
$content = unhtmlentities (addslashes (trim ($_POST['content'])));

//make sure result of function get_magic_quotes_gpc () == 0, you can get
strange slashes in your content adding slashes twice

//better to do this using addslashes
$content = (! get_magic_quotes_gpc ()) ? addslashes ($content) : $content;

?>
jspalletta at gmail dot com 12-Jul-2005 12:37
I have found that this regular expression is sufficient for making sure that
existing character entities show after htmlspecialchars() replaces _all_
occurrences of & with the &amp; entity.

<?php
// Note: hsc is an abbreviation of htmlspecialchars
function hscFixed($str)
{
    return preg_replace("/&amp;(#[0-9]+|[a-z]+);/i", "&$1;", htmlspecialchars
($str));
}
?>

The only flaw I can think of is if you have text of the vein; "&[word];", that
is not meant to be a character but rather uses the ampersand and semicolon in
their traditional grammatical denotations.  However I think this is highly
unlikely to occur (among other reasons, the fact that anyone with enough
grammatical inclination to use them as such probably won't leave out the space
between the ampersand and the word).
25-Jun-2005 03:44
You can't use htmlspecialchars to create RSS feeds, since it expands
ampersands.You need to use something like this:
$content = preg_replace(array('/</', '/>/', '/"/'), array('&lt;', '&gt;', '&
quot;'), $content);
palrich at gmail dot com 16-May-2005 08:29
To Alexander Nofftz and urbanheroes:
It's not an IE problem.  There is no &apos; in HTML.  So it's only a problem if
someone else does render this as an apostraphe on an HTML page.
paul dot l at aon dot at 09-May-2005 04:50
function reverse_htmlentities($mixed)
{
    $htmltable = get_html_translation_table(HTML_ENTITIES);
    foreach($htmltable as $key => $value)
    {
        $mixed = ereg_replace(addslashes($value),$key,$mixed);
    }
    return $mixed;
}

this is my version of a reversed htmlentities function
thisiswherejunkgoes at gmail dot com 06-May-2005 05:06
If there're any n00bs out there looking for a way to ensure that no html/
special chars are getting sent to their databases/put through forms/etc., this
has been doing the trick for me (though being at least slightly n00bish, if
this won't always work perhaps someone will ammend :-)

function checkforchars ($foo) {

  if ($foo === htmlspecialchars($foo)) {
        return "Valid entry.";
  } else {
        return "Invalid entry.";
  }

}
urbanheroes {at} gmail {dot} com 30-Apr-2005 06:32
In response to the note made by Alexander Nofftz on October 2004, &#39; is used
instead of &apos; because IE unfortunately seems to have trouble with the
latter.
gt at realvertex.com 28-Apr-2005 04:55
Here is the recursive version that works for both arrays and strings. Doesn't
look as elegant as the other recursive versions, because of the input checks.

function HTML_ESC($_input = null, $_esc_keys = false)
{
    if ((null != $_input) && (is_array($_input)))
    {
        foreach($_input as $key => $value)
        {
            if($_esc_keys)
            {
                $_return[htmlspecialchars($key)] = HTML_ESC($value,$_esc_keys);
            }
            else
            {
                $_return[$key] = HTML_ESC($value);
            }
        }
        return $_return;
    }
    elseif(null != $_input)
    {
        return htmlspecialchars($_input);
    }
    else
    {
        return null;
    }
}
took 23-Apr-2005 04:14
The Algo from donwilson at gmail dot com to reverse the action of
htmlspecialchars(), edited for germany:

function unhtmlspecialchars( $string )
{
  $string = str_replace ( '&amp;', '&', $string );
  $string = str_replace ( '&#039;', '\'', $string );
  $string = str_replace ( '&quot;', '"', $string );
  $string = str_replace ( '&lt;', '<', $string );
  $string = str_replace ( '&gt;', '>', $string );
  $string = str_replace ( '&uuml;', ' ', $string );
  $string = str_replace ( '&Uuml;', ' ', $string );
  $string = str_replace ( '&auml;', ' ', $string );
  $string = str_replace ( '&Auml;', ' ', $string );
  $string = str_replace ( '&ouml;', ' ', $string );
  $string = str_replace ( '&Ouml;', ' ', $string );   
  return $string;
}
11-Mar-2005 12:22
function htmlspecialchars_array($arr = array()) {
   $rs =  array();
   while(list($key,$val) = each($arr)) {
       if(is_array($val)) {
           $rs[$key] = htmlspecialchars_array($val);
       }
       else {
           $rs[$key] = htmlspecialchars($val, ENT_QUOTES);
       }   
   }
   return $rs;
}
beer UNDRSCR nomaed AT hotmail DOT com 01-Feb-2005 10:46
After inspecting the non-native encoding problem, I noticed that for example,
if the encoding is cyrillic, and I write Latin characters that are not part of
the encoding (  for example - ae-ligature), the browser will send the real
entity, such as &aelig; for this case.
Therefore, the only way I see to display multilingual text that is encoded with
entities is by:
<?php
    echo str_replace('&amp;', '&', htmlspecialchars($txt));
?>

The regex for numeric entities will skip the Latin-1 textual entities.
zolinak at zoli dot szathmari dot hu 14-Dec-2004 12:46
A sample function, if anybody want to turn html entities (and special
characters) back to simple. (eg: "&egrave;", "<" etc)

function html2specialchars($str){
    $trans_table = array_flip(get_html_translation_table(HTML_ENTITIES));
    return strtr($str, $trans_table);
}
beer UNDRSCR nomaed AT hotmail DOT com 21-Oct-2004 08:03
Quite often, on HTML pages that are not encoded as UTF-8, and people write in
not native encoding, some browser (for sure IExplorer) will send the different
charset characters using HTML Entities, such as &#1073; for small russian 'b'.
htmlspecialchars() will convert this character to the entity, since it changes
all & to &amp;
What I usually do, is either turn &amp; back to & so the correct characters
will appear in the output, or I use some regex to replace all entities of
characters back to their original entity:
<?php
    // treat this as pseudo-code, it hasn't been tested...
    $result = preg_replace('/&amp;#(x[a-f0-9]+|[0-9]+);/i', '&#$1;', $source);
?>
Alexander Nofftz 20-Oct-2004 11:41
Why &#39;? The HTML and XML DTDs proposed &apos; for this.
See http://www.w3.org/TR/html/dtds.html#a_dtd_Special_characters

So better use this:

$text = htmlspecialchars($text, ENT_QUOTES);
$text = preg_replace('/&#0*39;/', '&apos;', $text);
mlvanbie at gmail dot com 06-Oct-2004 11:45
The code in the previous note has a bug.  If the original text was `&gt;' then
htmlspecialchars will turn it into `&amp;gt;' and the suggested code will turn
that into `>'.  The &amp; translation must be last.
donwilson at gmail dot com 25-Sep-2004 04:58
To reverse the action of htmlspecialchars(), use this code:

<?php
    unhtmlspecialchars( $string )
    {
        $string = str_replace ( '&amp;', '&', $string );
        $string = str_replace ( '&#039;', '\'', $string );
        $string = str_replace ( '&quot;', '\"', $string );
        $string = str_replace ( '&lt;', '<', $string );
        $string = str_replace ( '&gt;', '>', $string );
       
        return $string;
    }
?>
thelatesundayshow.com @ nathan (flip it) 02-Sep-2004 06:51
heres a version of the recursive escape function that takes the array byref
rather than byval so saves some resources in case of big arrays

function recurse_array_HTML_safe(&$arr) {
    foreach ($arr as $key => $val)
        if (is_array($val))
            recurse_array_HTML_safe($arr[$key]);
        else
            $arr[$key] = htmlspecialchars($val, ENT_QUOTES);
}
moc.xnoitadnuof@310symerej 21-Apr-2004 11:04
Here are some usefull functions.
They will apply || decode, htmlspecialchars || htmlentities recursivly to
arrays() || to regular $variables. They also protect agains "double encoding".

<?PHP
function htmlspecialchars_or( $mixed, $quote_style = ENT_QUOTES ){
    return is_array($mixed) ? array_map('htmlspecialchars_or',$mixed,
array_fill(0,count($mixed),$quote_style)) : htmlspecialchars
(htmlspecialchars_decode($mixed, $quote_style ),$quote_style);
}

function htmlspecialchars_decode( $mixed, $quote_style = ENT_QUOTES ) {
    if(is_array($mixed)){
      return array_map('htmlspecialchars_decode',$mixed, array_fill(0,count
($mixed),$quote_style));
  }
  $trans_table = get_html_translation_table( HTML_SPECIALCHARS, $quote_style );
    if( $trans_table["'"] != '&#039;' ) { # some versions of PHP match single
quotes to &#39;
        $trans_table["'"] = '&#039;';
    }
    return (strtr($mixed, array_flip($trans_table)));
}

function htmlentities_or($mixed, $quote_style = ENT_QUOTES){
    return is_array($mixed) ? array_map('htmlentities_or',$mixed, array_fill
(0,count($mixed),$quote_style)) : htmlentities(htmlentities_decode($mixed,
$quote_style ),$quote_style);
}

function htmlentities_decode( $mixed, $quote_style = ENT_QUOTES ) {
  if(is_array($mixed)){
      return array_map('htmlentities_decode',$mixed, array_fill(0,count
($mixed),$quote_style));
  }
    $trans_table = get_html_translation_table(HTML_ENTITIES, $quote_style );
    if( $trans_table["'"] != '&#039;' ) { # some versions of PHP match single
quotes to &#39;
        $trans_table["'"] = '&#039;';
    }
    return (strtr($mixed, array_flip($trans_table)));
}
?>

These functions are an addition to an earlier post. I would like to give the
person some credit but I do not know who it was.

<?  ;llnu=u!eJq dHd?>
Dave Duchene 20-Feb-2004 01:58
Here is a handy function that will escape the contents of a variable, recursing
into arrays.

<?php
function escaporize($thing) {
  if (is_array($thing)) {
    $escaped = array();
 
    foreach ($thing as $key => $value) {
      $escaped[$key] = escaporize($value);
    }
   
    return $escaped;
  }
 
  // else
  return htmlspecialchars($thing);
}
?>
mike-php at emerge2 dot com 20-Nov-2003 10:13
Here's a handy function that guards against 'double' encoding:

# Given a string, this function first strips out all html special characters,
then
# encodes the string, safely returning an encoded string without
double-encoding.
function get_htmlspecialchars( $given, $quote_style = ENT_QUOTES ){
   return htmlspecialchars( html_entity_decode( $given, $quote_style ),
$quote_style );
}

# Needed for older versions of PHP that do not have this function built-in.
function html_entity_decode( $given_html, $quote_style = ENT_QUOTES ) {
   $trans_table = get_html_translation_table( HTML_SPECIALCHARS, $quote_style
);
   if( $trans_table["'"] != '&#039;' ) { # some versions of PHP match single
quotes to &#39;
      $trans_table["'"] = '&#039;';
   }
   return ( strtr( $given_html, array_flip( $trans_table ) ) );
}

Note: I set the default to ENT_QUOTES, as this makes more sense to me than the
PHP function's default of ENT_COMPAT.
nospam at somewhere dot com 15-Jun-2003 05:28
most simple function for decoding html-encoded strings:

function htmldecode($encoded) {
    return strtr($encoded,array_flip(get_html_translation_table
(HTML_ENTITIES)));
}
dystopia589 at yahoo dot com 13-Mar-2003 03:58
Sorry, part of that code was unnecessary. Here's a more readable version:

function SpecialChars($Security)
{
if (is_array($Security))
{
while(list($key, $val) = each($Security))
{
$Security[$key] = SpecialChars($val);
}
}
else
{
$Security = htmlspecialchars(stripslashes($Security), ENT_QUOTES);
}
return $Security;
}
webmaster at NOSPAM dot onlinegs dot com 29-Jan-2003 06:51
for those of you using V 4.3.0+ you can use html_entity_decode() to decode a
string encoded with htmlspecialschars(), this should be faster and easier then
using a str_replace or ereg.
_____ at luukku dot com 14-Sep-2002 09:21
People, don't use ereg_replace for the most simple string replacing operations
(replacing constant string with another).
Use str_replace.
akira dot yoshi at shrine dot de 16-May-2002 04:15
If you need to htmlspecialchars a jis string, here's a function that does:

function htmlspecialchars_jis($text) {
    $ret="";
    if ($text=="") return "";
    $esc=chr(27);
    $text=$esc."$B".$esc."$B".$text;
    $text=str_replace($esc."(B", $esc."$B", $text);
    $trans=explode($esc."$B", $text);
    $enc=0;
    while (list (, $val) = each ($trans))  {
        if ($enc==0) {
            $val.="";
            if ($val!="") $ret.=htmlspecialchars($val);
            $enc=1;
        } else {
            $val.="";
            if ($val!="") $ret.=$esc."$B".$val.$esc."(B";
            $enc=0;
        };
    }
    return $ret;
};

BTW: I'm very(!) sure that JIS is iso-2022-jp, not iso-2002-jp
juadielon_NOSPAM at hotmail dot com 01-May-2002 04:09
I was trying to retrieve information from a database to display it into the
browser. However it did not work as I was expecting.  For instance double
quotes (  ) and single quotes (  ) were conflicting in HTML in an INPUT
selector.

The first approach to solve this was to use htmlspecialchars to convert special
characters to HTML entities to display the input box with its value.

$encode=htmlspecialchars($str, ENT_QUOTES);

However, the result was having HTML entities with a \ (backslash) preceding it
(escape characters).  For instance ampersand (&) becomes \&amp; displaying \&
and double quotes becomes \&quot; displaying \ 

So the final solution was to replace first any \ (backslash) and then ask
htmlspecialchars to make the conversion.

[Editor's Note: This is the wrong way to do this. The proper way is to use

$encoded = htmlspecialchars(stripslashes($str), ENT_QUOTES);
]

$encoded=htmlspecialchars(str_replace('\\', '', $str), ENT_QUOTES);

Try this example to see it your self.

<form action="<?php echo $PHP_SELF; ?>">
<input type="text" name="str" size="20" value="">
<input type="submit" value="Submit">
<br>
<?php
  if (!empty($str)) {
    $encoded=htmlspecialchars(str_replace('\\', '', $str), ENT_QUOTES);
    echo "<br><p>Result: <b>".$encoded."</b>. It should be the same you just
typed</p>";
    echo "<p>But source code is transformed to:<b><xmp>".$encoded."</xmp></b></
p>";
    // I know, I know <xmp> is deprecated in HTML 4 but was easy to use this
time to display result.
  }
?>
</form>

Hope this will helps someone.
akira at kurogane dot net 01-Apr-2002 05:42
Beware of parsing JIS (aka 'iso-2002-jp') text through this function, as this
function does not appear to have a sense for multibyte characters and may
corrupt some characters. Eg. the japanese comma (the two ascii characters !" as
viewed by an ascii client) gets transferred into !&quot; , which transforms the
comma into a 'maru' mark and the following characters into garbage.
Conceivably this could affect other multibyte charsets.
joseph at nextique dot com 20-Feb-2002 09:21
Here is a handy function to htmlalize an array (or scalar) before you hand it
off to xml.

function htmlspecialchars_array($arr = array()) {
    $rs =  array();
    while(list($key,$val) = each($arr)) {
        if(is_array($val)) {
            $rs[$key] = htmlspecialchars_array($val);
        }
        else {
            $rs[$key] = htmlspecialchars($val, ENT_QUOTES);
        }   
    }
    return $rs;
}
15-Jul-2001 06:18
If your sending data from one form to another, the data in the textareas and
text inputs may need to have htmlspecialchars("form data", ENT_QUOTES) applied,
assuming you will ever have quotes or less-than signs or any of those special
characters.  Using htmlspecialchars will make the text show up properly in the
second form.  The changes are automatically undone whenever the form data is
submitted. It does seem a little strange, but it works and my headache is now
starting to go away.

AZ
ryan at ryano dot net 29-Jun-2001 10:06
Actually, if you're using >= 4.0.5, this should theoretically be quicker (less
overhead anyway):

$text = str_replace(array("&gt;", "&lt;", "&quot;", "&amp;"), array(">", "<", "
\"", "&"), $text);
thorax at inforocket dot com 09-Dec-1999 01:26
to convert a document back from this,
do string replacements in this order:

>   >
<   <
" "
&  &

Doing the last phase first will
reveal erroneous results.. For example:

'<'  => specialchars() => '&lt;' '&lt;' => convert ampersands => '<' => convert
everything else => '<'
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Jun 17 19:22:16 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 自然言語および文字エンコーディング
  • マルチバイト文字列
  • マルチバイト文字列関数
  • mb_ check_ encoding
  • mb_ convert_ case
  • mb_ convert_ encoding
  • mb_ convert_ kana
  • mb_ convert_ variables
  • mb_ decode_ mimeheader
  • mb_ decode_ numericentity
  • mb_ detect_ encoding
  • mb_ detect_ order
  • mb_ encode_ mimeheader
  • mb_ encode_ numericentity
  • mb_ encoding_ aliases
  • mb_ ereg_ match
  • mb_ ereg_ replace
  • mb_ ereg_ search_ getpos
  • mb_ ereg_ search_ getregs
  • mb_ ereg_ search_ init
  • mb_ ereg_ search_ pos
  • mb_ ereg_ search_ regs
  • mb_ ereg_ search_ setpos
  • mb_ ereg_ search
  • mb_ ereg
  • mb_ eregi_ replace
  • mb_ eregi
  • mb_ get_ info
  • mb_ http_ input
  • mb_ http_ output
  • mb_ internal_ encoding
  • mb_ language
  • mb_ list_ encodings
  • mb_ output_ handler
  • mb_ parse_ str
  • mb_ preferred_ mime_ name
  • mb_ regex_ encoding
  • mb_ regex_ set_ options
  • mb_ send_ mail
  • mb_ split
  • mb_ strcut
  • mb_ strimwidth
  • mb_ stripos
  • mb_ stristr
  • mb_ strlen
  • mb_ strpos
  • mb_ strrchr
  • mb_ strrichr
  • mb_ strripos
  • mb_ strrpos
  • mb_ strstr
  • mb_ strtolower
  • mb_ strtoupper
  • mb_ strwidth
  • mb_ substitute_ character
  • mb_ substr_ count
  • mb_ substr

mb_convert_kana> <mb_convert_case
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011

view this page in

[English             ] Change language
mb_convert_encoding

(PHP 4 >= 4.0.6, PHP 5)

mb_convert_encoding — 文字エンコーディングを変換する

説明

string mb_convert_encoding ( string $str , string $to_encoding [, mixed
$from_encoding ] )

文字列 strの文字エンコーディングを、オプションで指定した from_encoding から
to_encoding に変換します。

パラメータ

str

    変換する文字列。

to_encoding

    str の変換後の文字エンコーディング。

from_encoding

    変換前の文字エンコーディング名を指定します。これは、配列またはカンマ区切り
    の文字列とすることが可能です。 from_encoding を指定しなかった場合は、内部文
    字エンコーディングを使用します。

    サポートされる文字エンコーディングを参照ください。

返り値

変換後の文字列を返します。

例

例1 mb_convert_encoding() の例

<?php
/* 内部文字エンコーディングからSJISに変換 */
$str = mb_convert_encoding($str, "SJIS");

/* EUC-JPからUTF-7に変換 */
$str = mb_convert_encoding($str, "UTF-7", "EUC-JP");

/* JIS, eucjp-win, sjis-winの順番で自動検出し、UCS-2LEに変換 */
$str = mb_convert_encoding($str, "UCS-2LE", "JIS, eucjp-win, sjis-win");

/* "auto" は、"ASCII,JIS,UTF-8,EUC-JP,SJIS" に展開される */
$str = mb_convert_encoding($str, "EUC-JP", "auto");
?>

参考

  • mb_detect_order() - 文字エンコーディング検出順序を設定あるいは取得する



mb_convert_kana> <mb_convert_case
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 17 Jun 2011
 
add a note add a note User Contributed Notes mb_convert_encoding
Alexanderdotbooneatmnsudotedu 09-Jun-2011 05:50
I was having trouble parsing an Excel document to html, this seems to do the
trick for character encoding.

<?php
function decode_characters($info)
{
    $info = mb_convert_encoding($info, "HTML-ENTITIES", "UTF-8");
    $info = preg_replace('~^(&([a-zA-Z0-9]);)~',htmlentities('${1}'),$info);
    return($info);
}
?>
alvaro at demogracia dot com 06-Apr-2011 10:37
You can use the HTML-ENTITIES encoding to insert arbitrary Unicode characters,
e.g. "U+25B6 (BLACK RIGHT-POINTING TRIANGLE)":

<?php
$triangle = mb_convert_encoding('&#x25B6;', 'UTF-8', 'HTML-ENTITIES');
?>

Be aware though that older PHP versions do not seem to support hexadecimal
notation (&#x25B6;). In such case, use decimal notation (&#9654;):

<?php
$triangle = mb_convert_encoding('&#9654;', 'UTF-8', 'HTML-ENTITIES');
?>
gullevek at gullevek dot org 25-Aug-2010 07:27
If you want to convert japanese to ISO-2022-JP it is highly recommended to use
ISO-2022-JP-MS as the target encoding instead. This includes the extended
character set and avoids ? in the text. For example the often used "1 in a
circle" ① will be correctly converted then.
regrunge at hotmail dot it 14-May-2010 03:00
I've been trying to find the charset of a norwegian (with a lot of ø, æ, å) txt
file written on a Mac, i've found it in this way:

<?php
$text = "A strange string to pass, maybe with some ø, æ, å characters.";

foreach(mb_list_encodings() as $chr){
        echo mb_convert_encoding($text, 'UTF-8', $chr)." : ".$chr."<br>";   
 }
?>

The line that looks good, gives you the encoding it was written in.

Hope can help someone
Daniel Trebbien 23-Jul-2009 06:25
Note that `mb_convert_encoding($val, 'HTML-ENTITIES')` does not escape '\'',
'"', '<', '>', or '&'.
me at gsnedders dot com 18-Jun-2009 10:06
It appears that when dealing with an unknown "from encoding" the function will
both throw an E_WARNING and proceed to convert the string from ISO-8859-1 to
the "to encoding".
alexandrefelipemuller at gmail dot com 18-Feb-2009 08:06
I used this function insted mb_convert_encoding, because mbstring wasn't
enabled at my comercial server. It only suports utf7, 8 e iso 8859-1:

<?php
function my_convert_encoding($string,$to,$from)
{
        // Convert string to ISO_8859-1
        if ($from == "UTF-8")
                $iso_string = utf8_decode($string);
        else
                if ($from == "UTF7-IMAP")
                        $iso_string = imap_utf7_decode($string);
                else
                        $iso_string = $string;

        // Convert ISO_8859-1 string to result coding
        if ($to == "UTF-8")
                return(utf8_encode($iso_string));
        else
                if ($to == "UTF7-IMAP")
                        return(imap_utf7_encode($iso_string));
                else
                        return($iso_string);
}
?>
chzhang at gmail dot com 05-Jan-2009 08:34
instead of ini_set(), you can try this

mb_substitute_character("none");
francois at bonzon point com 11-Nov-2008 01:05
aaron, to discard unsupported characters instead of printing a ?, you might as
well simply set the configuration directive:

mbstring.substitute_character = "none"

in your php.ini. Be sure to include the quotes around none. Or at run-time with

<?php
ini_set('mbstring.substitute_character', "none");
?>
aaron at aarongough dot com 07-Nov-2008 04:24
My solution below was slightly incorrect, so here is the correct version (I
posted at the end of a long day, never a good idea!)

Again, this is a quick and dirty solution to stop mb_convert_encoding from
filling your string with question marks whenever it encounters an illegal
character for the target encoding.

<?php
function convert_to ( $source, $target_encoding )
    {
    // detect the character encoding of the incoming file
    $encoding = mb_detect_encoding( $source, "auto" );
      
    // escape all of the question marks so we can remove artifacts from
    // the unicode conversion process
    $target = str_replace( "?", "[question_mark]", $source );
      
    // convert the string to the target encoding
    $target = mb_convert_encoding( $target, $target_encoding, $encoding);
      
    // remove any question marks that have been introduced because of illegal
characters
    $target = str_replace( "?", "", $target );
      
    // replace the token string "[question_mark]" with the symbol "?"
    $target = str_replace( "[question_mark]", "?", $target );
  
    return $target;
    }
?>

Hope this helps someone! (Admins should feel free to delete my previous,
incorrect, post for clarity)
-A
Edward 16-Sep-2008 10:54
If mb_convert_encoding doesn't work for you, and iconv gives you a headache,
you might be interested in this free class I found. It can convert almost any
charset to almost any other charset. I think it's wonderful and I wish I had
found it earlier. It would have saved me tons of headache.

I use it as a fail-safe, in case mb_convert_encoding is not installed. Download
it from http://mikolajj.republika.pl/

This is not my own library, so technically it's not spamming, right? ;)

Hope this helps.
StigC 13-Aug-2008 10:38
For the php-noobs (like me) - working with flash and php.

Here's a simple snippet of code that worked great for me, getting php to show
special Danish characters, from a Flash email form:

<?php
// Name Escape
$escName = mb_convert_encoding($_POST["Name"], "ISO-8859-1", "UTF-8");

// message escape
$escMessage = mb_convert_encoding($_POST["Message"], "ISO-8859-1", "UTF-8");

// Headers.. and so on...
?>
nospam at nihonbunka dot com 16-May-2008 01:51
rodrigo at bb2 dot co dot jp wrote that inconv works better than
mb_convert_encoding, I find that when converting from uft8 to shift_jis
$conv_str = mb_convert_encoding($str,$toCS,$fromCS);
works while
$conv_str = iconv($fromCS,$toCS.'//IGNORE',$str);
removes tildes from $str.
katzlbtjunk at hotmail dot com 25-Jan-2008 12:36
Clean a string for use as filename by simply replacing all unwanted characters
with underscore (ASCII converts to 7bit). It removes slightly more chars than
necessary. Hope its useful.

$fileName = 'Test:!"$%&/()=ÖÄÜöäü<<';
echo strtr(mb_convert_encoding($fileName,'ASCII'),
    ' ,;:?*#!§$%&/(){}<>=`´|\\\'"',
    '____________________________');
rodrigo at bb2 dot co dot jp 15-Jan-2008 11:47
For those who can´t use mb_convert_encoding() to convert from one charset to
another as a metter of lower version of php, try iconv().

I had this problem converting to japanese charset:

$txt=mb_convert_encoding($txt,'SJIS',$this->encode);

And I could fix it by using this:

$txt = iconv('UTF-8', 'SJIS', $txt);

Maybe it´s helpfull for someone else! ;)
mightye at gmail dot com 13-Nov-2007 05:24
To petruzanauticoyahoo?com!ar

If you don't specify a source encoding, then it assumes the internal (default)
encoding.  ñ is a multi-byte character whose bytes in your configuration
default (often iso-8859-1) would actually mean Ã±.  mb_convert_encoding() is
upgrading those characters to their multi-byte equivalents within UTF-8.

Try this instead:
<?php
print mb_convert_encoding( "ñ", "UTF-8", "UTF-8" );
?>
Of course this function does no work (for the most part - it can actually be
used to strip characters which are not valid for UTF-8).
volker at machon dot biz 25-Sep-2007 04:05
Hey guys. For everybody who's looking for a function that is converting an
iso-string to utf8 or an utf8-string to iso, here's your solution:

public function encodeToUtf8($string) {
     return mb_convert_encoding($string, "UTF-8", mb_detect_encoding($string,
"UTF-8, ISO-8859-1, ISO-8859-15", true));
}

public function encodeToIso($string) {
     return mb_convert_encoding($string, "ISO-8859-1", mb_detect_encoding
($string, "UTF-8, ISO-8859-1, ISO-8859-15", true));
}

For me these functions are working fine. Give it a try
aofg 22-Aug-2007 01:49
When converting Japanese strings to ISO-2022-JP or JIS on PHP >= 5.2.1, you can
use "ISO-2022-JP-MS" instead of them.
Kishu-Izon (platform dependent) characters are converted correctly with the
encoding, as same as with eucJP-win or with SJIS-win.
David Hull 20-Dec-2006 06:52
As an alternative to Johannes's suggestion for converting strings from other
character sets to a 7bit representation while not just deleting latin
diacritics, you might try this:

<?php
$text = iconv($from_enc, 'US-ASCII//TRANSLIT', $text);
?>

The only disadvantage is that it does not convert "ä" to "ae", but it handles
punctuation and other special characters better.
--
David
phpdoc at jeudi dot de 05-Sep-2006 01:46
I'd like to share some code to convert latin diacritics to their
traditional 7bit representation, like, for example,

- à,ç,é,î,... to a,c,e,i,...
- ß to ss
- ä,Ä,... to ae,Ae,...
- ë,... to e,...

(mb_convert "7bit" would simply delete any offending characters).

I might have missed on your country's typographic
conventions--correct me then.
<?php
/**
 * @args string $text line of encoded text
 *       string $from_enc (encoding type of $text, e.g. UTF-8, ISO-8859-1)
 *
 * @returns 7bit representation
 */
function to7bit($text,$from_enc) {
    $text = mb_convert_encoding($text,'HTML-ENTITIES',$from_enc);
    $text = preg_replace(
        array('/&szlig;/','/&(..)lig;/',
             '/&([aouAOU])uml;/','/&(.)[^;]*;/'),
        array('ss',"$1","$1".'e',"$1"),
        $text);
    return $text;
}  
?>

Enjoy :-)
Johannes
mac.com@nemo 08-Jul-2006 02:38
For those wanting to convert from $set to MacRoman, use iconv():

<?php

$string = iconv('UTF-8', 'macintosh', $string);

?>

('macintosh' is the IANA name for the MacRoman character set.)
eion at bigfoot dot com 21-Feb-2006 12:54
many people below talk about using
<?php
    mb_convert_encode($s,'HTML-ENTITIES','UTF-8');
?>
to convert non-ascii code into html-readable stuff.  Due to my webserver being
out of my control, I was unable to set the database character set, and whenever
PHP made a copy of my $s variable that it had pulled out of the database, it
would convert it to nasty latin1 automatically and not leave it in it's
beautiful UTF-8 glory.

So [insert korean characters here] turned into ?????.

I found myself needing to pass by reference (which of course is deprecated/
nonexistent in recent versions of PHP)
so instead of
<?php
    mb_convert_encode(&$s,'HTML-ENTITIES','UTF-8');
?>
which worked perfectly until I upgraded, so I had to use
<?php
    call_user_func_array('mb_convert_encoding', array(&
$s,'HTML-ENTITIES','UTF-8'));
?>

Hope it helps someone else out
Tom Class 11-Nov-2005 03:35
Why did you use the php html encode functions? mbstring has it's own Encoding
which is (as far as I tested it) much more usefull:

HTML-ENTITIES

Example:

$text = mb_convert_encoding($text, 'HTML-ENTITIES', "UTF-8");
Stephan van der Feest 09-Sep-2005 11:47
To add to the Flash conversion comment below, here's how I convert back from
what I've stored in a database after converting from Flash HTML text field
output, in order to load it back into a Flash HTML text field:

function htmltoflash($htmlstr)
{
  return str_replace("&lt;br /&gt;","\n",
    str_replace("<","&lt;",
      str_replace(">","&gt;",
        mb_convert_encoding(html_entity_decode($htmlstr),
        "UTF-8","ISO-8859-1"))));
}
Stephan van der Feest 09-Sep-2005 10:50
Here's a tip for anyone using Flash and PHP for storing HTML output submitted
from a Flash text field in a database or whatever.

Flash submits its HTML special characters in UTF-8, so you can use the
following function to convert those into HTML entity characters:

function utf8html($utf8str)
{
  return htmlentities(mb_convert_encoding($utf8str,"ISO-8859-1","UTF-8"));
}
jamespilcher1 - hotmail 02-Feb-2004 03:55
be careful when converting from iso-8859-1 to utf-8.

even if you explicitly specify the character encoding of a page as iso-8859-1
(via headers and strict xml defs), windows 2000 will ignore that and interpret
it as whatever character set it has natively installed.

for example, i wrote char #128 into a page, with char encoding iso-8859-1, and
it displayed in internet explorer (& mozilla) as a euro symbol.

it should have displayed a box, denoting that char #128 is undefined in
iso-8859-1. The problem was it was displaying in "Windows: western europe" (my
native character set).

this led to confusion when i tried to convert this euro to UTF-8 via
mb_convert_encoding() 

IE displays UTF-8 correctly- and because PHP correctly converted #128 into a
box in UTF-8, IE would show a box.

so all i saw was mb_convert_encoding() converting a euro symbol into a box. It
took me a long time to figure out what was going on.
lanka at eurocom dot od dot ua 07-Feb-2003 04:03
Another sample of recoding without MultiByte enabling.
(Russian koi->win, if input in win-encoding already, function recode() returns
unchanged string)

<?php
  // 0 - win
  // 1 - koi
  function detect_encoding($str) {
    $win = 0;
    $koi = 0;

    for($i=0; $i<strlen($str); $i++) {
      if( ord($str[$i]) >224 && ord($str[$i]) < 255) $win++;
      if( ord($str[$i]) >192 && ord($str[$i]) < 223) $koi++;
    }

    if( $win < $koi ) {
      return 1;
    } else return 0;

  }

  // recodes koi to win
  function koi_to_win($string) {

    $kw = array(128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,  184, 185, 186,
187, 188, 189, 190, 191, 254, 224, 225, 246, 228, 229, 244, 227, 245, 232, 233,
234, 235, 236, 237, 238, 239, 255, 240, 241, 242, 243, 230, 226, 252, 251, 231,
248, 253, 249, 247, 250, 222, 192, 193, 214, 196, 197, 212, 195, 213, 200, 201,
202, 203, 204, 205, 206, 207, 223, 208, 209, 210, 211, 198, 194, 220, 219, 199,
216, 221, 217, 215, 218);
    $wk = array(128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155,
156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171,
172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,  184, 185, 186,
187, 188, 189, 190, 191, 225, 226, 247, 231, 228, 229, 246, 250, 233, 234, 235,
236, 237, 238, 239, 240, 242,  243, 244, 245, 230, 232, 227, 254, 251, 253,
255, 249, 248, 252, 224, 241, 193, 194, 215, 199, 196, 197, 214, 218, 201, 202,
203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 198, 200, 195, 222, 219, 221,
223, 217, 216, 220, 192, 209);

    $end = strlen($string);
    $pos = 0;
    do {
      $c = ord($string[$pos]);
      if ($c>128) {
        $string[$pos] = chr($kw[$c-128]);
      }

    } while (++$pos < $end);

    return $string;
  }

  function recode($str) {

    $enc = detect_encoding($str);
    if ($enc==1) {
      $str = koi_to_win($str);
    }

    return $str;
  }
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Jun 17 19:22:16 2011 UTC
Received cookie: COUNTRY=JPN%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • クラス/オブジェクト
  • クラス/オブジェクト関数
  • call_ user_ method_ array
  • call_ user_ method
  • class_ alias
  • class_ exists
  • get_ called_ class
  • get_ class_ methods
  • get_ class_ vars
  • get_ class
  • get_ declared_ classes
  • get_ declared_ interfaces
  • get_ object_ vars
  • get_ parent_ class
  • interface_ exists
  • is_ a
  • is_ subclass_ of
  • method_ exists
  • property_ exists

is_subclass_of> <interface_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
is_a

(PHP 4 >= 4.2.0, PHP 5)

is_a — オブジェクトがこのクラスのものであるか、このクラスをその親クラスのひとつ
としているかどうかを調べる

説明

bool is_a ( object $object , string $class_name )

指定した object がこのクラスのものであるか、あるいはこのクラスをその親クラスの
ひとつとしているかどうかを調べます。

パラメータ

object

    調べたいオブジェクト。

class_name

    クラス名。

返り値

オブジェクトがこのクラスのものであるか、あるいはこのクラスをその親クラスのひと
つとしている場合に TRUE、それ以外の場合に FALSE を返します。

変更履歴

バージ                                   説明
 ョン
5.3.0  この関数は非推奨ではなくなりました。そのため E_STRICT も発生しなくなりま
       した。
5.0.0  この関数は非推奨となり、かわりに instanceof 演算子の使用が推奨されるよう
       になりました。この関数をコールすると E_STRICT が発生します。

例

例1 is_a() の例

<?php
// クラス定義
class WidgetFactory
{
  var $oink = 'moo';
}

// オブジェクトを作成します
$WF = new WidgetFactory();

if (is_a($WF, 'WidgetFactory')) {
  echo "はい、\$WF は WidgetFactory です\n";
}
?>

例2 PHP 5 での instanceof 演算子の使用

<?php
if ($WF instanceof WidgetFactory) {
    echo 'はい、$WF は WidgetFactory です';
}
?>

参考

  • get_class() - オブジェクトのクラス名を返す
  • get_parent_class() - オブジェクトの親クラスの名前を取得する
  • is_subclass_of() - あるオブジェクトが指定したクラスのサブクラスに属するかど
    うかを調べる



is_subclass_of> <interface_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes is_a
p dot scheit at zweipol dot net 16-Jan-2007 09:44
At least in PHP 5.1.6 this works as well with Interfaces.

<?php
interface test {
  public function A();
}

class TestImplementor implements test {
  public function A () {
    print "A";
  }
}

$testImpl = new TestImplementor();

var_dump(is_a($testImpl,'test'));
?>

will return true
martin dunisch 13-Feb-2006 08:02
Workaround for older PHP-Versions:

function is_a($anObject, $aClass) {
   return get_class($anObject) == strtolower($aClass)
     or is_subclass_of($anObject, $aClass);
}
dead dot screamer at seznam dot cz 06-Feb-2006 07:44
Why I test if class `A` inherit class `B` or implements interface `C` before I
create class `A`?

<?
//That isn't work:

//1. function is_A()
if(is_A('A','B'))$a=new A;
if(is_A('A','C'))$a=new A;

//2. operator instanceOf
if(A instanceOf B)$a=new A;
if(A instanceOf C)$a=new A;
?>
zabmilenko at hotmail dot com 08-Oct-2005 12:18
Lazy Instantiation using is_a() and php5

<?php

class ObjectA
{
    public function print_line($text)
    {
        print $text . "\n";
    }
}

class ObjectB
{
    public function ObjectA()
    {
        static $objecta;

        if (!is_a($objecta, 'ObjectA'))
        {
            $objecta = new ObjectA;
        }

        return $objecta;
    }
}

$obj = new ObjectB;
$obj->ObjectA()->print_line('testing, 1 2 3');

?>

In the above example, ObjectA is not instantiated until needed by ObjectB. 
Then ObjectB can continually use it's creation as needed without
reinstantiating it. 

There are other ways, but I like this one :-)
cesoid at yahoo dot com 06-Oct-2005 02:01
is_a returns TRUE for instances of children of the class.

For example:

class Animal
{}

class Dog extends Animal
{}

$test = new Dog();

In this example is_a($test, "Animal") would evaluate to TRUE as well as is_a
($test, "Dog").

This seemed intuitive to me, but did not seem to be documented.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Thu Jun 16 22:22:00 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • PCRE
  • PCRE 関数
  • preg_ filter
  • preg_ grep
  • preg_ last_ error
  • preg_ match_ all
  • preg_ match
  • preg_ quote
  • preg_ replace_ callback
  • preg_ replace
  • preg_ split
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れた位置を数字で返します。 PHP 5 以前
の strrpos() とは異なり、この関数は needle パラメータとして文字列全体をとり、そ
の文字列全体が検索対象となります。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    オプションのパラメータ offset により、検索を開始する haystack の文字を指定
    することができます。この場合でも、返される位置は haystack の先頭からの相対
    位置となります。

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

stripslashes> <stripcslashes
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
stripos

(PHP 5)

stripos — 大文字小文字を区別せずに文字列が最初に現れる位置を探す

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_values> <array_unique
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
array_unshift

(PHP 4, PHP 5)

array_unshift — 一つ以上の要素を配列の最初に加える

説明

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • PCRE
  • PCRE 関数
  • preg_ filter
  • preg_ grep
  • preg_ last_ error
  • preg_ match_ all
  • preg_ match
  • preg_ quote
  • preg_ replace_ callback
  • preg_ replace
  • preg_ split

preg_match> <preg_last_error
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
preg_match_all

(PHP 4, PHP 5)

preg_match_all — 繰り返し正規表現検索を行う

説明

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

Not Found

The manual page you are looking for (http://php.benscom.com/manual/ja/
function.foreach.php) is not available on this server right now. Please check
back later, or if the problem persist, contact the webmasters.

 
credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Jun 13 22:21:46 2011 UTC
$flags = PREG_PATTERN_ORDER [, int $offset = 0 ]] )

subject を検索し、 pattern に指定した正規表現にマッチしたすべての文字列を、
flags で指定した順番で、matches に代入します。

正規表現にマッチすると、そのマッチした文字列の後から検索が続行されます。

パラメータ

pattern

    検索するパターンを表す文字列。

subject

    入力文字列。

matches

    マッチしたすべての内容を含む、 flags で指定した形式の多次元配列。

flags

    以下のフラグの組み合わせ (PREG_PATTERN_ORDER を PREG_SET_ORDER と組み合わせ
    て使用することは無意味ですので注意してください)。

    PREG_PATTERN_ORDER

        $matches[0] はパターン全体にマッチした文字列の配列、 $matches[1] は第 1
        のキャプチャ用サブパターンにマッチした文字列の配列、といった順番となり
        ます。

        <?php
        preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
            "<b>example: </b><div align=left>this is a test</div>",
            $out, PREG_PATTERN_ORDER);
        echo $out[0][0] . ", " . $out[0][1] . "\n";
        echo $out[1][0] . ", " . $out[1][1] . "\n";
        ?>

        上の例の出力は以下となります。

        <b>example: </b>, <div align=left>this is a test</div>
        example: , this is a test

        $out[0] はパターン全体にマッチした文字列の配列を有しており、 $out[1] は
        タグで囲まれた文字列の配列を有しています。

    PREG_SET_ORDER

        $matches[0] は 1 回目のマッチングでキャプチャした値の配列、 $matches[1]
        は 2 回目のマッチングでキャプチャした値の配列、といった順序となります。
        <?php
        preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
            "<b>example: </b><div align=\"left\">this is a test</div>",
            $out, PREG_SET_ORDER);
        echo $out[0][0] . ", " . $out[0][1] . "\n";
        echo $out[1][0] . ", " . $out[1][1] . "\n";
        ?>

        上の例の出力は以下となります。

        <b>example: </b>, example:
        <div align="left">this is a test</div>, this is a test

    PREG_OFFSET_CAPTURE

        このフラグを設定した場合、各マッチに対応する文字列のオフセットも返され
        ます。これにより、返り値は配列となり、配列の要素 0 はマッチした文字列、
        要素 1 は subject におけるマッチした文字列のオフセット値となることに注
        意してください。

    flags を指定しない場合は、 PREG_PATTERN_ORDER が指定されたことになります。

offset

    通常、検索は対象文字列の先頭から開始されます。オプションのパラメータ offset
    を使用して検索の開始位置を (バイト単位で) 指定することも可能です。

        注意:

        offset を用いるのと、 substr($subject, $offset) を preg_match_all()の対
        象文字列として指定するのとは等価ではありません。これは、pattern には、
        ^, $ や (?<=x) のような言明を含めることができるためです。これに関する例
        については、 preg_match() を参照してください。

返り値

パターンがマッチした総数を返します（ゼロとなる可能性もあります）。または、エラ
ーが発生した場合に FALSE を返します。

変更履歴

バー
ジョ                                    説明
 ン
5.4.0 matches パラメータが必須ではなくなりました。
      名前付きサブパターンで、 (?<name>) や (?'name') のような構文を (?P<name>)
5.2.2 と同様に受け入れるようになりました。以前のバージョンでは (?P<name>) 形式
      しか使えませんでした。
4.3.3 パラメータ offset が追加されました。
4.3.0 フラグ PREG_OFFSET_CAPTURE が追加されました。

例

例1 テキストからすべての電話番号を得る

<?php
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Call 555-1212 or 1-800-555-1212", $phones);
?>

例2 HTML タグにマッチするものを見付ける（貪欲）

<?php
// \\2 は後方参照の例。これは、pcre に正規表現中の括弧の 2 番目の
// 組、つまりこの場合は ([\w]+)、にマッチする。文字列が二重引用符で
// 括られているため、バックスラッシュの追加が必要。
$html = "<b>bold text</b><a href=howdy.html>click me</a>";

preg_match_all("/(<([\w]+)[^>]*>)(.*?)(<\/\\2>)/
", $html, $matches, PREG_SET_ORDER);

foreach ($matches as $val) {
    echo "matched: " . $val[0] . "\n";
    echo "part 1: " . $val[1] . "\n";
    echo "part 2: " . $val[2] . "\n";
    echo "part 3: " . $val[3] . "\n";
    echo "part 4: " . $val[4] . "\n\n";
}
?>

上の例の出力は以下となります。

matched: <b>bold text</b>
part 1: <b>
part 2: b
part 3: bold text
part 4: </b>

matched: <a href=howdy.html>click me</a>
part 1: <a href=howdy.html>
part 2: a
part 3: click me
part 4: </a>

例3 名前つきサブパターンの使用法

<?php

$str = <<<FOO
a: 1
b: 2
c: 3
FOO;

preg_match_all('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* PHP 5.2.2 (PCRE 7.0) 以降ではこの形式でも動作しますが、
 * 過去との互換性を考慮して上の形式のほうを推奨します */
// preg_match_all('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>

上の例の出力は以下となります。

Array
(
    [0] => Array
        (
            [0] => a: 1
            [1] => b: 2
            [2] => c: 3
        )

    [name] => Array
        (
            [0] => a
            [1] => b
            [2] => c
        )

    [1] => Array
        (
            [0] => a
            [1] => b
            [2] => c
        )

    [digit] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [2] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

)

参考

  • PCRE のパターン
  • preg_match() - 正規表現によるマッチングを行う
  • preg_replace() - 正規表現検索および置換を行う
  • preg_split() - 正規表現で文字列を分割する
  • preg_last_error() - 直近の PCRE 正規表現処理のエラーコードを返す



preg_match> <preg_last_error
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes preg_match_all
info at zenworks dot it 20-Apr-2011 08:31
Just few lines of code to convert in a clickable link with tag <a>
the pattern "http://......." in a string:

<?php

$stringa = " bla bla bla http://www.example.com bla bla http://www.example.net
bla bla bla";

$m = preg_match_all('/http:\/\/[a-z0-9A-Z.]+(?(?=[\/])(.*))/', $stringa,
$match);

if ($m) {
    $links=$match[0];
    for ($j=0;$j<$m;$j++) {
        $stringa=str_replace($links[$j],'<a href="'.$links[$j].'">'.$links
[$j].'</a>',$stringa);
    }
}

echo $stringa;

?>
john at mccarthy dot net 18-Feb-2011 07:21
I needed a function to rotate the results of a preg_match_all query, and made
this. Not sure if it exists.

<?php
function turn_array($m)
{
    for ($z = 0;$z < count($m);$z++)
    {
        for ($x = 0;$x < count($m[$z]);$x++)
        {
            $rt[$x][$z] = $m[$z][$x];
        }
    }   
   
    return $rt;
}
?>

Example - Take results of some preg_match_all query:

Array
(
    [0] => Array
        (
            [1] => Banff
            [2] => Canmore
            [3] => Invermere
        )
 
    [1] => Array
        (
            [1] => AB
            [2] => AB
            [3] => BC
        )
 
    [2] => Array
        (
            [1] => 51.1746254
            [2] => 51.0938416
            [3] => 50.5065193
        )
 
    [3] => Array
        (
            [1] => -115.5719757
            [2] => -115.3517761
            [3] => -116.0321884
        )
 
    [4] => Array
        (
            [1] => T1L 1B3
            [2] => T1W 1N2
            [3] => V0B 2G0
        )

)

Rotate it 90 degrees to group results as records:

Array
(
    [0] => Array
        (
            [1] => Banff
            [2] => AB
            [3] => 51.1746254
            [4] => -115.5719757
            [5] => T1L 1B3
        )
 
    [1] => Array
        (
            [1] => Canmore
            [2] => AB
            [3] => 51.0938416
            [4] => -115.3517761
            [5] => T1W 1N2
        )
 
    [2] => Array
        (
            [1] => Invermere
            [2] => BC
            [3] => 50.5065193
            [4] => -116.0321884
            [5] => V0B 2G0
        )
)
buuh 06-Dec-2010 10:03
if you want to extract all {token}s from a string:

<?php
$pattern = "/{[^}]*}/";
$subject = "{token1} foo {token2} bar";
preg_match_all($pattern, $subject, $matches);
print_r($matches);
?>

output:

Array
(
    [0] => Array
        (
            [0] => {token1}
            [1] => {token2}
        )

)
no at bo dot dy 08-Sep-2010 06:23
For parsing queries with entities use:

<?php
preg_match_all("/(?:^|(?<=\&(?![a-z]+\;)))([^\=]+)=(.*?)(?:$|\&(?![a-z]+\;))/
i",
  $s, $m, PREG_SET_ORDER );
?>
avengis at gmail dot com 23-Sep-2009 09:25
The next function works with almost any complex xml/xhtml string

<?php
/**
* Find and close unclosed xml tags
**/
function close_tags($text) {
    $patt_open    = "%((?<!</)(?<=<)[\s]*[^/!>\s]+(?=>|[\s]+[^>]*[^/]>)(?!/>))
%";
    $patt_close    = "%((?<=</)([^>]+)(?=>))%";
    if (preg_match_all($patt_open,$text,$matches))
    {
        $m_open = $matches[1];
        if(!empty($m_open))
        {
            preg_match_all($patt_close,$text,$matches2);
            $m_close = $matches2[1];
            if (count($m_open) > count($m_close))
            {
                $m_open = array_reverse($m_open);
                foreach ($m_close as $tag) $c_tags[$tag]++;
                foreach ($m_open as $k => $tag)    if ($c_tags[$tag]--<=0)
$text.='</'.$tag.'>';
            }
        }
    }
    return $text;
}
?>
royaltm75 at gmail dot com 13-Sep-2009 09:44
I have received complains, that my html2a() code (see below) doesn't work in
some cases.
It is however not the problem with algorithm or procedure, but with PCRE
recursive stack limits.

If you use recursive PCRE (?R) you should remember to increase those two ini
settings:

ini_set('pcre.backtrack_limit', 10000000);
ini_set('pcre.recursion_limit', 10000000);

But be warned: (from php.ini)

;Please note that if you set this value to a high number you may consume all
;the available process stack and eventually crash PHP (due to reaching the
;stack size limit imposed by the Operating System).

I have written this example mainly to demonstrate the power of PCRE LANGUAGE,
not the power of it's implementation  :)

But if you like it, use it, of course on your own risk.
elyknosrac at gmail dot com 18-Jul-2009 10:51
Using preg_match_all I made a pretty handy function.

<?php

function reg_smart_replace($pattern, $replacement, $subject, $replacementChar =
"$$$", $limit = -1)
{
    if (! $pattern || ! $subject || ! $replacement ) { return false; }
   
    $replacementChar = preg_quote($replacementChar);
   
    preg_match_all ( $pattern, $subject, $matches);
   
    if ($limit > -1) {
        foreach ($matches as $count => $value )
        {
            if ($count + 1 > $limit ) { unset($matches[$count]); }
        }
    }
    foreach ($matches[0] as $match) {
        $rep = ereg_replace($replacementChar, $match, $replacement);
        $subject = ereg_replace($match, $rep, $subject);
    }
   
    return $subject;
}
?>

This function can turn blocks of text into clickable links or whatever. 
Example:

<?php
reg_smart_replace(EMAIL_REGEX, '<a href="mailto:$$$">$$$</a>', $description)
?>
will turn all email addresses into actual links.

Just substitute $$$ with the text that will be found by the regex.  If you
can't use $$$ then use the 4th parameter $replacementChar
ad 01-Apr-2009 01:18
i have made up a simple function to extract a number from a string..

I am not sure how good it is, but it works.

It gets only the numbers 0-9, the "-", " ", "(", ")", "."

characters.. This is as far as I know the most widely used characters for a
Phone number.

<?php
function clean_phone_number($phone) {
       if (!empty($phone)) {
               //var_dump($phone);
               preg_match_all('/[0-9\(\)+.\- ]/s', $phone, $cleaned);
               foreach($cleaned[0] as $k=>$v) {
                       $ready .= $v;
               }
               var_dump($ready);
               die;
               if (mb_strlen($cleaned) > 4 && mb_strlen($cleaned) <=25) {
                       return $cleaned;
               }
               else {
                       return false;
               }
       }
       return false;
}
?>
royaltm75 at NOSPAM dot gmail dot com 21-Feb-2009 10:55
The power of pregs is limited only by your *imagination* :)
I wrote this html2a() function using preg recursive match (?R) which provides
quite safe and bulletproof html/xml extraction:
<?php
function html2a ( $html ) {
  if ( !preg_match_all( '
@
\<\s*?(\w+)((?:\b(?:\'[^\']*\'|"[^"]*"|[^\>])*)?)\>
((?:(?>[^\<]*)|(?R))*)
\<\/\s*?\\1(?:\b[^\>]*)?\>
|\<\s*(\w+)(\b(?:\'[^\']*\'|"[^"]*"|[^\>])*)?\/?\>
@uxis', $html = trim($html), $m, PREG_OFFSET_CAPTURE | PREG_SET_ORDER) )
    return $html;
  $i = 0;
  $ret = array();
  foreach ($m as $set) {
    if ( strlen( $val = trim( substr($html, $i, $set[0][1] - $i) ) ) )
      $ret[] = $val;
    $val = $set[1][1] < 0
      ? array( 'tag' => strtolower($set[4][0]) )
      : array( 'tag' => strtolower($set[1][0]), 'val' => html2a($set[3][0]) );
    if ( preg_match_all( '
/(\w+)\s*(?:=\s*(?:"([^"]*)"|\'([^\']*)\'|(\w+)))?/usix
', isset($set[5]) && $set[2][1] < 0
  ? $set[5][0]
  : $set[2][0]
  ,$attrs, PREG_SET_ORDER ) ) {
      foreach ($attrs as $a) {
        $val['attr'][$a[1]]=$a[count($a)-1];
      }
    }
    $ret[] = $val;
    $i = $set[0][1]+strlen( $set[0][0] );
  }
  $l = strlen($html);
  if ( $i < $l )
    if ( strlen( $val = trim( substr( $html, $i, $l - $i ) ) ) )
      $ret[] = $val;
  return $ret;
}
?>

Now let's try it with this example: (there are some really nasty xhtml
compliant bugs, but ... we shouldn't worry)

<?php
$html = <<<EOT
some leftover text...
     < DIV class=noCompliant style = "text-align:left;" >
... and some other ...
< dIv > < empty>  </ empty>
  <p> This is yet another text <br  >
     that wasn't <b>compliant</b> too... <br   />
     </p>
 <div class="noClass" > this one is better but we don't care anyway </div ><P>
    <input   type= "text"  name ='my "name' value  = "nothin really." readonly>
end of paragraph </p> </Div>   </div>   some trailing text
EOT;

$a = html2a($html);
//now we will make some neat html out of it
echo a2html($a);

function a2html ( $a, $in = "" ) {
  if ( is_array($a) ) {
    $s = "";
    foreach ($a as $t)
      if ( is_array($t) ) {
        $attrs="";
        if ( isset($t['attr']) )
          foreach( $t['attr'] as $k => $v )
            $attrs.=" ${k}=".( strpos( $v, '"' )!==false ? "'$v'" : "\"$v\"" );
        $s.= $in."<".$t['tag'].$attrs.( isset( $t['val'] ) ? ">\n".a2html( $t
['val'], $in."  " ).$in."</".$t['tag'] : "/" ).">\n";
      } else
        $s.= $in.$t."\n";
  } else {
    $s = empty($a) ? "" : $in.$a."\n";
  }
  return $s;
}
?>
This produces:
some leftover text...
<div class="noCompliant" style="text-align:left;">
  ... and some other ...
  <div>
    <empty>
    </empty>
    <p>
      This is yet another text
      <br/>
      that wasn't
      <b>
        compliant
      </b>
      too...
      <br/>
    </p>
    <div class="noClass">
      this one is better but we don't care anyway
    </div>
    <p>
      <input type="text" name='my "name' value="nothin really." readonly=
"readonly"/>
      end of paragraph
    </p>
  </div>
</div>
some trailing text
meaneye at mail dot com 15-Oct-2008 09:56
Recently I had to write search engine in hebrew and ran into huge amount of
problems. My data was stored in MySQL table with utf8_bin encoding.

So, to be able to write hebrew in utf8 table you need to do
<?php
$prepared_text = addslashes(urf8_encode($text));
?>

But then I had to find if some word exists in stored text. This is the place I
got stuck. Simple preg_match would not find text since hebrew doesnt work that
easy. I've tried with /u and who kows what else.

Solution was somewhat logical and simple...
<?php
$db_text = bin2hex(stripslashes(utf8_decode($db_text)));
$word = bin2hex($word);

$found = preg_match_all("/($word)+/i", $db_text, $matches);
?>

I've used preg_match_all since it returns number of occurences. So I could sort
search results acording to that.

Hope someone finds this useful!
MonkeyMan 07-Oct-2008 08:25
Here is a way to match everything on the page, performing an action for each
match as you go. I had used this idiom in other languages, where its use is
customary, but in PHP it seems to be not quite as common.

<?php
function custom_preg_match_all($pattern, $subject)
{
    $offset = 0;
    $match_count = 0;
    while(preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE,
$offset))
    {
        // Increment counter
        $match_count++;
   
        // Get byte offset and byte length (assuming single byte encoded)
        $match_start = $matches[0][1];
        $match_length = strlen(matches[0][0]);

        // (Optional) Transform $matches to the format it is usually set as
(without PREG_OFFSET_CAPTURE set)
        foreach($matches as $k => $match) $newmatches[$k] = $match[0];
        $matches = $new_matches;
   
        // Your code here
        echo "Match number $match_count, at byte offset $match_start,
$match_length bytes long: ".$matches[0]."\r\n";
           
        // Update offset to the end of the match
        $offset = $match_start + $match_length;
    }

    return $match_count;
}
?>

Note that the offsets returned are byte values (not necessarily number of
characters) so you'll have to make sure the data is single-byte encoded. (Or
have a look at paolo mosna's strByte function on the strlen manual page).
I'd be interested to know how this method performs speedwise against using
preg_match_all and then recursing through the results.
sledge NOSPAM 19-Jun-2008 08:46
Perhaps you want to find the positions of all anchor tags.  This will return a
two dimensional array of which the starting and ending positions will be
returned.

<?php
function getTagPositions($strBody)
{
    define(DEBUG, false);
    define(DEBUG_FILE_PREFIX, "/tmp/findlinks_");
   
    preg_match_all("/<[^>]+>(.*)<\/[^>]+>/U", $strBody, $strTag,
PREG_PATTERN_ORDER);
    $intOffset = 0;
    $intIndex = 0;
    $intTagPositions = array();

    foreach($strTag[0] as $strFullTag) {
        if(DEBUG == true) {
            $fhDebug = fopen(DEBUG_FILE_PREFIX.time(), "a");
            fwrite($fhDebug, $fulltag."\n");
            fwrite($fhDebug, "Starting position: ".strpos($strBody,
$strFullTag, $intOffset)."\n");
            fwrite($fhDebug, "Ending position: ".(strpos($strBody, $strFullTag,
$intOffset) + strlen($strFullTag))."\n");
            fwrite($fhDebug, "Length: ".strlen($strFullTag)."\n\n");
            fclose($fhDebug);
        }
        $intTagPositions[$intIndex] = array('start' => (strpos($strBody,
$strFullTag, $intOffset)), 'end' => (strpos($strBody, $strFullTag, $intOffset)
+ strlen($strFullTag)));
        $intOffset += strlen($strFullTag);
        $intIndex++;
    }
    return $intTagPositions;
}

$strBody = 'I have lots of <a href="http://my.site.com">links</a> on this <a
href="http://my.site.com">page</a> that I want to <a href="http://my.site.com">
find</a> the positions.';

$strBody = strip_tags(html_entity_decode($strBody), '<a>');
$intTagPositions = getTagPositions($strBody);
print_r($intTagPositions);

/*****
Output:

Array (
    [0] => Array (
        [start] => 15
        [end] => 53 )
    [1] => Array (
        [start] => 62
        [end] => 99 )
    [2] => Array (
        [start] => 115
        [end] => 152 )
 )
*****/
?>
spambegone at cratemedia dot com 21-Apr-2008 06:39
I found simpleXML to be useful only in cases where the XML was extremely small,
otherwise the server would run out of memory (I suspect there is a memory leak
or something?). So while searching for alternative parsers, I decided to try a
simpler approach. I don't know how this compares with cpu usage, but I know it
works with large XML structures. This is more a manual method, but it works for
me since I always know what structure of data I will be receiving.

Essentially I just preg_match() unique nodes to find the values I am looking
for, or I preg_match_all to find multiple nodes. This puts the results in an
array and I can then process this data as I please.

I was unhappy though, that preg_match_all() stores the data twice (requiring
twice the memory), one array for all the full pattern matches, and one array
for all the sub pattern matches. You could probably write your own function
that overcame this. But for now this works for me, and I hope it saves someone
else some time as well.

// SAMPLE XML
<RETS ReplyCode="0" ReplyText="Operation Successful">
  <COUNT Records="14" />
  <DELIMITER value="09" />
  <COLUMNS>PropertyID</COLUMNS>
  <DATA>521897</DATA>
  <DATA>677208</DATA>
  <DATA>686037</DATA>
</RETS>

<?PHP

// SAMPLE FUNCTION
function parse_xml($xml) {
   
   
    // GET DELIMITER (single instance)
    $match_res = preg_match('/<DELIMITER value ?= ?"(.*)" ?\/>/', $xml,
$matches);
    if(!empty($matches[1])) {
        $results["delimiter"] = chr($matches[1]);
    } else {
        // DEFAULT DELIMITER
        $results["delimiter"] = "\t";
    }
    unset($match_res, $matches);
   
   
    // GET MULTIPLE DATA NODES (multiple instances)
    $results["data_count"] = preg_match_all("/<DATA>(.*)<\/DATA>/", $xml,
$matches);
    // GET MATCHES OF SUB PATTERN, DISCARD THE REST
    $results["data"]=$matches[1];
    unset($match_res, $matches);
   
    // UNSET XML TO SAVE MEMORY (should unset outside the function as well)
    unset($xml);

    // RETURN RESULTS ARRAY
    return $results;
   
   
}

?>
bruha 04-Mar-2008 08:13
To count str_length in UTF-8 string i use

$count = preg_match_all("/[[:print:]\pL]/u", $str, $pockets);

where
[:print:] - printing characters, including space
\pL - UTF-8 Letter
/u - UTF-8 string
other unicode character properties on http://www.pcre.org/pcre.txt
dolbegraeb 29-Jan-2008 12:30
please note, that the function of "mail at SPAMBUSTER at milianw dot de" can
result in invalid xhtml in some cases. think i used it in the right way but my
result is sth like this:

<img src="./img.jpg" alt="nice picture" />foo foo foo foo </img>

correct me if i'm wrong.
i'll see when there's time to fix that. -.-
mr davin 12-Jul-2007 09:57
<?php
// Returns an array of strings where the start and end are found
    function findinside($start, $end, $string) {
        preg_match_all('/' . preg_quote($start, '/') . '([^\.)]+)'. preg_quote
($end, '/').'/i', $string, $m);
        return $m[1];
    }
   
    $start = "mary has";
    $end = "lambs.";
    $string = "mary has 6 lambs. phil has 13 lambs. mary stole phil's lambs.
now mary has all the lambs.";

    $out = findinside($start, $end, $string);

    print_r ($out);

/* Results in
(
    [0] =>  6
    [1] =>  all the
)
*/
?>
phektus at gmail dot com 27-Jun-2007 06:22
If you'd like to include DOUBLE QUOTES on a regular expression for use with
preg_match_all, try ESCAPING THRICE, as in: \\\"

For example, the pattern:
'/<table>[\s\w\/<>=\\\"]*<\/table>/'

Should be able to match:
<table>
<row>
<col align="left" valign="top">a</col>
<col align="right" valign="bottom">b</col>
</row>
</table>
.. with all there is under those table tags.

I'm not really sure why this is so, but I tried just the double quote and one
or even two escape characters and it won't work. In my frustration I added
another one and then it's cool.
chuckie 06-Dec-2006 02:20
This is a function to convert byte offsets into (UTF-8) character offsets (this
is reagardless of whether you use /u modifier:

<?php

function mb_preg_match_all($ps_pattern, $ps_subject, &$pa_matches, $pn_flags =
PREG_PATTERN_ORDER, $pn_offset = 0, $ps_encoding = NULL) {
  // WARNING! - All this function does is to correct offsets, nothing else:
  //
  if (is_null($ps_encoding))
    $ps_encoding = mb_internal_encoding();

  $pn_offset = strlen(mb_substr($ps_subject, 0, $pn_offset, $ps_encoding));
  $ret = preg_match_all($ps_pattern, $ps_subject, $pa_matches, $pn_flags,
$pn_offset);

  if ($ret && ($pn_flags & PREG_OFFSET_CAPTURE))
    foreach($pa_matches as &$ha_match)
      foreach($ha_match as &$ha_match)
        $ha_match[1] = mb_strlen(substr($ps_subject, 0, $ha_match[1]),
$ps_encoding);
    //
    // (code is independent of PREG_PATTER_ORDER / PREG_SET_ORDER)

  return $ret;
  }

?>
phpnet at sinful-music dot com 20-Feb-2006 08:53
Here's some fleecy code to 1. validate RCF2822 conformity of address lists and
2. to extract the address specification (the part commonly known as 'email'). I
wouldn't suggest using it for input form email checking, but it might be just
what you want for other email applications. I know it can be optimized further,
but that part I'll leave up to you nutcrackers. The total length of the
resulting Regex is about 30000 bytes. That because it accepts comments. You can
remove that by setting $cfws to $fws and it shrinks to about 6000 bytes.
Conformity checking is absolutely and strictly referring to RFC2822. Have fun
and email me if you have any enhancements!

<?php
function mime_extract_rfc2822_address($string)
{
        //rfc2822 token setup
        $crlf           = "(?:\r\n)";
        $wsp            = "[\t ]";
        $text           = "[\\x01-\\x09\\x0B\\x0C\\x0E-\\x7F]";
        $quoted_pair    = "(?:\\\\$text)";
        $fws            = "(?:(?:$wsp*$crlf)?$wsp+)";
        $ctext          = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F" .
                          "!-'*-[\\]-\\x7F]";
        $comment        = "(\\((?:$fws?(?:$ctext|$quoted_pair|(?1)))*" .
                          "$fws?\\))";
        $cfws           = "(?:(?:$fws?$comment)*(?:(?:$fws?$comment)|$fws))";
        //$cfws           = $fws; //an alternative to comments
        $atext          = "[!#-'*+\\-\\/0-9=?A-Z\\^-~]";
        $atom           = "(?:$cfws?$atext+$cfws?)";
        $dot_atom_text  = "(?:$atext+(?:\\.$atext+)*)";
        $dot_atom       = "(?:$cfws?$dot_atom_text$cfws?)";
        $qtext          = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F!#-[\\]-\\x7F]";
        $qcontent       = "(?:$qtext|$quoted_pair)";
        $quoted_string  = "(?:$cfws?\"(?:$fws?$qcontent)*$fws?\"$cfws?)";
        $dtext          = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F!-Z\\^-\\x7F]";
        $dcontent       = "(?:$dtext|$quoted_pair)";
        $domain_literal = "(?:$cfws?\\[(?:$fws?$dcontent)*$fws?]$cfws?)";
        $domain         = "(?:$dot_atom|$domain_literal)";
        $local_part     = "(?:$dot_atom|$quoted_string)";
        $addr_spec      = "($local_part@$domain)";
        $display_name   = "(?:(?:$atom|$quoted_string)+)";
        $angle_addr     = "(?:$cfws?<$addr_spec>$cfws?)";
        $name_addr      = "(?:$display_name?$angle_addr)";
        $mailbox        = "(?:$name_addr|$addr_spec)";
        $mailbox_list   = "(?:(?:(?:(?<=:)|,)$mailbox)+)";
        $group          = "(?:$display_name:(?:$mailbox_list|$cfws)?;$cfws?)";
        $address        = "(?:$mailbox|$group)";
        $address_list   = "(?:(?:^|,)$address)+";

        //output length of string (just so you see how f**king long it is)
        echo(strlen($address_list) . " ");

        //apply expression
        preg_match_all("/^$address_list$/", $string, $array, PREG_SET_ORDER);

        return $array;
};
?>
mnc at u dot nu 03-Feb-2006 06:05
PREG_OFFSET_CAPTURE always seems to provide byte offsets, rather than character
position offsets, even when you are using the unicode /u modifier.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Jun 13 01:22:18 2011 UTC

array_unshift() は、array の先頭に指定された要素を加えます。リストの要素は全体
として加えられるため、加えられた要素の順番は変わらないことに注意してください。
配列の数値添字はすべて新たにゼロから振りなおされます。リテラルのキーについては
変更されません。

パラメータ

array

    入力の配列。

var

    加える変数。

返り値

処理後の array の要素の数を返します。

例

例1 array_unshift() の例

<?php
$queue = array("orange", "banana");
array_unshift($queue, "apple", "raspberry");
print_r($queue);
?>

上の例の出力は以下となります。

Array
(
    [0] => apple
    [1] => raspberry
    [2] => orange
    [3] => banana
)

参考

  • array_shift() - 配列の先頭から要素を一つ取り出す
  • array_push() - 一つ以上の要素を配列の最後に追加する
  • array_pop() - 配列の末尾から要素を取り除く



array_values> <array_unique
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes array_unshift
Rafael M. Salvioni 12-Jun-2008 04:52
This function inserts a element in any position of the Array, by reference.

NOTE: The array is converted for a numeric array.

<?php

/**
 * Function array_insert().
 *
 * Returns the new number of the elements in the array.
 *
 * @param array $array Array (by reference)
 * @param mixed $value New element
 * @param int $offset Position
 * @return int
 */
function array_insert(&$array, $value, $offset)
{
    if (is_array($array)) {
        $array  = array_values($array);
        $offset = intval($offset);
        if ($offset < 0 || $offset >= count($array)) {
            array_push($array, $value);
        } elseif ($offset == 0) {
            array_unshift($array, $value);
        } else {
            $temp  = array_slice($array, 0, $offset);
            array_push($temp, $value);
            $array = array_slice($array, $offset);
            $array = array_merge($temp, $array);
        }
    } else {
        $array = array($value);
    }
    return count($array);
}

?>
sergei at gmx dot net 04-Oct-2007 03:49
You can preserve keys and unshift an array with numerical indexes in a really
simple way if you'll do the following:

<?php
$someArray=array(224=>'someword1', 228=>'someword2', 102=>'someword3', 544=>
'someword3',95=>'someword4');

$someArray=array(100=>'Test Element 1 ',255=>'Test Element 2')+$someArray;
?>

now the array looks as follows:

array(
100=>'Test Element 1 ',
255=>'Test Element 2'
224=>'someword1',
228=>'someword2',
102=>'someword3',
544=>'someword3',
95=>'someword4'
);
amschroeder at gmail dot com 26-Mar-2007 05:13
This becomes a nice little problem if you index your arrays out of order (while
manually sorting).  For example:

<?php
$recordMonths[3] = '8/%/2006';
$recordMonths[4] = '7/%/2004';
$recordMonths[0] = '3/%/2007';
$recordMonths[1] = '2/%/2007';
$recordMonths[5] = '12/%/2000';
$recordMonths[6] = '11/%/2000';
$recordMonths[7] = '10/%/2000';
$recordMonths[2] = '1/%/2007';

for($i = 0; $i < count($recordMonths); $i++)
{
    $singleMonth = $recordMonths[$i];
    echo "singleMonth: $singleMonth <br />";
}
array_unshift($recordMonths,'%');
for($i = 0; $i < count($recordMonths); $i++)
{
    $singleMonth = $recordMonths[$i];
    echo "singleMonth: $singleMonth <br />";
}
?>

Produces:

singleMonth: 3/%/2007
singleMonth: 2/%/2007
singleMonth: 1/%/2007
singleMonth: 8/%/2006
singleMonth: 7/%/2004
singleMonth: 12/%/2000
singleMonth: 11/%/2000
singleMonth: 10/%/2000
singleMonth: %
singleMonth: 8/%/2006
singleMonth: 7/%/2004
singleMonth: 3/%/2007
singleMonth: 2/%/2007
singleMonth: 12/%/2000
singleMonth: 11/%/2000
singleMonth: 10/%/2000
singleMonth: 1/%/2007

It reindexes them based on the order they were created.  It seems like if an
array has all numeric indexes, then it should reindex them based on the order
of their index.  Just my opinion...
John Brooking 03-Jun-2006 01:54
I had a need tonight to convert a numeric array from 1-based to 0-based, and
found that the following worked just fine due to the "side effect" of
renumbering:

<?php
   array_unshift( $myArray, array_shift( $myArray ));
?>
php at electricsurfer dot com 27-Feb-2004 02:20
even simpler unshifting of a reference !
<?php
/**
 * @return int
 * @param $array array
 * @param $value mixed
 * @desc Prepend a reference to an element to the beginning of an array.
Renumbers numeric keys, so $value is always inserted to $array[0]
 */
function array_unshift_ref(&$array, &$value)
{
   $return = array_unshift($array,'');
   $array[0] =& $value;
   return $return;
}
?>
lagroue 09-Nov-2003 12:46
Last version of PHP deprecated unshifting of a reference.
You can use this function instead :

<?php
function array_unshift1 (& $ioArray, $iValueWrappedInAnArray) {
    $lNewArray = false;
    foreach (array_keys ($ioArray) as $lKey)
        $lNewArray[$lKey+1] = & $ioArray[$lKey];
    $ioArray = array (& $iValueWrappedInAnArray[0]);
    if ($lNewArray)
        foreach (array_keys ($lNewArray) as $lKey)
             $ioArray[] = & $lNewArray[$lKey];
    return count($ioArray);
}

// before last PHP (now generates a deprecation warning)
array_unshift ($a, &$v);
// since last PHP (caution, there is a wrapping array !!)
array_unshift1 ($a, array (&$v));
?>
chris dot NoThxSpam dot given at hp dot com 23-Jul-2003 07:17
If you need to change the name of a key without changing its position in the
array this function may be useful.

<?php
function array_key_change($Old, $New, $In, $NewVal=NULL) {
        $Temp = array();
        while(isset($Temp[$Old]) == false) {
                list($k, $v) = each($In);
                $Temp[$k] = $v;
                unset($In[$k]);
        }
        if($NewVal == NULL) {
                $NewVal = $Temp[$Old];
        }
        unset($Temp[$Old]);
        $Temp = array_reverse($Temp);
        $In = array_merge(array($New=>$NewVal), $In);
        while(list($k,$v) = each($Temp)) {
                $In = array_merge(array($k=>$v), $In);
        }
        return($In);
}
?>
rsmith_NOSPAM_ at _NOSPAM_unitec dot ac dot nz 31-Jul-2002 02:00
array_merge() will also reindex (see array_merge() manual entry), but the '+'
operator won't, so...

<?php
$arrayone=array("newkey"=>"newvalue") + $arrayone;
?>

does the job.
TimHyde at C21Technology dot com 18-Jul-2002 12:04
A simpler way to implement an array_unshift with key=>value pairs (i.e. similar
to the example using array_reverse above) is to use array_merge.  i.e.

<?php
$arrayone=array_merge(array("newkey"=>"newvalue"),$arrayone);
?>

Obviously you need to take care when adding numeric or duplicate keys.
robert dot wills at fuzzbrain dot uklinux dot net 07-Feb-2002 02:02
Actually this problem with the keys getting reindexed only happens when the
keys are numerical:

<?php

$a = array("f"=>"five", "s" =>"six", "t" =>
        "twenty");

print_r($a);
echo "\n";
foreach($a as $key=>$val)
{
    echo "k: $key v: $val \n";
}

array_unshift($a, "zero");
print_r($a);
echo "\n";
foreach($a as $key=>$val)
{
    echo "k: $key v: $val \n";
}
?>

Array
(
    [f] => five
    [s] => six
    [t] => twenty
)

k: f v: five
k: s v: six
k: t v: twenty
Array
(
    [0] => zero
    [f] => five
    [s] => six
    [t] => twenty
)

k: 0 v: zero
k: f v: five
k: s v: six
k: t v: twenty
sahn at hmc dot edu 27-Jul-2001 07:21
If you need to prepend something to the array without the keys being reindexed
and/or need to prepend a key value pair, you can use this short function:

<?php
function array_unshift_assoc(&$arr, $key, $val)
{
    $arr = array_reverse($arr, true);
    $arr[$key] = $val;
    $arr = array_reverse($arr, true);
    return count($arr);
}
?>
matt at synergie dot net 19-Sep-2000 05:20
The behaviour of unshift nearly caught me out.
Not only is the item added at the start of the list but the list is re-indexed
too.

<?php

$a = array(5=>"five", 6 =>"six", 20 => "twenty");

while(list($key, $value) = each($a))
    echo "k: $key v: $value<BR>\n";

echo "<BR>\n";
array_unshift($a, "zero");


while(list($key, $value) = each($a))
    echo "k: $key v: $value<BR>\n";

?>

k: 5 v: five
k: 6 v: six
k: 20 v: twenty

k: 0 v: zero
k: 1 v: five
k: 2 v: six
k: 3 v: twenty
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Jun 13 00:22:01 2011 UTC
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes substr
Quicker 06-May-2011 11:17
If you need to parse utf-8 strings char by char, try this one:

<?php
     $utf8marker=chr(128);
     $count=0;
     while(isset($string{$count})){
       if($string{$count}>=$utf8marker) {
         $parsechar=substr($string,$count,2);
         $count+=2;
       } else {
         $parsechar=$string{$count};
         $count++;
       }
       /* do what you like with parsechar ... , eg.:*/  echo $parsechar."<BR>\r
\n";
     }
?>

- it works without mb_substr
- it is fast, because it grabs characters based on indexes  when possible and
avoids any count and split functions
slow at acedsl dot com 28-Mar-2011 09:47
Anyone coming from the Python world will be accustomed to making substrings by
using a "slice index" on a string.  The following function emulates basic
Python string slice behavior. (A more elaborate version could be made to
support array input as well as string, and the optional third "step" argument.)

<?php

function py_slice($input, $slice) {
    $arg = explode(':', $slice);
    $start = intval($arg[0]);
    if ($start < 0) {
        $start += strlen($input);
    }
    if (count($arg) === 1) {
        return substr($input, $start, 1);
    }
    if (trim($arg[1]) === '') {
        return substr($input, $start);
    }
    $end = intval($arg[1]);
    if ($end < 0) {
        $end += strlen($input);
    }
    return substr($input, $start, $end - $start);
}

print py_slice('abcdefg', '2') . "\n";
print py_slice('abcdefg', '2:4') . "\n";
print py_slice('abcdefg', '2:') . "\n";
print py_slice('abcdefg', ':4') . "\n";
print py_slice('abcdefg', ':-3') . "\n";
print py_slice('abcdefg', '-3:') . "\n";

?>

The $slice parameter can be a single character index, or a range separated by a
colon. The start of the range is inclusive and the end is exclusive, which may
be  counterintuitive. (Eg, py_slice('abcdefg', '2:4') yields 'cd' not 'cde'). A
negative range value means to count from the end of the string instead of the
beginning. Both the start and end of the range may be omitted; the start
defaults to 0 and the end defaults to the total length of the input.

The output from the examples:
c
cd
cdefg
abcd
abcd
efg
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jun 12 21:22:09 2011 UTC

int stripos ( string $haystack , string $needle [, int $offset = 0 ] )

文字列 haystack の中で needle が最初に現れる位置を数字で返します。

strpos() と異なり、stripos() は大文字小文字を区別しません。

パラメータ

haystack

    検索を行う文字列。

needle

    needle は、ひとつまたは複数の文字であることに注意しましょう。

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    オプションのパラメータ offset により、検索を開始する haystack の位置を指定
    することができます。この場合でも返される位置は、 haystack の先頭からの位置
    のままとなります。

返り値

位置を表す整数値を返します。 needle がみつからない場合、 strpos() は boolean
FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される 0 や ""
といった値を返す可能性もあります。詳細については論理値のセクションを参照してく
ださい。この関数の返り値を調べるには ===演算子を使用してください。

例

例1 stripos() の例

<?php
$findme    = 'a';
$mystring1 = 'xyz';
$mystring2 = 'ABC';

$pos1 = stripos($mystring1, $findme);
$pos2 = stripos($mystring2, $findme);

// いいえ、'a' は明らかに 'xyz' の中には存在しません
if ($pos1 === false) {
    echo "The string '$findme' was not found in the string '$mystring1'";
}

// === を使用していることに注意しましょう。単に == としても期待通りに動作
// しません。なぜなら 'a' は 0 番目(最初) の文字だからです。
if ($pos2 !== false) {
    echo "We found '$findme' in '$mystring2' at position $pos2";
}
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strpos() - 文字列が最初に現れる場所を見つける
  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す
  • stristr() - 大文字小文字を区別しない strstr
  • strstr() - 文字列が最初に現れる位置を見つける
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • str_ireplace() - 大文字小文字を区別しない str_replace



stripslashes> <stripcslashes
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes stripos
guanfenglin at gmail dot com 29-Sep-2010 03:19
Just a friendly hint:

I came across to this scenario, check to see if an URL string contains http, if
no then prepend "http" to the URL string

<?php
$url = (stripos($url,"http")==false) ? "http".$url : $url;
?>

now, this will always add the http:// to the URL string even the URL string
already has http

It is because stripos($url,"http") will return false if no http found, and
stripos($url, "http") will return 0 if it is found (being at the start of the
string) , and (0==false) is a true condition

therefore, to fix this problem, we have to use (===) to compare the value type
as well:

<?php
$url = (stripos($url,"http")===false) ? "http".$url : $url;
?>

James Lin
gireeshda at yahoo dot com 08-Jun-2010 05:12
function "stripos" not working in php file without .php extension.  Returns
error. Seems to be a bug.

To ensure that stripos works in all php version/platforms in files without .php
extension, use the following code:

strpos(strtolower($haystack), strtolower($needle), [ $offset = 0 ] )
vgiralt 19-Aug-2009 09:38
The mail validator example is NON CONFORMANT with SMTP mail RFCs. Valid
characters for Internet e-mail address are more than the ones listed here.
Implementing such lame validator is a big disservice to the whole Internet.

Those interested can read RFC 5322. In short, the valid characters are
different on both sides of the @ sign, so, before applying this fast technique
the address should be exploded into the two side strings, and then, use
different valid character strings for the local-part and the domain.

A local part can be any alphabetic or digit US-ASCII character plus "!#$%&'*+-/
=?^_`{|}~", and then, if it is enclosed in double-quotes ("), it can be any
US-ASCII character except double-quote (") and back-slash(\).

The domain can be any printable US-ASCII characters not including "[", "]", or
"\".

And then, this could be overridden with the advent of internationalized
domains, that can use UTF-8 character sets.

Implementation of the validator is left as an exercise for the reader.
manualregexp 18-May-2009 10:52
Fast email validator using stripos to check for valid characters.

<?php
function validate_email($value) {
   $chars="ABCDEFGHIJKLMNOPQRSTUVWXYZ".
                 "abcdefghijklmnopqrstuvwxyz0123456789@._";
   $at=0;  /* at sign */
   $dot=0; /* dot after at */
   $end_pos = strlen($value)-1;

   for ($i=0;$i<strlen($value);$i++) {
      $c = $value[$i];
      if (stripos($chars, $c)===false) return false;
      if ($c=="@") $at++;
      if ($at==1 && $c==".") $dot++;
      if ($at>1) return false;
      /* Don't start or end with an '@' or a '.'
       * No @'s or .'s next to each other.
       */
      if (($c=="." || $c=="@") &&
             ($i==0 || $i==$end_pos || $prev_c=="." || $prev_c=="@"))
              return false;
      $prev_c=$c;
   }
   return ($at==1 && $dot>0);
}
?>
emperorshishire at gmail dot com 25-Feb-2009 03:31
I found myself needing to find the first position of multiple needles in one
haystack.  So I wrote this little function:

<?php
function multineedle_stripos($haystack, $needles, $offset=0) {
    foreach($needles as $needle) {
        $found[$needle] = stripos($haystack, $needle, $offset);
    }
    return $found;
}

// It works as such:
$haystack = "The quick brown fox jumps over the lazy dog.";
$needle = array("fox", "dog", ".", "duck")
var_dump(multineedle_stripos($haystack, $needle));
/* Output:
   array(3) {
     ["fox"]=>
     int(16)
     ["dog"]=>
     int(40)
     ["."]=>
     int(43)
     ["duck"]=>
     bool(false)
   }
*/
?>
Ysangkok 06-Mar-2008 03:44
@henke:

No. It does NOT make a warning if the needle isn't found. This is false.
henke at henke37 dot cjb dot net 09-Dec-2007 06:48
This function will raise a warning if the needle was not found. Be sure to use
@ to suppress it if you want the strpos like behavior of only returning false.
hpavon at gmail dot com 19-Jul-2007 07:54
To shane_at_51smith-dot-nl
Fine but not useful if you want to use stripos 3rd param òffset´ for instance
to find all occurences of `needle´.
Again rchillet and heavyraptor solution is best though you'd better keep
to-lowercase strings outside the function if you're planning to loop through
`haystack´ like this:

$lower_haystack = strtolower($haystack);
$lower_needle = strtolower($needle);
$offset = 0;
//... looping over haystack
while ($offset !== false) {
    $offset = strpos($lower_haystack, $lower_needle, $offset);
    //... some funny stuff here
}

Using rchillet-heavyraptor function here would slow down performance. Solution:
don't invent any function
shane_at_51smith-dot-nl 03-Jul-2007 07:46
Yet another stripos for php4 alternative:
<?php
function stripos($haystack, $needle){
    return strpos($haystack, stristr( $haystack, $needle ));
}
$strTest = "The brown fox jumped over the Fence";
echo stripos($strTest, 'fence');//30
?>
grf at post dot cz 20-Mar-2007 12:57
(i'm very sorry for some mistakes in my yesterday's post :'[ )

this would to work with any language, i hope.
tested on czech (eastern europe) lang.

<?php
/****************************************
*    SAFE HIGHLIGHT
****************************************/
/**
 * function finds and encase every string in a $needleArr array with
 * strings $shearLft (from the left side) and $shearRgt (guess from which
 * side).
 * already encased needles are IGNORED for any other step, so order
 * of needles in $needleArr is pretty important.
 *
 * function is searching needles in case-insensitive mode,
 * but case in the subject is saved.
 *
 * can you do it better? so, do it.
 *
 * @param array $needleArr array of needles
 * @param string $shearLft left shear
 * @param string $shearRgt right shear
 * @param string $subject subject
 * @param string $encoding encoding ('utf-8' is default)
 *
 * @author griffin
 */
function safeHighlight( $needleArr, $shearLft, $shearRgt, $subject, $encoding =
'utf-8')
{
   
    // encoding
    $e = $encoding;
   
    // oh, no needles
    if( !is_array( $needleArr))
        return $subject;
       
    // empty keys throw-off, only unique, reindex
    $nA = array_values(
            array_unique(
                array_diff( $needleArr, array(''))
            )
        );
   
    // needle count
    if( !($nC = count( $nA)))
        return $subject; // nothing to hl
       
    // shear length
    if( !(($rLL = mb_strlen( $rL = $shearLft, $e))
    + ($rRL = mb_strlen( $rR = $shearRgt, $e))))
        return $subject; // no shears
   
    // subject length
    if( !($sL = mb_strlen( $s = $subject, $e)))
        return null; // empty subject
       
    // subject in lowercase (we need to aviod
    // using mb_stripos due to PHP version)
    $sW = mb_strtolower( $s, $e);
   
    // masking ~ 0=not changed, 1=changed
    $m = str_repeat( '0', $sL);
   
    // loop for each needle
    for( $n=0; $n<$nC; $n++)
    {
       
        // needle string loWercase
        $nW = mb_strtolower( $nA[ $n], $e);
       
        $o = 0; // offset
        $nL = mb_strlen( $nW, $e); // needle length

        // search needle
        while( false !== ($p = mb_strpos( $sW, $nW, $o, $e)))
        {
            // oh hurrey, needle found on $p position
           
            // is founded needle already modified? (in full-length)
            for( $q=$p; $q<($p+$nL); $q++)
                if( $m[ $q])
                {
                    // ai, caramba. already modified, jump over
                    $o+= $nL;
                   
                    // continue for while() loop - not for for() loop!
                    continue 2;
                }
           
            // explode subject and mask into three parts
            // partA|needle|partB
            $sE[0] = mb_substr( $s, 0, $p, $e);
            $sE[1] = mb_substr( $s, $p, $nL, $e);
            $sE[2] = mb_substr( $s, $p+$nL, $sL-$p-$nL, $e);
           
            // mask
            // partA|partB (needle not needed)
            $mE[0] = mb_substr( $m, 0, $p, $e);
            $mE[1] = mb_substr( $m, $p+$nL, $sL-$p-$nL, $e);
           
            // apply shears
            $sE[1] = $rL.$sE[1].$rR;
           
            // update sunject length
            $sL+= $rLL + $rRL;
           
            // update mask
            $m = $mE[0] . str_repeat( '1', $rLL + $nL + $rRL) . $mE[1];
           
            // implode into a subject
            $s = implode( $sE);
           
            // update lowercase subject
            $sW = mb_strtolower( $s, $e);
           
            // increase offset
            $o+= $rLL + $nL + $rRL;
           
            // end of string reached
            if( $o>=$sL)
                break;
           
        } // while()
       
    } // for( $n=0; $n<$nC; $n++)
   
    // oouu yeaaa, kick the subject out of the function
    return $s;
   
} // function safeHighlight()
/****************************************
*    END: SAFE HIGHLIGHT
****************************************/
?>
dazzle 16-Aug-2006 02:20
I recommend using the solution by rchillet for <PHP5

michiels solution is quite slow if you use it for long strings or call it many
times.
michiel at mb-it dot nl 10-Jul-2006 11:03
Since the stripos-function is PHP5-only, the function below could give
PHP4-users the same functionallity:

function stripos($string,$word)
{
   $retval = false;
   for($i=0;$i<=strlen($string);$i++)
   {
       if (strtolower(substr($string,$i,strlen($word))) == strtolower($word))
       {
           $retval = true;
       }
   }
   return $retval;
}
rchillet at hotmail dot com 28-Apr-2006 08:45
improvement the function of heavyraptor with int offset parametre.

if (!function_exists("stripos")) {
  function stripos($str,$needle,$offset=0)
  {
      return strpos(strtolower($str),strtolower($needle),$offset);
  }
}
heavyraptor 21-Mar-2006 02:59
If you're using PHP < 5, you can use this alternate function, same thing like
stripos:

<?php
if (!function_exists("stripos")) {
  function stripos($str,$needle) {
   return strpos(strtolower($str),strtolower($needle));
  }
}
?>

Such a logical function but I hope it helps ...
sim 02-Oct-2004 05:17
Just to be explicit, the position index returned by strpos starts at 0, not 1.
e.g. strpos('abc','a') returns 0.
aidan at php dot net 30-May-2004 05:36
This functionality is now implemented in the PEAR package PHP_Compat.

More information about using this function without upgrading your version of
PHP can be found on the below link:

http://pear.php.net/package/PHP_Compat
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jun 12 21:22:09 2011 UTC

位置を表す整数値を返します。 needle が見つからない場合、 strpos() は boolean
FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される 0 や ""
といった値を返す可能性もあります。詳細については論理値のセクションを参照してく
ださい。この関数の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す
  • stristr() - 大文字小文字を区別しない strstr
  • strstr() - 文字列が最初に現れる位置を見つける



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes strpos
akarmenia at gmail dot com 05-Mar-2011 12:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 10:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. I prefer this implementation of strnpos because it
doesn't give visible warnings when supplied with a needle of length 0 (which
is, admittedly, non-standard behavior).  Based on a version I [originally
posted on 05-MAR-2010]; this new version conforms more to the semantics of
strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
?>
Anonymous 19-Aug-2010 09:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 10:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 12:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 11:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 03:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
daevid at daevid dot com 26-Jan-2010 10:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 10:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 04:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 01-Oct-2009 03:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 08:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 04:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 08:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 06:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 02:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 08:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 05:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 07:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 28-Dec-2008 12:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 18-Nov-2008 01:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 23-Oct-2008 01:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 28-Sep-2008 06:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
http://www.samundra.com.np
mickRacky 19-Sep-2008 06:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 07:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 10:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 01:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 02-Apr-2008 12:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 11:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
giulioNOSPAM at iunknown dot org 31-Oct-2007 10:19
A further implementation of the great rstrpos function posted in this page.
Missing some parameters controls, but the core seems correct.

<?php
// Parameters:
//
// haystack : target string
// needle   : string to search
// offset   : which character in haystack to start searching, FROM THE END OF
haystack
// iNumOccurrence : how many needle to search into haystack beginning from
offset ( i.e. the 4th occurrence of xxx into yyy )

function rstrpos ($haystack, $needle, $offset=0, $iNumOccurrence=1)
  {
  //
  $size = strlen ($haystack);
  $iFrom = $offset;
  $iLoop = 0;
  //
  do
    {
    $pos = strpos (strrev($haystack), strrev($needle), $iFrom);
    $iFrom = $pos + strlen($needle);
    }
  while ((++$iLoop)<$iNumOccurrence);
  //
  if($pos === false) return false;
  //
  return $size - $pos - strlen($needle);
  }
?>
Benjie 14-Oct-2007 11:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 08:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 09:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 03:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 12:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 04:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 08:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 10:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 05:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 27-Sep-2006 02:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
chasesan at gmail dot com 12-Jul-2006 10:48
You can use strpos to produce a funciton that will find the nth instance of a
certain string within a string. Personally I find this function almost more
useful then strpos itself.

I kinda wish they would put it stock into php but I doupt thats gonna happen
any time soon. ^_^

Here is da code:
<?php
//just like strpos, but it returns the position of the nth instance of the
needle (yay!)
function strpos2($haystack, $needle, $nth = 1)
{
    //Fixes a null return if the position is at the beginning of input
    //It also changes all input to that of a string ^.~
    $haystack = ' '.$haystack;
    if (!strpos($haystack, $needle))
        return false;
    $offset=0;
    for($i = 1; $i < $nth; $i++)
        $offset = strpos($haystack, $needle, $offset) + 1;
    return strpos($haystack, $needle, $offset) - 1;
}
?>
samuraj at xmail dot cz 24-Dec-2005 09:38
there was a code (from wodzuY2k at interia dot pl) removing all between
<script> tags..
but it didn't work if the tag begins like <SCRIPT language=javascript type=text
/javascript>

here is function removing all between "<script"  and  "/script>"

<?php

function remove_js($contents)           
{
  while(true)
  {
   $begPos = strpos($contents,"<script");
   if ($begPos===false) break; //all tags were found & replaced.
   $endPos = strpos($contents,"/script>",$begPos+strlen("<script"));
   $tmp = substr($contents,0,$begPos);
   $tmp .= substr($contents,$endPos+strlen("script>"));
   $contents = $tmp;
   if ($loopcontrol++>100) break; //loop infinity control
   continue;  //search again
  }
  return $contents;

}

?>
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 03:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 02:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 10:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 12:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
webKami [at] akdomains.com 31-Mar-2005 03:06
Str Pos Nth (Position of nth occurance of a string)
A handy function to get the position of nth occurance of a substring in a
string, with an optional param to make it case insenstive. I am calling it
strposnth, suggestions welcome.

Third optional parameter gets the value of n, e.g puting in 2 will return
position of second occurance of needle in haystack: Valid inputs (1 = default)
2,3,4.....

Fourth optional parameter can be used to specify the function as case
insenstive: Valid inputs (0 = case senstive = default) 1 = case insenstive.

Code:

<?php

function strposnth($haystack, $needle, $nth=1, $insenstive=0)
{
    //if its case insenstive, convert strings into lower case
    if ($insenstive) {
        $haystack=strtolower($haystack);
        $needle=strtolower($needle);
    }
    //count number of occurances
    $count=substr_count($haystack,$needle);
   
    //first check if the needle exists in the haystack, return false if it does
not
    //also check if asked nth is within the count, return false if it doesnt
    if ($count<1 || $nth > $count) return false;

   
    //run a loop to nth number of accurance
    for($i=0,$pos=0,$len=0;$i<$nth;$i++)
    {   
        //get the position of needle in haystack
        //provide starting point 0 for first time ($pos=0, $len=0)
        //provide starting point as position + length of needle for next time
        $pos=strpos($haystack,$needle,$pos+$len);

        //check the length of needle to specify in strpos
        //do this only first time
        if ($i==0) $len=strlen($needle);
     }
   
    //return the number
    return $pos;
}

?>

I just construct this function after trying to search a similar one to use in a
shopping cart. I am using this to display a limited number of lines or text for
featured products. My aim is to limit the product description to 100 characters
or 3 lines / 3 list items whichever is less.

Example code goes like this

<?php

//get the product description from recordset
$text=$row['product_desc'];

//strip off text if its longer than 100 characters
if (strlen($text)>100) $text=substr($text,0,100)." ...";

//get ending of the third line
$pos=strposnth($text,"\n",3,1);

//if found, strip off text after that
if($pos) $text=substr($text,0,$pos);

//nl2li (new line 2 list) this function converts the \n seprated lines of text
into sorted or unsorted lists
//I have posted this function in nl2br
//http://uk2.php.net/manual/en/function.nl2br.php
$text=nl2li($text);
echo $text;

?>

Examples:

<?php
strposnth("I am trying to go now.","o"); // returns 13 (strpos behavior)
strposnth("I am trying to go now.","O"); // returns false (strpos behavior)
strposnth("I am trying to go now.","o",2); // returns 16 (second occurance)
strposnth("I am trying to go now.","o",7); // returns false (occurance count is
less than 7)
strposnth("I am trying to go now.","O",1,1); // returns 13 (stripos behavior)
strposnth("I am trying to go now.","O",3,1); // returns 19 (stripos behavior +
nth occurance)
?>

Regards,

webKami [at] akdomains.com
arias at elleondeoro dot com 07-Feb-2005 02:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 21-Jan-2005 02:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 05:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 10:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 05:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 10:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 05:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 10-Mar-2004 01:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 06:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 04:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jun 12 21:22:09 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • PCRE
  • PCRE 関数
  • preg_ filter
  • preg_ grep
  • preg_ last_ error
  • preg_ match_ all
  • preg_ match
  • preg_ quote
  • preg_ replace_ callback
  • preg_ replace
  • preg_ split

preg_replace_callback> <preg_match
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
preg_quote

(PHP 4, PHP 5)

preg_quote — 正規表現文字をクオートする

説明

string preg_quote ( string $str [, string $delimiter = NULL ] )

preg_quote() は、str を引数とし、正規表現構文の特殊文字の前にバックスラッシュを
挿入します。この関数は、実行時に生成される文字列をパターンとしてマッチングを行
う必要があり、その文字列には正規表現の特殊文字が含まれているかも知れない場合に
有用です。

正規表現の特殊文字は、次のものです。 . \ + * ? [ ^ ] $ ( ) { } = ! < > | : -

パラメータ

str

    入力文字列。

delimiter

    オプションの delimiter を指定すると、ここで指定した文字もエスケープされます
    。これは、PCRE 関数が使用するデリミタをエスケープする場合に便利です。'/' が
    デリミタとしては最も一般的に使用されています。

返り値

クォートされた文字列を返します。

変更履歴

バージョン                   説明
5.3.0      - 文字がクォートされるようになりました。

例

例1 preg_quote() の例

<?php
$keywords = '$40 for a g3/400';
$keywords = preg_quote($keywords, '/');
echo $keywords; // \$40 for a g3\/400 を返します
?>

例2 テキスト内の単語の斜体変換

<?php
// この例では、preg_quote($word) を使って、アスタリスクが
// 正規表現での特殊な意味を帯びないようにしています

$textbody = "This book is *very* difficult to find.";
$word = "*very*";
$textbody = preg_replace ("/" . preg_quote($word) . "/",
                          "<i>" . $word . "</i>",
                          $textbody);
?>

注意

    注意: この関数はバイナリデータに対応しています。



preg_replace_callback> <preg_match
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes preg_quote
admin at nilamo dot com 04-Aug-2010 03:21
@zooly:

And what if $myvar = 'te\\E.t'?  It will match, when it shouldn't.  That's why
you should use preg_quote().
zooly 21-Jul-2009 08:07
To escape characters with special meaning, like: .-[]() and so on, use \Q and \
E.

For example:

<?php echo ( preg_match('/^'.( $myvar = 'te.t' ).'$/i', 'test') ? 'match' :
'nomatch' ); ?>

Will result in: match

But:

<?php echo ( preg_match('/^\Q'.( $myvar = 'te.t' ).'\E$/i', 'test') ? 'match' :
'nomatch' ); ?>

Will result in: nomatch
alexc223 at NOSPAM dot googlemail dot com 15-Jun-2009 07:41
Not sure why this note got deleted, but hey lets try again:

As of PHP 5.3, bug #47229 has been fixed and preg_quote *will* escape a hyphen
(-). This may effect your code so ensure this is one thing you check when
moving to 5.3.
frostschutz 20-Mar-2009 10:01
I wanted to escape a string of characters so I could match them in [], i.e.
[.,-!"§$%\\\[\]\^].

Unfortunately preg_quote does not escape the - character which has a special
meaning in [], i.e. [a-z].

So I used this hack: make - the delimiter of the expression, i.e.

preg_quote(userinput, "-")
preg_replace("-[$userinput]-u", "", $str)

Apparently using a special char as a delimiter of a regular expression disables
this character, i.e. even if it's escaped it's not understood as special
character for the expression anymore.

so the pattern "-[a\\-z]-u" matches the characters a, - and z, and not
abc...xyz.

It would be nice if preg_quote also escaped characters that have special
meanings even if they have this meaning only under certain conditions, such as
inside [].
krishoog at gmail dot com 13-Oct-2008 02:51
To bizzigul at hotmail dot fr:
It's not a good practice to make somthing work *almost* all of the time. If the
input contains a '`' you will still get an error. I recommend using the default
delimiter ('/') and also feed this to preg_quote as second argument.
bizzigul at hotmail dot fr 30-Jul-2008 04:10
To prevent any problems, try to always use a delimiter that will *almost* not
be used inside the regex, such as ` (back quote)

for example: instead of
<?php preg_match('/foo\/bar\//',$somevar); ?>

use

<?php preg_match('`foo/bar/`',$somevar); ?>

it's that simple! like this, you won't have to bother with delimiters
anymore...
Anonymous 26-Dec-2007 11:13
Wondering why your preg_replace fails, even if you have used preg_quote?

Try adding the delimiter / - preg_quote($string, '/');
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jun 12 20:21:58 2011 UTC
preg_quote> <preg_match_all
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011

view this page in

[English             ] Change language
preg_match

(PHP 4, PHP 5)

preg_match — 正規表現によるマッチングを行う

説明

int preg_match ( string $pattern , string $subject [, array &$matches [, int
$flags = 0 [, int $offset = 0 ]]] )

pattern で指定した正規表現により subject を検索します。

パラメータ

pattern

    検索するパターンを表す文字列。

subject

    入力文字列。

matches

    matches を指定した場合、検索結果が代入されます。 $matches[0] にはパターン全
    体にマッチしたテキストが代入され、 $matches[1] には 1 番目ののキャプチャ用
    サブパターンにマッチした文字列が代入され、といったようになります。

flags

    flags には以下のフラグを指定できます。

    PREG_OFFSET_CAPTURE
        このフラグを設定した場合、各マッチに対応する文字列のオフセットも返され
        ます。これにより matches の値は配列となり、配列の要素 0 はマッチした文
        字列、要素 1は対象文字列中におけるマッチした文字列のオフセット値となる
        ことに注意してください。

offset

    通常、検索は対象文字列の先頭から開始されます。オプションのパラメータ offset
    を使用して検索の開始位置を (バイト単位で) 指定することも可能です。

        注意:

        offset を用いるのと、 substr($subject, $offset) を preg_match()の対象文
        字列として指定するのとは等価ではありません。これは、pattern には、 ^, $
        や (?<=x) のような言明を含めることができるためです。以下を比べてみてく
        ださい。
        <?php
        $subject = "abcdef";
        $pattern = '/^def/';
        preg_match($pattern, $subject, $matches, PREG_OFFSET_CAPTURE, 3);
        print_r($matches);
        ?>

        上の例の出力は以下となります。

        Array
        (
        )

        一方、この例を見てください。

        <?php
        $subject = "abcdef";
        $pattern = '/^def/';
        preg_match($pattern, substr
        ($subject,3), $matches, PREG_OFFSET_CAPTURE);
        print_r($matches);
        ?>

        出力は以下のようになります。

        Array
        (
            [0] => Array
                (
                    [0] => def
                    [1] => 0
                )

        )


返り値

preg_match() は、pattern がマッチした回数を返します。つまり、0 回（マッチせず）
または 1 回となります。これは、最初にマッチした時点でpreg_match() は検索を止め
るためです。逆にpreg_match_all()は、 subject の終わりまで検索を続けます。
preg_match() は、エラーが発生した場合にFALSEを返します。

変更履歴

バー
ジョ                                    説明
 ン
      名前つきサブパターンで、 (?<name>) や (?'name') といった構文が (?P<name>)
5.2.2 のほかに使えるようになりました. 以前のバージョンでは (?P<name>) しか使え
      ませんでした。
4.3.3 パラメータ offset が追加されました。
4.3.0 フラグ PREG_OFFSET_CAPTURE が追加されました。
4.3.0 パラメータ flags が追加されました。

例

例1 文字列 "php" を探す

<?php
// パターンのデリミタの後の "i" は、大小文字を区別しない検索を示す
if (preg_match("/php/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

例2 単語 "web" を探す

<?php
/* パターン内の \b は単語の境界を示す。このため、独立した単語の
 *  "web"にのみマッチし、"webbing" や "cobweb" のような単語の一部にはマッチしな
い */
if (preg_match("/\bweb\b/i", "PHP is the web scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}

if (preg_match("/\bweb\b/
i", "PHP is the website scripting language of choice.")) {
    echo "A match was found.";
} else {
    echo "A match was not found.";
}
?>

例3 URL からドメイン名を得る

<?php
// get host name from URL
preg_match('@^(?:http://)?([^/]+)@i',
    "http://www.php.net/index.html", $matches);
$host = $matches[1];

// get last two segments of host name
preg_match('/[^.]+\.[^.]+$/', $host, $matches);
echo "domain name is: {$matches[0]}\n";
?>

上の例の出力は以下となります。

domain name is: php.net

例4 名前つきサブパターンの使用法

<?php

$str = 'foobar: 2008';

preg_match('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);

/* PHP 5.2.2 (PCRE 7.0) 以降ではこの形式でも動作しますが、
 * 過去との互換性を考慮して上の形式のほうを推奨します */
// preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);

print_r($matches);

?>

上の例の出力は以下となります。

Array
(
    [0] => foobar: 2008
    [name] => foobar
    [1] => foobar
    [digit] => 2008
    [2] => 2008
)

注意

ヒント

ある文字列が他の文字列内に含まれているかどうかを調べるためだけに preg_match()
を使うのは避けた方が良いでしょう。 strpos() か strstr() 関数を使う方が速くなり
ます。

参考

  • PCRE のパターン
  • preg_match_all() - 繰り返し正規表現検索を行う
  • preg_replace() - 正規表現検索および置換を行う
  • preg_split() - 正規表現で文字列を分割する
  • preg_last_error() - 直近の PCRE 正規表現処理のエラーコードを返す



preg_quote> <preg_match_all
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 10 Jun 2011
 
add a note add a note User Contributed Notes preg_match
cappuccino dot e dot cornetto at gmail dot com 12-Jun-2011 01:49
Please disregard my previous note (http://php.net/manual/en/
function.preg-match.php#104376) because the value of the $missing variable was
wrong.
---
There is a small bug in this function that you should be aware of because
they're not going to fix it; see http://bugs.php.net/bug.php?id=50887

My fix follows.

<?php

function preg_match_ok( $pattern, $subject, array &$matches = NULL, $flags =
NULL, $offset = NULL )
{
    $result = preg_match($pattern, $subject, $m, $flags, $offset);
    if (is_null($matches))
    {
        return $result;
    }
    $matches = $m;
    if ($result)
    {
        $pattern = preg_replace('/\\\\./',      '%', $pattern); // disable
escaped characters
        $pattern = preg_replace('/\[[^\]]*\]/', '%', $pattern); // disable
enumerations
       
        $find_named_groups  = '/\(\?P?(?:(?:<([^>]+)>)|(?:\'([^\']+)\'))/';
        $named_groups_count = preg_match_all($find_named_groups, $pattern,
$named_groups, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);
       
        $find_index_groups  = '/\((?!\?)/';
        $index_groups_count = preg_match_all($find_index_groups, $pattern,
$index_groups, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);
       
        $groups_count = $index_groups_count + $named_groups_count;
        if ($groups_count == count($matches)) //it should be $groups_count ==
count($matches) - 1, see http://bugs.php.net/bug.php?id=50887
        {
            $missing = $flags == PREG_OFFSET_CAPTURE ? array('', -1) : '';
            $last_group_offset['named'] = -1;
            if ($named_groups_count)
            {
                $last_named_group = array_pop(array_pop($named_groups));
                $last_group_offset['named'] = $last_named_group[1];
            }
            $last_group_offset['index'] = -1;
            if ($index_groups_count)
            {
                $last_index_group = array_pop(array_pop($index_groups));
                $last_group_offset['index'] = $last_index_group[1];
            }
            $last_group_type = array_search(max($last_group_offset),
$last_group_offset);
            if ('named' == $last_group_type)
            {
                $matches[$last_named_group[0]] = $missing;
            }
            $matches[] = $missing;
        }
    }
    return $result;
}

?>
cappuccino dot e dot cornetto at gmail dot com 12-Jun-2011 12:15
There is a small bug in this function that you should be aware of because
they're not going to fix it; see http://bugs.php.net/bug.php?id=50887

My fix follows.

function preg_match_ok( $pattern, $subject, array &$matches = NULL, $flags =
NULL, $offset = NULL )
{
    $result = preg_match($pattern, $subject, $m, $flags, $offset);
    if (is_null($matches))
    {
        return $result;
    }
    $matches = $m;
    if ($result)
    {
        $pattern = preg_replace('/\\\\./',      '%', $pattern); // disable
escaped characters
        $pattern = preg_replace('/\[[^\]]*\]/', '%', $pattern); // disable
enumerations
        
        $find_named_groups  = '/\(\?P?(?:(?:<([^>]+)>)|(?:\'([^\']+)\'))/';
        $named_groups_count = preg_match_all($find_named_groups, $pattern,
$named_groups, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);
        
        $find_index_groups  = '/\((?!\?)/';
        $index_groups_count = preg_match_all($find_index_groups, $pattern,
$index_groups, PREG_SET_ORDER | PREG_OFFSET_CAPTURE);
        
        $groups_count = $index_groups_count + $named_groups_count;
        if ($groups_count == count($matches)) //it should be $groups_count ==
count($matches) - 1, see http://bugs.php.net/bug.php?id=50887
        {
            $missing = '';
            $last_group_offset['named'] = -1;
            if ($named_groups_count)
            {
                $last_named_group = array_pop(array_pop($named_groups));
                $last_group_offset['named'] = $last_named_group[1];
            }
            $last_group_offset['index'] = -1;
            if ($index_groups_count)
            {
                $last_index_group = array_pop(array_pop($index_groups));
                $last_group_offset['index'] = $last_index_group[1];
            }
            $last_group_type = array_search(max($last_group_offset),
$last_group_offset);
            if ('named' == $last_group_type)
            {
                $matches[$last_named_group[0]] = $missing;
            }
            $matches[] = $missing;
        }
    }
    return $result;
}
juanmadss at gmail dot com 25-May-2011 11:00
Testing the speed of preg_match against stripos doing insensitive case search
in strings:

<?php
$string = "Hey, how are you? I'm a string.";

// PCRE
$start = microtime(true);
for ($i = 1; $i < 10000000; $i++) {
    $bool = preg_match('/you/i', $string);
}
$end = microtime(true);
$pcre_lasted = $end - $start; // 8.3078360557556

// Stripos, we believe in you
$start = microtime(true);
for ($i = 1; $i < 10000000; $i++) {
    $bool = stripos($string, 'you') !== false;
}
$end = microtime(true);
$stripos_lasted = $end - $start; // 6.0306038856506

echo "Preg_match lasted: {$pcre_lasted}<br />Stripos lasted: {$stripos_lasted}
";
?>

So unless you really need to test a string against a regular expression, always
use strpos / stripos and other string functions to find characters and strings
within other strings.
mulllhausen 16-May-2011 08:57
i do a fair bit of html scraping in conjunction with curl. i always need to
know if i have reached the right page or if the curl request failed. the main
problem i have encountered is html tags having unexpected spaces or other
characters (especially the &nbsp; character sequence) between them. for example
when requesting a page with a certain manner set of post or get variables the
response might be

<a href='blah'><span>data data data</span></a>

but requesting the same page with different post/get variables might give the
following result:

<a href='blah'>
         &nbsp;<span>data data data</span>
</a>

to match both of these tag sequences with the same pattern i use the [\S\s]*?
wildcard which basically means 'match anything at all...but not if you can help
it'

so the pattern for the above sequence would be:

<?php

$page1 = "........<a href='blah'><span>data data data</span></a>.........";

$page2 = "........<a href='blah'>
         &nbsp;<span>data data data</span>
</a>
........";

$w = "[\s\S]*?"; //ungreedy wildcard
$pattern = "/\<a href='blah'\>$w\<span\>data data data\<\/span\>$w\<\/a\>/";

if(preg_match($pattern, $page1, $matches)) echo "got to page 1. match:
[".print_r($matches, true)."]\n";
else echo "did not get to page 1\n";

if(preg_match($pattern, $page2, $matches)) echo "got to page 2. match:
[".print_r($matches, true)."]\n";
else echo "did not get to page 2\n";

?>
MrBull 20-Mar-2011 03:32
Sometimes its useful to negate a string. The first method which comes to mind
to do this is: [^(string)] but this of course won't work. There is a solution,
but it is not very well known. This is the simple piece of code on how a
negation of a string is done:

(?:(?!string).)

?: makes a subpattern (see http://www.php.net/manual/en/
regexp.reference.subpatterns.php) and ?! is a negative look ahead. You put the
negative look ahead in front of the dot because you want the regex engine to
first check if there is an occurrence of the string you are negating. Only if
it is not there, you want to match an arbitrary character.

Hope this helps some ppl.
arash dot hemmat at gmail dot com 03-Feb-2011 03:15
For those who search for a unicode regular expression example using preg_match
here it is:

Check for Persian digits
preg_match( "/[^\x{06F0}-\x{06F9}\x]+/u" , '۱۲۳۴۵۶۷۸۹۰' );
Frank 26-Jan-2011 08:12
If someone is from a country that accepts decimal numbers in format 9.00 and
9,00 (point or comma), number validation would be like that:
<?php
$number_check = "9,99";
if (preg_match( '/^[\-+]?[0-9]*\.*\,?[0-9]+$/', $number_check)) {
    return TRUE;
}
?>

However, if the number will be written in the database, most probably this
comma needs to be replaced with a dot.
This can be done with use of str_replace, i.e :
<?php
$number_database = str_replace("," , "." , $number_check);
?>
sainnr at gmail dot com 30-Dec-2010 02:12
This sample regexp may be useful if you are working with DB field types.

(?P<type>\w+)($|\((?P<length>(\d+|(.*)))\))

For example, if you are have a such type as "varchar(255)" or "text", the next
fragment

<?php
   $type = 'varchar(255)';  // type of field
   preg_match('/(?P<type>\w+)($|\((?P<length>(\d+|(.*)))\))/', $type, $field);
   print_r($field);
?>

will output something like this:
Array ( [0] => varchar(255) [type] => varchar [1] => varchar [2] => (255)
[length] => 255 [3] => 255 [4] => 255 )
ian_channing at hotmail dot com 27-Dec-2010 09:55
When trying to check a file path that could be windows or unix it took me quite
a few tries to get the escape characters right.

The Unix directory separator must be escaped once and the windows directory
separator must be escaped twice.

This will match path/to/file and path\to\file.exe

preg_match('/^[a-z0-9_.\/\\\]*$/i', $file_string);
clbmuvn at gmail dot com 25-Sep-2010 03:42
<?php
$str ='/^00+[0-1]+[0-1]+[0-1]
+[0-1]+[0-1]+[0-1]+00+[0-1]+
[0-1]+[0-1]+[0-1]+[0-1]+[0-1]+00+
[0-1]+[0-1]+[0-1]+[0-1]+[0-1]+[0-1]+00/i';
        if ((preg_match($str,"00000000000000000000000000")))
        {echo "OK";}
?>
Not work
SoN9ne at gmail dot com 08-Jun-2010 05:10
I have been working on a email system that will automatically generate a text
email from a given HTML email by using strip_tags().
The only issue I ran into, for my needs, were that the anchors would not keep
their links.
I search for a little while and could not find anything to strip the links from
the tags so I generated my own little snippet.
I am posting it here in hopes that others may find it useful and for later
reference.

A note to keep in mind:
I was primarily concerned with valid HTML so if attributes do no use ' or " to
contain the values then this will need to be tweaked.
If you can edit this to work better, please let me know.
<?php
/**
 * Replaces anchor tags with text
 * - Will search string and replace all anchor tags with text (case
insensitive)
 *
 * How it works:
 * - Searches string for an anchor tag, checks to make sure it matches the
criteria
 *         Anchor search criteria:
 *             - 1 - <a (must have the start of the anchor tag )
 *             - 2 - Can have any number of spaces or other attributes before
and after the href attribute
 *             - 3 - Must close the anchor tag
 *
 * - Once the check has passed it will then replace the anchor tag with the
string replacement
 * - The string replacement can be customized
 *
 * Know issue:
 * - This will not work for anchors that do not use a ' or " to contain the
attributes.
 *         (i.e.- <a href=http: //php.net>PHP.net</a> will not be replaced)
 */
function replaceAnchorsWithText($data) {
    /**
     * Had to modify $regex so it could post to the site... so I broke it into
6 parts.
     */
    $regex  = '/(<a\s*'; // Start of anchor tag
    $regex .= '(.*?)\s*'; // Any attributes or spaces that may or may not exist
    $regex .= 'href=[\'"]+?\s*(?P<link>\S+)\s*[\'"]+?'; // Grab the link
    $regex .= '\s*(.*?)\s*>\s*'; // Any attributes or spaces that may or may
not exist before closing tag
    $regex .= '(?P<name>\S+)'; // Grab the name
    $regex .= '\s*<\/a>)/i'; // Any number of spaces between the closing anchor
tag (case insensitive)
   
    if (is_array($data)) {
        // This is what will replace the link (modify to you liking)
        $data = "{$data['name']}({$data['link']})";
    }
    return preg_replace_callback($regex, 'replaceAnchorsWithText', $data);
}

$input  = 'Test 1: <a href="http: //php.net1">PHP.NET1</a>.<br />';
$input .= 'Test 2: <A name="test" HREF=\'HTTP: //PHP.NET2\' target="_blank">
PHP.NET2</A>.<BR />';
$input .= 'Test 3: <a hRef=http: //php.net3>php.net3</a><br />';
$input .= 'This last line had nothing to do with any of this';

echo replaceAnchorsWithText($input).'<hr/>';
?>
Will output:
Test 1: PHP.NET1(http: //php.net1).
Test 2: PHP.NET2(HTTP: //PHP.NET2).
Test 3: php.net3 (is still an anchor)
This last line had nothing to do with any of this

Posting to this site is painful...
Had to break up the regex and had to break the test links since it was being
flagged as spam...
teracci2002 09-Apr-2010 04:00
When you use preg_match() for security purpose or huge data processing,
mayby you should make consideration for backtrack_limit and recursion_limit.
http://www.php.net/manual/en/pcre.configuration.php

These limits may bring wrong matching result.
You can verify whether you hit these limits by checking preg_last_error().
http://www.php.net/manual/en/function.preg-last-error.php
eric at devotia dot com 22-Mar-2010 07:31
I see quite a few email address validation patterns below that seem to me to be
overly strict. 

using the username@domain.tld model:

username:  the rules are dictated by the receiving email server, this means
that in theory anything goes here.  I could write my own email server and
dictate my own rules.

domain: Domain names are regulated and there are rules.  Still I would opt for
a loose interpretation and not bother checking length.

tld: Vanity TLD's are just around the corner, once again try not to be too
restrictive.

So using a loose pattern, like so:
preg_match('/^[^@]+@[a-zA-Z0-9._-]+\.[a-zA-Z]+$/', $email)

username:  at least 1 character and it isn't an @

domain: at least 1 character and contains only valid characters.

tld: at least 1 character, alpha only (actually not entirely sure what the new
custom TLD's will allow may need to broaden the scope here).

A strict pattern is not going to guarantee the result of a valid email address
(it won't make sure it exists), but many of the patterns below can result in a
syntactically valid email address not being accepted (not good).

Spaces and quotes while rare are still occasionally encountered in the username
section of an address.  I actually see both with some regularity.

Domain name length, while there is the 63 character (255 overall) per section
limitation I think we can pretty much agree that someone isn't likely to give
you a false email address by violating that 1.

There is at least 1 single character domain name that I am aware of, qwest owns
q.com so in theory bob@q.com could be an actual email address.
Kae Cyphet 18-Mar-2010 02:29
for those coming over from ereg, preg_match can be quite intimidating. to get
started here is a migration tip.

<?php
if(ereg('[^0-9A-Za-z]',$test_string)) // will be true if characters arnt 0-9,
A-Z or a-z.

if(preg_match('/[^0-9A-Za-z]/',$test_string)) // this is the preg_match
version. the /'s are now required.
?>
plasma 22-Feb-2010 12:53
To extract scheme, host, path, ect. simply use

<?php

  $url  = 'http://name:pass@';
  $url .= 'example.com:10000';
  $url .= '/path/to/file.php?a=1&amp;b=2#anchor';

  $url_data = parse_url ( $url );

  print_r ( $url_data );

?>
___
prints out something like:

Array
(
    [scheme] => http
    [host] => wild.subdomain.orgy.domain.co.uk
    [port] => 10000
    [user] => name
    [pass] => pass
    [path] => /path/to/file.php
    [query] => a=1&b=2
    [fragment] => anchor
)

In my tests parse_url is up to 15x faster than preg_match(_all)!
Becheru Petru-Ioan 20-Feb-2010 06:11
http://pw-newspaper.googlecode.com/ project provides code for matching strings
of printable ASCII(space to tilda) with newlines (newline is formed CR and LF).

<?php
preg_match('/^[ -~\xA\xD]{0,65535}$/i', "Hello\n World!");
?>

There are more line terminators that CR or LF: see http://en.wikipedia.org/wiki
/Newline#Unicode
Dr@ke 18-Feb-2010 03:58
Hello,
There is a bug with somes new PCRE versions (like:7.9 2009-04-1),
In patterns:
\w+ !== [a-zA-Z0-9]+

But it's ok, if i replace \w+ by [a-z0-9]+ or [a-zA-Z0-9]+
saberdream at live dot fr 10-Feb-2010 11:53
I made a function to circumvent the problem of length of a string... This
verifies that the link is an image.

<?php
function verifiesimage($lien, $limite) {
    if( preg_match('#^http:\/\/(.*)\.(gif|png|jpg)$#i', $lien) && strlen($lien)
< $limite )
    {
        $msg = TRUE; // link ok
    }
    else
    {
        $msg = FALSE; // the link isn't image
    }
    return $msg; // return TRUE or FALSE
}
?>

Example :

<?php
if(verifierimage($votrelien, 50) == TRUE)
{
    // we display the content...
}
?>
Anonymous 06-Feb-2010 04:00
The regular expression for breaking-down a URI reference into its components:

      ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
       12            3  4          5       6  7        8 9

Source: ietf.org/rfc/rfc2396.txt
cebelab at gmail dot com 24-Jan-2010 06:43
I noticed that in order to deal with UTF-8 texts, without having to recompile
php with the PCRE UTF-8 flag enabled, you can just add the following sequence
at the start of your pattern: (*UTF8)

for instance : '#(*UTF8)[[:alnum:]]#' will return TRUE for 'é' where '#
[[:alnum:]]#' will return FALSE

found this very very useful tip after hours of research over the web directly
in pcre website right here : http://www.pcre.org/pcre.txt
there are many further informations about UTF-8 support in the lib

hop that will help!

--
cedric
Anonymous 01-Dec-2009 11:08
<?php
/**
 * @param integer $vat_number VAT number to test e.g. GB123 4567 89
 * @return integer -1 if country not included OR 1 if the VAT Num matches for
the country OR 0 if no match
*/
function checkVatNumber(  $vat_number ) {
    switch(strtoupper(substr($vat_number,0, 2))) {
        case 'AT':
            $regex = '/^(AT){0,1}U[0-9]{8}$/i';
            break;
        case 'BE':
            $regex = '/^(BE){0,1}[0]{0,1}[0-9]{9}$/i';
            break;
        case 'BG':
            $regex = '/^(BG){0,1}[0-9]{9,10}$/i';
            break;
        case 'CY':
            $regex = '/^(CY){0,1}[0-9]{8}[A-Z]$/i';
            break;
        case 'CZ':
            $regex = '/^(CZ){0,1}[0-9]{8,10}$/i';
            break;
        case 'DK':
            $regex = '/^(DK){0,1}([0-9]{2}[\ ]{0,1}){3}[0-9]{2}$/i';
            break;
        case 'EE':
        case 'DE':
        case 'PT':
        case 'EL':
            $regex = '/^(EE|EL|DE|PT){0,1}[0-9]{9}$/i';
            break;
        case 'FR':
            $regex = '/^(FR){0,1}[0-9A-Z]{2}[\ ]{0,1}[0-9]{9}$/i';
            break;
        case 'FI':
        case 'HU':
        case 'LU':
        case 'MT':
        case 'SI':
            $regex = '/^(FI|HU|LU|MT|SI){0,1}[0-9]{8}$/i';
            break;
        case 'IE':
            $regex = '/^(IE){0,1}[0-9][0-9A-Z\+\*][0-9]{5}[A-Z]$/i';
            break;
        case 'IT':
        case 'LV':
            $regex = '/^(IT|LV){0,1}[0-9]{11}$/i';
            break;
        case 'LT':
            $regex = '/^(LT){0,1}([0-9]{9}|[0-9]{12})$/i';
            break;
        case 'NL':
            $regex = '/^(NL){0,1}[0-9]{9}B[0-9]{2}$/i';
            break;
        case 'PL':
        case 'SK':
            $regex = '/^(PL|SK){0,1}[0-9]{10}$/i';
            break;
        case 'RO':
            $regex = '/^(RO){0,1}[0-9]{2,10}$/i';
            break;
        case 'SE':
            $regex = '/^(SE){0,1}[0-9]{12}$/i';
            break;
        case 'ES':
            $regex = '/^(ES){0,1}([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}
[0-9A-Z])$/i';
            break;
        case 'GB':
            $regex = '/^(GB){0,1}([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]
{2})|([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]{2}[\ ]{0,1}[0-9]{3})|((GD|
HA)[0-9]{3})$/i';
            break;
        default:
            return -1;
            break;
    }
  
    return preg_match($regex, $vat_number);
}
?>
Stefan 17-Nov-2009 10:47
I spent a while replacing all my ereg() calls to preg_match(), since ereg() is
now deprecated and will not be supported as of v 6.0.

Just a warning regarding the conversion, the two functions behave very
similarly, but not exactly alike. Obviously, you will need to delimit your
pattern with '/' or '|' characters.

The difference that stumped me was that preg_replace overwrites the $matches
array regardless if a match was found. If no match was found, $matches is
simply empty.

ereg(), however, would leave $matches alone if a match was not found. In my
code, I had repeated calls to ereg, and was populating $matches with each
match. I was only interested in the last match. However, with preg_match, if
the very last call to the function did not result in a match, the $matches
array would be overwritten with a blank value.

Here is an example code snippet to illustrate:

<?php
$test = array('yes','no','yes','no','yes','no');

foreach ($test as $key=>$value) {
  ereg("yes",$value,$matches1);
  preg_match("|yes|",$value,$matches2);
}
  print "ereg result: $matches1[0]<br>";
  print "preg_match result: $matches2[0]<br>";
?>

The output is:
ereg result: yes
preg_match result:

($matches2[0] in this case is empty)

I believe the preg_match behavior is cleaner. I just thought I would report
this to hopefully save others some time.
ruakuu at NOSPAM dot com 04-Nov-2009 05:32
Was working on a site that needed japanese and alphabetic letters and needed to
validate input using preg_match, I tried using \p{script} but didn't work:

<?php
$pattern ='/^([-a-zA-Z0-9_\p{Katakana}\p{Hiragana}\p{Han}]*)$/u'; // Didn't
work
?>

So I tried with ranges and it worked:

<?php
$pattern ='/^[-a-zA-Z0-9_\x{30A0}-\x{30FF}'
         .'\x{3040}-\x{309F}\x{4E00}-\x{9FBF}\s]*$/u';
$match_string = '印刷最安ニキビ跡除去ゲームボーイ';

if (preg_match($pattern, $match_string)) {
    echo "Found - pattern $pattern";
} else {
    echo "Not found - pattern $pattern";
}
?>

U+4E00–U+9FBF Kanji
U+3040–U+309F Hiragana
U+30A0–U+30FF Katakana

Hope its useful, it took me several hours to figure it out.
splattermania at freenet dot de 21-Oct-2009 03:50
Addition to my last note:

I just posted the regex, but there are missing the delimiters for it. The
correct way to check against the regex ist as follows:

<?
    if(preg_match("/^$regex$/", $url))
    {
        return true;
    }
?>
Anonymous 12-Oct-2009 09:24
If your regular expression does not match with long input text when you think
it should, you might have hit the PCRE backtrack default limit of 100000. See
http://php.net/pcre.backtrack-limit.
splattermania at freenet dot de 01-Oct-2009 12:01
As I wasted lots of time finding a REAL regex for URLs and resulted in building
it on my own, I now have found one, that seems to work for all kinds of urls:

<?php
    $regex = "((https?|ftp)\:\/\/)?"; // SCHEME
    $regex .= "([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?"; //
User and Pass
    $regex .= "([a-z0-9-.]*)\.([a-z]{2,3})"; // Host or IP
    $regex .= "(\:[0-9]{2,5})?"; // Port
    $regex .= "(\/([a-z0-9+\$_-]\.?)+)*\/?"; // Path
    $regex .= "(\?[a-z+&\$_.-][a-z0-9;:@&%=+\/\$_.-]*)?"; // GET Query
    $regex .= "(#[a-z_.-][a-z0-9+\$_.-]*)?"; // Anchor
?>

Then, the correct way to check against the regex ist as follows:

<?php
       if(preg_match("/^$regex$/", $url))
       {
               return true;
       }
?>
luc _ santeramo at t yahoo dot com 03-Sep-2009 02:46
If you want to validate an email in one line, use filter_var() function !
http://fr.php.net/manual/en/function.filter-var.php

easy use, as described in the document example :
var_dump(filter_var('bob@example.com', FILTER_VALIDATE_EMAIL));
marcosc at tekar dot net 27-Aug-2009 04:31
When using accented characters and "ñ" (áéíóúñ), preg_match does not work. It
is a charset problem, use utf8_decode/decode to fix.
ian_channing at hotmail dot com 20-Aug-2009 01:13
This is a function that uses regular expressions to match against the various
VAT formats required across the EU.

<?php
/**
 * @param integer $country Country name
 * @param integer $vat_number VAT number to test e.g. GB123 4567 89
 * @return integer -1 if country not included OR 1 if the VAT Num matches for
the country OR 0 if no match
*/
function checkVatNumber( $country, $vat_number ) {
    switch($country) {
        case 'Austria':
            $regex = '/^(AT){0,1}U[0-9]{8}$/i';
            break;
        case 'Belgium':
            $regex = '/^(BE){0,1}[0]{0,1}[0-9]{9}$/i';
            break;
        case 'Bulgaria':
            $regex = '/^(BG){0,1}[0-9]{9,10}$/i';
            break;
        case 'Cyprus':
            $regex = '/^(CY){0,1}[0-9]{8}[A-Z]$/i';
            break;
        case 'Czech Republic':
            $regex = '/^(CZ){0,1}[0-9]{8,10}$/i';
            break;
        case 'Denmark':
            $regex = '/^(DK){0,1}([0-9]{2}[\ ]{0,1}){3}[0-9]{2}$/i';
            break;
        case 'Estonia':
        case 'Germany':
        case 'Greece':
        case 'Portugal':
            $regex = '/^(EE|EL|DE|PT){0,1}[0-9]{9}$/i';
            break;
        case 'France':
            $regex = '/^(FR){0,1}[0-9A-Z]{2}[\ ]{0,1}[0-9]{9}$/i';
            break;
        case 'Finland':
        case 'Hungary':
        case 'Luxembourg':
        case 'Malta':
        case 'Slovenia':
            $regex = '/^(FI|HU|LU|MT|SI){0,1}[0-9]{8}$/i';
            break;
        case 'Ireland':
            $regex = '/^(IE){0,1}[0-9][0-9A-Z\+\*][0-9]{5}[A-Z]$/i';
            break;
        case 'Italy':
        case 'Latvia':
            $regex = '/^(IT|LV){0,1}[0-9]{11}$/i';
            break;
        case 'Lithuania':
            $regex = '/^(LT){0,1}([0-9]{9}|[0-9]{12})$/i';
            break;
        case 'Netherlands':
            $regex = '/^(NL){0,1}[0-9]{9}B[0-9]{2}$/i';
            break;
        case 'Poland':
        case 'Slovakia':
            $regex = '/^(PL|SK){0,1}[0-9]{10}$/i';
            break;
        case 'Romania':
            $regex = '/^(RO){0,1}[0-9]{2,10}$/i';
            break;
        case 'Sweden':
            $regex = '/^(SE){0,1}[0-9]{12}$/i';
            break;
        case 'Spain':
            $regex = '/^(ES){0,1}([0-9A-Z][0-9]{7}[A-Z])|([A-Z][0-9]{7}
[0-9A-Z])$/i';
            break;
        case 'United Kingdom':
            $regex = '/^(GB){0,1}([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]
{2})|([1-9][0-9]{2}[\ ]{0,1}[0-9]{4}[\ ]{0,1}[0-9]{2}[\ ]{0,1}[0-9]{3})|((GD|
HA)[0-9]{3})$/i';
            break;
        default:
            return -1;
            break;
    }
   
    return preg_match($regex, $vat_number);
}
?>
Rob 19-Aug-2009 07:03
The following function works well for validating ip addresses

<?php
function valid_ip($ip) {
    return preg_match("/^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])" .
            "(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/",
$ip);
}
?>
KOmaSHOOTER at gmx dot de 09-Aug-2009 01:12
reading files from a dir without "." or ".."
<?php
$handle = opendir('content/pages/');
$pages = array();
while (false !== ($file = readdir($handle))) {
      $case=preg_match("/^[.]/",$file,$out, PREG_OFFSET_CAPTURE);
      //echo($case);
      if(!$case){
       echo("$file<br />");
       array_push($pages,$file);
       }
}
echo(count($pages));
?>
suit dot 2009 at rebell dot at 06-Aug-2009 10:49
Reno's expression is still wrong.

The domain-part may contain lots of characters for IDN. IP adresses in the
domain part are allowed. In local-part are more characters allowed too but
specific combinations are forbidden. Check RFC 2822 and RFC 2821.

"foo bar"@example.com is valid
foo\@bar@example.com is valid
$?^_`.!#{|}%&'*+-/=~@example.com is also valid e-mail-address (ok, quite
uncommon example)

but

foo.@example.com is invalid, dot at beginning and end of the string is not
allowed - but Reno's expression would match.

an e-mail adress should not be longer than 256 characters (or 64 in local part,
255 in domain part) since its limited by SMTP - check RFC 5321

Of course you should check RFC 2606 (Section 3) too - domain.tld or host.tld
are not good as example-domains. Use example.com / org / net (for domains) or
.invalid / . example (for top level domains).
david at blue-labs dot org 18-May-2009 01:06
Reno, your email validation regex is still invalid.  Email addresses can
contain the "+" in the localpart.

i.e. david+something@domain.com
matt 08-May-2009 08:07
To support large Unicode ranges (ie: [\x{E000}-\x{FFFD}] or \x{10FFFFF}) you
must use the modifier '/u' at the end of your expression.
daniel dot chcouri at gmail dot com 03-May-2009 01:09
Html tags delete using regular expression

<?php
function removeHtmlTagsWithExceptions($html, $exceptions = null){
    if(is_array($exceptions) && !empty($exceptions))
    {
        foreach($exceptions as $exception)
        {
            $openTagPattern  = '/<(' . $exception . ')(\s.*?)?>/msi';
            $closeTagPattern = '/<\/(' . $exception . ')>/msi';

            $html = preg_replace(
                array($openTagPattern, $closeTagPattern),
                array('||l|\1\2|r||', '||l|/\1|r||'),
                $html
            );
        }
    }

    $html = preg_replace('/<.*?>/msi', '', $html);

    if(is_array($exceptions))
    {
        $html = str_replace('||l|', '<', $html);
        $html = str_replace('|r||', '>', $html);
    }

    return $html;
}

// example:
print removeHtmlTagsWithExceptions(<<<EOF
<h1>Whatsup?!</h1>
Enjoy <span style="text-color:blue;">that</span> script<br />
<br />
EOF
, array('br'));
?>
corey [works at] effim [delete] .com 25-Apr-2009 03:52
I see a lot of people trying to put together phone regex's and struggling (hey,
no worries...they're complicated). Here's one that we use that's pretty nifty.
It's not perfect, but it should work for most non-idealists.

*** Note: Only matches U.S. phone numbers. ***

<?php

// all on one line...
$regex = '/^(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})(?:(?<=\(\d{3})\))? ?
(?:(?<=\d{3})[.-])?([2-9]\d{2})[. -]?(\d{4})(?: (?i:ext)\.? ?(\d{1,5}))?$/';

// or broken up
$regex = '/^(?:1(?:[. -])?)?(?:\((?=\d{3}\)))?([2-9]\d{2})'
        .'(?:(?<=\(\d{3})\))? ?(?:(?<=\d{3})[.-])?([2-9]\d{2})'
        .'[. -]?(\d{4})(?: (?i:ext)\.? ?(\d{1,5}))?$/';

?>

If you're wondering why all the non-capturing subpatterns (which look like this
"(?:", it's so that we can do this:

<?php

$formatted = preg_replace($regex, '($1) $2-$3 ext. $4', $phoneNumber);

// or, provided you use the $matches argument in preg_match

$formatted = "($matches[1]) $matches[2]-$matches[3]";
if ($matches[4]) $formatted .= " $matches[4]";

?>

*** Results: ***
520-555-5542 :: MATCH
520.555.5542 :: MATCH
5205555542 :: MATCH
520 555 5542 :: MATCH
520) 555-5542 :: FAIL
(520 555-5542 :: FAIL
(520)555-5542 :: MATCH
(520) 555-5542 :: MATCH
(520) 555 5542 :: MATCH
520-555.5542 :: MATCH
520 555-0555 :: MATCH
(520)5555542 :: MATCH
520.555-4523 :: MATCH
19991114444 :: FAIL
19995554444 :: MATCH
514 555 1231 :: MATCH
1 555 555 5555 :: MATCH
1.555.555.5555 :: MATCH
1-555-555-5555 :: MATCH
520-555-5542 ext.123 :: MATCH
520.555.5542 EXT 123 :: MATCH
5205555542 Ext. 7712 :: MATCH
520 555 5542 ext 5 :: MATCH
520) 555-5542 :: FAIL
(520 555-5542 :: FAIL
(520)555-5542 ext .4 :: FAIL
(512) 555-1234 ext. 123 :: MATCH
1(555)555-5555 :: MATCH
daevid at daevid dot com 06-Mar-2009 11:18
I just learned about named groups from a Python friend today and was curious if
PHP supported them, guess what -- it does!!!

http://www.regular-expressions.info/named.html

<?php
   preg_match("/(?P<foo>abc)(.*)(?P<bar>xyz)/",
                       'abcdefghijklmnopqrstuvwxyz',
                       $matches);
   print_r($matches);
?>

will produce:

Array
(
    [0] => abcdefghijklmnopqrstuvwxyz
    [foo] => abc
    [1] => abc
    [2] => defghijklmnopqrstuvw
    [bar] => xyz
    [3] => xyz
)

Note that you actually get the named group as well as the numerical key
value too, so if you do use them, and you're counting array elements, be
aware that your array might be bigger than you initially expect it to be.
wjaspers4 [at] gmail [dot] com 27-Feb-2009 11:16
I recently encountered a problem trying to capture multiple instances of named
subpatterns from filenames.
Therefore, I came up with this function.

The function allows you to pass through flags (in this version it applies to
all expressions tested), and generates an array of search results.

Enjoy!

<?php

/**
 * Allows multiple expressions to be tested on one string.
 * This will return a boolean, however you may want to alter this.
 *
 * @author William Jaspers, IV <wjaspers4@gmail.com>
 * @created 2009-02-27 17:00:00 +6:00:00 GMT
 * @access public
 *
 * @param array $patterns An array of expressions to be tested.
 * @param String $subject The data to test.
 * @param array $findings Optional argument to store our results.
 * @param mixed $flags Pass-thru argument to allow normal flags to apply to all
tested expressions.
 * @param array $errors A storage bin for errors
 *
 * @returns bool Whether or not errors occurred.
 */
function preg_match_multiple(
  array $patterns=array(),
  $subject=null,
  &$findings=array(),
  $flags=false,
  &$errors=array()
) {
  foreach( $patterns as $name => $pattern )
  {
    if( 1 <= preg_match_all( $pattern, $subject, $found, $flags ) )
    {
      $findings[$name] = $found;
    } else
    {
      if( PREG_NO_ERROR !== ( $code = preg_last_error() ))
      {
        $errors[$name] = $code;
      } else $findings[$name] = array();
    }
  }
  return (0===sizeof($errors));
}
?>
skds1433 at hotmail dot com 19-Feb-2009 02:41
here is a small tool for someone learning to use regular expressions. it's very
basic, and allows you to try different patterns and combinations. I made it to
help me, because I like to try different things, to get a good understanding of
how things work.

<?php
$search = isset($_POST['search'])?$_POST['search']:"//";
$match = isset($_POST['match'])?$_POST['match']:"<>";

echo '<form method="post">';
echo 's: <input style="width:400px;" name="search" type="text" value=
"'.$search.'" /><br />';
echo 'm:<input style="width:400px;" name="match" type="text" value="'.$match.'"
/><input type="submit" value="go" /></form><br />';
if (preg_match($search, $match)){echo "matches";}else{echo "no match";}
?>
Svoop 10-Feb-2009 01:42
I have written a short introduction and a colorful cheat sheet for Perl
Compatible Regular Expressions (PCRE):

http://www.bitcetera.com/en/techblog/2008/04/01/regex-in-a-nutshell/
akniep at rayo dot info 30-Jan-2009 11:05
Bugs of preg_match (PHP-version 5.2.5)

In most cases, the following example will show one of two PHP-bugs discovered
with preg_match depending on your PHP-version and configuration.

<?php

$text = "test=";
// creates a rather long text
for ($i = 0; $i++ < 100000;)
    $text .= "%AB";

// a typical URL_query validity-checker (the pattern's function does not matter
for this example)
$pattern    = '/^(?:[;\/?:@&=+$,]|(?:[^\W_]|[-_.!~*\()\[\] ])|(?:%[\da-fA-F]
{2}))*$/';
   
var_dump( preg_match( $pattern, $text ) );

?>

Possible bug (1):
=============
On one of our Linux-Servers the above example crashes PHP-execution with a C(?)
Segmentation Fault(!). This seems to be a known bug (see http://bugs.php.net/
bug.php?id=40909), but I don't know if it has been fixed, yet.
If you are looking for a work-around, the following code-snippet is what I
found helpful. It wraps the possibly crashing preg_match call by decreasing the
PCRE recursion limit in order to result in a Reg-Exp error instead of a
PHP-crash.

<?php
[...]

// decrease the PCRE recursion limit for the (possibly dangerous) preg_match
call
$former_recursion_limit = ini_set( "pcre.recursion_limit", 10000 );

// the wrapped preg_match call
$result = preg_match( $pattern, $text );

// reset the PCRE recursion limit to its original value
ini_set( "pcre.recursion_limit", $former_recursion_limit );

// if the reg-exp fails due to the decreased recursion limit we may not make
any statement, but PHP-execution continues
if ( PREG_RECURSION_LIMIT_ERROR === preg_last_error() )
{
    // react on the failed regular expression here
    $result = [...];
   
    // do logging or email-sending here
    [...]
} //if

?>

Possible bug (2):
=============
On one of our Windows-Servers the above example does not crash PHP, but
(directly) hits the recursion-limit. Here, the problem is that preg_match does
not return boolean(false) as expected by the description / manual of above.
In short, preg_match seems to return an int(0) instead of the expected boolean
(false) if the regular expression could not be executed due to the PCRE
recursion-limit. So, if preg_match results in int(0) you seem to have to check
preg_last_error() if maybe an error occurred.
Reno 06-Jan-2009 12:52
I modified your email validation pattern to solve these issues:

- the string MUST contain a TLD
- TLD can be 2 letters long as well as 3 or more (ie: .ca, .us, .uk, .fr, etc.)
- domain name (tld not included) must contain at least 2 characters
- domain name can contain "-"if it's not the first nor the last character.

<?php

$pattern = '/^([a-z0-9])(([-a-z0-9._])*([a-z0-9]))*\@([a-z0-9])' .
'(([a-z0-9-])*([a-z0-9]))+' . '(\.([a-z0-9])([-a-z0-9_-])?([a-z0-9])+)+$/i';

echo preg_match ($pattern, "email-address-to-validate@host.tld");

?>
shamun dot toha at gmail dot com 25-Dec-2008 10:58
The above patterns are tested but for this type of
emails those get fails. This is most valid pattern.
<?php
/**
 * Most corrected pattern for Email validation.
 *
 */

 // Valid email
echo preg_match('/^([a-z0-9])(([-a-z0-9._])*([a-z0-9]))*
\@([a-z0-9])*(\.([a-z0-9])([-a-z0-9_-])([a-z0-9])+)*$/i'
,'09_az..AZ@host.dOMain.cOM');

// Invalid emails             
echo preg_match('/^([a-z0-9])(([-a-z0-9._])*([a-z0-9]))*
\@([a-z0-9])*(\.([a-z0-9])([-a-z0-9_-])([a-z0-9])+)*$/i'
,'09_azAZ@ho...st...........domain.com');
                           
echo preg_match('/^([a-z0-9])(([-a-z0-9._])*([a-z0-9]))*
\@([a-z0-9])*(\.([a-z0-9])([-a-z0-9_-])([a-z0-9])+)*$/i'
,'09_azAZ@host.do@main.com');                     
?>
----------------------------
Output:
----------------------------
1 = valid
0 = invalid
0 = invalid
Alex Zinchenko 11-Dec-2008 02:15
If you need to check whether string is a serialized representation of variable
(sic!) you can use this :

<?php

$string = "a:0:{}";
if(preg_match("/(a|O|s|b)\x3a[0-9]*?
((\x3a((\x7b?(.+)\x7d)|(\x22(.+)\x22\x3b)))|(\x3b))/", $string))
{
echo "Serialized.";
}
else
{
echo "Not serialized.";
}

?>

But don't forget, string in serialized representation could be VERY big,
so match work can be slow, even with fast preg_* functions.
rbotzer at yahoo dot com 01-Dec-2008 07:36
@Ben:

Your pattern will match 1.1.255.299  (it matches the .29 at the end out of
subpattern .299)

This pattern eliminates such false positives:
/^((1?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(1?\d{1,2}|2[0-4]\d|25[0-5]){1}$/

Ronen
dbreen at gmail dot com 21-Nov-2008 05:35
When I was using the above example's syntax for named capturing groups, it
worked fine on my development server (PHP 5.2.6), but then gave me a regex
error on the live server (PHP 5.0.4).

By adding a 'P' in front of the parameter name, it seems to have resolved the
issue (this is in accordance w/ the PCRE implementation).

To use the above example, here's the original:
<?php
preg_match('/(?<name>\w+): (?<digit>\d+)/', $str, $matches);
?>

And here's the fix:
<?php
preg_match('/(?P<name>\w+): (?P<digit>\d+)/', $str, $matches);
?>
Ben 25-Oct-2008 06:47
Marc your pattern will match 259.259.259.259

I think you're actually after something like this:

/((1?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(1?\d{1,2}|2[0-4]\d|25[0-5])/
phil dot taylor at gmail dot com 23-Oct-2008 12:01
If you need to check for .com.br and .com.au and .uk and all the other crazy
domain endings i found the following expression works well if you want to
validate an email address. Its quite generous in what it will allow

<?php

        $email_address = "phil.taylor@a_domain.tv";

    if (preg_match("/^[^@]*@[^@]*\.[^@]*$/", $email_address)) {
        return "E-mail address";       
    }
       
?>
Jonathan Camenisch 16-Oct-2008 02:21
@ Marc

A little more work to do--your expression matched ...256... through ...259...,
and will not match 1- or 2-digit numbers that do not start with 1. It could
also be a little more concise, as in:

/^(1?\d{1,2}|2([0-4]\d|5[0-5]))(\.(1?\d{1,2}|2([0-4]\d|5[0-5]))){3}$/

Also, I put together a primitive regex tester at http://j-r.camenisch.net/regex
/ -- to help someone find more flaws to correct. ;-)
Marc 06-Oct-2008 08:16
@ Steve Todorov:
Your regex will not only match 999.999... but also 9999.9999... etc.

I'd rather take this regex:

/^(1\d{0,2}|2(\d|[0-5]\d)?)\.(1\d{0,2}|2(\d|[0-5]\d)?)
\.(1\d{0,2}|2(\d|[0-5]\d)?)\.(1\d{0,2}|2(\d|[0-5]\d)?)$/

this should represent any ip (v4). At least it did in a small test here ;)
Steve Todorov 03-Oct-2008 01:23
While I was reading the preg_match documentation I didn't found how to match an
IP..
Let's say you need to make a script that is working with ip/host and you want
to show the hostname - not the IP.

Well this is the way to go:

<?php
/* This is an ip that is "GET"/"POST" from somewhere */
$ip = $_POST['ipOrHost'];

if(preg_match('/(\d+).(\d+).(\d+).(\d+)/',$ip))
  $host = gethostbyaddr($ip);
else
  $host = gethostbyname($ip);

echo $host;
?>

This is a really simple script made for beginners !
If you'd like you could add restriction to the numbers.
The code above will accept all kind of numbers and we know that IP address
could be MAX 255.255.255.255 and the example accepts to 999.999.999.999.

Wish you luck!

Best wishes,
Steve
Ashus 12-Sep-2008 03:18
If you need to match specific wildcards in IP address, you can use this regexp:

<?php

$ip = '10.1.66.22';
$cmp = '10.1.??.*';

$cnt = preg_match('/^'
     .str_replace(
     array('\*','\?'),
     array('(.*?)','[0-9]'),
     preg_quote($cmp)).'$/',
     $ip);

echo $cnt;

?>

where '?' is exactly one digit and '*' is any number of any characters. $cmp
mask can be provided wild by user, $cnt equals (int) 1 on match or 0.
wjaspers4[at]gmail[dot]com 28-Aug-2008 02:55
I found this rather useful for testing mutliple strings when developing a regex
pattern.
<?php
/**
 * Runs preg_match on an array of strings and returns a result set.
 * @author wjaspers4[at]gmail[dot]com
 * @param String $expr The expression to match against
 * @param Array $batch The array of strings to test.
 * @return Array
 */
function preg_match_batch( $expr, $batch=array() )
{
// create a placeholder for our results
    $returnMe = array();

// for every string in our batch ...
    foreach( $batch as $str )
    {
// test it, and dump our findings into $found
        preg_match($expr, $str, $found);

// append our findings to the placeholder
        $returnMe[$str] = $found;
    }

    return $returnMe;
}
?>
Dino Korah AT webroot DOT com 08-Jul-2008 11:11
preg_match and preg_replace_callback doesnt match up in the structure of the
array that they fill-up for a match.
preg_match, as the example shows, supports named patterns, whereas
preg_replace_callback doesnt seem to support it at all. It seem to ignore any
named pattern matched.
Tim 08-Jul-2008 03:01
I made a mistake in my previous post. Mail addresses may of course only be
"exotic" in their local parts, not in the domain part. Therefore, an exotic
mail address would be "exotic#%$mail@domain.com".
Tim 07-Jul-2008 09:51
For those not so familiar with regex's, I post my algorithmic email validation
routine. It can more easily be changed for individual needs than regex's. My
function does NOT recognize exotic email addresses as allowed by RFC. (For
example, info@exotic%&$#mail.com is a legal email address but not allowed by my
function.)
-Tim

<?php
function email_is_valid($email) {
   if (substr_count($email, '@') != 1)
      return false;
   if ($email{0} == '@')
      return false;
   if (substr_count($email, '.') < 1)
      return false;
   if (strpos($email, '..') !== false)
      return false;
   $length = strlen($email);
   for ($i = 0; $i < $length; $i++) {
      $c = $email{$i};
      if ($c >= 'A' && $c <= 'Z')
         continue;
      if ($c >= 'a' && $c <= 'z')
         continue;
      if ($c >= '0' && $c <= '9')
         continue;
      if ($c == '@' || $c == '.' || $c == '_' || $c == '-')
         continue;
      return false;
   }
   $TLD = array (
         'COM',   'NET',
         'ORG',   'MIL',
         'EDU',   'GOV',
         'BIZ',   'NAME',
         'MOBI',  'INFO',
         'AERO',  'JOBS',
         'MUSEUM'
      );
   $tld = strtoupper(substr($email, strrpos($email, '.') + 1));
   if (strlen($tld) != 2 && !in_array($tld, $TLD))
      return false;
   return true;
}
?>
mailinglist dot php at hydras-world dot com 03-Jul-2008 09:30
The regexp below thinks that the e-mail address:

'me@de.com' is invalid, which it is not.

'/^([a-z0-9])(([-a-z0-9._])*([a-z0-9]))*\@
([a-z0-9])([-a-z0-9_])+([a-z0-9])*
(\.([a-z0-9])([-a-z0-9_-])([a-z0-9])+)*$/i'

I modified it and it seems to work for me in my limited tests of it.

YMMV.
brferreira at grad dot ufsc dot br 26-Jun-2008 02:48
Paperweight, this pattern worked fine for me (even for intranet adresses, like
"john@localhost"; and also for subdomain emails, like "john@foo.bar.com"):
'/([a-z0-9])([-a-z0-9._])+([a-z0-9])\@
([a-z0-9])([-a-z0-9_])+([a-z0-9])
(\.([a-z0-9])([-a-z0-9_-])([a-z0-9])+)*/i'

but, still, this won't replace the "activation link", that is the better way to
check if an e-mail is valid or not.
jonathan dot lydall at gmail dot removethispart dot com 26-May-2008 07:50
Because making a truly correct email validation function is harder than one may
think, consider using this one which comes with PHP through the filter_var
function (http://www.php.net/manual/en/function.filter-var.php):

<?php
$email = "someone@domain .local";

if(!filter_var($email, FILTER_VALIDATE_EMAIL)) {
    echo "E-mail is not valid";
} else {
    echo "E-mail is valid";
}
?>
Georg 04-Apr-2008 09:36
In addition to reiner-keller's comment about Umlaute using setlocale (LC_ALL,
'de_DE');

To enable 'de_DE' on my Debian 4 machine I first had to:
- uncomment 'de_DE' in file /etc/locale.gen and afterwards
- run locale-gen from the shell
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Jun 12 20:21:58 2011 UTC
Received cookie: COUNTRY=JPN%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 03 Jun 2011

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )

needle で haystack を検索します。 strict が設定されていない限りは型の比較は行い
ません。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
    haystack の中の needle の型も確認します。

返り値

配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 03 Jun 2011
 
add a note add a note User Contributed Notes in_array
cousinka at gmail dot com 15-May-2011 09:26
Here is a function which returns TRUE if a value exists in a multi array or in
a multi object or combination of these

Here ws fixed the error of object orient programming, I removed the "$this->"
before recall the function for recursion

<?php
function in_multiarray($elem, $array)
    {
        // if the $array is an array or is an object
         if( is_array( $array ) || is_object( $array ) )
         {
             // if $elem is in $array object
             if( is_object( $array ) )
             {
                 $temp_array = get_object_vars( $array );
                 if( in_array( $elem, $temp_array ) )
                     return TRUE;
             }
           
             // if $elem is in $array return true
             if( is_array( $array ) && in_array( $elem, $array ) )
                 return TRUE;
               
           
             // if $elem isn't in $array, then check foreach element
             foreach( $array as $array_element )
             {
                 // if $array_element is an array or is an object call the
in_multiarray function to this element
                 // if in_multiarray returns TRUE, than the element is in
array, else check next element
                 if( ( is_array( $array_element ) || is_object( $array_element
) ) && in_multiarray( $elem, $array_element ) )
                 {
                     return TRUE;
                     exit;
                 }
             }
         }
       
         // if isn't in array return FALSE
         return FALSE;
    }
?>
Sascha Luedi 28-Feb-2011 05:33
strange behaviour of in_array:

If you have an array like:
<?php
$a = array(0,1,2,3,4,5);
in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false
?>

If you have an array like (without 0):
<?php
$a = array(1,2,3,4,5);
in_array("bla", $a) returns false
in_array("6bla", $a) returns false
in_array("5bla", $a) returns true
?>

so better use strict arg!
Joris Meijer 15-Feb-2011 01:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 04:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 08:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 09:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 06:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
cousinka at gmail dot com 09-Aug-2010 12:44
Here is a function which returns TRUE if a value exists in a multi array or in
a multi object

<?php
function in_multiarray($elem, $array)
    {
        // if the $array is an array or is an object
         if( is_array( $array ) || is_object( $array ) )
         {
             // if $elem is in $array object
             if( is_object( $array ) )
             {
                 $temp_array = get_object_vars( $array );
                 if( in_array( $elem, $temp_array ) )
                     return TRUE;
             }
            
             // if $elem is in $array return true
             if( is_array( $array ) && in_array( $elem, $array ) )
                 return TRUE;
                
            
             // if $elem isn't in $array, then check foreach element
             foreach( $array as $array_element )
             {
                 // if $array_element is an array or is an object call the
in_multiarray function to this element
                 // if in_multiarray returns TRUE, than return is in array,
else check next element
                 if( ( is_array( $array_element ) || is_object( $array_element
) ) && $this->in_multiarray( $elem, $array_element ) )
                 {
                     return TRUE;
                     exit;
                 }
             }
         }
        
         // if isn't in array return FALSE
         return FALSE;
    }
?>
Willian Gustavo Veiga 16-Jun-2010 02:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 06:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 03:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 14-Feb-2010 12:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 10:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 11:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 07:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 11:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 07:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 11:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 05:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 07:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 10:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 01:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 12:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 09:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 03:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 09:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 30-Oct-2008 05:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 09:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 07:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 03:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 09:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 11:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 07:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 10:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 05:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 21-May-2007 03:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 06:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 12:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 09-Apr-2006 03:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 03:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 02:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
14-Jan-2006 05:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 09:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 02:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 12:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 08-Jan-2003 01:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 02:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 10-Aug-2002 02:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 10:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 03:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Jun 6 21:22:17 2011 UTC
Received cookie: COUNTRY=JPN%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 日付および時刻関連
  • Date/Time
  • 日付・時刻関数
  • checkdate
  • date_ add
  • date_ create_ from_ format
  • date_ create
  • date_ date_ set
  • date_ default_ timezone_ get
  • date_ default_ timezone_ set
  • date_ diff
  • date_ format
  • date_ get_ last_ errors
  • date_ interval_ create_ from_ date_ string
  • date_ interval_ format
  • date_ isodate_ set
  • date_ modify
  • date_ offset_ get
  • date_ parse_ from_ format
  • date_ parse
  • date_ sub
  • date_ sun_ info
  • date_ sunrise
  • date_ sunset
  • date_ time_ set
  • date_ timestamp_ get
  • date_ timestamp_ set
  • date_ timezone_ get
  • date_ timezone_ set
  • date
  • getdate
  • gettimeofday
  • gmdate
  • gmmktime
  • gmstrftime
  • idate
  • localtime
  • microtime
  • mktime
  • strftime
  • strptime
  • strtotime
  • time
  • timezone_ abbreviations_ list
  • timezone_ identifiers_ list
  • timezone_ location_ get
  • timezone_ name_ from_ abbr
  • timezone_ name_ get
  • timezone_ offset_ get
  • timezone_ open
  • timezone_ transitions_ get
  • timezone_ version_ get

getdate> <date_timezone_set
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 20 May 2011

view this page in

[English             ] Change language
date

(PHP 4, PHP 5)

date — ローカルの日付/時刻を書式化する

説明

string date ( string $format [, int $timestamp ] )

指定された引数 timestamp を、与えられたフォーマット文字列によりフォーマットし、
日付文字列を返します。タイムスタンプが与えられない場合は、現在の時刻が使われま
す。つまり timestamp はオプションでありそのデフォルト値は time() の値です。

パラメータ

format

    出力される日付文字列の書式。以下のオプションを参照ください。定義済みの定数
    も用意されており、たとえば DATE_RSS はフォーマット文字列 'D, d M Y H:i:s'
    と同じ意味になります。

            以下の文字が format パラメータ文字列として認識されます
    format                    説明                           戻り値の例
     文字
      日   ---                                        ---
    d      日。二桁の数字（先頭にゼロがつく場合も）   01 から 31
    D      曜日。3文字のテキスト形式。                Mon から Sun
    j      日。先頭にゼロをつけない。                 1 から 31
    l (小
    文字の 曜日。フルスペル形式。                     Sunday から Saturday
    'L')
    N      ISO-8601 形式の、曜日の数値表現 (PHP 5.1.0 1（月曜日）から 7（日曜日
           で追加)。                                  ）
                                                      st, nd, rd または th。 j
    S      英語形式の序数を表すサフィックス。2 文字。 と一緒に使用することがで
                                                      きる。
    w      曜日。数値。                               0 (日曜)から 6 (土曜)
    z      年間の通算日。数字。(ゼロから開始)         0 から 365
      週   ---                                        ---
    W      ISO-8601 月曜日に始まる年単位の週番号 (PHP 例: 42 (年の第 42 週目)
           4.1.0 で追加)
      月   ---                                        ---
    F      月。フルスペルの文字。                     January から December
    m      月。数字。先頭にゼロをつける。             01 から 12
    M      月。3 文字形式。                           Jan から Dec
    n      月。数字。先頭にゼロをつけない。           1 から 12
    t      指定した月の日数。                         28 から 31
      年   ---                                        ---
    L      閏年であるかどうか。                       1なら閏年。0なら閏年では
                                                      ない。
           ISO-8601 形式の年。これは Y ほぼ同じだが、
    o      ISO 週番号（W）が前年あるいは翌年に属する  例: 1999 あるいは 2003
           場合がある点で異なる（PHP 5.1.0 で追加）。
    Y      年。4 桁の数字。                           例: 1999または2003
    y      年。2 桁の数字。                           例: 99 または 03
      時   ---                                        ---
    a      午前または午後（小文字）                   am または pm
    A      午前または午後（大文字）                   AM または PM
    B      Swatch インターネット時間                  000 から 999
    g      時。12時間単位。先頭にゼロを付けない。     1 から 12
    G      時。24時間単位。先頭にゼロを付けない。     0 から 23
    h      時。数字。12 時間単位。                    01 から 12
    H      時。数字。24 時間単位。                    00 から 23
    i      分。先頭にゼロをつける。                   00 から 59
    s      秒。先頭にゼロをつける。                   00 から 59
    u      マイクロ秒 (PHP 5.2.2 で追加)。            例: 654321
    タイム ---                                        ---
    ゾーン
    e      タイムゾーン識別子（PHP 5.1.0 で追加）     例: UTC, GMT, Atlantic/
                                                      Azores
    I (大                                             1ならサマータイム中。 0な
    文字の サマータイム中か否か                       らそうではない。
    i)
    O      グリニッジ標準時 (GMT) との時差            例: +0200
           グリニッジ標準時 (GMT) との時差。時間と分
    P      をコロンで区切った形式 (PHP 5.1.3 で追加)  例: +02:00
           。
    T      タイムゾーンの略称                         例: EST, MDT ...
           タイムゾーンのオフセット秒数。 UTC の西側
    Z      のタイムゾーン用のオフセットは常に負です。 -43200 から 50400
           そして、 UTC の東側のオフセットは常に正で
           す。
    全ての
    日付/  ---                                        ---
     時刻
    c      ISO 8601 日付 (PHP 5 で追加されました)     2004-02-12T15:19:21+00:00
    r      » RFC 2822 フォーマットされた日付          例: Thu, 21 Dec 2000
                                                      16:01:07 +0200
    U      Unix Epoch (1970 年 1 月 1 日 0 時 0 分 0  time() も参照
           秒) からの秒数

    フォーマット文字列中の認識されない文字は、そのまま表示されます。 Z 形式は、
    gmdate() で使用した場合、常に 0 を返します。

        注意:

        この関数が受け付けるのは integer のタイムスタンプだけです。したがって、
        書式指定文字 u が有用となるのは date_create() で作成したタイムスタンプ
        を用いて date_format() を使用した場合のみです。

timestamp

    オプションのパラメータ timestamp は、 integer 型の Unix タイムスタンプです
    。 timestamp が指定されなかった場合のデフォルト値は、現在の時刻です。言い換
    えると、デフォルトは time() の返り値となります。

返り値

日付を表す文字列を返します。 timestamp に数字以外が使用された場合は FALSE が返
され、E_WARNING レベルのエラーが発生します。

エラー / 例外

すべての日付/時刻関数は、有効なタイムゾーンが設定されていない場合に E_NOTICE を
発生させます。また、システム設定のタイムゾーンあるいは環境変数 TZ を使用した場
合には E_STRICT あるいは E_WARNING を発生させます。 date_default_timezone_set()
も参照ください。

変更履歴

バー
ジョ                                    説明
 ン
      有効なタイムスタンプの範囲は、通常 Fri, 13 Dec 1901 20:45:54 GMT から
      Tue, 19 Jan 2038 03:14:07 GMT までです (これらの日付は、32 ビット符号付き
5.1.0 整数の最小および最大値に対応します)。しかし、PHP 5.1 より前のバージョンで
      は、システム環境によっては (例: Windows) この範囲が 1970 年 1 月 1 日から
      2038 年 1 月 19 日までに制限されます。
      タイムゾーンがおかしい場合に E_STRICT や E_NOTICE が発生するようになりま
5.1.0 した。

5.1.1 PHP 5.1.1 以降、format パラメータで標準的な日付/時刻フォーマットを指定す
      る際に有用な定数がいくつか追加されました。

例

例1 date() の例

<?php
// 使用するデフォルトのタイムゾーンを指定します。PHP 5.1 以降で使用可能です。
date_default_timezone_set('UTC');


// 結果は、たとえば Monday のようになります。
echo date("l");

// 結果は、たとえば Monday 8th of August 2005 03:12:46 PM のようになります。
echo date('l jS \of F Y h:i:s A');

// 結果は July 1, 2000 is on a Saturday となります。
echo "July 1, 2000 is on a " . date("l", mktime(0, 0, 0, 7, 1, 2000));

/* 書式指定パラメータに、定数を使用します。 */
// 結果は、たとえば Mon, 15 Aug 2005 15:12:46 UTC のようになります。
echo date(DATE_RFC822);

// 結果は、たとえば 2000-07-01T00:00:00+00:00 のようになります。
echo date(DATE_ATOM, mktime(0, 0, 0, 7, 1, 2000));
?>

前にバックスラッシュを付けてエスケープすることにより、フォーマット文字列として
認識される文字が展開されることを防止することができます。バックスラッシュ付きの
文字は既に特別なシーケンスであり、バックスラッシュもエスケープすることが必要と
なる可能性があります。

例2 date() の文字をエスケープする

<?php
// Wednesday the 15th のように出力
echo date("l \\t\h\e jS");
?>

date() と mktime() の両方を用いて、未来または過去の日付を知ることができます。

例3 date() と mktime() の例

<?php
$tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
$lastmonth = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
$nextyear  = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
?>


    注意:

    サマータイムがあるため、日付や月の秒数を単純にタイムスタンプに可減算するよ
    りもより信頼性があります。

date() フォーマットのいくつかの例を示します。現在の実装で特別な意味がある文字や
今後の PHP のバージョンで意味が割り付けられるであろう文字については、望ましくな
い結果を避けるためにエスケープする必要があることに注意してください。エスケープ
をする際には、改行文字 \n のような文字を回避するためにシングルクォートを使用し
てください。

例4 date() のフォーマット指定

<?php
// 今日は March 10th, 2001, 5:16:18 pm であり、
// またタイムゾーンは Mountain Standard Time (MST) であるものとします

$today = date("F j, Y, g:i a");                 // March 10, 2001, 5:16 pm
$today = date("m.d.y");                         // 03.10.01
$today = date("j, n, Y");                       // 10, 3, 2001
$today = date("Ymd");                           // 20010310
$today = date('h-i-s, j-m-y, it is w Day');     //
 05-16-18, 10-03-01, 1631 1618 6 Satpm01
$today = date('\i\t \i\s \t\h\e jS \d\a\y.');   // it is the 10th day.
$today = date("D M j G:i:s T Y");               // Sat Mar 10 17:16:18 MST 2001
$today = date('H:m:s \m \i\s\ \m\o\n\t\h');     // 17:03:18 m is month
$today = date("H:i:s");                         // 17:16:18
?>

他の言語で日付をフォーマットするためには、date() のかわりに setlocale() および
strftime() 関数を使用する必要があります。

注意

    注意:

    日付の文字列表現からタイムスタンプを生成するには、 strtotime() が使用できる
    でしょう。さらに、いくつかのデータベースは（MySQL の » UNIX_TIMESTAMP 関数
    のような）日付フォーマットからタイムスタンプへの変換関数を有しています。

ヒント

PHP 5.1 以降、$_SERVER['REQUEST_TIME'] によってリクエスト開始時のタイムスタンプ
が取得できるようになりました。

参考

  • gmdate() - GMT/UTC の日付/時刻を書式化する
  • idate() - ローカルな時刻/日付を整数として整形する
  • getdate() - 日付/時刻情報を取得する
  • getlastmod() - 最終更新時刻を取得する
  • mktime() - 日付を Unix のタイムスタンプとして取得する
  • strftime() - ロケールの設定に基づいてローカルな日付・時間をフォーマットする
  • time() - 現在の Unix タイムスタンプを返す
  • 定義済みの定数



getdate> <date_timezone_set
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 20 May 2011
 
add a note add a note User Contributed Notes date
milespickens+php at gmail dot com 20-May-2011 01:55
I needed to find out the Greater or Lesser dates for a few results sets.  I'm
not running 5.3 so I came up with this function to return either the greater or
lesser date.  The function is expecting dates in the MM/DD/YYYY format and the
3rd variable that is is looking for is either G or L so it will know whether to
return the lesser or greater date.

<?php
        function greater_lesser_date($date1,$date2,$gl = false){
            ///$gl is expecting either a G or an L to know whether you want
            ///greater or lesser returned
            $d1m = substr($date1,0,2);
            $d1d = substr($date1,3,2);
            $d1y = substr($date1,6,4);
            $d1 = mktime(0,0,0,$d1m,$d1d,$d1y);       
            $d2m = substr($date2,0,2);
            $d2d = substr($date2,3,2);
            $d2y = substr($date2,6,4);
            $d2 = mktime(0,0,0,$d2m,$d2d,$d2y);   
           
            if( strtoupper($gl) == 'L') {
                $date = ($d1>$d2?$d2:$d1);       
            } else {
                $date = ($d1<$d2?$d2:$d1);       
            }
            return date('m/d/Y', $date);
       
       
        }
?>
rakeshnsony at gmail dot com 29-Apr-2011 11:40
<?php
/*
* Date: 29 April 2011
* Rakesh Verma
* Financial year quarter calculation
*/

// Calculation for financial year quarter(s)
        $qtr1=array(04,05,06);
        $qtr2=array(07,08,09);
        $qtr3=array(10,11,12);
        $qtr4=array(01,02,03);
        $c_month=date('m');

// check for quarter number
        if(in_array($c_month,$qtr1)) {
            echo "Quarter I";
        } else if(in_array($c_month,$qtr2)) {
            echo "Quarter II";
        }  else if(in_array($c_month,$qtr3)) {
            echo "Quarter III";
        }  else if(in_array($c_month,$qtr4)) {
            echo "Quarter IV";
        }
?>
falkon303 at gmail dot com 25-Apr-2011 11:09
I thought this function was super simple to understand, and very useful.  I
hope some of you find it useful.

<?php

/// These are the variables you'd set to your needs
$month = "4";
$day = "25";
$year = "2011";

function date_finder($increment, $month, $day, $year)
{   
return date("F-d-Y", strtotime($increment, mktime(0, 0, 0, $month, $day,
$year)));
}

$last_month = date_finder("-1 month", $month, $day, $year);
echo $last_month;

?>
johnedwarddoyle at googlemail dot com 21-Apr-2011 09:23
I was looking for a way to return a list of months between now and a previous
month for use in a select field.  I came up with the following as I couldn't
find anything else.  There is probably an easier way to do it, but this way was
quite interesting.

<?php
$start=strtotime("01 January 2010");
$now=strtotime(date("d F Y"));

while($now>=$start)
{
    echo "<option value=\"$now\">" . date('F Y', $now) . "</option>\n";

    $now=$now-(60*60*24*(365/12));
}
?>
orlov0562 at gmail dot com 19-Apr-2011 10:58
A simple way to get the closest next Monday

<?php
    function getNextMondayDate()
    {
        $ret = date('Y-m-d');
        for ($i=1; $i<=7; $i++)
        {
            if (date('w',strtotime('+'.$i.' day'))==1)
            {
                $ret = date('Y-m-d',strtotime('+'.$i.' day'));
                break;
            }
        }
        return $ret;
    }
?>
manchesterboy at gmail dot com 14-Apr-2011 04:29
a simple method to work out future dates from a given one.

<?php
 /**
     * Handles a date in the format YYYYMMDD.
     *
     * Doesn't take a genius to modify it to use some other format.

     * We provide either of the following units:
     *   'h' -> 'hour', 'i' -> 'minute', 's' -> 'second',
     *   'm' -> 'month','d' -> 'day'   , 'y' -> 'year'
     */
    public static function getNextDate($date, $amount, $unit='d'){
        $dividers = array(' ', ':', '_', '-', '/', '|');
        $date = str_replace($dividers, '', $date);
        $unit = strtolower($unit);
        list($y, $m, $d)  = array(substr($date, 0, 4), substr($date, 4, 2),
substr($date, 6));
        list($h, $i, $s) = array(1, 0, 0);
        $x = substr($unit, 0, 1);
        $$x += $amount;
        return date('Ymd', mktime($h, $i, $s, $m, $d, $y));
    }
?>
scorp at scorp dot ca 31-Mar-2011 03:18
Spend lot of time to find correct function to calculate next invoice (billing)
date, but didn't find. Make new one.

Condition:
Source date: 2011-01-31
Recurring payments each month at same day or early if source day more than end
of month (31 is more than 28 Feb for example).

Here is results:

<?php

function get_next_invoice_date($source_date, $last_date)
{

    if (is_null($last_date) || ($last_date == ''))
    {
        return $source_date;
    }

    $srctime = strtotime($source_date);
    $lasttime = strtotime($last_date);
   
    $source_day = date("d", $srctime);
   
    $next_month = date("Y-m", strtotime( date("Ym", $lasttime) . '01 +1 month'
));
   
    $next_month_time = strtotime($next_month);

    $next_month_last_day = date("d", strtotime("-1 second", strtotime("+2
month", strtotime( date("Y", $lasttime) . date("m", $lasttime) . "01" ))));

    if ($source_day > $next_month_last_day)
    {
        $new_day = $next_month_last_day;
    }
    else
    {
        $new_day = $source_day;
    }
   
    $next_invoice_date = $next_month . '-' . $new_day;
   
    return $next_invoice_date;

} // get_next_invoice_date

// Test:
$first_invoice_date = '2011-01-31';
$last_invoice_date = '';
$list = array();

for ($i = 1; $i <= 24; $i++)
{
    $last_invoice_date = get_next_invoice_date($first_invoice_date,
$last_invoice_date);
    $list[] = $last_invoice_date;
}

print_r($list);

?>
ivan at rayvanbros dot com 29-Mar-2011 06:38
If you are simply trying to generate a date set in the future (for example, to
setup a conditional to check if a value was created a month ago). You can use
this.

<?php
print date('m-d-Y',strtotime('+1 month', '1301413787'));
// generates 04-29-2011
?>

This syntax was not noted in an easy to read place within the strtotime() or
date() function pages, so just adding as note.
iantresman 20-Mar-2011 11:49
Here's a quick way to display the season (Winter, Spring, Summer, Autumn) from
a date. Dec, Jan, Feb are Winter, etc.

<?php
$seasons = array("Winter","Spring","Summer","Autumn");
echo $seasons[(int)((date("n") %12)/3)];
?>

date("n") produces a numeric month 1..12
date("n") %12 (modulus 12) converts month 12 (Dec) to 0
Then we divide by 3 and convert to an integer to produce four groups, 0,1,2,3.
Then we display the nth array element.
marat dot abilov at gmail dot com 13-Mar-2011 05:35
Function for get date interval in Russian format

<?php
function getDateDiff($firstDate, $secondDate) {
  $firstTimeStamp = strtotime($firstDate);
  $secondTimeStamp = strtotime($secondDate);
   
  $base_day = date('j', $secondTimeStamp);
  $base_mon = date('n', $secondTimeStamp);
  $base_yr = date('Y', $secondTimeStamp);

  $current_day = date ('j', $firstTimeStamp);
  $current_mon = date ("n", $firstTimeStamp);
  $current_yr  = date ("Y", $firstTimeStamp);

  // and now .... calculate the difference! :-)

  // overflow is always caused by max days of $base_mon
  // so we need to know how many days $base_mon had
  $base_mon_max           = date ("t",mktime
(0,0,0,$base_mon,$base_day,$base_yr));

  // days left till the end of that month
  $base_day_diff          = $base_mon_max - $base_day;

  // month left till end of that year
  // substract one to handle overflow correctly
  $base_mon_diff          = 12 - $base_mon - 1;

  // start on jan 1st of the next year
  $start_day              = 1;
  $start_mon              = 1;
  $start_yr               = $base_yr + 1;

  // difference to that 1st of jan
  $day_diff       = ($current_day - $start_day) + 1;      // add today
  $mon_diff       = ($current_mon - $start_mon) + 1;      // add current month
  $yr_diff        = ($current_yr - $start_yr);

  // and add the rest of $base_yr
  $day_diff       = $day_diff + $base_day_diff;
  $mon_diff       = $mon_diff + $base_mon_diff;

  // handle overflow of days
  if ($day_diff >= $base_mon_max) {
    $day_diff = $day_diff - $base_mon_max;
    $mon_diff = $mon_diff + 1;
  }

  // handle overflow of years
  if ($mon_diff >= 12) {
    $mon_diff = $mon_diff - 12;
    $yr_diff = $yr_diff + 1;
  }

  $result = '';

  if ($yr_diff > 0) {
    if ($yr_diff >= 5 && $yr_diff <= 20) {
      $yearLabel = 'лет';
    }
    elseif ($yr_diff % 10 == 1) {
      $yearLabel = 'год';
    }
    elseif ($yr_diff % 10 <= 4) {
      $yearLabel = 'года';
    }
    else {
      $yearLabel = 'лет';
    }
   
    $result .= $yr_diff . ' ' . $yearLabel . ' ';
  }
 
  if ($mon_diff > 0) {
    if ($mon_diff == 1) {
      $monthLabel = 'месяц';
    }
    elseif ($mon_diff <= 4) {
      $monthLabel = 'месяца';
    }
    else {
      $monthLabel = 'месяцев';
    }
   
    $result .= $mon_diff . ' ' . $monthLabel . ' ';
  }
 
  if ($day_diff > 0) {
    if ($day_diff >= 5 && $day_diff <= 20) {
      $dayLabel = 'дней';
    }
    elseif ($day_diff % 10 == 1) {
      $dayLabel = 'день';
    }
    elseif ($day_diff % 10 <= 4) {
      $dayLabel = 'дня';
    }
    else {
      $dayLabel = 'дней';
    }
   
    $result .= $day_diff . ' ' . $dayLabel . ' ';
  }

  return array($yr_diff, $mon_diff, $day_diff);
}
?>
bsntech 01-Mar-2011 09:37
Found it useful to do some quick calculations on a date by doing something like
this.

$var = date('F d, Y', strtotime("-1 month -4 days"));

This quickly returns something like this:

February 28, 2011

But, it will return the date that was one month and four days from the current
date.  Easy to get calculations based on that especially in cases where there
are not 31 days in a month.

Brian S.
BsnTech Networks
http://www.bsntech.com
india dot yogi at gmail dot com 07-Feb-2011 10:58
<?php
// will echo all saturdays found between date range.
function getAllSaturdays($from_date, $to_date){
    // getting number of days between two date range.
    $number_of_days = count_days(strtotime($from_date),strtotime($to_date));
   
    for($i = 1; $i<=$number_of_days; $i++){
        $day = Date('l',mktime(0,0,0,date('m'),date('d')+$i,date('y')));
        if($day == 'Saturday'){
            echo Date('d-m-Y',mktime(0,0,0,date('m'),date('d')+$i,date('y'))),'
<br/>';
        }
    }
}
// Will return the number of days between the two dates passed in
function count_days( $a, $b )
{
    // First we need to break these dates into their constituent parts:
    $gd_a = getdate( $a );
    $gd_b = getdate( $b );
    // Now recreate these timestamps, based upon noon on each day
    // The specific time doesn't matter but it must be the same each day
    $a_new = mktime( 12, 0, 0, $gd_a['mon'], $gd_a['mday'], $gd_a['year'] );
    $b_new = mktime( 12, 0, 0, $gd_b['mon'], $gd_b['mday'], $gd_b['year'] );
    // Subtract these two numbers and divide by the number of seconds in a
    // day. Round the result since crossing over a daylight savings time
    // barrier will cause this time to be off by an hour or two.
    return round( abs( $a_new - $b_new ) / 86400 );
}
$from_date = Date('d-m-Y'); // todays date
$to_date = Date('d-m-Y',mktime(0,0,0,date('m'),date('d'),date('y')+1)); // date
with one year difference i.e. same date of next year

getAllSaturdays($from_date,$to_date);
?>
milbe 19-Dec-2010 01:50
convert an SQL datetime field to a unixtimestamp to set a new format in the
output

<?php $time_output=date("d-m-Y H:i",strtotime ($datetime_fromSQL)); ?>
khaine at herbok dot org 18-Dec-2010 10:59
A function to show $a days later.

<?php
function dateafter ( $a )
{
    $hours = $a * 24;
    $added = ($hours * 3600)+time();
    $days = date("l", $added);
    $month = date("F", $added);
    $day = date("j", $added);
    $year = date("Y", $added);
    $result = "$day $month $year - $days";
    return ($result);
}
echo dateafter("10");
//this will shows the data of ten days after.
// if today is 19 December 2010, Sunday, the page prints : 29 December 2010 -
Wednesday.
?>
ghotinet 13-Dec-2010 06:06
Most spreadsheet programs have a rather nice little built-in function called
NETWORKDAYS to calculate the number of business days (i.e. Monday-Friday,
excluding holidays) between any two given dates. I couldn't find a simple way
to do that in PHP, so I threw this together. It replicates the functionality of
OpenOffice's NETWORKDAYS function - you give it a start date, an end date, and
an array of any holidays you want skipped, and it'll tell you the number of
business days (inclusive of the start and end days!) between them.

I've tested it pretty strenuously but date arithmetic is complicated and
there's always the possibility I missed something, so please feel free to check
my math.

The function could certainly be made much more powerful, to allow you to set
different days to be ignored (e.g. "skip all Fridays and Saturdays but include
Sundays") or to set up dates that should always be skipped (e.g. "skip July 4th
in any year, skip the first Monday in September in any year"). But that's a
project for another time.

<?php

function networkdays($s, $e, $holidays = array()) {
    // If the start and end dates are given in the wrong order, flip them.   
    if ($s > $e)
        return networkdays($e, $s, $holidays);

    // Find the ISO-8601 day of the week for the two dates.
    $sd = date("N", $s);
    $ed = date("N", $e);

    // Find the number of weeks between the dates.
    $w = floor(($e - $s)/(86400*7));    # Divide the difference in the two
times by seven days to get the number of weeks.
    if ($ed >= $sd) { $w--; }        # If the end date falls on the same day of
the week or a later day of the week than the start date, subtract a week.

    // Calculate net working days.
    $nwd = max(6 - $sd, 0);    # If the start day is Saturday or Sunday, add
zero, otherewise add six minus the weekday number.
    $nwd += min($ed, 5);    # If the end day is Saturday or Sunday, add five,
otherwise add the weekday number.
    $nwd += $w * 5;        # Add five days for each week in between.

    // Iterate through the array of holidays. For each holiday between the
start and end dates that isn't a Saturday or a Sunday, remove one day.
    foreach ($holidays as $h) {
        $h = strtotime($h);
        if ($h > $s && $h < $e && date("N", $h) < 6)
            $nwd--;
    }

    return $nwd;
}

$start = strtotime("1 January 2010");
$end = strtotime("13 December 2010");

// Add as many holidays as desired.
$holidays = array();
$holidays[] = "4 July 2010";            // Falls on a Sunday; doesn't affect
count
$holidays[] = "6 September 2010";        // Falls on a Monday; reduces count by
one

echo networkdays($start, $end, $holidays);    // Returns 246

?>

Or, if you just want to know how many work days there are in any given year,
here's a quick function for that one:

<?php

function workdaysinyear($y) {
    $j1 = mktime(0,0,0,1,1,$y);
    if (date("L", $j1)) {
        if (date("N", $j1) == 6)
            return 260;
        elseif (date("N", $j1) == 5 or date("N", $j1) == 7)
            return 261;
        else
            return 262;
    }
    else {
        if (date("N", $j1) == 6 or date("N", $j1) == 7)
            return 260;
        else
            return 261;
    }
}

?>
iphraimov at gmail dot com 08-Dec-2010 04:15
Here is simple function to generate date selection, useful for admin panels
....
 

<?php
    public static function dateRange($fmt = 'j-n-Y', $sep='+') {       
        $current_time = time();
        $year = date('Y',$curr_time);
        $month = date('n',$curr_time);
        $day = date('j',$curr_time);
        $today = date($fmt, $curr_time);

        $r = array (
            'all'        => $sep.$sep.$sep,
            'today'        => $today.$sep.$today,
            'yesterday' => date($fmt, strtotime('-1 day',$curr_time)).$sep.date
($fmt, strtotime('-1 day',$curr_time)),           
            'last7days' => date($fmt, strtotime('-7
day',$curr_time)).$sep.$today,
            'thismonth' => date($fmt, mktime(0,0,0,$month, 1,
$year)).$sep.$today,
            'thisyear'    => date($fmt, mktime(0,0,0,1, 1, $year)
).$sep.$today,
        );

        return  $r;
    }
?>
neemias dot godinho at yahoo dot com dot br 01-Dec-2010 07:41
this function returns the current date of server subtracted from a number of
days passed as parameter

<?php

function subtractDaysFromToday($number_of_days)
{
    $today = mktime(0, 0, 0, date('m'), date('d'), date('Y'));

    $subtract = $today - (86400 * $number_of_days);

    //choice a date format here
    return date("Y-m-d", $subtract);
}

?>
vlado dot nikolchev at gmail dot com 30-Nov-2010 11:13
Simple and handy function that offsets a MySQL formatted date and returns the
new correctly formatted date

<?php
/**
 *
 * @param string $dt            // MySQL formatted date (like 2010-01-01)
 * @param int $year_offset        // like 2 or -2, or 5 or -5 ...
 * @param int $month_offset    // like 2 or -2, or 5 or -5 ...
 * @param in $day_offset        // like 2 or -2, or 5 or -5 ...    
 * @return string             // the new MySQL formatted date (like 2009-07-01)
 */

function MySQLDateOffset($dt,$year_offset='',$month_offset='',$day_offset='')
{
      return ($dt=='0000-00-00') ? '' :
date ("Y-m-d", mktime(0,0,0,substr($dt,5,2)+$month_offset,substr($dt,8,2)+
$day_offset,substr($dt,0,4)+$year_offset));
}
?>

Examples:

<?php
echo MySQLDateOffset('2010-06-01',2,5,15);

// will return 2012-11-16

echo MySQLDateOffset('2010-06-01',-6,5,38);

// will return 2004-12-09
?>
purefusion2 at yahoo dot com 20-Nov-2010 04:40
A really simple way to check if today's the last day of the month:

<?php
// If today is the last day of the month, do stuff
if(date('j') == date('t')) {
  // Do Stuff
}
?>
Gledison 09-Nov-2010 02:24
Simple function to return the last business day of a given month (but this does
not check holidays)
Função para retornar o último dia útil de um determinado mês (não verifica
feriados)

example:
<?php echo last_business_day(2010,02); //2010-02-26 ?>

<?php
function last_business_day($year,$month)
{
  $lbd = cal_days_in_month(CAL_GREGORIAN, $month, $year);
  $wday = date("N",strtotime("$year-$month-$lbd"));
  if ($wday == 7) $lbd -= 2;
  if ($wday == 6) $lbd--;
  $lbd = date("Y-m-d",strtotime("$year-$month-$lbd"));
  return $lbd;
}
?>
mijreed at yahoo dot com 17-Oct-2010 08:02
A function I use for 'date ago' used on message/comment boards

First, use this date('ymdHi') whenever entering the timestamp into your
database.

Here's the function to retrieve how long ago it was entered. $querydate is
timestamp retrieved from the database. Just call this function.

<?php
function returnDate($querydate){

$minusdate = date('ymdHi') - $querydate;

if($minusdate > 88697640 && $minusdate < 100000000){
    $minusdate = $minusdate - 88697640;
}

    switch ($minusdate) {

        case ($minusdate < 99):
                    if($minusdate == 1){
                        $date_string = '1 minute ago';
                    }
                    elseif($minusdate > 59){
                        $date_string =  ($minusdate - 40).' minutes ago';
                    }
                    elseif($minusdate > 1 && $minusdate < 59){
                        $date_string = $minusdate.' minutes ago';
                    }
        break;

        case ($minusdate > 99 && $minusdate < 2359):
                    $flr = floor($minusdate * .01);
                    if($flr == 1){
                        $date_string = '1 hour ago';
                    }
                    else{
                        $date_string =  $flr.' hours ago';
                    }
        break;
       
        case ($minusdate > 2359 && $minusdate < 310000):
                    $flr = floor($minusdate * .0001);
                    if($flr == 1){
                        $date_string = '1 day ago';
                    }
                    else{
                        $date_string =  $flr.' days ago';
                    }
        break;
       
        case ($minusdate > 310001 && $minusdate < 12320000):
                    $flr = floor($minusdate * .000001);
                    if($flr == 1){
                        $date_string = "1 month ago";
                    }
                    else{
                        $date_string =  $flr.' months ago';
                    }
        break;
       
        case ($minusdate > 100000000):
                $flr = floor($minusdate * .00000001);
                if($flr == 1){
                        $date_string = '1 year ago.';
                }
                else{
                        $date_string = $flr.' years ago';
                }
        }
       

   
    return $date_string;
}
?>
Richard dot buskirk at buskirkgraphics dot com 13-Oct-2010 03:30
Here is a very simple function to get quarterly dates.

<?php
function quarter($month='',$day='')
{
    if($month != ""){$tm = mktime(0,0,0,$month,$day-1,date('Y'));}else{$tm =
date('Y-m-d H:i:s');}
    $quarter = ceil(date("m", $tm)/3);
    for($i=1; $i<=4; $i++)
    {
    $checkd = mktime(0,0,0,date('m')-$i,date('d'),date('Y'));
        if(ceil(date("m", $checkd)/3) != "$quarter")
        {
        $meani = date("m", $checkd);
            for($a=1; $a<=31; $a++)
            {
            $forman = mktime(0,0,0,$meani,$a,date('Y'));
                if(ceil(date("m", $forman)/3) == "$quarter")
                {
                $first_day = date('d', $forman);
                break;
                }
            }
        break;
        }
    }
$current_quarter_dayone = date('Y-m-d H:i:s', mktime
(0,0,0,$meani,$first_day,date('Y')));
return $current_quarter_dayone;
}
?>

To get the current quarterly start date.
$quarter_start= quarter();
**************************************
2010-09-01 00:00:00

To find the start of a particular quarter based on a date, pass the month and
day.
$quarter_start = quarter('08','30');
$quarter_end =  date("Y-m-d H:i:s", strtotime($barter)-86400);
Results
**********************************
2010-06-01 00:00:00
2010-08-31 00:00:00
imran at t555 dot net 04-Oct-2010 02:02
Here is a simple function that gets all the dates between 2 given dates and
returns an array (including the dates specified):

<?php

function dates_inbetween($date1, $date2){

    $day = 60*60*24;

    $date1 = strtotime($date1);
    $date2 = strtotime($date2);

    $days_diff = round(($date2 - $date1)/$day); // Unix time difference devided
by 1 day to get total days in between

    $dates_array = array();

    $dates_array[] = date('Y-m-d',$date1);
   
    for($x = 1; $x < $days_diff; $x++){
        $dates_array[] = date('Y-m-d',($date1+($day*$x)));
    }

    $dates_array[] = date('Y-m-d',$date2);

    return $dates_array;
}

// Usage
$dates_array = dates_inbetween('2001-12-28', '2002-01-01');

?>
jlathrop at horizonit dot us 25-Sep-2010 10:42
Looking to output number of days left in the current year (and check if its a
leap year - here it is)

<?php
$today = getdate();             // Get the current day in an array
$yday = ($today['yday']);       // Extract just the number of days since
January 1st current year
$leap = date('L');              // check if its a leap year
$tdl = $leap + 365;             // 365 days in an average year plus 1 day if
its a leap year
$dliy = $tdl - $yday;             //Today number of days in the current year
minus number of days since January 1st current year
                               
                                // Build the output using the above variables
echo "As of today " . date('l F d, Y, ') . "We currently have " . $dliy . "
days left in the year.";
?>
root dot packet at gmail dot com 25-Sep-2010 03:49
If you are sick of writing lots of code to format dates correctly, then I hope
you find my code useful. It can def. use some work, I plan to improve it, but
it passed a boring night and gave good results. enjoy! God bless!

<?php
function datefmt($date, $inFormat, $outFormat) {
    /* A function to take a date in ($date) in specified inbound format (eg mm/
dd/yy for 12/08/10) and
     * return date in $outFormat (eg yyyymmdd for 20101208)
     *    datefmt (
     *                        string $date - String containing the literal date
that will be modified
     *                        string $inFormat - String containing the format
$date is in (eg. mm-dd-yyyy)
     *                        string $outFormat - String containing the desired
date output, format the same as date()
     *                    )
     *
     *
     *    ToDo:
     *        - Add some error checking and the sort?
     */

    $order = array('mon' => NULL, 'day' => NULL, 'year' => NULL);
   
    for ($i=0; $i<strlen($inFormat);$i++) {
        switch ($inFormat[$i]) {
            case "m":
                $order['mon'] .= substr($date, $i, 1);
                break;
            case "d":
                $order['day'] .= substr($date, $i, 1);
                break;
            case "y":
                $order['year'] .= substr($date, $i, 1);
                break;
        }
    }
   
    $unixtime = mktime(0, 0, 0, $order['mon'], $order['day'], $order['year']);
    $outDate = date($outFormat, $unixtime);

    if ($outDate == False) {
        return False;
    } else {
        return $outDate;
    }
}
?>
@PeteWilliams 08-Sep-2010 11:29
If you want to use HTML5's <date> tag, the following code will generate the
machine-readable value for the 'datetime' attribute:

<?php

/**
 * formats the date passed into format required by 'datetime' attribute of
<date> tag
 * if no intDate supplied, uses current date.
 * @param intDate integer optional
 * @return string
 **/
function getDateTimeValue( $intDate = null ) {

    $strFormat = 'Y-m-d\TH:i:s.uP';
    $strDate = $intDate ? date( $strFormat, $intDate ) : date( $strFormat ) ;
   
    return $strDate;
}

echo getDateTimeValue();

?>
Rithish 25-Aug-2010 07:31
If you want to get yesterday's date, then a single line of code is enough.

<?php
    $yesterday = date("Ymd", strtotime("-1 day"));
?>
peter_silvester at yahoo dot com 20-Aug-2010 11:40
Function to return whether or not a given date falls within British Summer
Time:

<?php
function is_bst($date) {

    $Year = date("Y", $date);
    $MarLast = $Year."-03-31";
    $OctLast = $Year."-10-31";

    //Find the last Sunday in March
    if (date("w", strtotime($MarLast)) == 0) //Sunday
    {
        $LastMarSun = strtotime($MarLast);
    } else {
        $LastMarSun = strtotime($MarLast." last sunday");
    }

    //Find the last Sunday in October
    if (date("w", strtotime($OctLast)) == 0) //Sunday
    {
        $LastOctSun = strtotime($OctLast);
    } else {
        $LastOctSun = strtotime($OctLast." last sunday");
    }

    $BSTStart = strtotime(date("Y-m-d", $LastMarSun)." 01:00:00");
    $BSTEnd = strtotime(date("Y-m-d", $LastOctSun)." 01:00:00");
   
    return (($date >= $BSTStart) && ($date <= $BSTEnd));
}
?>
gratcypalma at gmail dot com 19-Aug-2010 08:37
Just small addition for indonesian date time..

<?php
    function DateIndo($str) {
        if ($str =="") {
        // null
        return false;
        }
        else {
        setlocale (LC_TIME, 'id_ID');
        $date = strftime( "%d-%m-%Y %H:%I:%S", strtotime($str));
        return $date;
        }
    }

//this also works...

    $date = date('Y-m-d H:i:s');
    echo DateIndo($date);
?>
robert at extremedesigns dot de 24-Jan-2010 11:26
if you wish to output a local time, instead of using date_default_timezone_get
() and date_default_timezone_set() to manipulate your current timezone, simply
create a new DateTime object:

<?php
$timezone = new DateTimeZone( "Europe/London" );
$date = new DateTime();
$date->setTimezone( $timezone );
echo  $date->format( 'H:i:s A  /  D, M jS, Y' );
?>

-> 22:59:34 PM / Sun, Jan 24th, 2010

Irrespective of current server location, this will output the local time in
London, Europe.
No need to reset the server timezone back to the previous setting.
lb at bostontech dot net 30-Nov-2009 07:11
Not sure why this got ignored the first time, but this is an even simpler way
to check leap year:

<?php
function isLeapYear($year)
    { return ((($year%4==0) && ($year%100)) || $year%400==0) ? (true):(false);
}
?>
d basin 14-Oct-2009 10:35
convert an "excel" formatted date. Example:

<?php

$excel_date = 40179;

$normal_date = date("m/d/Y", strtotime("01/01/1900 + $excel_date days - 2
days"));

echo($normal_date);

?>

result: "01/01/2010"
Marcin Szychowski 08-Oct-2009 01:59
MS-DOS related filesystems, along with ZIP files, store date and time in four
bytes (time: 2 bytes, date: 2 bytes), as described in Wikipedia: http://
en.wikipedia.org/wiki/File_Allocation_Table#Directory_table

As it took me some time to not-find any functions to convert unix to ms-dos
timestamps, I decided to put these simple functions here, to save somebody
else's time:

<?php

// $ts - standard UNIX timestamp, as returned by mktime()
function packTimeDate($ts){
    // MS-DOS can store dates ranging from 1980-01-01 up to 2107-12-31
    $year=date('Y', $ts);
    if(($year<1980) || ($year>2107)) return "\x00\x00";
    else return packTime($ts).packDate($ts);
}

/** From Wikipedia:
 * 15-11 Hours (0-23)
 * 10-5  Minutes (0-59)
 *  4-0  Seconds/2 (0-29)
 **/
function packTime($ts){
    $sec=round((('1'.date('s', $ts))-100)/2);
    $min=('1'.date('i', $ts))-100;
    $hour=date('G', $ts);

    $dosTime=($hour<<11)+($min<<5)+$sec;

    $m[0]=$dosTime%256;
    $m[1]=(($dosTime-$m[0])/256)%256;
    return sprintf('%c%c', $m[0], $m[1]);
}

/** From Wikipedia:
 * 15-9 Year (0 = 1980, 127 = 2107)
 *  8-5 Month (1 = January, 12 = December)
 *  4-0 Day (1 - 31)
 **/
function packDate($ts){
    $year=date('Y', $ts)-1980;
    $day=date('j', $ts);
    $month=date('n', $ts);

    $dosDate=($year<<9)+($month<<5)+$day;

    $m[0]=$dosDate%256;
    $m[1]=(($dosDate-$m[0])/256)%256;
    return sprintf('%c%c', $m[0], $m[1]);
}

?>

As I didn't need to unpackTimeDate, I didn't bother to write reverse functions.
Feel free to provide yours if You care.

Have fun with PHP!
Edward Rudd 05-Oct-2009 07:13
To actually make use ot the "u" (microsecond) you need to use the DateTime
object and not the date() function.

For example

<?php
$t = microtime(true);
$micro = sprintf("%06d",($t - floor($t)) * 1000000);
$d = new DateTime( date('Y-m-d H:i:s.'.$micro,$t) );

print $d->format("Y-m-d H:i:s.u");
?>
critic at hot dot ee 30-Aug-2009 08:36
If u want to get weekday date -
30.08.2009 weekdays are 24-30
i want to get 5-th day of that week - 28.08.2009

<?PHP

function week_day($month, $year, $current_day, $week_day_number=1){

    $loop_start = $current_day-(date('N', mktime(0, 0, 0, $month, $current_day,
$year))-1);//lets start loop from first day of week
    $loop_end = $current_day+(7-(date('N', mktime(0, 0, 0, $month,
$current_day, $year))));//lets end loop to last day of week

    for($i = $loop_start; $i<=$loop_end; $i++){

        $day_of_the_week = date('N', mktime(0, 0, 0, $month, $i, $year));//
current day number 1-7 of week
        $loop_date = date('d', mktime(0, 0, 0, $month, $i, $year));//current
day in calendar
        if($day_of_the_week == $week_day_number){//if weekday number equals day
number then lets return date

            return $loop_date;
        }
    }
}

echo week_day(8, 2009, 30, 1);//returns (24).08.2009
echo '<br>';
echo week_day(8, 2009, 30, 5);//returns (28).08.2009

?>
czerpmac [at] gmail [dot] com 29-Aug-2009 06:02
Easy way to numeric representation of a quarter from passed as parametr date.

<?php
/**
 * quarterByDate()
 *
 * Return numeric representation of a quarter from passed free-form date.
 *
 * @param mixed $date
 * @return integer
 */
function quarterByDate($date)
{
    return (int)floor(date('m', strtotime($date)) / 3.1) + 1;
}
?>

Example:

<?php
$quarter = quarterByDate(date('Y-m-d'));    // current quarter. For 2009-08-29
will be "3"
$quarter = quarterByDate('2009-12');        // will be "4"
$quarter = quarterByDate('March');        // will be "1"
?>

I hope it will be useful.

Best regards,
S_P_E_C
kenaniah at gmail dot com 25-Aug-2009 11:31
This function behaves like date, but allows you to output the date in a given
time zone locale.

<?php
function date_at_timezone($format, $locale, $timestamp=null){
   
    if(is_null($timestamp)) $timestamp = time();
   
    //Prepare to calculate the time zone offset
    $current = time();
   
    //Switch to new time zone locale
    $tz = date_default_timezone_get();
    date_default_timezone_set($locale);
   
    //Calculate the offset
    $offset = time() - $current;
   
    //Get the date in the new locale
    $output = date($format, $timestamp - $offset);
   
    //Restore the previous time zone
    date_default_timezone_set($tz);
   
    return $output;
   
}

//Examples
$t = time();

print date("g:i A T", $t); //4:16 PM PDT
print date_at_timezone("g:i A T", "America/New_York", $t); //7:16 PM EDT
print date_at_timezone("g:i A T", "Pacific/Samoa", $t); //12:16 PM SST
print date("g:i A T", $t); //4:16 PM PDT
?>
Aura@The World 24-Aug-2009 10:04
Get names of days:

<?php
$tz = date_default_timezone_get();
date_default_timezone_set('UTC');
for($i=0; $i<7; $i++)
   echo date('D', mktime(12, 0, 0, 1, $i+4, 1970)) . '<br />';
date_default_timezone_set($tz);
?>

Change 'D' to 'l' (lowercase 'L') for full names. Change $i+4 to $i+5 if you
want Monday to be the first day of the week.
christophermmann at gmail dot com 19-Aug-2009 11:44
I couldn't find a function to do this properly. All functions I could find
would use the current month as an argument.

Anyway, this function will find the occurence of a particular weekday in a
particular month. For instance, the second wednesday in june 2009 would be
called by:

<?php
echo findFirstDayofWeek(6,2009, "Wednesday", 2);
?>

Where 6 is "June", 2009 is the year, Wednesday is the weekday we want and 2 is
the 2nd occurence.

<?php

function findFirstDayOfWeek($month, $year, $day, $offset){ // supply the month,
year, day and offset
    $FirstDay = mktime(0, 0, 0, $month, 1, $year); // Get the first day of the
month in question
    $DayName = date("l", $FirstDay); //set the name of the first day for the
while loop
    $CurrentStamp = $FirstDay; // set a disposable variable for use in the
while loop
    $Results = 0; //set the number of results (for use with the offset
argument)
    While($Results != $offset){ //while the number of results does not equal
the offset we are looking for
        $CurrentStamp = $CurrentStamp + 86400; // add a day
        if(date("l", $CurrentStamp) == $day){ // if the name of the weekday we
are currently looping at is the same name as the argument supplied, set the
date variable to that weekday and increment the results variable by 1
            $Date = date("Y-m-d", $CurrentStamp);
            $Results++;
        }
    }
    if(date("n", $CurrentStamp) != $month){ // this line checks whether or not
the date that the while loop has found is in the same month we are asking form
otherwise, there must be no "3rd friday in august"
    return "No weekday at this offset";
    } else {
    return $Date; //send back the date
    }
}

echo findFirstDayofWeek(9,2009, "Friday", 5); // returns a formatted date for
the first instance of a certain day in the argumental month
?>
crayonviolent at phpfreaks dot com 29-Jul-2009 12:25
Haven't really tested it performance-wise vs. other methods, but I thought I'd
post this anyways...

Here's a nifty way to exploit date()'s built-in ordinal suffix calculator to
append the proper ordinal suffix to an arbitrary number:

<?php
function addOrdinal($num=0){
  return $num.(((strlen($num)>1)&&(substr($num,-2,1)=='1'))?
         'th' : date("S",mktime(0,0,0,0,substr($num,-1),0)));
} // end function addOrdinal
?>
Just.Kevin 28-Jul-2009 04:52
In order to determine if a year is a leap year an earlier poster suggested
simply checking to see if the year is a multiple of four:

<?php
function is_leapyear_broken($year = 2004) {
return ($year%4)==0;
}
?>

While this will work for the majority of years it will not work on years that
are multiples of 100 but not multiples of 400 i.e.(2100).
A function not using php's date() function that will also account for this
small anomaly in leap years:

<?php
function is_leapyear_working($year = 2004) {
    if((($year%4==0) && ($year%100!=0)) || $year%400==0) {
        return true;
    }
    return false;
}
?>

While is_leapyear_working will not return true for the few non-leap years
divisible by four I couldn't tell you if this is more or less efficient than
using php's date() as an even earlier poster suggested:

<?php
function is_leapyear($year = 2004) {
$is_leap = date('L', strtotime("$year-1-1"));
return $is_leap;
}
?>
get.mango at gmail.com (Mangesh Sangapu) 28-Jul-2009 04:31
(Referring to the leap year posts)

Not every year that is divisible by 4 is a leap year. There are other
conditions. Here's the complete list:

   1. Every year that is evenly divisible by four is a leap year;
   2. of those years, if it can be evenly divided by 100, it is NOT a leap
year, unless
   3. the year is evenly divisible by 400. Then it is a leap year.

<?php
function is_leapyear($year) {

if ( ($year%4) != 0 )
{     return false;     }

if ( ($year%100)==0 )
{
     if ( ($year%400) == 0 )
     {     return true;     }
     else
     {     return false;    }
}
else
{     return true;     }

}
?>
seanj 24-Jul-2009 02:58
An earlier user posted a script to detect whether or not a given year is a leap
year:

<?php
function is_leapyear($year = 2004) {
$is_leap = date('L', strtotime("$year-1-1"));
return $is_leap;
}
?>

You're thinking too hard! Just check to see if the year is a multiple of four:

<?php
function is_leapyear($year = 2004) {
return ($year%4)==0;
}
?>

or better yet, just use that single line in your code.
ddd888 at mail333 dot com 08-Jul-2009 10:56
Slightly modified earlier written function for formatting date in russian.

<?php
/*
  these are the russian additional format characters
  д: full textual representation of the day of the week
  Д: full textual representation of the day of the week (first character is
uppercase),
  к: short textual representation of the day of the week,
  К: short textual representation of the day of the week (first character is
uppercase),
  м: full textual representation of a month
  М: full textual representation of a month (first character is uppercase),
  л: short textual representation of a month
  Л: short textual representation of a month (first character is uppercase),
*/
function date_ru($formatum, $timestamp=0) {
  if (($timestamp <= -1) || !is_numeric($timestamp)) return '';
  $q['д'] = array(-1 => 'w', 'воскресенье','понедельник', 'вторник', 'среда',
'четверг', 'пятница', 'суббота');
  $q['Д'] = array(-1 => 'w', 'Воскресенье','Понедельник', 'Вторник', 'Среда',
'Четверг', 'Пятница', 'Суббота');
  $q['к'] = array(-1 => 'w', 'вс','пн', 'вт', 'ср', 'чт', 'пт', 'сб');
  $q['К'] = array(-1 => 'w',  'Вс','Пн', 'Вт', 'Ср', 'Чт', 'Пт', 'Сб');
  $q['м'] = array(-1 => 'n', '', 'января', 'февраля', 'марта', 'апреля', 'мая',
'июня', 'июля', 'августа', 'сентября', 'октября', 'ноября', 'декабря');
  $q['М'] = array(-1 => 'n', '', 'Января', 'Февраля', 'Март', 'Апреля', 'Май',
'Июня', 'Июля', 'Август', 'Сентября', 'Октября', 'Ноября', 'Декабря');
  $q['л'] = array(-1 => 'n', '', 'янв', 'фев', 'мар', 'апр', 'май', 'июн',
'июл', 'авг', 'сен', 'окт', 'ноя', 'дек');
  $q['Л'] = array(-1 => 'n', '',  'Янв', 'Фев', 'Мар', 'Апр', 'Май', 'Июн',
'Июл', 'Авг', 'Сен', 'Окт', 'Ноя', 'Дек');

  if ($timestamp == 0)
    $timestamp = time();
  $temp = '';
  $i = 0;
  while ( (strpos($formatum, 'д', $i) !== FALSE) || (strpos($formatum, 'Д', $i)
!== FALSE) ||
          (strpos($formatum, 'к', $i) !== FALSE) || (strpos($formatum, 'К', $i)
!== FALSE) ||
          (strpos($formatum, 'м', $i) !== FALSE) || (strpos($formatum, 'М', $i)
!== FALSE) ||
          (strpos($formatum, 'л', $i) !== FALSE) || (strpos($formatum, 'Л', $i)
!== FALSE)) {
    $ch['д']=strpos($formatum, 'д', $i);
    $ch['Д']=strpos($formatum, 'Д', $i);
    $ch['к']=strpos($formatum, 'к', $i);
    $ch['К']=strpos($formatum, 'К', $i);
    $ch['м']=strpos($formatum, 'м', $i);
    $ch['М']=strpos($formatum, 'М', $i);
    $ch['л']=strpos($formatum, 'л', $i);
    $ch['Л']=strpos($formatum, 'Л', $i);
    foreach ($ch as $k=>$v)
      if ($v === FALSE)
        unset($ch[$k]);
    $a = min($ch);
    $temp .= date(substr($formatum, $i, $a-$i), $timestamp) . $q[$formatum[$a]]
[date($q[$formatum[$a]][-1], $timestamp)];
    $i = $a+1;
  }
  $temp .= date(substr($formatum, $i), $timestamp);
  return $temp;
}

echo 'Сегодня '.date_ru('Д, d л Y');
?>
martinjsteven at gmail dot com 11-Jun-2009 11:20
A quick note about DATE_RSS and daylight savings...

DATE_RSS will return the timezone that your server is in as part of the format,
which is normally correct when formatting a date for an RSS feed (RFC-822). 

However, if you're in the UK and it's the summer, your timezone is set as
"BST".  This is not actually a valid RFC-822 timezone, thereby rendering
DATE_RSS a bit useless for six months of the year. 

The valid extension would actually be GMT.  You should therefore adjust the
time back by 1 hour and substitute the BST for GMT.
rez dot eza at gmail dot com 27-May-2009 04:12
<?php
//for Indonesian get return today

echo returnDate(date("N"), "day") . ", " . date("j") . " " . returnDate(date
("n"), "month") . " " . date("Y");
   
    function returnDate($num, $tipe){
        $str;
        switch($tipe){
            case "month":
                $month_name = array("", "Januari", "Februari", "Maret",
"April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November",
"Desember");
                $str = $month_name[floor($num)];
                break;
            case "day":
                $day_name = array("", "Senin", "Selasa", "Rabu", "Kamis",
"Jumat", "Sabtu", "Minggu");
                $str = $day_name[floor($num)];
                break;
        }
       
        return $str;
    }
?>
sarmad dot saadi at gmail dot com 24-May-2009 08:52
// showing how to detect a leap year
<?php
function is_leapyear($year = 2004) {
$is_leap = date('L', strtotime("$year-1-1"));
return $is_leap;
}
?>

<?php
$answer = is_leapyear(2000);
if($answer) {

echo "2000 is a leap year<BR>";
} else {
echo "2000 is not a leap year.<BR>";
}
/* Use default for the parameter */
$yy="2003";
$answer = is_leapyear(2003);
if($answer) {

echo "$yy is a leap year.<BR>";
} else {
echo "$yy is not a leap year.<BR>";
}
?>
guido dot orellana at gmail dot com 29-Apr-2009 06:55
Function to obtain last week timestamps.

<?php

function LastWeek(){
    $week = date('W');
    $year = date('Y');
   
    $lastweek=$week-1;
   
    if ($lastweek==0){
        $week = 52;
        $year--;
    }
   
    $lastweek=sprintf("%02d", $lastweek);
    for ($i=1;$i<=7;$i++){
        $arrdays[] = strtotime("$year". "W$lastweek"."$i");
    }
    return $arrdays;
}

$days = LastWeek();
echo "last week between " . date('Ymd000000',$days[0]) . " and " .  date
('Ymd235959', $days[6]) . "\n";
?>
eduardo at digmotor dot com dot br 21-Apr-2009 08:34
Thanks to tcasparr at gmail dot com for the great idea (at least for me) ;)
I changed the code a little to replicate the functionality of
date_parse_from_format, once I don't have PHP 5.3.0 yet. This might be useful
for someone. Hope you don't mind changing your code tcasparr at gmail dot com.

<?php
/*******************************************************
 * Simple function to take in a date format and return array of associated
 * formats for each date element
 *
 * @return array
 * @param string $strFormat
 *
 * Example: Y/m/d g:i:s becomes
 * Array
 * (
 *     [year] => Y
 *     [month] => m
 *     [day] => d
 *     [hour] => g
 *     [minute] => i
 *     [second] => s
 * )
 *
 *  This function is needed for  PHP < 5.3.0
 ********************************************************/
function dateParseFromFormat($stFormat, $stData)
{
    $aDataRet = array();
    $aPieces = split('[:/.\ \-]', $stFormat);
    $aDatePart = split('[:/.\ \-]', $stData);
    foreach($aPieces as $key=>$chPiece)   
    {
        switch ($chPiece)
        {
            case 'd':
            case 'j':
                $aDataRet['day'] = $aDatePart[$key];
                break;
               
            case 'F':
            case 'M':
            case 'm':
            case 'n':
                $aDataRet['month'] = $aDatePart[$key];
                break;
               
            case 'o':
            case 'Y':
            case 'y':
                $aDataRet['year'] = $aDatePart[$key];
                break;
           
            case 'g':
            case 'G':
            case 'h':
            case 'H':
                $aDataRet['hour'] = $aDatePart[$key];
                break;   
               
            case 'i':
                $aDataRet['minute'] = $aDatePart[$key];
                break;
               
            case 's':
                $aDataRet['second'] = $aDatePart[$key];
                break;           
        }
       
    }
    return $aDataRet;
}
?>

Also, if you need to change the format of dates:

<?php
function changeDateFormat($stDate,$stFormatFrom,$stFormatTo)
{
  // When PHP 5.3.0 becomes available to me
  //$date = date_parse_from_format($stFormatFrom,$stDate);
  //For now I use the function above
  $date = dateParseFromFormat($stFormatFrom,$stDate);
  return date($stFormatTo,mktime($date['hour'],
                                    $date['minute'],
                                    $date['second'],
                                    $date['month'],
                                    $date['day'],
                                    $date['year']));
}

?>
Anonymous 14-Apr-2009 02:10
Heads up: The date('W') week number of the year is computed based on Monday,
and may not be exactly what you expect.  What is "Week 01" of year 2008?  This
is different from the date('z') day number of the year which is computed from
January 1 == day zero.

<?php // RAY_date_W.php
echo "<br/>" . date('W', strtotime("December 28, 2008")); // 52
echo "<br/>" . date('W', strtotime("December 29, 2008")); // 01
echo "<br/>" . date('W', strtotime("January   2, 2009")); // 01
if (!date('z', strtotime("January 1"))) echo "<br/>FALSE"; // FALSE
?>
tcasparr at gmail dot com 13-Apr-2009 05:21
<?php
/**
 * Simple function to take in a date format and return array of associated
formats for each date element
 * @return array
 * @param string $strFormat
 *
 * Example: Y/m/d g:i:s becomes
 * Array
 * (
 *     [year] => Y
 *     [month] => m
 *     [day] => d
 *     [hour] => g
 *     [minute] => i
 *     [second] => s
 * )
 */
function extract_date_format($strFormat)
{
    $format_array = array();
    $pieces = split('[:/.\ \-]', $strFormat);
    foreach($pieces as $piece)   
    {
        switch ($piece)
        {
            case 'd':
            case 'j':
                $format_array['day'] = $piece;
                break;
               
            case 'F':
            case 'M':
            case 'm':
            case 'n':
                $format_array['month'] = $piece;
                break;
               
            case 'o':
            case 'Y':
            case 'y':
                $format_array['year'] = $piece;
                break;
           
            case 'g':
            case 'G':
            case 'h':
            case 'H':
                $format_array['hour'] = $piece;
                break;   
               
            case 'i':
                $format_array['minute'] = $piece;
                break;
               
            case 's':
                $format_array['second'] = $piece;
                break;           
        }
       
    }
    return $format_array;
}
?>
pierre 24-Feb-2009 10:22
It seems to me that you can reliably get the week range of a certain numeric
week like so:

<?php

// 2009 is the year
// W01 is week number 1
// 1 is the day number (Monday), 7 would be Sunday
strtotime("2009W011");

// Example 1 (These return the days for Week 1 or 2009
Mon_timestamp = strtotime("2009W011");
Tue_timestamp = strtotime("2009W012");
Wed_timestamp = strtotime("2009W013");
Thu_timestamp = strtotime("2009W014");
Fri_timestamp = strtotime("2009W015");
Sat_timestamp = strtotime("2009W016");
Sun_timestamp = strtotime("2009W017");

// Example 2 (more dynamic)
// set the 7 dates of the week
for($i=1; $i<=7; $i++) {
    $dates[$i] = strtotime($year.'W'.$week.$i);
}

?>

Just remember you must pad the week number if it's under 10. 1 won't work, it
should be 01.
uramihsayibok, gmail, com 21-Jan-2009 02:47
In a refreshing change, this code snippet is *not* about calculating date
differences or anything like that.

<background-story>
I've always preferred date() over strftime() because of what each offers. For
example, date has an st/nd/rd for the day number (S) while strftime does not.
It also has an unpadded day number (j) that strftime doesn't (%e pads it with a
space).
On the other hand, each character in the format string for date() is translated
unless you prepend a backslash...

Recently I've wanted to create links with date information in it. Like with
"January 21st 2009" each part would be a link (January => /2009/01, 21st => /
2009/01/21, 2009 => /2009). date() makes this difficult because the HTML markup
gets the treatment as well as the Y/m/d characters. Escaping all of those is
ugly, not to mention annoying.
</background-story>

Here's my combination of date's placeholders and strftime's % markers. It's the
best solution I could think of (at 5am mind you) but I'm open to suggestions.
Lots of comments because the code is rather tricky.

<?php

/**
 * Combines placeholders from date() with the % marker from strftime()
 *
 * Like strftime, use %% for a literal %.
 *
 * @see date, strftime
 * @param string $format The format of the outputted date string
 * @param int $timestamp An integer Unix timestamp that defaults to the current
local time
 * @return A formatted date string
 */
function strfdate($format, $timestamp = null) {
    // look for tokens
    if (preg_match_all('/(?<!%)(%%)*%(.)/', $format, $matches)) {
        // passing false or null as the timestamp doesn't work so we
        // have to generate the default ourselves
        if ($timestamp === null) $timestamp = time();
        // run each token through date - all at once
        // combines them into a "a!b!c!d" list, runs it through date,
        // and splits it apart again
        $parts = explode("!", date(implode("!", $matches[2]), $timestamp));
        // (! should never show up in date() output so this works)

        // a second function is used sequentially:
        // the Xth time this function is called it will replace the Xth token
        // with the corresponding element in $parts (which is passed through as
$a)
        //
        // @param array $a Meant to be $parts as defined above
        // @return $a[X] where X is how many times this function has been
called
        $replace = create_function('$a', 'static $i = 0; return $a[$i++];');
       
        // find each token and get the replacement data from the $replace
function
        // note how the text being replaced isn't used anywhere: we already
know
        // what it is as it was used to create the $parts array
        $result = preg_replace('/(%*)%./e', '"$1" . $replace($parts)',
$format);
        // finally "unescape" any %s
        $result = str_replace("%%", "%", $result);
       
        return $result;
    }
    return $format;
}

?>
mrkrackham 18-Nov-2008 07:33
Just in case anyone else is looking for an easy-to-find equivalent for W3C
Datetime or date("c") in a previous version of php, here's one I did.  Hope it
helps someone.

<?php
function w3cDate($time=NULL)
{
    if (empty($time))
        $time = time();
    $offset = date("O",$time);
    return date("Y-m-d\TH:i:s",$time).substr($offset,0,3).":".substr
($offset,-2);
}
?>

Examples:
echo w3cDate(); //2008-11-18T12:15:18-07:00
echo w3cDate(mktime(2,3,4,5,6,2007)); //2007-05-06T02:03:04-06:00
sourabhshankar AT gmail DOT com 14-Nov-2008 08:43
<?php
/*
Find out start and end date of current week.
I am assuming that week starts at sunday and ends at saturday.
so a typical week will look like this: sun,mon,tue,wed,thu,fri,sat
if you find any bug/error, please email me.
*/

//sunday = start of week
$sat = 6; //saturday = end of week
$current_day=date('w');
$days_remaining_until_sat = $sat - $current_day;

$ts_start = strtotime("-$current_day days");
$ts_end = strtotime("+$days_remaining_until_sat days");

echo date('m-d-Y',$ts_start); //start date
echo '<br>';
echo date('m-d-Y',$ts_end); //end date

/*
OUTPUT (m-d-y):
11-09-2008
11-15-2008
*/
?>
Kenneth Kin Lum 02-Oct-2008 10:52
date(DATE_RFC822) and date(DATE_RFC2822) both work.  note that RFC 822 is
obsoleted by RFC 2822.  The main difference is the year being 08 in RFC 822 and
is 2008 in RFC 2822.

To use date(DATE_RFC2822), a short form is date('r').
Anonymous 12-Sep-2008 01:01
Correct format for a MySQL DATETIME column is
<?php $mysqltime = date ("Y-m-d H:i:s", $phptime); ?>
Cortexd 27-Aug-2008 06:47
a date function supporting the milliseconds format character

<?php
function udate($format, $utimestamp = null)
{
    if (is_null($utimestamp))
        $utimestamp = microtime(true);

    $timestamp = floor($utimestamp);
    $milliseconds = round(($utimestamp - $timestamp) * 1000000);

    return date(preg_replace('`(?<!\\\\)u`', $milliseconds, $format),
$timestamp);
}

echo udate('H:i:s.u'); // 19:40:56.78128
echo udate('H:i:s.u', 654532123.04546); // 16:28:43.45460
?>
pdubbb1 at gmail dot com 26-Aug-2008 12:32
here is the simpliest way to get the start and end date of the week;

<?php
$sdate=date('c',strtotime(date('Y')."W".date('W')."0"));

$edate=date('c',strtotime(date('Y')."W".date('W')."7"));
?>

the format is for the string in strtotime is;
 
     2008W200

this stands for year - 2008, constant never changes - W, week number of the
year - 20, day of the week - 0 for sunday, 1 for monday, etc....

so 2008W200 stands for the sunday of the 20th week of 2008. 

This will only work in php 5 or better
abazaba.ru 14-Aug-2008 10:53
All novices must be very carefull when working with timestamps as second
values.
From first glance it looks like date("Y-m-d H:i:s",TIMESTAMP) will return
correct date, based on "how much seconds gone from 1970".
But here is the feature, it'll be corrected time, according to LOCAL timezone.

So if you take a 25200 as timestamp (10 hours),
then on one server you'll get
1970-01-01 08:00:00
and on other server you'll get
1970-01-01 09:00:00
and so on.
Though you could expect 1970-01-01 10:00:00 in all cases, because if 25200
seconds gone from 1970-01-01 00:00:00 it obviously have to be 1970-01-01
10:00:00

I spend today 3 hours to correct scripts which were created with such error by
previous programmer, so please, guys, don't make me work like this and remember
about conversation to LOCAL time.
phprocks at aol dot com 06-Aug-2008 06:25
Try this for finding the difference in days between 2 dates/datetimes... take
note though, date_parse requires PHP version 5.1.3 or higher.

<?php
/**
 * Finds the difference in days between two calendar dates.
 *
 * @param Date $startDate
 * @param Date $endDate
 * @return Int
 */
function dateDiff($startDate, $endDate)
{
    // Parse dates for conversion
    $startArry = date_parse($startDate);
    $endArry = date_parse($endDate);

    // Convert dates to Julian Days
    $start_date = gregoriantojd($startArry["month"], $startArry["day"],
$startArry["year"]);
    $end_date = gregoriantojd($endArry["month"], $endArry["day"], $endArry
["year"]);

    // Return difference
    return round(($end_date - $start_date), 0);
}
?>
JonathanCross.com 25-Jul-2008 08:22
<?php
// A demonstration of the new DateTime class for those
// trying to use dates before 1970 or after 2038.
?>
<h2>PHP 2038 date bug demo (php version <?php echo phpversion(); ?>)</h1>
<div style='float:left;margin-right:3em;'>
<h3>OLD Buggy date()</h3>
<?php
  $format='F j, Y';
  for ( $i = 1900; $i < 2050; $i++) {
    $datep = "$i-01-01";
    ?>
    Trying: <?php echo $datep; ?> = <?php echo date($format, strtotime
($datep)); ?><br>
    <?php
  }
?></div>
<div style='float:left;'>
  <h3>NEW DateTime Class (v 5.2+)</h3><?php
  for ( $i = 1900; $i < 2050; $i++) {
    $datep = "$i-01-01";
    $date = new DateTime($datep);
    ?>
    Trying: <?php echo $datep; ?> = <?php echo $date->format($format); ?><br>
    <?php
  }
?></div>
Rob A. 10-Jul-2008 04:38
Quick function for returning the names of the next 7 days of the week starting
with today.

Returns an array that can be formatted to your liking.

<?php
/**
* Returns array of next 7 days starting with today
*
*/

function next_7_days() {
        // create array of day names. You can change these to whatever you want
    $days = array(
                            'Monday',
                            'Tuesday',
                            'Wednesday',
                            'Thursday',
                            'Friday',
                            'Saturday',
                            'Sunday');
    $today = date('N');
    for ($i=1;$i<$today;$i++) {

                // take the first element off the array
        $shift = array_shift($days);

                // ... and add it to the end of the array
        array_push($days,$shift);
    }
        // returns the sorted array
    return $days;
}
?>

It basically takes an array starting with Monday and shifts each day to the end
of the array until the first element in the array is today.
con_tobe at yahoo dot com 10-Jul-2008 03:46
Doing $w-- for months ending on Sat won't hurt (i.e. if you're counting weeks
as is the case below), but halocastle's code is perfectly fine as is and quite
fast.  He/she uses $w as a key for the $weeks array.  "Halo" does this BEFORE
$w++, so $w-- is superfluous as the loop has already ended.  For May, 2008, I
get 5 weeks as expected...

Array
(
    [1] => Array
        (
            [4] => 1
            [5] => 2
            [6] => 3
        )

    [2] => Array
        (
            [0] => 4
            [1] => 5

------------OMITTED-----------------

            [4] => 22
            [5] => 23
            [6] => 24
        )

    [5] => Array
        (
            [0] => 25
            [1] => 26
            [2] => 27
            [3] => 28
            [4] => 29
            [5] => 30
            [6] => 31
        )

)

I guess the one pit-fall of the code is if you overlap months, say the
following year, then $m-- makes perfect since...I think (haven't gotten that
far...yet).

I modified "Halo's" code to include months, too (this is from a snippet that
produces a three month calendar, hence the outer $months loop, omitted here).

<?php
$m = date('m');
$Y = date('Y');

// for() {months loop omitted
$var_date = mktime(0, 0, 0, $m, 1, $Y);
$month_name = date('F', $var_date);
$months[$month_name]['DAYS'] = date('t', $var_date);
$months[$month_name]['FIRST_DAY'] = date('w', $var_date);
//}
foreach($months as $month => $key) {
  $weeks = array();
  for($i = 1, $j = $key['FIRST_DAY'], $w = 1;$i <= $key['DAYS'];$i++) {
    $weeks[$w][$j] = $i;
    $j++;
    if($j == 7) {
      $j = 0;
      $w++;
    }
  }
  $months[$month]['WEEKS'] = $weeks;
}
?>

Enjoy!
halocastle at yahoo dot com 01-Jul-2008 04:20
Weeks and days for any month/year combo:

<?php
$m = 2; // February
$Y = 2008;

// constants used here for legibility, use $vars for dynamicon...
define('MONTH_DAYS',date('t', strtotime(date($m . '/01/' . $Y))));
// w:0->6 = Sun->Sat
define('MONTH_FIRST_DAY',date('w', strtotime(date($m . '/01/' . $Y))));

for($i = 1, $j = MONTH_FIRST_DAY, $w = 1;$i <= MONTH_DAYS;$i++) {
  $week[$w][$j] = $i;
  $j++;
  if($j == 7) {
    $j = 0;
    $w++;
  }
}
?>

print_r($week):
-----------------------
Array
(
    [1] => Array
        (
            [5] => 1
            [6] => 2
        )

    [2] => Array
        (
            [0] => 3
            [1] => 4
            [2] => 5
            [3] => 6
            [4] => 7
            [5] => 8
            [6] => 9
        )

    [3] => Array
        (
            [0] => 10
            [1] => 11
            [2] => 12
            [3] => 13
            [4] => 14
            [5] => 15
            [6] => 16
        )

    [4] => Array
        (
            [0] => 17
            [1] => 18
            [2] => 19
            [3] => 20
            [4] => 21
            [5] => 22
            [6] => 23
        )

    [5] => Array
        (
            [0] => 24
            [1] => 25
            [2] => 26
            [3] => 27
            [4] => 28
            [5] => 29
        )

)



[EDIT BY danbrown AT php DOT net: In a note dated 03-JUL-08, (dmagick AT gmail
DOT com) offered the following amendment to this note.]

[I've updated this] code as it doesn't take into account when a month finishes
on a Saturday (eg May 2008).

<?php
$start_date = mktime(0, 0, 0,$start_month, 1, $start_year);

$days_in_month = date('t', $start_date);
$month_first_day = date('w', $start_date);

$j = $month_first_day;
$num_weeks = 1;

for($i = 1; $i <= $days_in_month; $i++) {
    $j++;
    if($j == 7) {
        $j = 0;
        $num_weeks++;
    }
}

// if the last day of the month happens to be a Saturday,
// take one off the number of weeks
// because it was being added inside the for loop.
if ($j == 0) {
    $num_weeks--;
}
?>
Kavi Siegel 30-Jun-2008 02:18
I wrote the following function to show a series of drop down boxes to select
the date. When provided with a timestamp, that date is selected by default,
when none is provided, the current date is selected.

<?php
function chooseDate($timestamp = ""){
    if($timestamp == ""){
        $timestamp = time();
    }
    $months = array(null, 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',
'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
    unset($months[0]);
    print_r($months);
    $out = '<select name="month">';
    foreach($months as $key => $month){
        if($month == date('M', $timestamp)){
            $out .= '<option value="'.$key.'" selected="selected">'.$month.'</
option>';
        }else{
            $out .= '<option value="'.$key.'">'.$month.'</option>';
        }
    }
    $out .= '</select><select name="days">';
    for($i = 1; $i <= 32; $i++){
        if($i == date('j', $timestamp)){
            $out .= '<option value="'.$i.'" selected="selected">'.$i.'</option>
';
        }else{
            $out .= '<option value="'.$i.'">'.$i.'</option>';
        }
    }
    $out .= "</select><select name='year'>";
    for($i = date('Y'); $i >= 1970; $i--){
        if($i == date('Y', $timestamp)){
            $out .= '<option value="'.$i.'" selected="selected">'.$i.'</option>
';
        }else{
            $out .= '<option value="'.$i.'">'.$i.'</option>';
        }
    }
    $out .= "</select>";
    return $out;
}
?>

Usage is simple:

<?php
echo chooseDate(); // Will select current date
echo chooseDate(1149566400); // Will select June 6th, 2006
?>
kontakt at arthur minus schiwon dot de 18-Jun-2008 10:29
to get the week of the month simply use:
ceil( date("j") / 7 );
diego at diego dot eng dot br 09-Jun-2008 11:27
I made a small code to get the last working day of the month:

<?php

$times = strtotime(date("Y")."-".date("m")."-".date("t"));
for ($lastworkingday=0;$lastworkingday==0;$times-=86400)
   if (date("w",$times)!=0 && date("w",$times)!=6) $lastworkingday = date
("j",$times);
print $lastworkingday;

?>
phil dot taylor at enilsson dot com 26-May-2008 05:37
Found this helpful when converting unix dates for use with the ical file
format.

<?php
// Converts a unix timestamp to iCal format (UTC) - if no timezone is
// specified then it presumes the uStamp is already in UTC format.
// tzone must be in decimal such as 1hr 45mins would be 1.75, behind
// times should be represented as negative decimals 10hours behind
// would be -10
       
    function unixToiCal($uStamp = 0, $tzone = 0.0) {
   
        $uStampUTC = $uStamp + ($tzone * 3600);       
        $stamp  = date("Ymd\THis\Z", $uStampUTC);
       
        return $stamp;       

    }
?>
chubby at chicks dot com 23-May-2008 01:54
<?php
/**
     * Checks wether a date is between an interval
     *
     * Usage:
     *     
     * // check if today is older than 2008/12/31
     * var_dump(currentDayIsInInterval('2008/12/31'));
     * // check if today is younger than 2008/12/31
     * var_dump(currentDayIsInInterval(null,'2008/12/31'));
     * // check if today is between 2008/12/01 and 2008/12/31
     * var_dump(currentDayIsInInterval('2008/12/01','2008/12/31')); 
     *
     * Will trigger errors if date is in wrong format, notices if $begin >
$end    
     *         
     * @param string $begin Date string as YYYY/mm/dd
     * @param string $end Date string as YYYY/mm/dd
     * @return bool 
     */
function currentDayIsInInterval($begin = '',$end = '')
{
        $preg_exp = '"[0-9][0-9][0-9][0-9]/[0-9][0-9]/[0-9][0-9]"';
        $preg_error = 'Wrong parameter passed to function '.__FUNCTION__.' :
Invalide date
format. Please use YYYY/mm/dd.';
        $interval_error = 'First parameter in '.__FUNCTION__.' should be
smaller than
second.';
        if(empty($begin))
        {
                $begin = 0;
        }
        else
        {
                if(preg_match($preg_exp,$begin))
                {
                        $begin = (int)str_replace('/','',$begin);
                }
                else
                {
                        trigger_error($preg_error,E_USER_ERROR);
                }
        }
        if(empty($end))
        {
                $end = 99999999;
        }
        else
        {
                if(preg_match($preg_exp,$end))
                {
                        $end = (int)str_replace('/','',$end);
                }
                else
                {
                        trigger_error($preg_error,E_USER_ERROR);
                }
        }
        if($end < $begin)
        {
                trigger_error($interval_error,E_USER_WARNING);
        }
        $time = time();
        $now = (int)(date('Y',$time).date('m',$time).date('j',$time));
        if($now > $end or $now < $begin)
        {
                return false;
        }
        return true;
}
?>
wilson dot p dot pereira at itelefonica dot com dot br 22-May-2008 03:37
The function below extracts any date time value basead in the string format.
Returns an associative array with day,month,year,hour,min and seg separated.

<?php
function ExtractDateTimeByFormat($strDateTime, $strFormat="dmYHis")
{
 //extract the format
 $i = 0;
 $aFieldOrder = array();
 $nFields = 0;
        $strExtraction = "";
        while(isset($strFormat[$i]))
        {
            $strField = $strFormat[$i];
            switch ( strtolower($strField) )
            {
                case "D";
                case "d";
                    $aFieldOrder[$nFields] = "d";
                    $nFields++;
                    $strExtraction .= "%d";
                    if(isset($strFormat[$i+1]))
                    {
                        $strExtraction .= "%*1c";
                    }
                break;

                case "M";
                case "m";
                    $aFieldOrder[$nFields] = "m";
                    $nFields++;
                    $strExtraction .= "%d";
                    if(isset($strFormat[$i+1]))
                    {
                        $strExtraction .= "%*1c";
                    }
                break;

                case "y";
                case "Y";
                    $aFieldOrder[$nFields] = "y";
                    $nFields++;
                    $strExtraction .= "%4d";
                    if(isset($strFormat[$i+1]))
                    {
                        $strExtraction .= "%*1c";
                    }
                break;

                case "h";
                case "H";
                    $aFieldOrder[$nFields] = "h";
                    $nFields++;
                    $strExtraction .= "%d";
                    if(isset($strFormat[$i+1]))
                    {
                        $strExtraction .= "%*1c";
                    }
                break;

                case "i";
                    $aFieldOrder[$nFields] = "i";
                    $nFields++;
                    $strExtraction .= "%d";
                    if(isset($strFormat[$i+1]))
                    {
                        $strExtraction .= "%*1c";
                    }
                break;

                case "S";
                case "s";
                    $aFieldOrder[$nFields] = "s";
                    $nFields++;
                    $strExtraction .= "%d";
                    if(isset($strFormat[$i+1]))
                    {
                        $strExtraction .= "%*1c";
                    }
                break;
            }
            $i++;
        }

    $aValues = array();
    $aValues = sscanf($strDateTime,$strExtraction);

    return array_combine($aFieldOrder,$aValues);

}
?>
wulf dot kaiser at mpimf-heidelberg dot mpg dot de 21-May-2008 08:00
For output formatting of a SAMP based seminar announcement system, i had to
fetch the date of every friday of a given month in a given year. Here's what i
did:

<?php

$givenYear = $_GET["givenYear"]; # assume "2006"
$givenMonth = $_GET["givenMonth"]; # assume "12"

if ($givenMonth != '12') {

    $nextGivenMonth = "1";
    $nextGivenYear = $givenYear + 1;}

    else {

        $nextGivenMonth = $givenMonth + 1;
        $nextGivenYear = $givenYear;}
       
        # Get the first weekday of the month

        $firstDayOfMonth = date("d", mktime(0, 0, 0, $givenMonth, 1,
$givenYear));
        $firstWeekDayOfMonth = date("l", mktime(0, 0, 0, $givenMonth, 1,
$givenYear));
       
        # Count days to first Friday

        switch ($firstWeekDayOfMonth) {

            case 'Monday': $numOfDaysToFirstFriday = "4"; break;
            case 'Tuesday': $numOfDaysToFirstFriday = "3"; break;
            case 'Wednesday': $numOfDaysToFirstFriday = "2"; break;
            case 'Thursday': $numOfDaysToFirstFriday = "1"; break;
            case 'Friday': $numOfDaysToFirstFriday = "0"; break;
            case 'Saturday': $numOfDaysToFirstFriday = "6"; break;
            case 'Sunday': $numOfDaysToFirstFriday = "5"; break;}
           
            # Get first Friday's date

            $numOfDaysToFirstFriday = 1 + $numOfDaysToFirstFriday;
            $firstFridayOfMonthDate = date("d.m.Y", mktime(0, 0, 0,
$givenMonth, $numOfDaysToFirstFriday, $givenYear));
            $firstFridayOfMonthDay = date("d", mktime(0, 0, 0, $givenMonth,
$numOfDaysToFirstFriday, $givenYear));
           
            # Get the last weekday of the month

            $lastDayOfMonth =  date("d", strtotime("-1 day", strtotime(date
("$nextGivenYear-$nextGivenMonth-01"))));
            $lastWeekDayOfMonth =  date("l", strtotime("-1 day", strtotime(date
("$nextGivenYear-$nextGivenMonth-01"))));
           
            # Count days to last Friday

            switch ($lastWeekDayOfMonth) {

                case 'Monday': $numOfDaysToLastFriday = "3"; break;
                case 'Tuesday': $numOfDaysToLastFriday = "4"; break;
                case 'Wednesday': $numOfDaysToLastFriday = "5"; break;
                case 'Thursday': $numOfDaysToLastFriday = "6"; break;
                case 'Friday': $numOfDaysToLastFriday = "0"; break;
                case 'Saturday': $numOfDaysToLastFriday = "1"; break;
                case 'Sunday': $numOfDaysToLastFriday = "2"; break;}
               
                # Get last Friday's date

                $numOfDaysToLastFriday = $lastDayOfMonth -
$numOfDaysToLastFriday;
                $lastFridayOfMonthDate = date("d.m.Y", mktime(0, 0, 0,
$givenMonth, $numOfDaysToLastFriday, $givenYear));
                $lastFridayOfMonthDay = date("d", mktime(0, 0, 0, $givenMonth,
$numOfDaysToLastFriday, $givenYear));

                $divisor = $lastFridayOfMonthDay - $firstFridayOfMonthDay;
                $divisor = $divisor / 7;
                global $divisor;
               
                # Get the dates of all Fridays in the given Month (can be
either 4 or 5)

                if ($divisor=='3') {

                    $firstFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $numOfDaysToFirstFriday, $givenYear));
                    $secondFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $lastFridayOfMonthDay - 14, $givenYear));
                    $thirdFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $lastFridayOfMonthDay - 7, $givenYear));
                    $lastFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $numOfDaysToLastFriday, $givenYear));}

                    else if ($divisor=='4') {

                        $firstFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $numOfDaysToFirstFriday, $givenYear));
                        $secondFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $lastFridayOfMonthDay - 21, $givenYear));
                        $thirdFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $lastFridayOfMonthDay - 14, $givenYear));
                        $fourthFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $lastFridayOfMonthDay - 7, $givenYear));
                        $lastFridayOfMonth = date("Y/m/d", mktime(0, 0, 0,
$givenMonth, $numOfDaysToLastFriday, $givenYear));}

?>

Comments, suggestions and bugfixes are welcome ;-))
Raymond Irving 26-Mar-2008 03:44
I have written a little Date Class Library for PHP that supports timestamps for
dates greater than 2038 and lesser than 1970.

This library can be used in both PHP4 and PHP5.

Check it out here:

http://xwisdomhtml.com/dateclass.html
Anonymous 29-Feb-2008 09:05
## This will produce the first day of last month and the last day of last month
## 2008-01-01 2008-01-31
<?php
echo date("Y-m-01", strtotime("-1 month", strtotime(date("Y-m-d"))))." ".date
("Y-m-d", strtotime("-1 day", strtotime(date("Y-m-01")))) ?>
jc 31-Dec-2007 02:28
date("W") returns the iso8601 week number, while date("Y") returns the
_current_ year. This can lead to odd results. For example today (dec 31, 2007)
it returns 1 for the week and of course 2007 for the year. This is not wrong in
a strict sense because iso defines this week as the first of 2008 while we
still have 2007.

So, if you don't have another way to safely retrieve the year according to the
iso8061 week-date - strftime("%G") doesn't work on some systems -, you should
be careful when working with date("W").

For most cases strftime("%W") should be a safe replacement.

[edit: Much easier is to use "o" (lower case O) instead of "Y"]
ZZigc 28-Dec-2007 06:38
I wanted to get the number of weeks for particular year.

Example with date():
<?php

 $weeks_in_year = date("W", strtotime("12/31/2007"));

?>

It works for years smaller than current year, but returns '01' when year was
the same or bigger as current year.
Not sure if I missed something or maybe misused this function but I couldn't
get it to work even with different date representations.

So the workaround was using different function.

Example with strftime():
<?php

 $weeks_in_year = strftime("%W",strtotime("12/31/2007"));

?>

Now it works as a charm.

PHP v.4.4.7



[EDIT BY danbrown AT php DOT net: In a note dated 25-JAN-09, "Juan Paredes"
offered the following information as an amendment.]

Complementing the information [in this note], if you want to calculate the
number of weeks in a given year, according to the week definition by ISO 8601,
the following should be enough:

date('W', mktime(0,0,0,12,28,$year) );

(the last week on a give year always contains 28-Dec)
bikinyboy at example dot com 12-Dec-2007 03:44
This function is like date, but it "speaks" Hungarian (or an other language)

<?php
/*
  these are the hungarian additional format characters
  ö: full textual representation of the day of the week
  Ö: full textual representation of the day of the week (first character is
uppercase),
  ő: short textual representation of the day of the week,
  Ő: short textual representation of the day of the week (first character is
uppercase),
  ü: full textual representation of a month
  Ü: full textual representation of a month (first character is uppercase),
  ű: short textual representation of a month
  Ű: short textual representation of a month (first character is uppercase),
*/
function date_hu($formatum, $timestamp=0) {
  if (($timestamp <= -1) || !is_numeric($timestamp)) return '';
  $q['ö'] = array(-1 => 'w', 'vasárnap', 'hétfő', 'kedd', 'szerda',
'csütörtök', 'péntek', 'szombat');
  $q['Ö'] = array(-1 => 'w', 'Vasárnap', 'Hétfő', 'Kedd', 'Szerda',
'Csütörtök', 'Péntek', 'Szombat');
  $q['ő'] = array(-1 => 'w', 'va', 'hé', 'ke', 'sze', 'csü', 'pé', 'szo');
  $q['Ő'] = array(-1 => 'w', 'Va', 'Hé', 'Ke', 'Sze', 'Csü', 'Pé', 'Szo');
  $q['ü'] = array(-1 => 'n', '', 'január', 'február', 'március', 'április',
'május', 'június', 'július', 'augusztus', 'szeptember', 'október', 'november',
'december');
  $q['Ü'] = array(-1 => 'n', '', 'Január', 'Február', 'Március', 'Április',
'Május', 'Június', 'Július', 'Augusztus', 'Szeptember', 'Október', 'November',
'December');
  $q['ű'] = array(-1 => 'n', '', 'jan', 'febr', 'márc', 'ápr', 'máj', 'júni',
'júli', 'aug', 'szept', 'okt', 'nov', 'dec');
  $q['Ű'] = array(-1 => 'n', '', 'Jan', 'Febr', 'Márc', 'Ápr', 'Máj', 'Júni',
'Júli', 'Aug', 'Szept', 'Okt', 'Nov', 'Dec');

  if ($timestamp == 0)
    $timestamp = time();
  $temp = '';
  $i = 0;
  while ( (strpos($formatum, 'ö', $i) !== FALSE) || (strpos($formatum, 'Ö', $i)
!== FALSE) ||
          (strpos($formatum, 'ő', $i) !== FALSE) || (strpos($formatum, 'Ő', $i)
!== FALSE) ||
          (strpos($formatum, 'ü', $i) !== FALSE) || (strpos($formatum, 'Ü', $i)
!== FALSE) ||
          (strpos($formatum, 'ű', $i) !== FALSE) || (strpos($formatum, 'Ű', $i)
!== FALSE)) {
    $ch['ö']=strpos($formatum, 'ö', $i);
    $ch['Ö']=strpos($formatum, 'Ö', $i);
    $ch['ő']=strpos($formatum, 'ő', $i);
    $ch['Ő']=strpos($formatum, 'Ő', $i);
    $ch['ü']=strpos($formatum, 'ü', $i);
    $ch['Ü']=strpos($formatum, 'Ü', $i);
    $ch['ű']=strpos($formatum, 'ű', $i);
    $ch['Ű']=strpos($formatum, 'Ű', $i);
    foreach ($ch as $k=>$v)
      if ($v === FALSE)
        unset($ch[$k]);
    $a = min($ch);
    $temp .= date(substr($formatum, $i, $a-$i), $timestamp) . $q[$formatum[$a]]
[date($q[$formatum[$a]][-1], $timestamp)];
    $i = $a+1;
  }
  $temp .= date(substr($formatum, $i), $timestamp);
  return $temp;
}

echo date_hu('Y. ü j. (ö) G:i');
?>
redcore at gmail dot com 20-Nov-2007 01:24
For those of us who don't have 5.x installed (that puts a colon in the time
zone)...

<?php
$timezone = date("O"); // get timezone
$timezone_end = substr($timezone, -2, 2); // get last two numbers
$timezone= substr($timezone, 0, -2); // get first half
echo $timezone = $timezone . ":" . $timezone_end; // add colon
?>
snobord787 at msn dot com 30-Aug-2007 04:06
I modified (erenezgu at gmail.com)'s code so you don't have to redirect but is
stored in cookies.

<?php
if(empty($_COOKIE['offset'])) {
    // Javascript is our friend!
    $header='
<script type="text/javascript">
document.cookie="offset=" + ( (new Date()).getTimezoneOffset()*60)*(-1)-'.abs
(date('Z')).';
</script>
';
}

// Example Usage
echo date('d/m/Y H:i:s', time()+$_COOKIE['offset'] );
?>
pierrotevrard at gmail dot com 03-Jul-2007 11:11
For people who used "z" format...

The real range of "z" key format is 0 to 365 (instead of 366) and "z" represent
the number of spent days in the year.
See this examples :

<?php
define ("\n" , NL );
print '<pre>';

print '"z" format interpretation:' . NL . NL;

print 'On 0 timestamp: "' . date( 'z : Y-m-d' , 0 ) . '"' . NL;
//show: On 0 timestamp: "0 : 1970-01-01"

print 'On second unix day: "' . date( 'z : Y-m-d' , 3600*24 ) . '"' . NL;
//show: On second unix day: "1 : 1970-01-02"

print 'On the last day of a leap year: "' . date( 'z : Y-m-d' , mktime( 23, 59,
59, 12, 31, 2000 ) ) . '"' . NL;
//show: On the last day of a leap year: "365 : 2000-12-31"

print 'On the day after the last day of a leap year: "' . date( 'z : Y-m-d' ,
mktime( 23, 59, 59, 12, 31+1, 2000 ) ) . '"' . NL;
//show: On the day after the last day of a leap year: "0 : 2001-01-01"

print '</pre>';

?>
jcwebb at dicoe dot com 19-Jun-2007 05:48
i needed the day (eg. 27th) of the last Monday of a month
<?php
$d=cal_days_in_month(CAL_GREGORIAN,$m,$y); // days in month
if (date('l',mktime(0,0,0,$m,$d,$y))=='Monday'): $finalmonday=$d;
else: $finalmonday=date('d',strtotime('last Monday',mktime(0,0,0,$m,$d,$y))); /
/ day(date) of last monday of month, eg 26
endif;
?>
this also works...
<?php
$finalmonday=date('d',strtotime('last Monday',mktime(0,0,0,$m,($d+1),$y)));
//the '$d+1' is to catch the last day IS a monday (eg. dec 2007)
?>

Hope it helps, BigJonMX
boris at psyonline dot ru 14-Jun-2007 03:05
<?php

/**
 * Get date in RFC3339
 * For example used in XML/Atom
 *
 * @param integer $timestamp
 * @return string date in RFC3339
 * @author Boris Korobkov
 * @see http://tools.ietf.org/html/rfc3339
 */
function date3339($timestamp=0) {

    if (!$timestamp) {
        $timestamp = time();
    }
    $date = date('Y-m-d\TH:i:s', $timestamp);

    $matches = array();
    if (preg_match('/^([\-+])(\d{2})(\d{2})$/', date('O', $timestamp),
$matches)) {
        $date .= $matches[1].$matches[2].':'.$matches[3];
    } else {
        $date .= 'Z';
    }
    return $date;

}

?>
john at hotmail dot com 12-Jun-2007 01:55
Just a small addition to dmitriy. If the present date is in daylight saving
time, and the date in the past is not, the result will not be a whole number by
dividing by 86400. It will be something like 48.958333333. This is because the
day in which it changes from normal to daylight saving time is one hour longer
than normal (90000 secs) and the opposite is true when changing back (the day
would be one hour shorter - 82800 secs).

If you want a whole number of days use the following instead:

<?php
$digest_date = "2007-01-01";
$date_diff = round( abs(strtotime(date('y-m-d'))-strtotime($digest_date)) /
86400, 0 );
?>
pburlandoA_Remove_TgmailDOTcom 20-May-2007 07:30
This is an implementation for days360 formula used in financial calc software,
this asumes year with 360 days and months with 30 days.

I am looking for a reliable function to add days to a date using 30[E]/360
format.

<?php
/* Calc days between two dates using the financial calendar
30/360 (usa) or 30E/360(european)<-default
$fecha1 and $fecha2 in format: aaaa-mm-dd
return days  or -1 in case of error.

based on cost_analysis.py module Ver. 0.1 public domain, no license required by
Harm Kirchhoff
*/
function days_360($fecha1,$fecha2,$europeo=true) {
  //try switch dates: min to max
  if( $fecha1 > $fecha2 ) {
    $temf = $fecha1;
    $fecha1 = $fecha2;
    $fecha2 = $temf;
  }

  // get day month year...
  list($yy1, $mm1, $dd1) = explode('-', $fecha1);
  list($yy2, $mm2, $dd2) = explode('-', $fecha2);

  if( $dd1==31) { $dd1 = 30; }

  //checks according standars: 30E/360 or 30/360.
  if(!$europeo) {
    if( ($dd1==30) and ($dd2==31) ) {
      $dd2=30;
    } else {
      if( $dd2==31 ) {
        $dd2=30;
      }
    }
  }

  //check for invalid date
  if( ($dd1<1) or ($dd2<1) or ($dd1>30) or ($dd2>31) or
      ($mm1<1) or ($mm2<1) or ($mm1>12) or ($mm2>12) or
      ($yy1>$yy2) ) {
    return(-1);
  }
  if( ($yy1==$yy2) and ($mm1>$mm2) ) { return(-1); }
  if( ($yy1==$yy2) and ($mm1==$mm2) and ($dd1>$dd2) ) { return(-1); }
 
  //Calc
  $yy = $yy2-$yy1;
  $mm = $mm2-$mm1;
  $dd = $dd2-$dd1;
 
  return( ($yy*360)+($mm*30)+$dd );
}

// usage:
echo days_360("2007-01-13","2007-05-20");

?>
dmitrid at dont_show dot com 10-Mar-2007 08:14
Note for wips week limits function:
I had to run it over 52 weeks of the year and it was very slow so I've modified
to improve:

<?php
function week_limits($weekNumber, $year, $pattern)
{
    $pattern = ($pattern) ? $pattern : "m/d";
    $stday = 7 * $weekNumber - 7;
    $stDayNumber = date("w", mktime(0,0,0,1, 1+$stday, $year));
    $stUtime = mktime(0,0,0,1,1+$stday-$stDayNumber, $year);
    $start_time = date($pattern, $stUtime);
    $end_time = date($pattern, $stUtime+6*24*60*60);
   return array($start_time, $end_time);
}//week_limits()
?>
code at ashleyhunt dot co dot uk 17-Jan-2007 09:22
I wanted to shift an sql date forward by a set time period.
This is how I achived it... well handy.

<?php
function sql_date_shift($date, $shift)
{
return date("Y-m-d H:i:s" , strtotime($shift, strtotime($date)));
}

// example usage

$date = "2006-12-31 21:00";
$shift "+6 hours"; // could be days, weeks... see function strtotime() for
usage

echo sql_date_shift($date, $shift);

// will output: 2007-01-01 03:00:00
?>

Hope it is of use,
Ashley
28-Nov-2006 07:26
if you are sending your data to a database, you can just send time() and then
use strftime() to turn the time() string into readable time format.

check both time() and strftime() functions both offer more or less same
functionality as date(). date() can also be used with time() strings to display
time in the past.

more or less with something like:

date("j F, Y - g:ia", $data['date_quoted'])

where time() = $data['date_quoted'] and time() is the exact time date when the
string is executed. if this is done towards a database, the time() stored is
the actual server time upon script execution, no matter the time set in the
individual computer, this will record server time, unless a gmt is set in newer
versions of php (5 and up).
jack at jtr dot de 26-Nov-2006 09:30
<?php
/**
     * Converts a date string from one format to another (e.g. d/m/Y => Y-m-d,
d.m.Y => Y/d/m, ...)
     *
     * @param string $date_format1
     * @param string $date_format2
     * @param string $date_str
     * @return string
     */
    function dates_interconv( $date_format1, $date_format2, $date_str )
    {
        $base_struc     = split('[/.-]', $date_format1);
        $date_str_parts = split('[/.-]', $date_str );
       
        print_r( $base_struc ); echo "<br>";
        print_r( $date_str_parts ); echo "<br>";
       
        $date_elements = array();
       
        $p_keys = array_keys( $base_struc );
        foreach ( $p_keys as $p_key )
        {
            if ( !empty( $date_str_parts[$p_key] ))
            {
                $date_elements[$base_struc[$p_key]] = $date_str_parts[$p_key];
            }
            else
                return false;
        }
       
        $dummy_ts = mktime( 0,0,0, $date_elements['m'],$date_elements
['d'],$date_elements['Y']);
       
        return date( $date_format2, $dummy_ts );
    }
   
    $df_src = 'd/m/Y';
    $df_des = 'Y-m-d';
   
    $iso_date = dates_interconv( $df_src, $df_des, '25/12/2005');
?>

output:

2005-12-25
admin [at] xorath [dot] com 23-Oct-2006 03:13
If you want to use the date function to fix the RFC-822 format from an allready
made RSS 2.0 feed you can do it like this..

Maybe getting an external feed from another asp or php file that you cannot
change, but want to have the correct dateformat for anyway.

<?php
    header('Content-type: application/rss+xml; charset=iso-8859-1');
    $xmlfile = simplexml_load_file($_GET[feedURL]);
    for ( $i = 0; $i < count($xmlfile->channel->item); $i++ )
        $xmlfile->channel->item[$i]->pubDate = date("r",strtotime((string)
($xmlfile->channel->item[$i]->pubDate)));
    echo $xmlfile->asXML();
?>

Then simply link to your rss feed like this
filename.php?feedURL=http://www.example.com/rss.asp
filename.php?feedURL=http://www.example.com/rss.xml
filename.php?feedURL=http://www.example.com/rss.php

or what you want. Hope anyone can take advantage of this, I wrote it to help a
friend which had date stored in database only by yyyy-mm-dd hh:mm:ss and
retrieved via asp from another script.

Article at http://www.xorath.com/articles/?article=2
emailfire at gmail dot com 07-Oct-2006 04:39
To use the date("N") function in PHP < 5.1.0 use:

<?php
function dayofweek() {
$days = array("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun");
return array_search(date("D"), $days) + 1;
}
?>
Michiel 28-Sep-2006 03:08
If you want to count quarters between dates you can use the following:

<?php
function countQuarters($begindate, $enddate)
        {
            if (!isset($begindate) || empty($begindate) || !isset($enddate) ||
empty($enddate))
                return -1;
           
            $countyears = date("Y", strtotime($enddate)) - date("Y", strtotime
($begindate));
            $quarters = 0;
           
            if (date("Y", strtotime($enddate)) == date("Y", strtotime
($begindate)))
            {
                if (date("m", strtotime($enddate)) != date("m", strtotime
($begindate)))
                {
                    if (date("m", strtotime($enddate)) > date("m", strtotime
($begindate)))
                    {
                        $difference = date("m", strtotime($enddate)) - date
("m", strtotime($begindate));
                       
                        $quarters += ceil((int) $difference / 4);
                    }
                    else
                    {
                        return -1;
                    }
                }
            }
            else
            {
                $quarters = (int) $countyears * 4;
                if (date("m", strtotime($enddate)) != date("m", strtotime
($begindate)))
                {
                    if (date("m", strtotime($enddate)) > date("m", strtotime
($begindate)))
                    {
                        $difference = date("m", strtotime($enddate)) - date
("m", strtotime($begindate));
                       
                        $quarters += ceil((int) $difference / 4);
                    }
                    else
                    {
                        $afterbegin = 12 - (int) date("m", strtotime
($begindate));
                        $untilend = date("m", strtotime($enddate));
                       
                        $quarters = ($quarters - 4) + ceil(($afterbegin +
$untilend) / 4);
                    }
                }
            }
           
            return $quarters;
        }
?>
russ at isitaboat dot co dot uk 06-Sep-2006 02:18
Easy way of switching between mysql and "normal" dates (english, not
american)...

<?php
function flipdate($dt, $seperator_in = '-', $seperator_out = '-')
{
return implode($seperator_out, array_reverse(explode($seperator_in, $dt)));
}
?>
michiel at mb-it dot nl 04-Sep-2006 12:59
***EDITOR NOTE: Referred to note has been removed.

The calculation function of the number of days between 2 dates by zzzdobr at
gmai dot com could be done much easier:

<?php
function getdays($day1,$day2)
{
  return round((strtotime($day2)-strtotime($day1))/(24*60*60),0);
}

$begin = date("Y/m/d"); // we set today as an example
$end = "2006/11/27";
getdays($begin,$end);
?>

So now all of you know how many days you have left to buy me a birthday present
;)
James 29-Aug-2006 12:45
Slightly modified the code provided by "martin at smttuk dot com" so that you
can give the function a date and/or time that you choose;

<?php
    function zonedate($layout, $countryzone, $daylightsaving, $time)
    {
        if($daylightsaving) {
            $daylight_saving = date('I');
            if($daylight_saving){ $zone=3600*($countryzone+1); }
        }
        else {
            if( $countryzone>>0){ $zone=3600*$countryzone; }
            else { $zone=0; }
        }
        if(!$time) { $time = time(); }
        $date = gmdate($layout, $time + $zone);
        return $date;
    }
?>

For example if I wanted the time and date of my birthday in New Zealand time;

<?php
    echo zonedate('Y-m-d H:i:s',-12,true,mktime(18,46,0,9,7,1986));
?>
Corey 28-Aug-2006 12:55
It's pretty simple, but in case anybody else is having problems getting the
exact time they need because of DST (ex: on a Windows box in an area without
DST), you can fix it all in a single line. Example...

<?php
    echo "The time is " . date((date("I") ? intval(date("g")) - 1 : date("g"))
. ":i m/d/y") . ".";
?>
martin at smttuk dot com 25-Aug-2006 11:30
<?php
/* Country Zone : Time Zone Name
-12 : Dateline Standard
-11 : Samoa Standard Time
-10 : Hawaiian Standard Time
-8 : Pacific Standard Time
-7 : Mexican Standard Time, Mountain Standard Time
-6 : Central Standard Time, Mexico Standard Time
-5 : Eastern Standard Time Eastern Time, SA Pacific Standard Time
-4 : Atlantic Standard Time, SA Western Standard Time, Pacific SA Standard Time
-3.5 : Newfoundland Standard Time
-3 : SA Eastern Standard Time, E. South America Standard Time
-2 : Mid:Atlantic Standard Time
-1 : Azores Standard Time, Cape Verde Standard Time
0 : Universal Coordinated Time, Greenwich Mean Time
1 : Romance Standard Time, Central Africa Standard Time, Central European
Standard Time
2 : Egypt Standard Time, South Africa Standard Time, E. Europe Standard Time,
FLE Standard Time, GTB Standard Time
3 : Arab Standard Time, E. Africa Standard Time, Arabic Standard Time, Russian
Standard Time
3.5 : Iran Standard Time
4 : Arabian Standard Time, Caucasus Standard Time, Afghanistan Standard Time
5 : West Asia Standard Time
5.5 : India Standard Time
5.75 : Nepal Standard Time
6 : Central Asia Standard Time
6.5 : Myanmar Standard Time
7 : SE Asia Standard Time, North Asia Standard Time
8 : China Standard Time, W. Australia Standard Time, Singapore Standard Time,
Taipei Standard Time, North Asia East Standard Time
9 : Tokyo Standard Time, Korea Standard Time, Yakutsk Standard Time
9.5 : AUS Central Standard Time, Cen. Australia Standard Time
10 : AUS Eastern Standard Time, E. Australia Standard Time
West Pacific Standard Time, Tasmania Standard Time, Vladivostok Standard Time
11 : Central Pacific Standard Time
12 : Fiji Standard Time, New Zealand Standard Time
13 : Tonga Standard Time

* How to use

   $layout =
       Same function as date : http://uk2.php.net/manual/en/function.date.php
   $countryzone =
       Country Zone from Above Eg: 0 ,for Greenwich Mean Time
   $daylightsaving =
       Set true if the Country has daylight saving it will auto change.
       Set false if the Country dose not have daylight saving or wish to it
Disabled.
       (About Daylight Saving go here : http://www.timeanddate.com/time/
aboutdst.html)
   Call Function:
       zonedate($layout, $countryzone, $daylightsaving);
  
   E.g.
   If GMT = Friday 25th of August 2006 10:23:17 AM
   When Function called:
   // West Asia Standard Time (Country Uses daylight saving)
       echo zonedate("l dS \of F Y h:i:s A", 5, true);
   //Output : Friday 25th of August 2006 03:23:17 PM
*/

function zonedate($layout, $countryzone, $daylightsaving)
{
if ($daylightsaving){
$daylight_saving = date('I');
if ($daylight_saving){$zone=3600*($countryzone+1);}
}
else {
   if ($countryzone>>0){$zone=3600*$countryzone;}
       else {$zone=0;}
}
$date=gmdate($layout, time() + $zone);
return $date;
}
?>
mwwaygoo AT hotmail DOT com 09-Aug-2006 03:11
Number of weeks per month

I was trying to do a monthly calendar and required the number of weeks in a
month, running from Monday to Sunday. Since PHP doesn't have this in its date()
parameters I had to calculate it in a roundabout manner. By subtracting the
week numbers away from each other we SHOULD get the number of weeks, since it
is calculated on Mondays.

<?php
$year = date("Y", $date);
$month = date("m", $date);
if( (isset($_GET['year'])) && (intval($_GET['year']) > 1582) )
{
    $year = intval($_GET['year']);
}
if( (isset($_GET['month'])) && (intval($_GET['month']) >= 1) && (intval($_GET
['month']) <= 12) )
{
    $month = intval($_GET['month']);
}
$date = mktime(1, 1, 1, $month, date("d"), $year);

$first_day_of_month = strtotime("-" . (date("d", $date)-1) . " days", $date);
$last_day_of_month = strtotime("+" . (date("t", $first_day_of_month)-1) . "
days", $first_day_of_month);

$first_week_no = date("W", $first_day_of_month);
$last_week_no = date("W", $last_day_of_month);

if($last_week_no < $first_week_no) $last_week_no=date("W", strtotime("-1
week",$last_week_no)) + 1;
$weeks_of_month = $last_week_no - $first_week_no + 1;

?>

The check for weeknumber of the end of the month being smaller than the
beginning of the month, is because of December. Where Monday 31st is actually
in the first week of the following year.
The +1 adjustment is for the number of weeks, inclusive. ie if January had five
week, then 5-1=4, so we need to add an extra one to make it 5.
Phil Sylvia 08-Aug-2006 04:05
I simplified this after I figured it out based upon Mel Boyce's simple
solution. Thanks Mel!

 I wanted to calculate dates based upon any given date and not just todays date
which is what the hundreds of examples on the Internet use.  I created a simple
function and then just call the function with 2 parameters.. the date (string)
to test and the number of days that I want to add (positive #) or subtract
(negative #) My intended use is to retrieve dates from the database and perform
the date calculations.  This makes it simple.  I hope this helps someone as
frustrated as I was. Enjoy.

******************************************
<?php

// date calculation function
// adds or subtracts a date based upon the input.
// $this_date is a string format of a valid date ie.. "2006/08/11"
// $num_days is the number of days that you would like to add (positive number)
or subtract (negative number)

function fnc_date_calc($this_date,$num_days){
   
    $my_time = strtotime ($this_date); //converts date string to UNIX timestamp
    $timestamp = $my_time + ($num_days * 86400); //calculates # of days passed
($num_days) * # seconds in a day (86400)
     $return_date = date("Y/m/d",$timestamp);  //puts the UNIX timestamp back
into string format
   
    return $return_date;//exit function and return string
}//end of function

$date_to_test = "2006/08/11";
$days_to_add = 7;

$past_date = fnc_date_calc($date_to_test,(($days_to_add)*-1));
$future_date = fnc_date_calc($date_to_test,$days_to_add);

echo "Test Date is:   ".$date_to_test;
echo "<br>";
echo "Number of days to Calculate is: ".$days_to_add;
echo "<br>";
echo "Past date is:   ".$past_date;
echo "<br>";
echo "Future date is: ".$future_date;
?>
27-Jul-2006 09:03
For PHP 4 users wanting a format similar to ISO 8601 (http://www.w3.org/TR/
NOTE-datetime):

    echo date('Y-m-d H:i:s.0T');

returns something like 2006-07-27 16:54:14.0EDT
Alvin Delagon 20-Jul-2006 09:48
Here's a function that takes the year as input and returns an array or dates
that are mondays. (It can be used for generating weekly reports just like I
did)

<?php
function getMondays($year) {
  $newyear = $year;
  $week = 0;
  $day = 0;
  $mo = 1;
  $mondays = array();
  $i = 1;
  while ($week != 1) {
    $day++;
    $week = date("w", mktime(0, 0, 0, $mo,$day, $year));
  }
  array_push($mondays,date("r", mktime(0, 0, 0, $mo,$day, $year)));
  while ($newyear == $year) {
    $test =  strtotime(date("r", mktime(0, 0, 0, $mo,$day, $year)) . "+" . $i .
" week");
    $i++;
    if ($year == date("Y",$test)) {
      array_push($mondays,date("r", $test));
    }
    $newyear = date("Y",$test);
  }
  return $mondays;
}
?>
dulare at gmail dot com 13-Jul-2006 03:36
If You are looking for some simple date calculations:

<?php

function days_between($fyear, $fmonth, $fday, $tyear, $tmonth, $tday)
{
  return abs((mktime ( 0, 0, 0, $fmonth, $fday, $fyear) - mktime ( 0, 0, 0,
$tmonth, $tday, $tyear))/(60*60*24));
}

function day_before($fyear, $fmonth, $fday)
{
  return date ("Y-m-d", mktime (0,0,0,$fmonth,$fday-1,$fyear));
}

function next_day($fyear, $fmonth, $fday)
{
  return date ("Y-m-d", mktime (0,0,0,$fmonth,$fday+1,$fyear));
}

function weekday($fyear, $fmonth, $fday) //0 is monday
{
  return (((mktime ( 0, 0, 0, $fmonth, $fday, $fyear) - mktime ( 0, 0, 0, 7,
17, 2006))/(60*60*24))+700000) % 7;
}

function prior_monday($fyear, $fmonth, $fday)
{
  return date ("Y-m-d", mktime (0,0,0,$fmonth,$fday-weekday($fyear, $fmonth,
$fday),$fyear)); 
}

?>
Elena S. 05-May-2006 09:36
If you do not PHP5 yet but want a week day to be in ISO format: 1 (for Monday)
through 7 (for Sunday), you can use this:

<?php

//GET WEEK DAY 0 FOR SUNDAY, 6 FOR SATURDAY
$x = date( "w" );

$corrected_week_day = 7 - ( (7-$x) % (7+$x) );

?>
mel dot boyce at gmail dot com 06-Apr-2006 11:46
I've been flicking through the comments looking for some succinct date code and
have noticed an alarming number of questions and over-burdened examples related
to date mathematics. One of the most useful skills you can utilize when
performing date math is taking full advantage of the UNIX timestamp. The UNIX
timestamp was built for this kind of work.

An example of this relates to a comment made by james at
bandit-dot-co-dot-en-zed. James was looking for a way to calculate the number
of days which have passed since a certain date. Rather than using mktime() and
a loop, James can subtract the current timestamp from the timestamp of the date
in question and divide that by the number of seconds in a day:
<?php
$days = floor((time() - strtotime("01-Jan-2006"))/86400);
print("$days days have passed.\n");
?>

Another usage could find itself in a class submitted by Kyle M Hall which aids
in the creation of timestamps from the recent past for use with MySQL. Rather
than the looping and fine tuning of a date, Kyle can use the raw UNIX
timestamps (this is untested code):
<?php
$ago = 14; // days
$timestamp = time() - ($ago * 86400);
?>

Hopefully these two examples of "UNIX-style" timestamp usage will help those
finding date mathematics more elusive than it should be.
SpikeDaCruz 09-Mar-2006 07:12
The following function will return the date (on the Gregorian calendar) for
Orthodox Easter (Pascha).  Note that incorrect results will be returned for
years less than 1601 or greater than 2399. This is because the Julian calendar
(from which the Easter date is calculated) deviates from the Gregorian by one
day for each century-year that is NOT a leap-year, i.e. the century is
divisible by 4 but not by 10.  (In the old Julian reckoning, EVERY 4th year was
a leap-year.)

This algorithm was first proposed by the mathematician/physicist Gauss.  Its
complexity derives from the fact that the calculation is based on a combination
of solar and lunar calendars.

<?php
function getOrthodoxEaster($date){
  /*
   Takes any Gregorian date and returns the Gregorian
   date of Orthodox Easter for that year.
  */
  $year = date("Y", $date);
  $r1 = $year % 19;
  $r2 = $year % 4;
  $r3 = $year % 7;
  $ra = 19 * $r1 + 16;
  $r4 = $ra % 30;
  $rb = 2 * $r2 + 4 * $r3 + 6 * $r4;
  $r5 = $rb % 7;
  $rc = $r4 + $r5;
  //Orthodox Easter for this year will fall $rc days after April 3
  return strtotime("3 April $year + $rc days");
}
?>
erwinmoller at xs4all dot nl 05-Jan-2006 12:34
If you need dates that are prior to 1970 (or 1901 for php5.1), have a look at
calendar at this very site:
http://www.php.net/calendar
Nick H 24-Nov-2005 02:21
Users in GMT may find some information on British Summer Time useful.
Personally I was confused that date() for a timestamp of 0 was returning 1am,
until I found about the all-year BST from 1968-71.

http://wwp.greenwichmeantime.com/info/bst2.htm
vernon at vernonkesner dot com 02-Nov-2005 05:37
The examples for getting a date in the past or future is simply not the best
way to do it.  Especially if you are doing it dynamically.

I find the best way to get a date in the past or future is like this:

<?php
//get timestamp for past/future date I want
$pf_time = strtotime("-3 days");
//format the date using the timestamp generated
$pf_date = date("Y-m-d", $pf_time);
?>
martin at kurahaupo dot gen dot nz 30-Oct-2005 09:52
There is a mistaken impression that the maximum difference between UTC and
localtime is +/- 12 hours. Right now it is summer here in New Zealand, and
we're 13 hours ahead of UTC, and further east in the Chatham Islands it's
UTC+13:45.

Consequently, the range for the "Z" conversion is at least -43200 ... +49500
mbirth at webwriters dot de 25-Oct-2005 10:24
Using 'B' for the Swatch Internet Time (i.Beats) can still lead to
misunderstandings, because the date given in the resulting string is the local
date, not the date of the BMT (Biel Mean Time / UTC+0100) after which the
i.Beats are counted. So while @000 is equal all around the globe, October 25th
2005 @000 in Chicago is really October 24th, 06:00 PM local time.

Otherwise, if you use date('d M Y @B') in Chicago on that day at 6pm, it will
return "24 Oct 2005 @000" although it should be "25 Oct 2005 @000".

So it may happen that you miss an appointment by 24 hours (or 1000 Beats ;-)

Here's a way to return the Internet Time with correct date:

<?php
  $curtime = time();
  $utcdiff = date('Z', $curtime);  // get difference to UTC in seconds
  $bmttime = $curtime - $utcdiff + 3600;   // BMT = UTC+0100
  $ssm = date('H', $bmttime)*3600 + date('i', $bmttime)*60 + date('s',
$bmttime);  // seconds since midnight (BMT)
  $ibeats = $ssm/86.4;  // 86400 seconds = 1000 beats, so 1 beat = 86.4 seconds

  echo 'i.Beats     : ' . date('D, d M Y', $bmttime) . ' @' . $ibeats;
?>

Note: If you would try date('D, d M Y @B', $bmttime), the resulting beats would
be wrong because the timezone used for calculation of the beats within the date
() function is still your local one but the timestamp is UTC+0100. Another
working way would be:

<?php
  $curtime = time();
  $utcdiff = date('Z', $curtime);  // get difference to UTC in seconds
  $bmttime = $curtime - $utcdiff + 3600;   // BMT = UTC+0100

  echo 'i.Beats     : ' . date('D, d M Y', $bmttime) . ' @' . date('B',
$curtime);
?>

But this way there are no floating-point beats possible, which may be handy
sometimes.
kbrill at multi dot com 15-Sep-2005 03:27
I created a routine that fills an array with the dates in the current week. 
For example $WeekDays[0] is sunday's date, $WeekDays[1] is monday's date and so
on no matter what day of the week it is today.

<?php
        $lowEnd=date("w");
        $lowEnd=-$lowEnd;
        $highEnd=$lowEnd + 6;
        $weekday=0;
        for ($i=$lowEnd; $i<=$highEnd; $i++) {
            $WeekDate[$weekday]=date("m/d",mktime(0, 0, 0, date("m")  , date
("d")+$i, date("Y")));
            $weekday++;
        }
?>
webmaster [AT] gn-solutions [DOT] de 07-Sep-2005 11:19
For users who want a different language than english, you can user strftime()
function in combination with setlocale() instead of date():

e.g. for german language:

With date you would write:
<?php
echo date('l, d. F Y'); //Output: Wednesday, 07. September 2005
?>

With strftime() you can output it in german like this:
<?php
// Set the gloabal LC_TIME constant to german
setlocale(LC_TIME, 'de_DE');
// Little bit other Syntax but better effect
echo strftime('%A, %d. %B %Y'); //Output: Mittwoch, 07. September 2005
?>

Greetings, Andy!
jon AT standardise DOT us 15-Feb-2005 04:57
Don't forget that months start on the 1st day, and not a zero date.  Might seem
obvious but:

<?php $test = date("F Y", mktime(0, 0, 0, 12, 0, 2005)); ?>

Will return November 2005, not December.

<?php $test = date("F Y", mktime(0, 0, 0, 12, 1, 2005)); ?>

The 1st is needed to get the right month.
ag nodot nospam at netside dot de 28-Jan-2005 03:19
Calculus of weeks in a year.

Since there is date("W") many still seem to have a problem regarding how many
weeks there are in an year. Some rather complex solutions have been shown here.

It's defined, that a week which begins in december and ends in january the
following year belongs to the year where most of its days lie. Therefore a week
with at least 4 days in december is the last week of that year and a week with
at least 4 days in january is the first week in the new year.

This concludes, that the last week of a year always contains the 28th day of
december. So if you take date("W") on that day of a given year you always get
the correct number of weeks for that year.
The other end of that definition is that the 4th day of january always lies in
the first week of a year.

I hope this solves a lot of confusion.

(For those asking what all this fuzz about counting weeks is about: normally
theres 52 weeks in a year but sometimes its 53 weeks in a year)

I wrote it down as a function, but as this is rather trivial one might consider
using the date(...) only.

<?php
function weeks($year) {
    return date("W",mktime(0,0,0,12,28,$year));
}
?>
php at document-root dot de 14-Apr-2004 05:02
To convert an unix timestamp to suite the syntax of a GeneralizedTime attribute
for OpenLDAP, you can use
date ('YmdHiZO'). Note that this conversion uses local time, the recommended
way is to store dates in UTC.

If your date is in UTC, just use
date ('YmdHiZ').'Z' to convert it ("Z" stands for "Zulu", which is UTC).
daniel 17-Feb-2004 10:43
The following function will return the date (on the Gregorian calendar) for
Orthodox Easter (Pascha).  Note that incorrect results will be returned for
years less than 1601 or greater than 2399. This is because the Julian calendar
(from which the Easter date is calculated) deviates from the Gregorian by one
day for each century-year that is NOT a leap-year, i.e. the century is
divisible by 4 but not by 10.  (In the old Julian reckoning, EVERY 4th year was
a leap-year.)

This algorithm was first proposed by the mathematician/physicist Gauss.  Its
complexity derives from the fact that the calculation is based on a combination
of solar and lunar calendars.

<?php
function getOrthodoxEaster($date){
  /*
    Takes any Gregorian date and returns the Gregorian
    date of Orthodox Easter for that year.
  */
  $year = date("Y", $date);
  $r1 = $year % 19;
  $r2 = $year % 4;
  $r3 = $year % 7;
  $ra = 19 * $r1 + 16;
  $r4 = $ra % 30;
  $rb = 2 * $r2 + 4 * $r3 + 6 * $r4;
  $r5 = $rb % 7;
  $rc = $r4 + $r5;
  //Orthodox Easter for this year will fall $rc days after April 3
  return strtotime("3 April $year + $rc days");
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun May 22 09:15:05 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 数学
  • Math
  • Math 関数
  • abs
  • acos
  • acosh
  • asin
  • asinh
  • atan2
  • atan
  • atanh
  • base_ convert
  • bindec
  • ceil
  • cos
  • cosh
  • decbin
  • dechex
  • decoct
  • deg2rad
  • exp
  • expm1
  • floor
  • fmod
  • getrandmax
  • hexdec
  • hypot
  • is_ finite
  • is_ infinite
  • is_ nan
  • lcg_ value
  • log10
  • log1p
  • log
  • max
  • min
  • mt_ getrandmax
  • mt_ rand
  • mt_ srand
  • octdec
  • pi
  • pow
  • rad2deg
  • rand
  • round
  • sin
  • sinh
  • sqrt
  • srand
  • tan
  • tanh

mt_srand> <mt_getrandmax
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 22 Apr 2011

view this page in

[English             ] Change language
mt_rand

(PHP 4, PHP 5)

mt_rand — よりよい乱数値を生成する

説明

int mt_rand ( void )
int mt_rand ( int $min , int $max )

古い libc の多くの乱数発生器は、怪しげであるか特性が不明であったりし、また低速
でした。デフォルトでは、PHP は rand() において libc の乱数発生器を使用します。
mt_rand() 関数は、その代替品となるものです。この関数は、その特性が既知の乱数生
成器 » Mersenne Twister を使用し、平均的な libc の rand()よりも 4 倍以上高速に
乱数を生成します。

オプションの引数 min,max を付けずにコールした場合、mt_rand() は 0 から
mt_getrandmax() の間の擬似乱数値を返します。例えば、5 から 15 まで(端点を含む)
の間の乱数値を得たい場合には mt_rand(5, 15) としてください。

パラメータ

min

    オプションで指定する、返される値の最小値 (デフォルトは 0)。

max

    オプションで指定する、返される値の最大値 (デフォルトは mt_getrandmax())。

返り値

min (あるいは 0) から max (あるいは mt_getrandmax()、それぞれ端点を含む) までの
間のランダムな整数値を返します。

変更履歴

バージョン                          説明
4.2.0      乱数生成器が自動的にシードを生成するようになりました。

例

例1 mt_rand() の例

<?php
echo mt_rand() . "\n";
echo mt_rand() . "\n";

echo mt_rand(5, 15);
?>

上の例の出力は、たとえば以下のようになります。

1604716014
1478613278
6

参考

  • mt_srand() - 改良型乱数生成器にシードを指定する
  • mt_getrandmax() - 乱数値の最大値を表示する
  • rand() - 乱数を生成する



mt_srand> <mt_getrandmax
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 22 Apr 2011
 
add a note add a note User Contributed Notes mt_rand
alex at khimic dot remove it dot h dot com 22-Mar-2011 12:16
This function really generates randow string. One can check it using this:

<?php
header("Content-type: image/png");
$img = imagecreatetruecolor(500,500);

$ink = imagecolorallocate($img,255,255,255);

for($i=0;$i<500;$i++) {
  for($j=0;$j<500;$j++) {
  imagesetpixel($img, mt_rand(1,500), mt_rand(1,500), $ink);
  }
}

imagepng($img);
imagedestroy($img);

?>

This generates 500x500 image with pixel noise.

If you switch mt_rand(1,500) to rand(1,500) you will NOT get pixel noise.
thegreatall at gmail dot com 08-Feb-2011 03:54
[Editor's note: Minor error in a magic constant and a syntax error fixed. You
may also want to consider using uniqid(), depending on your needs.]


This will result in an EXTREMELY fast random string using the following
characters: "0123456789abcdefghijklmnopqrstuvwxyz"

you can use:

<?php
base_convert(mt_rand(0x1D39D3E06400000, 0x41C21CB8E0FFFFFF), 10, 36);
?>

This will be a random number/string always 12 characters. This will only work
on 64 bit systems. This will result in a random number/string between:
100000000000 to zzzzzzzzzzzz If you are using a 32 bit system you will need to
use:

<?php
base_convert(mt_rand(0x19A100, 0x39AA3FF), 10, 36);
?>
This will result in a 5 character random number/string, between: 10000 to zzzzz
Robin Leffmann 25-Dec-2010 02:14
Fast, pseudo-random binary data generation using mt_rand():

<?php

function rnd_bin( $length )
{
    while( @$c++ * 16 < $length )
        @$tmp .= md5( mt_rand(), true );
    return substr( $tmp, 0, $length );
}

?>
Andrew Moore 10-Aug-2010 04:16
If you need a predictable set of numbers for a given seed, you may use the
following Pure-PHP implementation of a Mersenne Twister

<?php
class Mersenne_Twister
{
  private $state = array ();
  private $index = 0;

  public function __construct($seed = null) {
    if ($seed === null)
      $seed = mt_rand();

    $this->setSeed($seed);
  }

  public function setSeed($seed) {
    $this->state[0] = $seed & 0xffffffff;

    for ($i = 1; $i < 624; $i++) {
      $this->state[$i] = (((0x6c078965 * ($this->state[$i - 1] ^ ($this->state
[$i - 1] >> 30))) + $i)) & 0xffffffff;
    }

    $this->index = 0;
  }

  private function generateTwister() {
    for ($i = 0; $i < 624; $i++) {
      $y = (($this->state[$i] & 0x1) + ($this->state[$i] & 0x7fffffff)) &
0xffffffff;
      $this->state[$i] = ($this->state[($i + 397) % 624] ^ ($y >> 1)) &
0xffffffff;

      if (($y % 2) == 1) {
        $this->state[$i] = ($this->state[$i] ^ 0x9908b0df) & 0xffffffff;
      }
    }
  }

  public function getNext($min = null, $max = null) {
    if (($min === null && $max !== null) || ($min !== null && $max === null))
      throw new Exception('Invalid arguments');

    if ($this->index === 0) {
      $this->generateTwister();
    }

    $y = $this->state[$this->index];
    $y = ($y ^ ($y >> 11)) & 0xffffffff;
    $y = ($y ^ (($y << 7) & 0x9d2c5680)) & 0xffffffff;
    $y = ($y ^ (($y << 15) & 0xefc60000)) & 0xffffffff;
    $y = ($y ^ ($y >> 18)) & 0xffffffff;

    $this->index = ($this->index + 1) % 624;

    if ($min === null && $max === null)
      return $y;

    $range = abs($max - $min);

    return min($min, $max) + ($y % ($range + 1));
  }
}
?>
nilesh at itech7 dot com 19-May-2010 07:20
A class to generate 99.5% unqiue strings. I found that there is only one or two
characters common between two subsequent strings.

<?php

class Local_RandomString {
 
  protected $_length;
  protected $_prevRand;

  public function __construct($length = 15) {
   
    $this->_length = $length;

  }

  public function getRand() {
   
    $randStr = null;   
    $args[] = 'N' . $this->_length;

    for($i = 0; $i < $this->_length; $i++) {
      $args[] = mt_rand();     
    }
   
    $randStr = substr(base64_encode((call_user_func_array('pack', $args))), 1,
$this->_length);
    $this->_prevRand = $randStr;
    return $randStr;

  }

  public function setLength($l) {
   
    $this->_length = (int) $l;
   
    if($this->_length <= 0) {
      throw new Exception('Invalid random string length');
    }

  }

  public function getPrevRand() {
   
    return $this->_prevRand;

  }

}
?>
wayne 24-Feb-2010 03:53
A little useful function to create a random unique number out of an array of
unallowed values:

<?php
function rand_except($min, $max, $except)
  //function returns a random integer between min and max, just like function
rand() does.
  // Difference to rand is that the random generated number will not use any of
the values
  // placed in $except. ($except must therefore be an array)
  // function returns false if $except holds all values between $min and $max.
  {
  //first sort array values
  sort($except, SORT_NUMERIC);
  //calculate average gap between except-values
  $except_count = count($except);
  $avg_gap = ($max - $min + 1 - $except_count) / ($except_count + 1);
  if ($avg_gap <= 0)
     return false;
  //now add min and max to $except, so all gaps between $except-values can be
calculated
  array_unshift($except, $min - 1);
  array_push($except, $max + 1);
  $except_count += 2;
  //iterate through all values of except. If gap between 2 values is higher
than average gap,
  // create random in this gap
  for ($i = 1; $i < $except_count; $i++)
      if ($except[$i] - $except[$i - 1] - 1 >= $avg_gap)
         return mt_rand($except[$i - 1] + 1, $except[$i] - 1);
  return false;
  }
?>
james at coretelecom dot co dot uk 08-Feb-2010 11:29
Makes a random alpha numeric string of a given lenth

<?php
function makePin($lenth =5) {
    // makes a random alpha numeric string of a given lenth
    $aZ09 = array_merge(range('A', 'Z'), range('a', 'z'),range(0, 9));
    $out ='';
    for($c=0;$c < $lenth;$c++) {
       $out .= $aZ09[mt_rand(0,count($aZ09)-1)];
    }
    return $out;
}
?>
armencho at gmail dot com 05-Feb-2010 09:31
It should also be noted that 'mt_rand' function is NOT cryptographically
secure. This means, among other things, that you cannot depend on it to
generate data that is expected to be unpredictable, i.e. truly random.
Depending on circumstances, a third person using 'mt_rand' will be able to
generate the exact random number (or series of them) you have, which may break
your security system.
ISAWHIM 03-Feb-2010 04:46
This is not trying to dissuade use of this alternative, just trying to expand
on the things to "watch-out-for", when using this...

As per the description assumption...
"Many random number generators of older libcs have dubious or unknown
characteristics and are slow."

You would elude to the assumption that mt_rand() does not have, "dubious or
unknown characteristics". It is obvious that it is faster, but that does not
count the additional code required to ensure validity of results, or scope of
input value checking.

This function fails horribly, without error, when operating out of the scope of
the range. (Key point being, "without error".)

mt_getrandmax() is NOT the max INTEGER size. It is limited to positive numbers
from ZERO to your integers largest value. Thus, it is HALF the size of an
INTEGER, since integers are SIGNED, but mt_rand can only correctly randomize
from ZERO to mt_getrandmax(). (Though, that is not entirely true. It can do
negative numbers, if the min/max range/spread is not greater than the value of
mt_getrandmax()... sometimes.)

Things to watch-out for... (Sort of negates any speed gains.)

This assumes you "Attempted" to process MIN>=0 and MAX<=mt_getrandmax().

Returning a negative value = RANDOMIZER FAILED
Returning a vlaue higher than mt_getrandmax() = RANDOMIZER FAILED
Returning SAME_NUMBER from more than one call = Possibly RANDOMIZER FAILED
Returning a number <MIN or >MAX = RANDOMIZER FAILED

PHP version 5.2.6 on Apechee 2.0.63 on a Linux server.
Specific instances of failure... (All these still return a value.)
With RAND_MAX reporting that it is '2147483647'.

<?PHP
// Returns negative numbers as if (-2147483647,0)
$z = mt_rand(0,2147483648);

// Returns mostly 1 or negative numbers
$z = mt_rand(-2147483647,2147483647);

// Returns negative numbers, but within range set???
// So much for returning only values from 0 to Max
$z = mt_rand(-2147483647,0);

// Attempt to stay within the range/spread of mt_getrandmax()
// Results are odd, like 180 to 2147478000
$z = mt_rand(2147483647,4294967294);

// Works, but it should not, as the value is not an INT
// Values are converted to floor(x), so range is (0,0)
$z = mt_rand(0.000001,0.9999999);
?>

Code used to test...

<?PHP
// Reports the MAX possible, which is half of an INT's value
echo('RAND_MAX: '.mt_getrandmax());
for($i=0;$i<=100000;$i++) {
// RAND_MAX = 2147483647
$z = mt_rand(0,2147483647);
// echo($z.'<BR>'); // Uncomment to see results, lower LOOP values first!
if($z>$high || !isset($high)){$high=$z;}
if($z<$low || !isset($low)){$low=$z;}
}
echo('HIGH: '.$high.'<BR>LOW: '.$low.'<BR>');
?>

To get a number that is actually in the full range of an INT, you need to make
two separate calls, and add them together. Then convert that unsigned INT value
into a signed INT value.
armencho at gmail dot com 15-Jan-2010 03:59
The following function generates a string of arbitrary length (with
limitations), composed of random PHP characters (i.e. each an 8-bit value - a
byte). Suitable for generating random session strings. Encode as Base64 to
transmit over network, where required.

** The function is pretty much one of the fastest (if not THE fastest) methods
of generating random strings, as opposed to numerous examples given on this
page which go about with char-by-char generation. Sloppy benchmarks estimate a
factor of 10 speedup. Keep your websites lean, people. **

The only thing to keep in mind is that, by design, it outputs 8-bit characters,
and thus the generated string is not automatically suitable for transmission
with various network protocols, unless altered, f.e. URL- or Base64- encoded.
Also, again by design, the length of the string is a multiple of 4 characters/
bytes. The version below produces a 24 character long string. This will also
give you a clean input to get a 32 character long Base64 encoded variant of it.

<?php

function gen_rand_str_24()
{
     return pack('N6', mt_rand(), mt_rand(), mt_rand(),
          mt_rand(), mt_rand(), mt_rand());
}

?>

I leave it an exercise to the reader to write a generic (i.e. arbitrary double
word length, not 6 dwords as in above) version of it.
Anonymous 04-Aug-2009 10:45
Just another random password generator. Assembles passwords such as these:

N_v85kA2_s
8k4jz94_H0
30824n6VcN

useful for... whatever. ;)

$underscores holds the maximum allowed number of underscores. Default is two.
The function is programmed to not add an underscore at the beginning or end of
the password, right after another underscore, or if the maximum # has already
been used.

$length holds the length you want the password to be. Default is 10 characters
long.

<?php
function alphanumericPass()
{   
    // Do not modify anything below here
    $underscores = 2; // Maximum number of underscores allowed in password
    $length = 10; // Length of password
   
    $p ="";
    for ($i=0;$i<$length;$i++)
    {   
        $c = mt_rand(1,7);
        switch ($c)
        {
            case ($c<=2):
                // Add a number
                $p .= mt_rand(0,9);   
            break;
            case ($c<=4):
                // Add an uppercase letter
                $p .= chr(mt_rand(65,90));   
            break;
            case ($c<=6):
                // Add a lowercase letter
                $p .= chr(mt_rand(97,122));   
            break;
            case 7:
                 $len = strlen($p);
                if ($underscores>0&&$len>0&&$len<($length-1)&&$p[$len-1]!="_")
                {
                    $p .= "_";
                    $underscores--;   
                }
                else
                {
                    $i--;
                    continue;
                }
            break;       
        }
    }
    return $p;
}
?>
mark omohundro, ajamyajax dot com 19-Feb-2009 05:13
just another example: both of these routines return a random decimal number
between -1 and 1... since rand() only returns a max 'integer' value while
mt_rand() return a max 'long' value -- at least on some platforms -- mt_rand()
could be the better precision choice for some on any variation to this routine
(but i don't think it matters here):

<?php
echo "-1 to 1 rand() value: ". (rand(getrandmax()*-1,getrandmax())/getrandmax
()). "\n<br/>";
echo "-1 to 1 mt_rand() value: ". (mt_rand(mt_getrandmax()*-1,mt_getrandmax())/
mt_getrandmax()). "\n";
?>
xphere81 at hotmail dot com 19-Sep-2008 11:08
@Jonathon

$id_list = range($min, $max);
shuffle($id_list);

This is a faster way to obtain a list of unique id's in a random order.
It's always better to use PHP predefined functions, isn't it? ;)

Also remember that calling mt_rand too many times can downgrade the performance
of ANY algorithm.
rst 06-Sep-2008 05:13
re: rt and euxneks
Simpler:
<?php
printf( "#%06X\n", mt_rand( 0, 0xFFFFFF ) );
?>
rt 28-Aug-2008 12:14
Re: euxneks at NOSPAMgmail dot com

You might also want to add STR_PAD_LEFT and have:

<?php
echo '#' . str_pad( base_convert( mt_rand(0, ( 255*255*255) ), 10, 16 ), 6,
'0', STR_PAD_LEFT) . "\n";
?>
euxneks at NOSPAMgmail dot com 18-Aug-2008 10:11
Re: keith at ourwebsite dot ca

Here's another way to do it, in one line :)
<?php
echo '#' . str_pad( base_convert( mt_rand(0, ( 255*255*255) ), 10, 16 ), 6, '0'
) . "\n";
?>

str_pad is there in case mt_rand chooses a number that will generate a hex
value with less than 6 characters. (you could leave that out but it's not a
very clean way to write the hex colors is it :)
keith at ourwebsite dot ca 17-Jul-2008 10:16
This is how I generate a random colour for backgrounds, graphs, text colour
etc.

<?
$total = "9";
$start = "0";

$randcolour    = mt_rand($start, $total);
$randcolour    .= mt_rand($start, $total);
$randcolour    .= mt_rand($start, $total);
$randcolour    .= mt_rand($start, $total);
$randcolour    .= mt_rand($start, $total);
$randcolour    .= mt_rand($start, $total);

?>

<table width="200px" border="0" cellspacing="10" cellpadding="0" bgcolor="#<?
echo $randcolour; ?>">
      <tr>
        <td>This table has a random background colour</td>
      </tr>
    </table>
Mark Seecof 06-Jun-2008 06:31
If you need some pseudorandom bits for security or cryptographic purposes
(e.g.g., random IV for block cipher, random salt for password hash) mt_rand()
is a poor source.  On most Unix/Linux and/or MS-Windows platforms you can get a
better grade of pseudorandom bits from the OS or system library, like this:

<?php
// get 128 pseudorandom bits in a string of 16 bytes

$pr_bits = '';

// Unix/Linux platform?
$fp = @fopen('/dev/urandom','rb');
if ($fp !== FALSE) {
    $pr_bits .= @fread($fp,16);
    @fclose($fp);
}

// MS-Windows platform?
if (@class_exists('COM')) {
    // http://msdn.microsoft.com/en-us/library/aa388176(VS.85).aspx
    try {
        $CAPI_Util = new COM('CAPICOM.Utilities.1');
        $pr_bits .= $CAPI_Util->GetRandom(16,0);

        // if we ask for binary data PHP munges it, so we
        // request base64 return value.  We squeeze out the
        // redundancy and useless ==CRLF by hashing...
        if ($pr_bits) { $pr_bits = md5($pr_bits,TRUE); }
    } catch (Exception $ex) {
        // echo 'Exception: ' . $ex->getMessage();
    }
}

if (strlen($pr_bits) < 16) {
    // do something to warn system owner that
    // pseudorandom generator is missing
}
?>

NB: it is generally safe to leave both the attempt to read /dev/urandom and the
attempt to access CAPICOM in your code, though each will fail silently on the
other's platform.  Leave them both there so your code will be more portable.
Rocker 22-May-2008 02:24
I think this will work faster.

<?php
  function unique_random($Min,$Max,$num){

    //this will swap min an max values if $Min>$Max
    if ($Min>$Max) { $min=$Max; $max=$Min; }
    else { $min=$Min; $max=$Max; }

    //this will avoid to enter a number of results greater than possible
results
    if ($num>($max-$min)) $num=($max-$min);

    $values=array();
    $result=array();
    for ($i=$min;$i<=$max;$i++) {
      $values[]=$i;
    }
    for ($j=0;$j<$num;$j++){
      $key=mt_rand(0,count($values)-1);
      $result[]=$values[$key];
      unset($values[$key]);
      sort($values);
    }
    return $result;
}
?>
don_knotts at hotmail dot com 22-May-2008 11:58
I forgot to add a side-note to my post about the unique random number
function.  If the array count is more than half of the random number max, the
function could take a very long time to process, maybe even go into an infinite
loop.  The best way to avoid this is to set the max at twice the array count;
i.e. if you want an array of 10 unique random numbers, the maximum random
number needs to be at least 20.  For my purposes, I have 50 pictures to choose
from, and the function randomly picks 20 of them to display on the webpage,
without displaying an image twice.
don_knotts at hotmail dot com 22-May-2008 10:57
Here is a simple way to get UNIQUE random numbers, because if you are wanting
random numbers, say, between 1 and 10, then you will get duplicates very often,
so this function takes care of that.  However, for a very large amount of
numbers, this could be very slow.  I use this to generate random pictures on a
webpage so that I don't get the same picture twice, but it only picks from
about 50 pictures.

// **************************************************
// generate UNIQUE random numbers between min and max
// uses the updated mt_rand() php function
// 'min' = minimum random number
// 'max' = maximum random number
// 'count' = how many numbers in the array
// returns array with random numbers
// error msg if count is greater than max
// **************************************************
function generateUniqueRandoms($min, $max, $count)  {
    if($count > $max)  {  // this prevents an infinite loop
        echo "ERROR: The array count is greater than the random number maximum.
<br>\n";
        echo "Therefore, it is impossible to build an array of unique random
numbers.<br>\n";
        break;
    }   
    $numArray = array();
    for($i = 0; $i < $count; $i++)  {       
        $numArray[$i] = mt_rand($min,$max);         // set random number
        for($j = 0; $j < $count; $j++)                 // for each number,
check for duplicates
          if($j != $i)                                 // except for the one
you are checking of course
            if($numArray[$i] == $numArray[$j]) {
                $numArray[$i] = mt_rand(1,10);         // if duplicate,
generate new random
                $j = 0;                                // go back through and
check new number
            }
    }
    return $numArray;
} // end generateUniqueRandoms() ----------------------
// ****************************************************
Jonathon 17-Apr-2008 08:14
Below, andrei suggested a function for generating a list of unique integers,
randomly arranged.  In response to a note below that his solution is
inefficient, I'm providing an O(N) solution which should be much more
efficient, yet still yield a good guarantee of producing randomly ordered
integers.

<?php
function SwapShuffle($min, $max) {
  $last = $max - $min;

  for ($i=0; $i<=$last; $i++) {
    $arr[$i] = $min + $i;
  }

  for ($run=0; $run<7; $run++) {
    for ($i=0; $i<=$last; $i++) {
      $target = mt_rand(0, $last);
      $swap = $arr[$target];
      $arr[$target] = $arr[$i];
      $arr[$i] = $swap;
    }
  }

  return $arr;
}

// Call as:
$result = SwapShuffle(10, 30);
foreach ($result as $num) {
  echo "$num\n";
}
?>
geompse at yopmail dot com 29-Mar-2008 12:01
mt_rand() is not faster than rand() !

Tested over 100'000 iterations, with none/various/random arguments, mt_rand is
always 3% slower than rand().
guilhem at dublin dot ie 25-Mar-2008 09:09
I'm sorry to say, "andrei at novanetworks dot ro"'s method seems higly
unefficient to me. It's good if called few times only, but when most of the
numbers have already been used, the function has to loop many times before
finding an available option.

When I know I need to call most of the numbers from a range, I create a list of
the numbers in the range, get a random index from this list, then return and
delete the item of the list at the picked index. More memory usage if called
many times, but probably less computation time on average.
andrei at novanetworks dot ro 23-Mar-2008 07:04
Here's a simple function i've made for generateing unique random numbers. Be
carefull, the function will go into an infinite loop if you request more unique
numbers then the given range (ex. if you call unic(1, 5) five times it's ok,
but the 6'th time it will go into an infinite loop).

$unic_arr = array(); //the array in witch the used numbers are stored.

function unic($min, $max) {
global $unic_arr;
    $rand = mt_rand($min, $max);
    $tf = 1;
    while(true) {
        if(!in_array($rand, $unic_arr)) {
            $tf = 0;
            break;
        }
        else $rand = mt_rand($min, $max);
    }
    array_push($unic_arr, $rand);
    return $rand;
}

//to call the function use:

unic($min, $max); //ex. unic(1000, 9999);
William Leslie 13-Feb-2008 05:24
Do not rely on the strength of any 'home-brewed' cryptographic algorithm, such
as the one posted by dmoree at coker dot edu.  Algorithms such as MD5 and SHA-1
have been the subject of intense academic research and have known security
properties.

While it is true that MD5 and SHA-1 are generally no longer recommended for use
in new cryptosystems, there are newer algorithms such as SHA-256 that address
the older algorithms' weaknesses.  These newer algorithms have not received
quite as much scrutiny as their older counterparts, but have still been studied
much more carefully than your home-brewed algorithm, most likely.

Dmoree at coker dot edu's concern about rainbow tables is best addressed by a
properly applied salting technique.  Every bit of 'salt' added to a
cryptographic hash effectively extends the complexity of the password and thus
the size of the rainbow table needed to crack it.

Furthermore, wisely chosen password strength policies can mitigate such
attacks.
dmoree at coker dot edu 29-Jan-2008 03:49
Here is a simple encryption algorithm I made a few months ago. I was tired of
MD5 because they have rainbow tables out that will crack most any MD5 pass.
Along with SHA. So encryption algorithms are getting weaker all the time. So
here is new one for people to try and crack. So far no one has told me they
cracked it. I also use it to generate very random passwords or character
segments. Below the function is the random string generator. I tested this
algorithm with mt_rand over 10 million iterations without one duplicate string.
So use it in good health!

<?php
// Hexi-decimal encryption function
// Returns: 64 character encrypted string
// NOTE: One-Way encryption only
function HexCrypt($string = "", $salt = ""){
    if(strlen(trim($string)) == 0){
        $string = " ";
    }
    if(strlen(trim($salt)) == 0){
        $salt = " ";
    }
    $string = $salt.$string.$salt;
    $lastchar = "";
    $output = "";
    $saltlength = "0x".dechex(strlen($salt));

    while(strlen($output) < 64){
        $firstchar = "0x".dechex(ord(substr($string, strlen($salt), 1)));
        for($i = 0; $i < strlen($string); $i++){
            $strlength = "0x".dechex($output+$i+3);
            if(strlen($output) >= 64){
                break(2);
            }elseif($lastchar == ""){
                $lastchar = "0x".dechex(ord(substr($string, $i, 1)));
            }else{
                $current = "0x".dechex(ord(substr($string, $i, 1)));
                $total = ($lastchar * $current) * ($firstchar * $saltlength);
                $output .= dechex($total);
                $lastchar = "";
            }
        }
  
        if((strlen($string)%2) == 1){
            $total = ($lastchar * $firstchar) * ($firstchar * $saltlength);
            $output .= dechex($total);
        }

        $string = $output;
        $output = "";
    }

    if(strlen($output) != 0){
        $output = substr($output, 0, 64);
    }else{
        $output = substr($string, 0, 64);
    }

    return($output);
}

// Generates an 8 character random string
$length = 8;
$string = "";

for($i = 0; $i < 32; $i++){
    $string .= mt_rand(0,9);
}

$start = mt_rand(0, (64-$length));
$salt = substr($string, mt_rand(0,20), 12);
echo "Random String: ".substr(HexCrypt($string, $salt), $start, $length)."\n";
?>
przemek at sobstel dot org 17-Jan-2008 07:00
note that OWASP's "Guide to Cryptography" says that a Mersenne Twister (that is
used by mt_rand()) "is nowhere near as good as CryptoAPI’s secure random number
generation options, OpenSSL, or /dev/urandom which is available on many Unix
variants. mt_rand() has been noted to produce the same number on some
platforms."

remember that rand() is even weaker.
jfkallen at hotmail dot com 24-Dec-2007 11:37
mt_rand does not seem to truly generate random numbers.  Im not sure exactly
which of the following is more accurate as I was applying the following to sock
price deviations which do not follow normal distributions (exactly at least).

If you group observations in 11 buckets such that each bucket represents 10
percentiles and run mt_rand(0,10) 100 times you would expect a simlar result as
if you ran 100 iterations of mt_rand(0,100) where each bucket represents 1 1
percentile range.

FYI I think things work slightly better as the range of mt_rand increases.
#$data is a numerical (not associative) array of numbers

sort($data);
$data_size = count($data);
#num_groups is the number of buckets
$num_groups = min($num_groups,$data_size);
$ile_size = $data_size / $num_groups;

//following creates the buckets
$groups[] = $data[0];
for ($i=1;$i<$num_groups;$i++){
  $x = $i * $ile_size;
  $i1 = floor($x);
  $i2 = ceil($x);
  $d1 = $data[$i1];
  $d2 = $data[$i2];
  $var = 1 - ($x-$i1);
  $groups[] = ($d1 * $var) + ($d2 * (1-$var));
}
$groups[] = $data[$data_size-1];

//RUN The Random number generator

$value = array();
for ($j=0;$j<$depth;$j++){
 $t = mt_rand($lower_limit,$upper_limit);
 $value[] = $this->m_groups[$t];
}

//The end result is that as the number of groupas increase the accuracy (ie
turue randomness seems to increase proportionally more (up to point).  This is
not the way it should work in nature.
root at mantoru dot de 25-Nov-2007 02:47
I needed a function that returns true with a probability of n%, so here's what
I came up with:

<?php
function probability($chance, $out_of = 100) {
    $random = mt_rand(1, $out_of);
    return $random <= $chance;
}
?>

A few usage examples:

<?php
/* 50% chance, equal to (bool)mt_rand(0, 1) */
var_dump(probability(50));
/* 0.1% chance, floats will not work -- "1 out of 1000 cases" */
var_dump(probability(1, 1000));
/* Practical example */
if (probability(10)) {
    $damage *= 1.75; // Critical hit!
}
?>
fabiovh on gmail 13-Nov-2007 02:42
performance: for a repetitive task, it's much faster not to use the limit
parameters, as shown below. just use the % operator.

$t=microtime(true);
for($i=0;$i<1000000;$i++)
 mt_rand()%3;
echo microtime(true)-$t;

echo '|';

$t=microtime(true);
for($i=0;$i<1000000;$i++)
 mt_rand(0,2);
echo microtime(true)-$t;

echo '|';

$t=microtime(true);
for($i=0;$i<1000000;$i++)
 mt_rand();
echo microtime(true)-$t;

output: 0.316797971725|0.442242145538|0.253082036972
bradpeabody at scientology dot net 03-Oct-2007 09:49
[Editorial note: This suggested "security" improvement simply punts the issue
to the operating system: there is no guarantee that the operating system will
work any better than the Mersenne twister (although it may have more entropy
available)]

If you want some random text that is more secure than what can get from a built
in PHP method, you can simply do:

<?php
$myRandomText = shell_exec('head -c 128 < /dev/urandom');
?>

That will get around the fact that rand() and mt_rand() are a bad place to
start generating something that is supposed to be cryptographically secure.

The only down sides to this that I see are:
a) Ugly
b) Slow (have to launch external processes)
c) Not portable (can't do this on Windows)

But if you can live with that, this will be much more secure than using rand()
or mt_rand().

- Brad
www.mrnaz.com 25-Jul-2007 05:00
This function uses mt_rand() to create a random string of specified length from
an optionally supplied string of characters. It is good for generating
passwords that only consist of alphanumeric characters or codes that must
consist of a defined character space such as for barcodes. It can also be used
to generate random hexadecimal numbers for things like encryption keys.

It is very fast, and allows for generation of strings of unlimited length.

<?php
function rand_string($len, $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789')
{
    $string = '';
    for ($i = 0; $i < $len; $i++)
    {
        $pos = rand(0, strlen($chars)-1);
        $string .= $chars{$pos};
    }
    return $string;
}
?>
rok dot kralj at gmail dot com 16-Jun-2007 07:42
mt_rand function returns just a whole numbers. If you want a random float, then
here's an elegant way:

<?php
function random_float ($min,$max) {
   return ($min+lcg_value()*(abs($max-$min)));
}
?>
Paul Nolasco 09-May-2007 07:45
Here's a more user friendly password generator. You want to make it easier for
the user to enter the new password.

Output:
- First character is capitalize
- Rest of the characters are either number or letters (lowercase)

You can change the probability depending on your taste. Also by default it
generates a 8-character long password.

<?php
function genPassword($length=8)
{
    # first character is capitalize
    $pass =  chr(mt_rand(65,90));    // A-Z
   
    # rest are either 0-9 or a-z
    for($k=0; $k < $length - 1; $k++)
    {
        $probab = mt_rand(1,10);
   
        if($probab <= 8)   // a-z probability is 80%
            $pass .= chr(mt_rand(97,122));
        else            // 0-9 probability is 20%
            $pass .= chr(mt_rand(48, 57));
    }
    return $pass;
}
?>
Jonathan at jooped dot co dot uk 06-May-2007 03:04
An easier password generator than earlsinclair2001.

function easyPassGen($length=10){
$enc = sh1(mt_rand().mt_rand().mt_rand());
$password = sub_str($enc, 1, $length);
return $password;
}

Might help someone (pretty simple though).
earlsinclair2001 at yahoo dot com 11-Apr-2007 05:46
Here's my shot at writing a secure password generator function:

<?php

function passwordgenerator()
{   
    $password = "";
    $loop = 0;
    while ($loop < 12)
    {
        $randomchar = chr(mt_rand(35, 126));
        if (!strstr($password, $randomchar))
        {
            $password .= $randomchar;
            $loop++;
        }
    }
    return $password;
}
chagenbu at php dot net 21-Mar-2007 05:18
The algorithm used by mt_rand() changed in PHP 5.2.1. If you are relying on
getting the same sequence from mt_rand() after calling mt_srand() with a known
seed, upgrading to PHP 5.2.1 will break your code. See http://bugs.php.net/
bug.php?id=40724 for something of an explanation; there is no workaround.
12-Mar-2007 08:36
In one of my forums was a discussion about, how to change an image randomly, so
i wrote this code using mt_rand ....

I hope you can use it ....

I Forgot something, sorry for that, but here is the correction.

<?php
  //ImageChange.php

  error_reporting(0);//hide the notice for the missing $iRand

  $sPath2ImageDir = Path;//preventing redundancy
  $aImages        = scandir($sBildOrdnerPfad);//Dir 2 Array
  $iImageCount    = count($aImages);//preventing redundancy
 
  while (getimagesize("{sPath2ImageDir}/{$aImages[$iRand]}")) {//recursion to
get an image
   $iRand = mt_rand(2, $iImageCount-1);//min = 2 because $aImages[0] = "." and
$aImages[1] = ".."
  }
  
  echo "<img alt=\"Image{$iRand}\" src=\"{sPath2ImageDir}/{$aImages[$iRand]}\"
title=\"Image{$iRand}\" />";//show the image

  unset($aImages, $iImageCount, $iRand, $sBildOrdnerPfad);//if this script is
used in another script
?>
Rene at mokiba dot de 10-Mar-2007 10:00
Here is my Function to generate an Array with unique random Numbers between
"$from" and "$to".

<?php
function random_number_array($count, $from, $to){
   for($i=$from;$i<$to;$i++){
   $number_array[] = $i;
   }
   $random_number_array = array();
   mt_srand ((double) microtime() * 1000000);
   for($i=0;$i<$count;$i++){
     $random_number            = mt_rand(0,count($number_array)-1);
     $key_to_insert_and_delete = array_search($random_number, $number_array);
     $random_number_array[$i]    = $number_array[$key_to_insert_and_delete];
     array_splice($number_array, $key_to_insert_and_delete, 1);
   }
   // Array $random_number_array with $count random Numbers, between $from and
$to
   return $random_number_array;
}
?>

I hope its helping you.

Greetings

Rene Andris
Rene at mokiba dot de 10-Mar-2007 07:50
Here is my Function to generate an Array with unique random Numbers between
"$from" and "$to".

function random_number_array($count, $from, $to){
   for($i=$from;$i<$to;$i++){
    $number_array[] = $i;
   }
   $random_number_array = array();
   mt_srand ((double) microtime() * 1000000);
   for($i=0;$i<$count;$i++){
      $random_number            = mt_rand(0,count($number_array)-1);
      $key_to_insert_and_delete = array_search($random_number, $number_array);
      $random_number_array[$i]    = $number_array[$key_to_insert_and_delete];
      array_splice($number_array, $key_to_insert_and_delete, 1);
   }
   // Array $random_number_array with $count random Numbers, between $from and
$to
   return $random_number_array;
}

I hope its helping you.

Greetings

Rene Andris
heavyraptor 14-Feb-2007 11:26
since my mt_rand_n() function isn't too fast I created a faster and easier
function:

<?php
function mt_rand_exclusive($min,$max,$ex) {
  while (true) {
    if (!in_array($rand = mt_rand($min,$max),(array)$ex))
      return $rand;
  }
}
?>

Have fun
zolaar at nothanks dot com 08-Feb-2007 06:44
a better (and likely faster) way to generate a random 6-digit hex string:

<?php
$num = mt_rand ( 0, 0xffffff ); // trust the library, love the library...
$output = sprintf ( "%06x" , $num ); // muchas smoochas to you, PHP!
return $output;
?>

The mt_rand function won't give you a number outside the bounds you asked for
-- no need to and-off the top bits -- and the sprintf function has params for
length-padding & hexidecimal output.  It's likely faster because most of the
work is being done by the wicked fast C functions that PHP sits on top of,
though YMMV in that dept.
heavyraptor 12-Dec-2006 05:47
If you need a random number but not the numbers in a specified array, you may
use my function below:

<?php
function mt_rand_n($min,$max,$disallowed) {
  // $a must be an array
  if (!is_array($disallowed))
    return false;

  // Create an array with the numbers from $min to $max
  // without the numbers in $disallowed.
  // - range() to create an array with the numbers from $min to $max
  // - array_diff() to create the allowed numbers
  // - since array_diff() doesn't change the keys, we've to change them with
  //   array_values(), to get an normal order (0,1,2,3 ... )
  $numbers = array_values(array_diff(range($min,$max),$disallowed));

  // size of $numbers must be greater than 0
  if (count($numbers) < 1)
    return false;

  // create random number and return it
  return $numbers[mt_rand(0,count($numbers) - 1)];
}

// Example:
$min = 0;
$max = 10;
$disallowed = array(0,1,2,3,4,9,10); // the numbers 1,2,3,6,7, and 8 are
disallowed

for ($i = 0; $i < 100; $i++)
  var_dump(mt_rand_n($min,$max,$disallowed));
?>

I hope it helps someone ...
Btw. here's the "un-comment" function:
<?php
function mt_rand_n($min,$max,$disallowed) {
  if (!is_array($disallowed)) return false;
  $numbers = array_values(array_diff(range($min,$max),$disallowed));
  if (count($numbers) < 1) return false;
  return $numbers[mt_rand(0,count($numbers) - 1)];
}
?>

Have fun :)
MagicalTux at ooKoo dot org 20-Nov-2006 03:34
In answer to David and pHp_n00b, about generating a random 6 characters
hexadecimal string...

Well, the easiest solution would be :
<?php
$rand = mt_rand(0x000000, 0xffffff); // generate a random number between 0 and
0xffffff
$rand = dechex($rand & 0xffffff); // make sure we're not over 0xffffff, which
shouldn't happen anyway
$rand = str_pad($rand, 6, '0', STR_PAD_LEFT); // add zeroes in front of the
generated string
echo $rand;
?>

Some examples of generated stuff :
8514d2
3188ae
028f3e
444397
1de508
071662

You can easily make a function from this code.
Chris 10-Nov-2006 07:35
>Running the output of Mersenne Twister through an unkeyed >secure hash is NOT
a good way to make it secure, because it'll >still have a relatively small
internal state which, if recovered, >would allow reproduction of the
keystream.  A better idea >would be to encrypt the output with a keyed
encryption >algorithm - but if you were going to do that, you wouldn't >need a
psuedorandom number generator at all, because a >counter would be just as good.

Not true. Mersenne Twister has an ENORMOUS amount of internal state - 4992
bits, bigger than practically any cipher's key length. The point of a secure
random number generator is that you cannot predict future outputs based on past
OUTPUTS, which is why a hash is applied. Clearly you can predict the future
output of any pseudorandom number generator if you can acquire the internal
state - a better algorithm will never solve this problem. If you use keyed
encryption, recovering the key allows you to predict future outputs.
David 06-Nov-2006 08:40
Shouldn't it be a greater than (>) sign rather than a not equal (!=) sign?
Because you're just checking to see if it is exactly six. So if it is 7 it,
won't try to fix it. So wouldn't this be better?
<?
//....
if (strlen($random_hex) < "6") // sometimes it returns an only 5, or less, char
Hex-Code,
   hexcode();        // so the function has to be repeat
elseif (strlen($random_hex) > "6") // sometimes it returns 7 or more characters
//...I don't know how to make it do only six, but your code seems to only check
to make sure it doesn't do less than 6; nothing to counter doing more than
6.... so here would be some code to reduce the size back to 6 if it went over.
else
   echo $random_hex; // returns the Hex-Code
}
//...
?>
pHp_n00b 26-Sep-2006 02:00
<?php

// Generates a max."6 char" Hex-Code

function hexcode()
{

$min = hexdec("000000"); // result is 0    and sets the min-value for mt_rand
$max = hexdec("FFFFFF"); // result is 16777215 and sets the max-value for
mt_rand

$random = mt_rand($min, $max); // creates a radom number between 0 and 16777215

$random_hex = dechex($random); // transforms the random number into a Hex-Code

// now the test, if the result has 6 chars

if (strlen($random_hex) != "6") // sometimes it returns an only 5, or less,
char Hex-Code,
    hexcode();        // so the function has to be repeat
else
    echo $random_hex; // returns the Hex-Code
}

hexcode();

?>
MagicalTux at ooKoo dot org 25-Aug-2006 12:44
Since many people wrote little scripts to generate random sequences, I'll also
give mine (which is slightly faster since it makes use of strlen only once, and
uses strings instead of arrays) :

<?php
function code($nc, $a=
'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') {
    $l=strlen($a)-1; $r='';
    while($nc-->0) $r.=$a{mt_rand(0,$l)};
    return $r;
}
?>
arias at elleondeoro dot com 29-May-2006 09:03
Be carefull with: $characters[mt_rand(0, count($characters))];

"If you want a random number between 5 and 15 (inclusive), for example, use
mt_rand (5, 15)."

Array index are between 0 and n-1, but mt_rand generates a number between 0 and
n!
James 16-Apr-2006 06:02
The Developers Resources article mentioned above should be removed as that site
has be down for years. The same article by Gregory Boshoff is available at
http://www.phpfive.net/article2.htm
rollerce at gmail dot com 15-Feb-2006 01:38
I know a bunch of you have posted little snippets for random number generation,
but here's a nifty (in my opinion) little thing I just wrote to create a 10
digit code with hyphens in it. It also negates the use of 0, O, 1, and I, to
avoid confusion. I am ALWAYS willing to accept input so if any of you has
suggestions to streamline the code, please let me know.

<?php
      function GetID($x){     

         $characters = array("A", "B", "C", "D", "E", "F", "G", "H", "J", "K",
"L", "M", "N", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "2", "3",
"4", "5", "6", "7", "8", "9");
         shuffle($characters);

         for (; strlen($ReqID)<$x;){
           $ReqID .= $characters[mt_rand(0, count($characters))];
          }

         return $ReqID;
        
        }     
     

       $ReqID .= GetID(3);
       $ReqID .= "-";
       $ReqID .= GetID(4);
       $ReqID .= "-";
       $ReqID .= GetID(3);

       echo $ReqID
     
?>
ripat at lumadis dot be 08-Nov-2005 04:38
Yet another snippet to generate a password.
<?php
  $acceptedChars =
'azertyuiopqsdfghjklmwxcvbnAZERTYUIOPQSDFGHJKLMWXCVBN0123456789';
  $max = strlen($acceptedChars)-1;
  $password = null;
  for($i=0; $i < 8; $i++) {
    $password .= $acceptedChars{mt_rand(0, $max)};
  }
  echo $password;
?>
I have tried several ways of doing it but this simple one seems to be the
fastest.
fahri at konse dot de 08-Oct-2005 04:12
i did the following, to generate a few random-numbers out of a total amount of
numbers, but to create different random-numbers and not double or tripple.
for example i use it to generate 10 random-pics out of 150, and do shurely
generate not twice the same...

<?php
$total =  6; // available numbers (of pictures)
$randanzahl = 6; //number of random-number to generate out of $total

function checkifdouble($ran,$i) {
        for($j=1; $j<$i; $j++) {
                if($ran[$j]==$ran[$i]) {
                        $ergebnis="true";
                        break;
                } //endif
                else {
                        $ergebnis="false";
                } //endelse
        } //endfor
return $ergebnis;
}

for ($i=1; $i<=$randanzahl; $i++) {
       $ran[$i] = mt_rand(1, $total);
       if ($i>1) {
               while(checkifdouble($ran,$i)=="true") {
                       $ran[$i] = mt_rand(1, $total);
                       $v=checkifdouble($ran,$i);
                       echo($v);
               } //endif
       }
       echo($ran[$i]."<br>");

} //enfor
?>

this version is easily for debugging and adaption!
maybe there is a very shorter version...
phil [underscore] ozil at hotmail dot com 07-Oct-2005 01:13
Quit bothering yourselves.
All it takes to create a secure random-generated password is those three lines:

<?php
$pass = "";
// Generate a 8 char password
for ($i=0; $i<8; $i++)
  $pass .= chr(mt_rand(35, 126));
?>

Note:
In this example, the character's ASCII values range from 35 to 126.

For character's ASCII codes please check:
http://www.keller.com/html-quickref/latin1.html
frans-jan at van-steenbeek dot net 03-Oct-2005 02:18
My try at generating a reasonably secure password:

<?php
 function keygen() {
  $tempstring =
  "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNO
  PQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyzABC
  DEFGHIJKLMNOPQRSTUVWXYZ!?@#$%&*[]{}();:,<>~+=-_
  /|\\";
  for($length = 0; $length < mt_rand(10, 15); $length++) {
   $temp = str_shuffle($tempstring);
   $char = mt_rand(0, strlen($temp));
   $pass .= $temp[$char];
  }
  return $pass;
 }
 echo(keygen());
 echo("\n");
?>

This generates a password of an undefined length (in this case, 10 to 15 chars)
consisting of numbers, UPPERCASE letters lowercase letters and a set of signs.
I have doubled the chance of number and letters to reduce the confusion with my
users.
sean at codeaholics dot com 22-Jul-2005 01:31
You really shouldn't generate a number to determine the _type_ of the char,
then the char itself.  If security is an issue for you, and you want to
maintain as much entropy as possible, you should use a function similar to the
one below.  Since this seems to be getting repeated over-and-over, I explained
(beat into the ground?) the issue on http://www.codeaholics.com/randomCode.php

The code:
<?php
////
// Returns a random code of the specified length, containing characters that
are
// equally likely to be any of the digits, uppercase letters, or  lowercase
letters.
//
// The default length of 10 provides 839299365868340224 (62^10) possible codes.
//
// NOTE: Do not call wt_srand().  It is handled automatically in PHP 4.2.0 and
above
//       and any additional calls are likely to DECREASE the randomness.
////
function randomCode($length=10){
    $retVal = "";
    while(strlen($retVal) < $length){
        $nextChar = mt_rand(0, 61); // 10 digits + 26 uppercase + 26 lowercase
= 62 chars
        if(($nextChar >=10) && ($nextChar < 36)){ // uppercase letters
            $nextChar -= 10; // bases the number at 0 instead of 10
            $nextChar = chr($nextChar + 65); // ord('A') == 65
        } else if($nextChar >= 36){ // lowercase letters
            $nextChar -= 36; // bases the number at 0 instead of 36
            $nextChar = chr($nextChar + 97); // ord('a') == 97
        } else { // 0-9
            $nextChar = chr($nextChar + 48); // ord('0') == 48
        }
        $retVal .= $nextChar;
    }
    return $retVal;
}
?>
mina86 at nospam dot projektcode dot org 25-May-2005 12:00
Re: solenoid at hotmail dot united dot kingdom

In theory method shown by selenoid can lead to infinite loop. The correct
method would be:

<?php
$randomNumbers = array();
for ($i = 0; i<30; ++$i) $randomNumbers[] = $i;
shuffle($randomNumbers);
for ($i = 20; $i<30; ++$i) unset($randomNumbers[$i]);
$randomNumbers = array_values($randomNumbers);
?>

The last two lines may be in some cases removed.
nowhere at where dot net 16-Apr-2005 09:46
Allows characters 0-9, a-z
Weighted (and tested) ok.

<?php
function generate_string ($length = 20)
{
    $nps = "";
    for($i=0;$i<$length;$i++)
    {
        $nps .= chr( (mt_rand(1, 36) <= 26) ? mt_rand(97, 122) : mt_rand(48, 57
));
    }
    return $nps;
}
?>
mskala at ansuz dot sooke dot bc dot ca 23-Jan-2005 11:47
Running the output of Mersenne Twister through an unkeyed secure hash is NOT a
good way to make it secure, because it'll still have a relatively small
internal state which, if recovered, would allow reproduction of the keystream. 
A better idea would be to encrypt the output with a keyed encryption algorithm
- but if you were going to do that, you wouldn't need a psuedorandom number
generator at all, because a counter would be just as good.
timr at onlinehome dot de 12-Aug-2004 11:24
The correct address of the inventor's FAQ is (http://
www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/efaq.html). They state that Mersenne
Twister may be used for cryptography if you do some post-processing:

"Mersenne Twister is not cryptographically secure. (MT is based on a linear
recursion. Any pseudorandom number sequence generated by a linear recursion is
insecure, since from sufficiently long subsequence of the outputs, one can
predict the rest of the outputs.)

To make it secure, you need to use some Secure Hashing Algorithm with MT. For
example, you may gather every eight words of outputs, and compress them into
one word (thus the length of the output sequence is 1/8 of the original one)."
11-Feb-2004 01:27
Here is a example of a very small, compact, quite random-random string
generator. It will make a string with uppercase & lowercase letters, with
numbers. You simply need to set $len in the for() structure, and then the
string will be in $r.  It has been designed for size, while it's still quite
fast.  Mind the wrapping, it should be 1 line.

<?php
for($len=8,$r='';strlen($r)<$len;$r.=chr(!mt_rand(0,2)?
mt_rand(48,57):(!mt_rand(0,1)?mt_rand(65,90):mt_rand
(97,122))));
?>

Armond Carroll
tmx at ntlworld dot com 06-Dec-2003 09:26
When using this function, it doesn't matter which order the numbers go in.

      mt_rand(16,5)

works just as well as

      mt_rand(5,16)

Which can be useful if you are pulling values from a database, that could be
negative or positive.

      mtrand(0,$anyinteger)

Hope this helps someone
daeken_9999 at yahoo dot com 08-Jul-2003 09:44
This is a fixed version of the gaussrand() function defined in a note above.

<?php
function gaussrand()
{
    static $V2, $V1, $S;
    static $phase = 0;
    if (phase == 0)
    {
        while ($S >= 1 || $S == 0)
        {
            $V1 = 2 * (rand() / getrandmax()) - 1;
            $V2 = 2 * (rand() / getrandmax()) - 1;
            $S = $V1 * $V1 + $V2 * $V2;
        }
        $X = $V1 * sqrt(-2 * log($S) / $S);
    }
    else
        $X = $V2 * sqrt(-2 * log($S) / $S);
    $phase = 1 - $phase;
    return $X;
}
?>
jsheets at shadonet dot com 04-Jun-2003 08:49
The following function will create a random base64 encoded key, this is very
useful for password reset schemes or anything where you want a random string. 
To compare the string either compare the base64 encoded value or base64_decode
it and compare that.

I do not use md5 because md5 results in only 1-9 and a-f in the string or 32^16
possibilities, by using the extended ASCII table and shuffling the array I am
able to get a minimum of 32^127 possibilities with a 32 character string, using
a longer string will make your value harder to guess still. A lot of machiens
will have 32^255 possibilities in a decoded string.

<?php
function MakeResetKey($min_length = 32, $max_length = 64)
{
   $key = '';

   // build range and shuffle range using ASCII table
   for ($i=0; $i<=255; $i++) {
      $range[] = chr($i);
   }

   // shuffle our range 3 times
   for ($i=0; $i<=3; $i++) {
      shuffle($range);
   }

      // loop for random number generation
   for ($i = 0; $i < mt_rand($min_length, $max_length); $i++) {
      $key .= $range[mt_rand(0, count($range))];
   }

   $return = base64_encode($key);

   if (!empty($return)) {
      return $return;
   } else {
      return 0;
   }
}
?>
demogracia at metropoliglobal dot com 02-Mar-2002 08:38
<?php
//
// Generates a random string with the specified length
// Chars are chosen from the provided [optional] list
//
function simpleRandString($length=16, $list=
"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"){
    mt_srand((double)microtime()*1000000);
    $newstring="";

    if($length>0){
        while(strlen($newstring)<$length){
            $newstring.=$list[mt_rand(0, strlen($list)-1)];
        }
    }
    return $newstring;
}

//
// Generates a random string with the specified length
// Includes: a-z, A-Z y 0-9
//
function randString($length=16) {
   $newstring="";
   if($length>0) {
       while(strlen($newstring)<$length) {
           $randnum = mt_rand(0,61);
           if ($randnum < 10) {
               $newstring.=chr($randnum+48);
           } elseif ($randnum < 36) {
               $newstring.=chr($randnum+55);
           } else {
               $newstring.=chr($randnum+61);
           }
       }
   }
   return $newstring;
}
?>
amcclung at stetson dot edu 18-Apr-2001 08:27
Here's an elegant way of generating a random float value within a certain
range:

<?php
$range = $upperBound-$lowerBound;
$num = $lowerBound + $range * mt_rand(0, 32767)/32767;
?>

You should now have a floating point number between your $lowerBound (i.e. 0.5)
and $upperBound (0.75) values.
mrdlinux at yahoo dot com 21-Jul-2000 05:02
And for those who prefer scaling:

mt_rand() / RAND_MAX * (Max - Min) + Min;
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue May 3 18:12:09 2011 UTC
Received cookie: COUNTRY=JPN%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 22 Apr 2011

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict ] )
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • その他の基本モジュール
  • URLs
  • URL 関数
  • base64_ decode
  • base64_ encode
  • get_ headers
  • get_ meta_ tags
  • http_ build_ query
  • parse_ url
  • rawurldecode
  • rawurlencode
  • urldecode
  • urlencode

get_headers> <base64_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 22 Apr 2011

view this page in

[English             ] Change language
base64_encode

(PHP 4, PHP 5)

base64_encode — MIME base64 方式でデータをエンコードする

説明

string base64_encode ( string $data )

指定した data を base64 でエンコードします。

このエンコードは、メールの本体のように 8 ビットクリーンではないトランスポート層
を通じても、バイナリデータが生き残れるように設計されています。

Base64 でエンコードされたデータは、エンコード前のデータにくらべて 33% 余計に容
量が必要です。

パラメータ

data

    エンコードするデータ。

返り値

エンコードされたデータを文字列で返します。

例

例1 base64_encode() の例

<?php
$str = 'This is an encoded string';
echo base64_encode($str);
?>

上の例の出力は以下となります。

VGhpcyBpcyBhbiBlbmNvZGVkIHN0cmluZw==

参考

  • base64_decode() - MIME base64 方式によりエンコードされたデータをデコードす
    る
  • chunk_split() - 文字列をより小さな部分に分割する
  • convert_uuencode() - 文字列を uuencode する
  • » RFC 2045 6.8 節



get_headers> <base64_decode
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 22 Apr 2011
 
add a note add a note User Contributed Notes base64_encode
Nimja.com 22-Apr-2011 08:25
A much easier way to add linebreaks every 64'th character would be with regular
expressions.

<?php
$string = base64_encode($string);
$string = preg_replace('/(.{64})/', '$1\n', $string);
?>

And I'm assuming this would be faster too. Hope people have use for this ;)
andronick(dot)mail(dog)gmail(dot)com 10-Sep-2010 01:28
output images into html:

<?php

$imgfile = "test.gif";

$handle = fopen($filename, "r");

$imgbinary = fread(fopen($imgfile, "r"), filesize($imgfile));

echo '<img src="data:image/gif;base64,' . base64_encode($imgbinary) . '" />';

?>

gif - data:image/gif;base64,...
jpg - data:image/jpeg;base64,...
png - data:image/png;base64,...
etc.
gustavo at duranlinar dot es 12-Jan-2010 05:22
Some files can give a real headhache when script file is coded in UTF-8. Change
it to ANSI and it'll work fine.
jonb at wobblymusic dot com 06-Sep-2009 07:21
Note that some applications, such as OpenSSL's enc command, require that there
be a line break every 64 characters in order for their base64 decode function
to work. The following function will take care of this problem:

<?php
function ($encodeMe) {
    $data = base64_encode($encodeMe);
    $datalb = "";
    while (strlen($data) > 64) {
        $datalb .= substr($data, 0, 64) . "\n";
        $data = substr($data,64);
    }
    $datalb .= $data;
    return $datalb;
}
?>
MitMacher 07-Aug-2009 09:57
Unfortunately my "function" for encoding base64 on-the-fly from 2007 [which has
been removed from the manual in favor of this post] had 2 errors!
The first led to an endless loop because of a missing "$feof"-check, the second
caused the rare mentioned errors when encoding failed for some reason in larger
files, especially when
setting fgets($fh, 2) for example. But lower values then 1024 are bad overall
because they slow down the whole process, so 4096 will be fine for all
purposes, I guess.
The error was caused by the use of "empty()".

Here comes the corrected version which I have tested for all kind of files and
length (up to 4,5 Gb!) without any error:

<?php
$fh = fopen('Input-File', 'rb');
//$fh2 = fopen('Output-File', 'wb');

$cache = '';
$eof = false;

while (1) {

    if (!$eof) {
        if (!feof($fh)) {
            $row = fgets($fh, 4096);
        } else {
            $row = '';
            $eof = true;
        }
    }

    if ($cache !== '')
        $row = $cache.$row;
    elseif ($eof)
        break;

    $b64 = base64_encode($row);
    $put = '';

    if (strlen($b64) < 76) {
        if ($eof) {
            $put = $b64."\n";
            $cache = '';
        } else {
            $cache = $row;
        }

    } elseif (strlen($b64) > 76) {
        do {
            $put .= substr($b64, 0, 76)."\n";
            $b64 = substr($b64, 76);
        } while (strlen($b64) > 76);

        $cache = base64_decode($b64);

    } else {
        if (!$eof && $b64{75} == '=') {
            $cache = $row;
        } else {
            $put = $b64."\n";
            $cache = '';
        }
    }

    if ($put !== '') {
        echo $put;
        //fputs($fh2, $put);
        //fputs($fh2, base64_decode($put));        // for comparing
    }
}

//fclose($fh2);
fclose($fh);
?>
pablo at compuar dot com 30-Dec-2008 11:46
If you want to send a very long value over URL, you might consider using
base64_encode, and discover that IE6 only supports 2000 or so chars.

So, Using a little bit of magic you can do this and be happy:

<?php
$string = 'Blah';

$encoded = strtr(base64_encode(addslashes(gzcompress(serialize($string),9))),
'+/=', '-_,');

 $string= unserialize(gzuncompress(stripslashes(base64_decode(strtr($encoded,
'-_,', '+/=')))));

?>
gglockner AT NOSPAMdwaffler DOT com 20-Sep-2008 03:21
I omitted the strtr functions in my examples.  Here are corrected functions:

<?php
function encode($x) {
    return strtr(base64_encode(substr($_SESSION['Cksum'],rand(0,28),4) . $x),
'+/=', '-_~');
}

function decode($x) {
    $y = base64_decode(strtr($x, '-_~', '+/='));
    if (strpos($_SESSION['Cksum'],substr($y,0,4)) === false) return false;
    return substr($y,4-strlen($y));
}
?>
gglockner AT NOSPAMdwaffler DOT com 19-Sep-2008 01:35
I have another solution that is simple and elegant.  Create a pseudorandom
string of characters.  Then, each time you want to obfuscate your key, append a
random substring from the pseudorandom string and use base64 encoding.  When
you want to de-obfuscate, convert back from base64.  If the prefix is not in
your pseudorandom source, then the value is forged.  Otherwise, strip the
prefix and recover your original key.

The advantages are that the string will look different even for the same key,
and encoding and decoding should be extremely fast.

Here's an example:

<?php

// Call makeCksum once upon landing on the homepage
function makeCksum() {
       $str = "";
       for ($i=0;$i<32;++$i)
               $str .= chr(rand(32,126));
       $_SESSION['Cksum'] = $str;
}

function encode($x) {
    return base64_encode(substr($_SESSION['Cksum'],rand(0,28),4) . $x);
}

function decode($x) {
    $y = base64_decode($x);
    if (strpos($_SESSION['Cksum'],substr($y,0,4)) === false) return false;
    return substr($y,4-strlen($y));
}
?>
marcus dot kabele at kabele dot at 03-May-2008 03:22
At Andi:
The last 6 chars of the decoded is used as some checksum + cryptographical salt
- this prevents only in/decrementation of a primary key (ID) in an URL.
But there is no obfuscation of the ID, it is visible almost immediately: the
number before "-". Hackers are thus guided to this internal ID of the database
record and can use this knowledge...

Obfuscate better, making details a little less obvious, but not more secure:
* avoid the "-" (the "checksum/salt" is always the same lenght...),
* obfuscate the integer by converting ist to hex, like the hash.

<?php
// unchanged, thanx Tom, Andy, fsx.nr01
function base64_url_encode($input) {
    return strtr(base64_encode($input), '+/=', '-_,');
    }

function base64_url_decode($input) {
    return base64_decode(strtr($input, '-_,', '+/='));
    }

// some variables are used for clarity, they can be avoided and lines can be
shortened:

function encryptId($int, $TableSalt='') {
    global $GlobalSalt;    // global secret for salt.
   
    $HashedChecksum = substr(sha1($TableSalt.$int.$GlobalSalt), 0, 6);
    // The length of the "HashedChecksum" is another little secret,
    // but when the integers are small, it reveals...
   
    $hex = dechex($int);
    // The integer is better obfuscated by being HEX like the hash.
   
    return base64url_encode($HashedChecksum.$hex);
    // reordered, alternatively use substr() with negative lengths...
    }

function decryptId($string, $TableSalt='') {
    // checks if the second part of the base64 encoded string is correct.
    global $GlobalSalt;    // global secret for salt.
    $parts = base64url_decode($string);
    $hex = substr($parts, 6);
    $int = hexdec($hex);
    $part1 = substr($parts, 0, 6);    // The "checksum/salt" is always the same
length
   
    return substr(sha1($TableSalt.$int.$GlobalSalt), 0, 6) === $part1
        ? $int
        : false;    // distinguish "0" and "false"
    }
?>

There are some questions remaining:
* Why should we use sha1() for such an low-security task, it needs a lot of
calculation.
* Would other algorithms be faster?
If your goal is, to confuse ordinary users, crc32() is much faster than sha1().
(But it can reveal the "salt" which then is much more a filler than a secret.)
If you want to secure against hackers, you should use strong encryption methods
instead of obfuscation.

Different approach: these calculations for every URL can be avoided:
Take the database-ID, salt it (with a 'secret'), calculate a hash (like sha1),
store it to a (unique - if you don't trust the truncated hash-algorithm any
more) column in the database in addition to the primary key, index that field,
and use that strange string for the URL and for the query. These calculations
are done once and never again, but it costs you more memory for the database.
As secure as the other solution, but much faster (at least for php).
fsx.nr01 [at] gmail [dot] com 14-Apr-2008 09:56
Shortened the base64url_encode and decode functions from Andi (http://
nl2.php.net/manual/en/function.base64-encode.php#82200)

function base64_url_encode($input)
{
    return strtr(base64_encode($input), '+/=', '-_,');
}

function base64_url_decode($input)
{
    return base64_decode(strtr($input, '-_,', '+/='));
}
Andi 31-Mar-2008 09:54
I needed a simple way to obfuscate auto_increment primary keys in databases
when they are visible to users in URIs or API calls. The users should not be
able to increment the id in the URL and see the next data record in the
database table.

My solution (uses modified base64 functions by Tom):

function base64url_encode($plainText) {
   
    $base64 = base64_encode($plainText);
    $base64url = strtr($base64, '+/=', '-_,');
    return $base64url;  
}

function base64url_decode($plainText) {
   
    $base64url = strtr($plainText, '-_,', '+/=');
    $base64 = base64_decode($base64url);
    return $base64;  
}

function encryptId($int, $class='') {
   
    return base64url_encode($int.'-'.substr(sha1($class.$int.encryptionKey), 0,
6));
}

function decryptId($string, $class='') {
   
    $parts = explode('-', base64url_decode($string));
    if (count($parts) != 2) {
       
        return 0;
    }
   
    $int = $parts[0];
    return substr(sha1($class.$int.encryptionKey), 0, 6) === $parts[1]
        ? (int)$int
        : 0;
}

- The optional 2nd argument is the class name, so two equal ids of different
tables will not result in two equal obfuscated ids.

- encryptionKey is a global secret key for encryption.

- decryptId() checks if the second part of the base64 encoded string is
correct.
Anonymous 26-Feb-2008 01:11
a note on URI -safe base64.
Simply replacing + = and / with _ - and . doesn't work as the base64_encode
function will insert \r \n chars as well which are not URI-safe. So unless we
have a base64encode function that does not insert any newline and padddings,
the output can never be URI -safe.

referring to the note posted by " web at pkasperski dot com"

- you might as well use $encoded = strtr ( base64_encode ($data),
'ABCDEFG.....', 'aBcDEfG....' ).

this is more efficient. Also, Is simply changing the casing of the letters 
more secure? Why don't you try swapping letters around instead

- for your utf8_encode function, the "ord" function returns  a number in the
range 0-255. Remember that strings in PHP are actually a sequence of bytes
rather than chars. So your utf8 encode func may not work properly. and the line
"for ($n = 0; $n < strlen($input); $n++) {" is inefficient, you should assign 
a variable $count to  strlen($input) and use it.

referring to
"dlyaza aT yahoo DOT com"

whats the usefulness of encoding your images in a php file??

referring to  "php at ianco dot co dot uk"

- what version of php are you using? Your code works fine for me. I see all the
output.
web at pkasperski dot com 26-Oct-2007 02:08
I have implemented the base64_encode() function with some custom  mapping table
so I could encode some binary data more securely without anyone knowing how to
decode it

here is the class

<?php

class Base64 {
   
    /**
     * I have changed letter placement (P <=> x, S <=> 9) and the cases
     * You can completely redo the mapping table
     */

    private static $BinaryMap = array(
        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', //  7
        'i', 'j', 'k', 'l', 'm', 'n', 'o', 'x', // 15
        'q', 'r', '9', 't', 'u', 'v', 'w', 'x', // 23
        'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', // 31
        'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', // 39
        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', // 47
        'W', 'P', 'Y', 'Z', '0', '1', '2', '3', // 55
        '4', '5', '6', '7', '8', 'S', '+', '/', // 63
        '=',  // padding char
    );
   
    public function __construct() {}
   
    public function base64_encode($input) {
       
        $output = "";
        $chr1 = $chr2 = $chr3 = $enc1 = $enc2 = $enc3 = $enc4 = null;
        $i = 0;
       
//        $input = self::utf8_encode($input);
       
        while($i < strlen($input)) {
            $chr1 = ord($input[$i++]);
            $chr2 = ord($input[$i++]);
            $chr3 = ord($input[$i++]);
           
            $enc1 = $chr1 >> 2;
            $enc2 = (($chr1 & 3) << 4) | ($chr2 >> 4);
            $enc3 = (($chr2 & 15) << 2) | ($chr3 >> 6);
            $enc4 = $chr3 & 63;
           
            if (is_nan($chr2)) {
                $enc3 = $enc4 = 64;
            } else if (is_nan($chr3)) {
                $enc4 = 64;
            }
           
            $output .=  self::$BinaryMap[$enc1]
                      . self::$BinaryMap[$enc2]
                      . self::$BinaryMap[$enc3]
                      . self::$BinaryMap[$enc4];
        }
       
        return $output;
    }
   
    public function utf8_encode($input) {
        $utftext = null;
       
        for ($n = 0; $n < strlen($input); $n++) {

            $c = ord($input[$n]);
           
            if ($c < 128) {
                $utftext .= chr($c);
            } else if (($c > 128) && ($c < 2048)) {
                $utftext .= chr(($c >> 6) | 192);
                $utftext .= chr(($c & 63) | 128);
            } else {
                $utftext .= chr(($c >> 12) | 224);
                $utftext .= chr((($c & 6) & 63) | 128);
                $utftext .= chr(($c & 63) | 128);
            }
        }
       
        return $utftext;
    }
}

?>

and the usage as follows:

<?php
$string = pack('H*', "31c85c5aaa56c1f0102301ea497d0ab010e4e131af261787"); //
HEX to binary
echo Base64::base64_encode($string);
echo "<br />";
echo base64_encode($string);
?>

and the output will be:

mCHCwQPwWFaqiWhQ9x0kSbdK4tgVjHEh   //  with custom mapping
MchcWqpWwfAQIwHqSX0KsBDk4TGvJheH   //  the base64_encode()
Tom 06-Dec-2006 06:20
This function supports "base64url" as described in Section 5 of RFC 4648, "Base
64 Encoding with URL and Filename Safe Alphabet"

    <?php
    function base64url_encode($plainText)
    {
        $base64 = base64_encode($plainText);
        $base64url = strtr($base64, '+/', '-_');
        return ($base64url);   
    }
    ?>

You may wish to rtrim (or escape) trailing ='s for use in a URI.
eric [at] d512 [dot] com 04-Dec-2006 03:42
Note that at least some Windows systems will not print a line of characters
longer than a certain length unless it has line breaks of some kind.  So if you
base-64 encode a file, print it back for debugging purposes, and see nothing,
don't be alarmed.
dlyaza aT yahoo DOT com 22-Oct-2006 12:57
Using Function:
Output for HTML Put:
<img src="$self?image=file" border="0" alt="file">
<img src="$self?image=folder" border="0" alt="folder">

function getimage ($image) {
    switch ($image) {
    case 'file':
        return base64_decode('R0lGODlhEQANAJEDAJmZmf///wAAAP///yH5BAHoAwMALAAAA
AARAA0AAAItnIGJxg0B42rsiSvCA/REmXQWhmnih3LUSGaqg35vF
bSXucbSabunjnMohq8CADsA');
    case 'folder':
        return base64_decode('R0lGODlhEQANAJEDAJmZmf///8zMzP///
yH5BAHoAwMALAAAAA
ARAA0AAAIqnI+ZwKwbYgTPtIudlbwLOgCBQJYmCYrn+m3smY5v
Gc+0a7dhjh7ZbygAADsA');
    case 'hidden_file':
        return base64_decode('R0lGODlhEQANAJEDAMwAAP///5mZmf///yH5BAHoAwMALAAAA
AARAA0AAAItnIGJxg0B42rsiSvCA/REmXQWhmnih3LUSGaqg35vF
bSXucbSabunjnMohq8CADsA');
    case 'link':
        return base64_decode('R0lGODlhEQANAKIEAJmZmf///wAAAMwAAP///wAAAAAAAAAAA
CH5BAHoAwQALAAAAAARAA0AAAM5SArcrDCCQOuLcIotwgTYUll
NOA0DxXkmhY4shM5zsMUKTY8gNgUvW6cnAaZgxMyIM2zBLCaHlJgAADsA');
    case 'smiley':
        return base64_decode('R0lGODlhEQANAJECAAAAAP//AP///wAAACH5BAHoAwIALAAAA
AARAA0AAAIslI+pAu2wDAiz0jWD3hqmBzZf1VCleJQch0rkdnppB3
dKZuIygrMRE/oJDwUAOwA=');
    case 'arrow':
        return base64_decode('R0lGODlhEQANAIABAAAAAP///yH5BAEKAAEALAAAAAARAA0AA
AIdjA9wy6gNQ4pwUmav0yvn+hhJiI3mCJ6otrIkxxQAOw==');
    }
}
php at ianco dot co dot uk 22-Sep-2006 03:25
I am finding a length restriction with base64_encode (or possibly with echo) in
PHP 4.3.9.
This works ok for me:
<?php
echo strlen(str_repeat('-', 3273)); // 3273
echo strlen(base64_encode(str_repeat('-', 3273))); // 4364
echo base64_encode(str_repeat('-', 3273)); // LS0t repeated
?>
But change the length to 3274 and the third echo prints nothing.
<?php
echo strlen(str_repeat('-', 3274)); // 3274
echo strlen(base64_encode(str_repeat('-', 3274))); // 4368
echo base64_encode(str_repeat('-', 3274)); // Nothing at all printed
?>
This has obvious implications if you're wanting to encode a fairly large
serialized array and echo it to a form field.
peter at mailinator dot com 23-Jul-2006 09:06
If you want to decode base64 encoded data in Javascript, you can use the tool
(Webtoolkit.base64) on this website: http://www.webtoolkit.info/
greenthumb at 4point-webdesign dot de 26-Apr-2006 09:57
I had massive problems storing a serialized Object which contained UTF-8 parts
and some ascii parts (from the serialization i think) into mysql.

So i used base64_encode to get a clean string which could be safely decoded and
unserialized.

this is bulletproof - if you ever have trouble use this.
the runtime is imho no problem.
dawgeatschikin at hotmail dot com 28-Mar-2006 04:06
Just a minor tweak of massimo's functions.

<?
$data = str_replace(array('+','/','='),array('-','_','.'),$data);
//replace '=' with '.' instead of with nothing, that way the process is
reversible.  '.' is uri-safe according to http://www.w3.org/Addressing/URL/
5_URI_BNF.html
?>
massimo dot scamarcia at gmail dot com 23-Mar-2006 03:23
$data = str_replace(array('+','/','='),array('-','_',),$data); //
MIME::Base64::URLSafe implementation
      
$data = str_replace(array('+','/'),array('-','_'),$data); // Python raise
"TypeError: Incorrect padding" if you remove "=" chars when decoding
massimo dot scamarcia at gmail dot com 23-Mar-2006 11:02
function urlsafe_b64encode($string) {
    $data = base64_encode($string);
    $data = str_replace(array('+','/','='),array('-','_',''),$data);
    return $data;
}

function urlsafe_b64decode($string) {
    $data = str_replace(array('-','_'),array('+','/'),$string);
    $mod4 = strlen($data) % 4;
    if ($mod4) {
        $data .= substr('====', $mod4);
    }
    return base64_decode($data);
}

Php version of perl's MIME::Base64::URLSafe, that provides an url-safe base64
string encoding/decoding (compatible with python base64's urlsafe methods)
Gabriel Malca 17-Mar-2006 09:45
If the function doesn't exist, this is a messy but effective way of doing it:

<?

echo bencode("Gabriel Malca");
// R2FicmllbCBNYWxjYQ==

function bencode($string='') {
    $binval = convert_binary_str($string);
    $final = "";
    $start = 0;
    while ($start < strlen($binval)) {
        if (strlen(substr($binval,$start)) < 6)
            $binval .= str_repeat("0",6-strlen(substr($binval,$start)));
        $tmp = bindec(substr($binval,$start,6));
        if ($tmp < 26)
            $final .= chr($tmp+65);
        elseif ($tmp > 25 && $tmp < 52)
            $final .= chr($tmp+71);
        elseif ($tmp == 62)
            $final .= "+";
        elseif ($tmp == 63)
            $final .= "/";
        elseif (!$tmp)
            $final .= "A";
        else
            $final .= chr($tmp-4);
        $start += 6;
    }
    if (strlen($final)%4>0)
        $final .= str_repeat("=",4-strlen($final)%4);
    return $final;
}

function convert_binary_str($string) {
    if (strlen($string)<=0) return;
    $tmp = decbin(ord($string[0]));
    $tmp = str_repeat("0",8-strlen($tmp)).$tmp;
    return $tmp.convert_binary_str(substr($string,1));
}

?>
conradopinto at yahoo dot com dot br 09-Feb-2006 03:04
There is an error on the example of passing an array through an HTML Form.

In the line:
$array = unserialize(base64_decode($coded_array);

There is a ')' missing. it should be:
$array = unserialize(base64_decode($coded_array));
virtuall at virtuall dot info 06-Dec-2005 09:53
If you encode text that contains symbols like < > and want to send it in GET
query, be sure to urlencode the result of base64_encode, as it sometimes adds
a  + (and it's a special symbol) at the end:

<?php
    echo base64_encode('<html>');
?>

returns:

PGh0bWw+

A function like this could also be useful:

<?php
    function base64_urlencode($str) {
        return urlencode(base64_encode($str));
    };
?>
andi151278 15-Nov-2005 05:58
Using base64_encode to produce clean filenames from usernames (e.g. for image
upload) is a bad idea if Umlaute ( , , ) are allowed. Then there is a slash (/)
added in the filename, that will lead to a nonexisting directory beeing looked
for and your script crashing!
Cristiano Calligaro 25-Aug-2005 10:05
I've used base64_encode and base64_decode for file attachment both in MySQL
(using a BLOB field) and MSSQL (using a TEXT field). For MSSQL remember to set
in PHP.INI file both mssql.textsize and mssql.textlimit to 2147483647.

Here's the code:

######### MSSQL(mssql_)/MySQL(mysql_) file attach
$val=$HTTP_POST_FILES['lob_upload']['tmp_name'];
$valn=$HTTP_POST_FILES['lob_upload']['name'];
$valt=$HTTP_POST_FILES['lob_upload']['type'];

$data=base64_encode(addslashes(fread(fopen($val, "r"), filesize($val))));

mssql_connect("srv","usr","pass") or die ("");
mssql_select_db("db") or die ("");
$query = "UPDATE $table SET $field='$data', $fieldname='$valn', $fieldtype=
'$valt' WHERE DocID='$DocID'";
$result = mssql_query($query) or die(mssql_error());
mssql_close();

######### MSSQL(mssql_)/MySQL(mysql_) open file attached
mssql_connect("srv","usr","pass") or die ("");
mssql_select_db("db") or die ("");
$query = "SELECT $field,$fieldtype FROM $table WHERE DocID='$DocID'";
$result = mssql_query($query) or die(mssql_error());
$row = mssql_fetch_array($result);

header("Content-type: $row[1]");
echo stripslashes(base64_decode($row[0]));

This strategy is good for Microsoft Word, Acrobat PDF, JPG image and so on
(even zipped files!!!)
mightymrj at hotmail dot com 28-Oct-2004 05:35
Problem: mime attachments sending as blank or almost completely blank documents
(all data is lost)

Explanation: After a couple days of trying to mime pdf attachments without
losing all data, I finally came across this function in some obsolete obscure
post:

set_magic_quotes_runtime()

This is set to on by default in the machine, and it causes fread() and/or
base64_encode() (both used in most mime examples I've seen) to read or encrypt
binary without slashes for special characters.  This causes sent files to
process incorrectly, breaking, thus truncating most of the data in the file. 

Fix: pass 0 to this function and it will do a one time turn off while your code
executes.

example:
<?php
   set_magic_quotes_runtime(0);
?>

This can also been turned off in the php.ini file, but I'm not sure what uses
that setting or what the consequences might be.

info:
   http://us2.php.net/manual/en/function.set-magic-quotes-runtime.php
juha at kuhazor dot idlegames dot com 22-Jun-2004 03:29
If you use base64encoded strings as cookie names, make sure you remove '='
characters. At least Internet Explorer refuses cookie names containing '='
characters or urlencoded cookie names containing %xx character replacements.
Use the function below to turn base64 encoded strings to bare alphabets (get
rid of / and + characters as well)

<?php
function base64clean($base64string)
{
     $base64string = str_replace(array('=','+','/'),'',$base64string);

     return $base64string;
}
?>
Siu from Hong Kong 20-Nov-2003 07:17
As someone suggested above:

using base64_encode() to encode image data and finally output to browser using
"data" scheme of IMG src:

<?
// ...
echo '<img src="data:image/png;base64,'.$encoded.' ">';
?>

Netscape browser supports this... However, Windows' Internet Explorer does not.

To embed binary contents in ascii text based html file for IE, you need use
MIME multipart.
sb 29-Aug-2003 10:33
Re the message on 10-May-2003 04:02

You'll want to call urlencode on the base_64 encoded data before putting it
into a GET.  IIUC, base 64 output includes the plus and the slash, both of
which will be mungered by browsers.
teddy at mycyberclassroom dot com 29-May-2003 04:21
if you want to insert the base64 encoded image in your html <img src> you need
to write 'data:datatype;base64,encodeddata' . For example here's a way to embed
an PNG image data:

<?
//get the base64 encoded image
$handle = fopen($tempfile,'rb');
$file_content = fread($handle,filesize($tempfile));
fclose($handle);
$encoded = chunk_split(base64_encode($file_content));

//then echo to browser as:

echo '<img src="data:image/png;base64,'.$encoded.' ">';
?>
Calvin[at] polbox [at] com 13-May-2003 09:34
If you want attach a binary file into mail, pay attention to use mode with "B"
flag into fopen function (This is useful only on systems which differentiate
between binary and text files, i.e. Windows) Include the 'b' flag in order to
make your scripts more portable.

<?php
$handle = fopen($source_file,'rb');
$file_content = fread($handle,filesize($source_file));
fclose($handle);
$encoded = chunk_split(base64_encode($file_content));
?>
koos_nt_hulskamp at hotmail dot com 10-May-2003 12:02
I had to send a php array trough a FORM in HTML, and came up with this
solution:

<?
$array[] = array("foo", "bar");
$coded_array = base64_encode(serialize($array));
?>

now u can put the $coded_array into an input field or even a GET link ex:

<a href="some_script.php?coded_array=<?=$coded_array;?>">script link</a>

after receiving it in the script you send it to, do the following:

<?
$coded_array = $_GET["coded_array"]     // or $_POST off course
$array = unserialize(base64_decode($coded_array);
?>
guy at bhaktiandvedanta dot com 02-Oct-2002 12:00
You can use base64_encode to transfer image file into string text and then
display them. I used this to store my images in a database and display them
form there. First I open the files using fread, encoded the result, and stored
that result in the database. Useful for creating random images.

image.php:

<?

header(" Content-Type: image/jpeg");
header(" Content-Disposition: inline");
$sql = "SELECT data FROM image where name='".$img."'";
$result = mysql_query($sql);
$row = mysql_fetch_row($result);
$image = $row[0];
echo base64_decode($image);

?>

And in the html file you put:

<img src="image.php?img=test3"  border="0" alt="">

Guy Laor
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue May 3 18:12:09 2011 UTC
needle で haystack を検索します。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
    haystack の中の needle の型も確認します。

返り値

配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 22 Apr 2011
 
add a note add a note User Contributed Notes in_array
Sascha Luedi 28-Feb-2011 05:33
strange behaviour of in_array:

If you have an array like:
<?php
$a = array(0,1,2,3,4,5);
in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false
?>

If you have an array like (without 0):
<?php
$a = array(1,2,3,4,5);
in_array("bla", $a) returns false
in_array("6bla", $a) returns false
in_array("5bla", $a) returns true
?>

so better use strict arg!
Joris Meijer 15-Feb-2011 01:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 04:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 08:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 09:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 06:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
cousinka at gmail dot com 09-Aug-2010 12:44
Here is a function which returns TRUE if a value exists in a multi array or in
a multi object

<?php
function in_multiarray($elem, $array)
    {
        // if the $array is an array or is an object
         if( is_array( $array ) || is_object( $array ) )
         {
             // if $elem is in $array object
             if( is_object( $array ) )
             {
                 $temp_array = get_object_vars( $array );
                 if( in_array( $elem, $temp_array ) )
                     return TRUE;
             }
            
             // if $elem is in $array return true
             if( is_array( $array ) && in_array( $elem, $array ) )
                 return TRUE;
                
            
             // if $elem isn't in $array, then check foreach element
             foreach( $array as $array_element )
             {
                 // if $array_element is an array or is an object call the
in_multiarray function to this element
                 // if in_multiarray returns TRUE, than return is in array,
else check next element
                 if( ( is_array( $array_element ) || is_object( $array_element
) ) && $this->in_multiarray( $elem, $array_element ) )
                 {
                     return TRUE;
                     exit;
                 }
             }
         }
        
         // if isn't in array return FALSE
         return FALSE;
    }
?>
Willian Gustavo Veiga 16-Jun-2010 02:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 06:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 03:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 14-Feb-2010 12:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 10:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 11:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 07:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 11:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 07:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 11:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 05:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 07:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 10:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 01:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 12:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 09:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 03:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 09:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 30-Oct-2008 05:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 09:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 07:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 03:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 09:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 11:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 07:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 10:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 05:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 21-May-2007 03:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 06:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 12:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 09-Apr-2006 03:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 03:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 02:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
14-Jan-2006 05:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 09:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 02:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 12:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 08-Jan-2003 01:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 02:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 10-Aug-2002 02:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 10:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 03:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Tue May 3 17:21:29 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict ] )

needle で haystack を検索します。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

list> <krsort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
ksort

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

compact> <arsort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
asort

(PHP 4, PHP 5)

asort — 連想キーと要素との関係を維持しつつ配列をソートする

説明

bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )

この関数は、連想配列において各配列のキーと要素との関係を維持しつつ配列をソート
します。この関数は、主に実際の要素の並び方が重要である連想配列をソートするため
に使われます。

パラメータ

array

    入力の配列。

sort_flags

    オプションのパラメータ sort_flags によりソートの動作を修正可能です。詳細に
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_keys> <array_intersect
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
array_key_exists

(PHP 4 >= 4.0.7, PHP 5)

array_key_exists — 指定したキーまたは添字が配列にあるかどうかを調べる

説明

bool array_key_exists ( mixed $key , array $search )

指定した key が配列に設定されている場合、 array_key_exists() は TRUE を返します
。 key は配列添字として使用できる全ての値を使用可能です。

パラメータ

key

    調べる値。

search

    キーが存在するかどうかを調べたい配列。

返り値

成功した場合に TRUE を、失敗した場合に FALSE を返します。

変更履歴

バージ                                   説明
 ョン
5.3.0   この関数はオブジェクトに対しては使えなくなりました。オブジェクトについ
        ては property_exists() を使用します。

例

例1 array_key_exists() の例

<?php
$search_array = array('first' => 1, 'second' => 4);
if (array_key_exists('first', $search_array)) {
    echo "この配列には 'first' という要素が存在します";
}
?>

例2 array_key_exists() 対 isset()

isset() は NULL 値を持つ配列キーに対して TRUE を返しません。一方、
array_key_exists() は TRUE を返します。

<?php
$search_array = array('first' => null, 'second' => 4);

// false を返します
isset($search_array['first']);

// true を返します
array_key_exists('first', $search_array);
?>

注意

    注意:

    下位互換のために、次の非推奨別名を使用してもいいでしょう。 key_exists()

参考

  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_keys() - 配列のキーすべて、あるいはその一部を返す
  • in_array() - 配列に値があるかチェックする
  • property_exists() - オブジェクトもしくはクラスにプロパティが存在するかどう
    かを調べる



array_keys> <array_intersect
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes array_key_exists
tech at signhere envy dot de 18-Jan-2011 10:23
Hey, this function is able to rename a key inside an array.

If the key to be replaced doesn't exist inside the array, or the new key
already exists in the array, the function will return FALSE.
Otherwise, the array with the renamed key will be returned.

Hope this will be useful for someone.
<?php
function array_rename_key($array, $key, $newkey){
    if( ! array_key_exists($key, $array) || array_key_exists($newkey, $array))
return FALSE;
    $uid = uniqid(''); //To clearly identify the Element.
    $preserve_value = $array[$key]; //Keep the Value
    $array[$key] = $uid; //Overwrite Value with ID
    $array = array_flip($array); //Flip the Array keys and values
    $array[$uid] = $newkey; //Set Value of the ID with new Key.
    $array = array_flip($array); //Everything back in Place.
    $array[$newkey] = $preserve_value;
    return $array;
}
?>
jens dot hoevenaars at gmail dot com 06-Nov-2010 11:21
I created this function that uses array key exist to compare a form and a table
to see if something has changed.

This can be very helpfull if you need to update a table record from a form but
you do not want to display all table fields.

<?php
function($data_from_db, $form_data) {
 $data = $data_from_db;
 $keys = array_keys($data);

    for($i = 0; $i < count($data); $i++) {
        if(!array_key_exists($keys[$i], $form_data)) {
            $dbobject->$keys[$i] = $data[$keys[$i]];
        } else {
            $dbobject->$keys[$i] = $form_data[$keys[$i]];
        }
    }
    return $dbobject;
}
?>

you can then use the dbobject to update the table.
moandsimon at btinternet dot com 26-Apr-2010 08:56
This uses array_key_exists.

You have a multidimensional array of the form:

$rowsoriginal[] = array('field_wrkvolmin_value' => 216, 'field_wrkvolmax_value'
=> 1000);
$rowsoriginal[] = array('field_wrkvolmin_value' => 27, 'field_wrkvolmax_value'
=> 216);

Using print_r this will look like:

Array ( [0] => Array ( [field_wrkvolmin_value] => 216 [field_wrkvolmax_value]
=> 1000 ) [1] => Array ( [field_wrkvolmin_value] => 27 [field_wrkvolmax_value]
=> 216 ) )

This can be used to create a table by iterating over the rows that looks like
this:

field_wrkvolmin_value          field_wrkvolmax_value
           216                                      1000
            27                                       216

when $rowsoriginal contain a fixed but unknown amount of values.

If you want to process this in an automatic way without knowing the keys etc,
into a multidimensional array of the form:

$rowstemp = array('field_wrkvolmin_value' => array(216, 27),
'field_wrkvolmax_value' => array(1000, 216));

Using print_r this will look like:

Array ( [field_wrkvolmin_value] => Array ( [0] => 216 [1] => 27 )
[field_wrkvolmax_value] => Array ( [0] => 1000 [1] => 216 ) )

This can be used to iterate over the rows of a table to create a table in the
form of:

field_wrkvolmin_value            216            27
field_wrkvolmax_value           1000           216

To do this you can use the following looping and conditional structure, using
array_key_exists():

<?php
$rowstemp = array();
foreach ($rowsoriginal as $row) {
    foreach ($row as $key => $value) {
        if (array_key_exists($key, $rowstemp)) {
            $rowstemp[$key][] = $value;
        }
        else {
            $valuestemp = array($value);
            $rowstemp[$key] = $valuestemp;
        }
    }
}
?>
gmdebby at gmail dot com 14-Jan-2010 01:44
A little function which take an array as keys

<?php
//note the s in the function name (keys)
function array_keys_exists($array,$keys) {
    foreach($keys as $k) {
        if(!isset($array[$k])) {
        return false;
        }
    }
    return true;
}
?>
//useful to validate a form for example
<form>
    <input type="text" name="field1" /><br />
    <input type="text" name="field2" /><br />
    <input type="text" name="field3" /><br />
    <input type="text" name="field4" /><br />
    <input type="text" name="field5" /><br />
</form>
<?php
if(!array_keys_exists($_POST,
array("field1","field2","field3","field4","field5")
)) {
    //some fields are missing, dont do anything (maybe hacking)
} else {
    //code ...
}
?>
Darkless at seznam dot cz 13-Nov-2009 05:17
a bit upgraded multi_array_key_exists function

@param needle string to be searched in keys
@param haystack array to be searched in

@return false when it was not found or string structured by name of keys
devided by ":"

eg $arrays = array ('first' => array ( 'one'=> 'anything'));

for multi_array_key_exists('one',$arrays) it returns:
"first:one" by explode you can then write sth like $array[$path[0]][$path
[1]]...
<?php

function multi_array_key_exists($needle, $haystack) {
      foreach ($haystack as $key=>$value) {
        if ($needle===$key) {
          return $key;
        }
        if (is_array($value)) {
          if(multi_array_key_exists($needle, $value)) {
            return $key . ":" . multi_array_key_exists($needle, $value);
          }
        }
      }
  return false;
}
?>
PHPEric 05-Aug-2009 01:51
Very simple case-insensitive array_key_exists:

bool (in_array(strtolower($needle), array_map('strtolower', array_keys
($haystack))))
tom at edgedesigns dot org 21-Jul-2009 12:10
The multi_array_key_exists() function posted by alishahnovin at hotmail dot com
[which has since been removed] does not always return the expected result.

This modified version does.

<?php
/**
 * multi_array_key_exists function.
 *
 * @param mixed $needle The key you want to check for
 * @param mixed $haystack The array you want to search
 * @return bool
 */
function multi_array_key_exists( $needle, $haystack ) {
 
    foreach ( $haystack as $key => $value ) :

        if ( $needle == $key )
            return true;
       
        if ( is_array( $value ) ) :
             if ( multi_array_key_exists( $needle, $value ) == true )
                return true;
             else
                 continue;
        endif;
       
    endforeach;
   
    return false;
}

?>
webmaster at oehoeboeroe dot nl 04-May-2009 08:09
The way array_key_exists handles null, float, boolean, and
'integer-representing string' keys is inconsistent in itself and, in the case
of bool and float, with the way these are converted when used as array offset.

<?php
$array = array(null => 1, false => 2, true => 3, 4.6 => 4, "08" => 5, "8" =>
6);
var_export($array);

echo "\nnull is " . (array_key_exists(null, $array) ? '' : 'not ') . "a key.\
n";
echo 'false is ' . (array_key_exists(false, $array) ? '' : 'not ') . "a key.\
n";
echo 'true is ' . (array_key_exists(true, $array) ? '' : 'not ') . "a key.\n";
echo '4.6 is ' . (array_key_exists(4.6, $array) ? '' : 'not ') . "a key.\n";
echo '"08" is ' . (array_key_exists("08", $array) ? '' : 'not ') . "a key.\n";
echo '"8" is ' . (array_key_exists("8", $array) ? '' : 'not ') . "a key.\n";
?>

Output:

array (
  '' => 1,
  0 => 2,
  1 => 3,
  4 => 4,
  '08' => 5,
  8 => 6,
)
null is a key.
false is not a key.
true is not a key.
4.6 is not a key.
"08" is a key.
"8" is a key.

Well, and you get this warning three times (on the bools and the float, but not
on the null):

Warning:  array_key_exists() [function.array-key-exists]: The first argument
should be either a string or an integer in /var/www/php/test.php on line 6
Gibson SG 25-Feb-2009 11:55
Below is a more efficient and useful case-insensitive array_key_exists
function. More useful in the sense that it returns the matching key.

<?php
/**
* Case insensitive version of array_key_exists.
* Returns the matching key on success, else false.
*
* @param string $key
* @param array $search
* @return string|false
*/
function array_key_exists_nc($key, $search) {
    if (array_key_exists($key, $search)) {
        return $key;
    }
    if (!(is_string($key) && is_array($search) && count($search))) {
        return false;
    }
    $key = strtolower($key);
    foreach ($search as $k => $v) {
        if (strtolower($k) == $key) {
            return $k;
        }
    }
    return false;
}

/* Test code: */
$array = array(
    'taste' => 'sweet',
    'cOlOr' => 'yellow',
    'foo',
    'bar',
);
$keys = array(
    'Color',
    'google',
    0,
);
foreach ($keys as $key) {
    print "\t$key: "; var_dump(array_key_exists_nc($key, $array));
}

/* Output:
        Color: string(5) "cOlOr"
        google: bool(false)
        0: int(0)
*/
?>
csaba at alum dot mit dot edu 20-Jan-2009 01:13
In some functions cacheing can be extremely useful, and this is especially true
in recursive functions, and all the more so in doubly recursive functions.  One
way to effect cacheing is to have a static array in the function as shown
below.  This will typically be useful when a function has one or two arguments
and is heavily called.  Example:

<?php
function nk($n, $k) {
  // n choose k, ensuring integer math
  if ($k > $n-$k) $k = $n - $k;         // (n,k) = (n,n-k)
  if ($k<=1) return ($k==1) ? $n : !$k; // (n,1) = n; (n,0)=1; (n,-#) = 0

  static $aNK = array();                // caching section
  if ($aNK[$n][$k]) return $aNK[$n][$k];// if answer already computed => done

  // else compute answer, cache it, and return
  return ($aNK[$n][$k] = nk($n-1, $k) + nk($n-1, $k-1)); }

$n = 20;
$k = 9;
$nk = nk($n,$k);
print "nk($n, $k) = $nk";
?>

For functions of two arguments, using a two dimensional array seems to be
faster than combining arguments a la "$n $k", and the form of testing shown
above is also faster than array_key_exists.  However, to avoid the use of
array_key_exists, special consideration must be given to empty values (several
prior notes cover this) - the example above works because no cached value can
be 0.

Csaba Gabor from Vienna
John 19-Jan-2009 05:27
Here is a little function for case sensitivity to elaborate on what was said by
MarkL from ##php (Freenode) and mmanning at mdanderson dot org from this page:

<?php
// Case sensitive version of array_key_exists() using preg_match()
function array_ikey_exists($key,$arr)
{
    if(preg_match("/".$key."/i", join(",", array_keys($arr))))               
        return true;
    else
        return false;
}
?>

Not that anyone else couldn't have written this, but a concept like this
strengthens reusability.  :)

Also, I've been running into issues with escaping for Regex, so I decided to
give something like this a shot:

<?php
function array_ikey_exists($key,$arr)
{
    $e = 0; //$key = addslashes($key);
    if(is_array($arr) && $arr !==array())
    {
        foreach($arr as $k => $v)
        {   
            if(strtolower($k) == strtolower($key))
                $e++;
        }
        if($e>0)
            return true;       
        else
            return false;
    }
    else
        return false;
}
?>

You could addslashes() to escape; it's just another approach.
david at lostair dot com 07-Dec-2008 08:07
It is important to realise that:

  isset($array ['index'])

Does not act the same as:

  array_key_exists('index', $array)

This is because if an array value is set to NULL

$array['index'] = NULL;

Then isset will return FALSE and array_key_exists will return TRUE.

It is important to realise this!
mmanning at mdanderson dot org 21-Oct-2008 03:13
Something to keep in mind is that array_key_exists is case sensitive.  So two
things I'd like to say:

1. Could there be an additional option added on to the array_key_exists command
so you can specify the case to be insensitive?

2. Here is how you can do this test in one command:

   if( preg_match("/<key>/i", join(",", array_keys(<array>))) ){
      <Do something>
      }

But it would be a lot nicer to just have an additional option on the
array_key_exists.  Like so:

   array_key_exists(<array>, ["i"] );

Ok - so why did this come up at all?  I wrote a routine to convert any whacky
UppERcAsE kind of lettering to just be lowercase letters. (ex: FgColorS becomes
fgcolors and so forth.)  So I never had to guess what the user was putting in
to the program.  There were two particular items (fgColors and bgColors) which
I wanted to test against.  If they were not supplied, my program would supply
them.  The above was the easiest way I could come up with to do this.  :-)
Karim Ratib 19-Aug-2008 12:09
Here's a function to return a reference to the first array element that has a
given key. The code works for multidimensional arrays:

<?php
function &array_find_element_by_key($key, &$form) {
  if (array_key_exists($key, $form)) {
    $ret =& $form[$key];
    return $ret;
  }
  foreach ($form as $k => $v) {
    if (is_array($v)) {
      $ret =& array_find_element_by_key($key, $form[$k]);
      if ($ret) {
        return $ret;
      }
    }
  }
  return FALSE;
}
?>
jacobsingh at gmail dot com 17-Jun-2008 10:54
I saw some examples above for array_keys_exist() or functions to see if
multiple keys exist in a given array and return false if any of them don't.

Here is a simpler way to do this:

<?php

function array_keys_exist($keys,$array) {
    if (count (array_intersect($keys,array_keys($array))) == count($keys)) {
        return true;
    }
}

$array = array ('filename' => 'myfile', 'filesize' => 1234, 'filepath' => '/tmp
/myfile');
$keys = array('filename','filesize','filepath');

echo array_keys_exist($keys,$array);
//returns true

$keys[] = "somethingelse";

echo array_keys_exist($keys,$array);
//Returns false

?>
mankyd at gmail dot com 28-May-2008 05:29
You'll notice several notes on this page stating that isset() is significantly
faster than array_key_exists(). This may be true except for one small hitch.
isset() will return false for arrays keys that have there value set to NULL,
which is therefore not entirely accurate.

Example:

<?php
$foo = array();
$foo['bar'] = NULL;

var_dump(isset($foo['bar']));
var_dump(array_key_exists('bar', $foo));
?>

will output:
bool(false)
bool(true)

Be aware of this!
bplessingerMONKEYleapfroginteractive.com 30-Apr-2008 04:22
I noticed that the function for recursion broke the ability to use this on
objects, so I added another check to also allow it to work for objects.

<?php

function array_key_exists_r($needle, $haystack)
{
    $result = array_key_exists($needle, $haystack);
    if ($result)
        return $result;
    foreach ($haystack as $v)
    {
        if (is_array($v) || is_object($v))
            $result = array_key_exists_r($needle, $v);
        if ($result)
        return $result;
    }
    return $result;
}
?>
tmont 29-Apr-2008 09:54
The argument of array_key_exists() vs. isset() came up in the workplace today,
so I conducted a little benchmark to see which is faster:

<?php
    // one-dimensional arrays
    $array = array_fill(0,50000,'tommy is the best!');
    $arraykeyexists_result = array();

    $start = microtime(true);
    for ($i = 0; $i < 100000; $i++) {
        if (array_key_exists($i,$array)) {
            $arraykeyexists_result[] = 1;
        }
        else {
            $arraykeyexists_result[] = 0;
        }
    }
    $arrtime = round(microtime(true)-$start,3);
   
    $start = microtime(true);
    for ($i = 0; $i < 100000; $i++) {
        if (isset($array[$i])) {
            $arraykeyexists_result[] = 1;
        }
        else {
            $arraykeyexists_result[] = 0;
        }
    }
    $istime = round(microtime(true)-$start,3);
   
    $totaltime = $arrtime+$istime;
    $arrpercentage = round(100*$arrtime/$totaltime,3);
    $ispercentage = round(100*$istime/$totaltime,3);   
   
    echo "array_key_exists(): $arrtime [$arrpercentage%] seconds\n";
    echo "isset():            $istime [$ispercentage%] seconds\n";

?>

On Windows, the output is similar to

array_key_exists(): 0.504 [82.895%] seconds
isset():            0.104 [17.105%] seconds

On Mac or Linux, isset() is faster but only by a factor of approximately 1.5.
Benjamin*removethis*BeckATgmx.de 08-Mar-2008 07:24
Hi, i needed a recursive check is a key exists .. so here it is. I Hope it
saves you time (-:

<?php
function array_key_exists_r($needle, $haystack)
{
    $result = array_key_exists($needle, $haystack);
    if ($result) return $result;
    foreach ($haystack as $v) {
        if (is_array($v)) {
            $result = array_key_exists_r($needle, $v);
        }
        if ($result) return $result;
    }
    return $result;
}

$test = array(
    "L0"    =>    array(
        "Über uns"    => array(
            "name" => "Über uns",
            "MenuLast" => 0,
            "subMenu" => 8,
            "href" => "/admin/pages/admin_page_edit.php?nav_gid=1.1",
            "navid" => 1.1,
            "posid" => 1,
            "klickPath" => 0,
        ),
        "Was wir tun"    => array(
            "name" => "Über uns",
            "MenuLast" => 0,
            "subMenu" => 8,
            "href" => "/admin/pages/admin_page_edit.php?nav_gid=1.1",
            "navid" => 1.1,
            "posid" => 1,
            "klickPath" => 0,
        ),
    ),
);

dumpvar(array_key_exists_r('navid', $test), 'array_key_exists_r(\'navid\',
$test)');
?>
Output:
var array_key_exists_r('navid', $test)(boolean): 'true'
packard_bell_nec at hotmail dot com 31-Jan-2008 05:46
You can check whether a variable is defined by using array_key_exists()!
First, you may ask that no reserved array (would be called $LOCALS) is
predefined in function scope (contrast to reserved array $GLOBALS in global
scope. To solve it, you can use compact().
Then, you may ask that why property_exists() cannot be used. This is because no
reserved function is predefined to create OBJECT containing variables and their
values, and no reserved function is predefined to import variables into the
current symbol table from an OBJECT. In addition, property_exists() breaks the
naming convention of reserved function.
Finally, I show how to check whether a variable is defined by using
array_key_exists():
<?php
function too(){
$roo = array_key_exists('foo', compact('foo'));
echo ($roo?'1':'0').'<br/>';
$foo = null;
$roo = array_key_exists('foo', compact('foo'));
echo ($roo?'1':'0').'<br/>';
}
too();
?>
The output will be:
0<br/>
1<br/>
mudsrcool at yahoo dot com 29-Dec-2007 12:19
If you use func_get_args, you can make a slightly prettier implementation of
diogoshaw's function:

<?php

function array_keys_exist() {                                                 
                                       
    $keys = func_get_args();                                                   
                                      
    $haystack = array_shift($keys);                                           
                                       
    foreach ($keys as $key)
        if (!array_key_exists($key, $haystack)) return false;                 
                                       
    return true;
}

//Pans out as:
if (array_keys_exist($_GET, 'login', 'user', 'passwd') {
   //login;
} else {
   //don't login;
}

?>
Erel Segal 13-Nov-2007 08:18
array_diff can be very slow when the arrays are big. If all you need is to
check which elements in array1 are not KEYS in array2, DON'T use:

<?php
  array_diff($array1,array_keys($array2))
?>

A much quicker option is:

<?php
    foreach ($array1 as $key=>$value) {
        if (isset($array2[$key]))
            unset($array1[$key]);
    }
?>

On my computer, when $array1 has a single element and $array2 has 2600
elements, option 1 takes 50 milli-seconds, and option 2 takes 50 micro-seconds
(1000 times less!).
wolf550e at gmail dot com 27-Sep-2007 07:51
array_key_exists(), at least in 5.2.4, passes the array by value. I conclude
this from seeing performance worsen as the array to search got bigger. isset()
doesn't have this problem.
diogoshaw at gmail dot com 15-Sep-2007 06:58
this function very good to use if you need to verify many variables:

<?php
function array_key_exists_r($keys, $search_r) {
    $keys_r = split('\|',$keys);
    foreach($keys_r as $key)
    if(!array_key_exists($key,$search_r))
    return false;
    return true;
}
?>

e.g.

<?php
if(array_key_exists_r('login|user|passwd',$_GET)) {
// login
} else {
// other
}
?>

works for me, enjoy.
dg shaw.
j_hattersleydykes {at} yahoo uk 27-Aug-2007 12:39
hey - I thought this function maybe useful to someone somewhere..
It works on an array of the keys you want to check exist. you could pass in the
names of form fields and the POST array - suppose it could be useful in aiding
form validation.

function array_keys_exist(array $keys, array $toCheck, $whichKey = false)
{
    foreach ($keys as $array_key)
    {
        if (! array_key_exists($array_key, $toCheck))
        {
            // return first key thats not found.
            if ($whichKey)
            {
                return $array_key;
            }
            else
            {
                return false;
            }
        }
    }
    // all keys exist
    return true;
}

hope someone finds it useful :)
sj-b at hotmail dot de 01-Aug-2007 04:14
i dont like how empty() works.
an integer with value 0 or a boolean wth
value false (same like zero) counts as
empty too.

[code]function r_empty (&$check)
{
    if (!isset($check)) return true;
    if ($check == NULL) return true;
    return false;
}[/code]

that is a good replacement for
both functions for me.
Lucknut dot xbl at googlemail dot com 18-Jul-2007 05:44
I found this function very good to use if your want your urls like index.php?
login or index.php?register
e.g.
<?php
if( array_key_exists( 'home',$_GET ) ) {
    echo "Home - its where the heart is.";
} else if( array_key_exists( 'login',$_GET ) ) {
    echo "Login code here!";
} else if( array_key_exists( 'register',$_GET ) ) {
    echo "Register code here!";
} else {
    echo "Home - its where the heart is.";
}
?>
david at madole dot net 06-Jul-2007 03:11
Regarding performance differences between isset() and array_key_exists(), the
differences may be there, but the function are not always interchangable.

Note that when $a[1] = null then isset($a[1]) == false but array_key_exists(1,
$a) == true
eidberger at jakota dot de 11-Jun-2007 08:14
Just wondered why array_key_exists() makes me a cpu-load of 85% while isset()
only needs 35%.

Not a big thing for one time execution, but in my case it have to check
1-dimensional array with ~ 15.000 entries 100 times a second. My code checks a
big array for existing entrys and updates them, if needed.

Hopes it helps somebody. Notice that on many other functions, which makes
coding more comfortable at the cost of speed.
php at ianco dot co dot uk 09-Apr-2007 08:58
array_key_exists is case sensitive (at least in PHP 4.3.9). To make a
case-insensitive comparison you could use strtolower on both sides.
inker2576 at yahoo dot com 07-Mar-2007 04:01
Further research on this has turned up that the performance problems are a
known, confirmed bug in PHP 5.1.x, and have been fixed in PHP builds after
September 2006.  You can find the bug report here:  http://bugs.php.net/
bug.php?id=38812

However, just because it's a fixed bug doesn't really change the conclusion. 
If you're writing a script and there's any chance it could be used on a PHP
5.1.x server, you should still avoid this function and use isset() or some
other kind of test if you want it to run efficiently.
serkan yersen 07-Feb-2007 12:01
marzetti.marco,
I fixed your function it's is more optimized and working better now.

function regex_array_keys($arr, $pattern){
   $results[] = false;

   if(!is_array($arr))
       return false;

   foreach($arr as $key => $val){
         if(!is_array($key))
       if(preg_match($pattern,$key))
              array_push($results,$key);
   }

   return $results;
}
Matt 01-Dec-2006 09:50
mikael dot knutsson at gmail dot com:
I don't think it does, at least in PHP5?

For example, this outputs bool(false):

$ar = array ( 'outter' => array ( 'inner' => 1 ) );
var_dump(array_key_exists('inner', $ar));

So it doesn't actually check the inner array for the key 'inner'.
mikael dot knutsson at gmail dot com 25-Nov-2006 12:05
When dealing with multi-dimensional arrays, this function checks through all
keys in the array, including the "child arrays" unlike the array_keys( array,
$search ) function which would only check and return from the first level of
keys.

Took me a couple of minutes to figure out what was wrong and I hope it helps
some people when looking for the right function.
Mike Toppa 03-Aug-2006 05:43
At least in PHP 4.4.0, array_key_exists is inconsistently sensitive to
different data types. For example, if your first argument is a double and the
keys in your array are integers, array_key_exists will always return false. If
you then cast the first argument to an integer, or even to a string, then you
can successfully match. I haven't tested all the possibilities, to see when
it'll tolerate different data types and when it won't, so the easiest and
safest solution is to cast your first argument to match the data type of the
keys.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 23 18:11:43 2011 UTC

返り値

成功した場合に TRUE を、失敗した場合に FALSE を返します。

例

例1 asort() の例

<?php
$fruits = array("d" => "lemon", "a" => "orange", "b" => "banana", "c" =>
 "apple");
asort($fruits);
foreach ($fruits as $key => $val) {
    echo "$key = $val\n";
}
?>

上の例の出力は以下となります。

c = apple
b = banana
d = lemon
a = orange

fruits はアルファベットの昇順にソートされ、各要素とキーとの関係は維持されます。

参考

  • arsort() - 連想キーと要素との関係を維持しつつ配列を逆順にソートする
  • 配列ソート関数の比較



compact> <arsort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes asort
ebade at yahoo dot com 09-Jul-2009 08:30
<?php
// Sort an associative array while case insensitive
// Might be useful to someone else
//
// Example:
// $arr = $res1 = array(
//              [a] => Trans Union
//              [b] => TRACE
//              [c] => TeleMatch
//              [d] => test);
//
// asort($res1);
// $res2 = asorti($arr);
//
// ASORT RESULT
// $res1 = array(
//              [b] => TRACE
//              [c] => TeleMatch
//              [a] => Trans Union
//              [d] => test);
//
// DESIRED RESULT
// $res2 = array(
//              [c] => TeleMatch
//              [d] => test
//              [b] => TRACE
//              [a] => Trans Union);

function asorti($arr) {
   $arr2 = $arr;
   foreach($arr2 as $key => $val) {
      $arr2[$key] = strtolower($val);
   }
 
   asort($arr2);
   foreach($arr2 as $key => $val) {
      $arr2[$key] = $arr[$key];
   }

   return $arr2;
}
?>
Eran 22-Apr-2009 12:15
i made this sample multi dimensional array sort to someone who needed to read
lines from a text file instead of using sql - order by statement.

the idea is to take the key and sort(order) the specific column and then order
the entire of the array as the selected column asort returned.

<?php
/**
 *
 * This sample is reading text data
 * and perform a sort to a 2 dimensional array
 * just like a normal sql do to "order by asc"
 *
 */

$foo = array();

/*
# SORT_REGULAR - compare items normally (don't change types)
# SORT_NUMERIC - compare items numerically
# SORT_STRING - compare items as strings
*/
$sort_by = SORT_REGULAR;

/*
# 0 - order by name column
# 1 - order by age column
# 2 - order by rank column
# 3 - order by color column
*/
$order_by = 1;

// source file
$line_of_text[1] = 'a1name|f2age|h3rank|jcolor';
$line_of_text[2] = 'b1name|d2age|i3rank|k4color';
$line_of_text[0] = 'c1name|e2age|g3rank|l4color';

// make array
for ($x=0; $x<=2; $x++)
{
    $line = explode('|',$line_of_text[$x]);

    // save it by coulmns otherwise it will saved like rows
    for ($i=0; $i<=3; $i++) {
          $foo[$i][$x] = $line[$i];
    }
}

// get the key order
$a = $foo[$order_by];

// sort
asort($a, $sort_by);

// start print
echo "<table cellpudding=0 cellspacing=0 border=1>\n";
        echo "<tr>\n";
          echo "<td>key</td>\n";
          echo "<td>name</td>\n";
          echo "<td>age</td>\n";
          echo "<td>rank</td>\n";
          echo "<td>color</td>\n";
        echo "</tr>\n";

// print by key order
foreach ($a as $k => $v) {
    echo "<tr>\n";
      echo "<td>$k</td>\n";
      // you can print here a for loop (0 to num of columns[=3])
      echo "<td>".$foo[0][$k]."</td>\n";
      echo "<td>".$foo[1][$k]."</td>\n";
      echo "<td>".$foo[2][$k]."</td>\n";
      echo "<td>".$foo[3][$k]."</td>\n";
    echo "</tr>\n";
}
echo "</table>\n";
?>
Cai Black 05-Mar-2009 07:20
I could not find a built-in to handle this specific case.  I hope that someone
else finds it useful as well.

<?php
// array_sort_numerically_indexed_values
//
// (PHP 4, PHP 5)
//
// array_sort_numerically_indexed_values - Sort the numerically indexed values
of an array.
//
//
// Description:
//
//   bool array_sort_numerically_indexed_values ( array &$array )
//
//   This function sorts the only values of the array that are numerically
indexed.  This is mainly useful when sorting values that were returned from a
datasource where value ordering is not specified, is not configurable, or is
unknown.
//
//
// Parameters:
//
//   array
//     The input array.
//
// Return Values:
//
//   Returns TRUE on success or FALSE on failure (see below for more
information).
//
//
// Notes:
//
//   The input array MUST contain an element 'count' with an integer value
representing the number of numerically indexed array elements.
//
//
// Examples:
//
//   Example #1 array_sort_numerically_indexed_values example
//
//     <?php
//     // An array wherein the numerically indexed elements ($pets[0] through
$pets[3]) are unordered.
//     $pets=array(
//       0 => 'Biscuit',
//       1 => 'Alley',
//       2 => 'Doogie',
//       3 => 'Conan',
//       'Conan' => array(
//         0 => 'cat',
//         1 => 'male'
//       ),
//       'Biscuit' => array(
//         0 => 'cat',
//         1 => 'female'
//       ),
//       'Doogie' => array(
//         0 => 'dog',
//         1 => 'male'
//       ),
//       'Alley' => array(
//         0 => 'dog',
//         1 => 'female'
//       ),
//       'count' => 4
//     );
//    
//     array_sort_numerically_indexed_values($pets);
//    
//     print_r($pets);
//     ?>
//
//     The above example will output:
//
//       Array
//         (
//           [0] => Alley
//           [1] => Biscuit
//           [2] => Conan
//           [3] => Doogie
//           [Conan] => Array
//             (
//               [0] => cat
//               [1] => male
//             )
//           [Biscuit] => Array
//             (
//               [0] => cat
//               [1] => female
//             )
//           [Doogie] => Array
//             (
//               [0] => dog
//               [1] => male
//             )
//           [Alley] => Array
//             (
//               [0] => dog
//               [1] => female
//             )
//           [count] => 4
//         )
//
//     The numerically index array elements were sorted alphabetically.
//
// Credits:
//   Cai Black < caiblack [at] hotmail [dot] com >
//

function array_sort_numerically_indexed_values(&$myArray) {
    if(isset($myArray['count'])) {
        $sort_again=true;
        if( $sort_again && ($myArray['count'] > 1) ) {
            $sort_previous_value='';
            for($i=0; $i<$myArray['count']; $i++) {
                $sort_again=false;
                // if not the first item then
                if($i > 0) {
                    // if current index value is less than previous value then
                    if($myArray[$i] < $myArray[$i-1]) {
                        // set swap to current index value
                        $sort_swap=$myArray[$i];
                        // set current index to previous index value
                        $myArray[$i]=$myArray[$i-1];
                        // set previous index to swap value
                        $myArray[$i-1]=$sort_swap;
                        // set $sort_again to true
                        $sort_again=true;
                    } // end if
                } // end if
                // set $sort_previous_value to current index value
                $sort_previous_value=$myArray[$i];
            } // end for
        } // end if
        return true;
    } else {
        return false;
    } // end if
} // end function array_sort_numerically_indexed_values
?>
ThA-B 11-Oct-2008 12:11
mzvarik at gmail dot com!
Your post at 16-Jan-2008 12:46 saved my life, so I request it not to be
deleted, but put somewhere in more visible place.
I got situation, where server is not (and will not be) configured properly and
latvian language can not be recognized neither in setlocale or sort functions.
Latvian is also known as ISO-8859-13, lv_LV, lv, lv_LV.ISO-8859-13, cp1257,
windows-1257, etc. And because non of them worked with setlocale() and sort()
under win32/php5.2.1 environment, i used your functions MySort() and myStrCmp()
with slight change:
$cz_chars = 'Aa Āā Bb Cc Čč Dd Ee Ēē Ff Gg Ģģ Hh Ii Īī Jj Kk Ķķ Ll Ļļ Mm Nn Ņņ
Oo Pp Rr Ss Šš Tt Uu Ūū Vv Zz Žž';
voila!
Thank You very very much!
bakatamas at freemail dot hu 15-Feb-2008 10:34
Dear mike at clear-link dot com!

I needed a case insensitive version of your function. It is still not perfect
as I have to do something with country specific characters (öüóőúéáűíÖÜÓŐÚÉÁŰÍ)

function akisort(&$array,$valrev=false,$keyrev=false)
    {
    if ($valrev)
        {
        arsort($array);
        }
        else
        {
        asort($array);
        };
    $vals = array_count_values($array);
    $i = 0;
    foreach ($vals AS $val=>$num)
        {
        $first = array_splice($array,0,$i);
        $tmp = array_splice($array,0,$num);
        $tmp2 = array();
        foreach($tmp as $key => $value)
            {
            $tmp2[] = $key;
            $number = $value;
            };
        natcasesort($tmp2);
        reset($tmp2);
        print_r($tmp2);
        unset($tmp);
        foreach($tmp2 as $key => $value)
            {
            $tmp[$value] = $number;
            };
        if($keyrev)
            {
            $tmp = array_reverse($tmp, true);
            };
        $array = array_merge($first,$tmp,$array);
        unset($tmp);
        $i = $i+$num;
        };
};
mike at clear-link dot com 31-Jan-2008 11:56
Small typo in the aksort function I just submitted. Here's the entire thing
again, with the correction noted:

<?php
function aksort(&$array,$valrev=false,$keyrev=false) {
  if ($valrev) { arsort($array); } else { asort($array); }
  $vals = array_count_values($array);
    $i = 0;
    foreach ($vals AS $val=>$num) {
        $first = array_splice($array,0,$i);
        $tmp = array_splice($array,0,$num);
        if ($keyrev) { krsort($tmp); } else { ksort($tmp); }
        $array = array_merge($first,$tmp,$array);
        unset($tmp);
        $i = $i+$num;
        // Fixed from previous post: $i = $num;
    }
}
?>
mike at clear-link dot com 31-Jan-2008 11:23
For a recent project I needed to sort an associative array by value first, and
then by key if a particular value appeared multiple times. I wrote this
function to accomplish the task. Note that the parameters default to sort
ascending on both keys and values, but allow granular control over each.

<?php
function aksort(&$array,$valrev=false,$keyrev=false) {
  if ($valrev) { arsort($array); } else { asort($array); }
    $vals = array_count_values($array);
    $i = 0;
    foreach ($vals AS $val=>$num) {
        $first = array_splice($array,0,$i);
        $tmp = array_splice($array,0,$num);
        if ($keyrev) { krsort($tmp); } else { ksort($tmp); }
        $array = array_merge($first,$tmp,$array);
        unset($tmp);
        $i = $num;
    }
}

// Example
$tmp = array('ca'=>1,'cb'=>2,'ce'=>1,'pa'=>2,'pe'=>1);

// Standard asort
asort($tmp);
print_r($tmp);

// Sort value ASC, key ASC
aksort($tmp);
print_r($tmp);

// Sort value DESC, key ASC
aksort($tmp,true);
print_r($tmp);

// Sort value DESC, key DESC
aksort($tmp,true,true);
print_r($tmp);

// Results
Array
(
    [pe] => 1
    [ca] => 1
    [ce] => 1
    [cb] => 2
    [pa] => 2
)
Array
(
    [ca] => 1
    [ce] => 1
    [pe] => 1
    [cb] => 2
    [pa] => 2
)
Array
(
    [cb] => 2
    [pa] => 2
    [ca] => 1
    [ce] => 1
    [pe] => 1
)
Array
(
    [pa] => 2
    [cb] => 2
    [pe] => 1
    [ce] => 1
    [ca] => 1
)
mzvarik at gmail dot com 16-Jan-2008 05:29
I noticed that my function mentioned earlier is very misleading - somebody
please delete that note!

This is how you sort:
<?php
setlocale (LC_ALL, 'czech');
$array = array("a", "č", "c");
usort ($array, 'strcoll');
print_r($array);
?>
przemekkus [at] interia [dot] pl 02-Nov-2007 02:34
Function written by a dot brandon at chello dot nl has an error  - wrong
variable name. It should be:

if($rev) arsort($named_hash,$flags=0) ;

instead of

if($reverse) arsort($named_hash,$flags=0) ;
greenie2600 at yahoo dot com 09-Aug-2007 07:22
The function offered by richard at happymango dot me dot uk does not handle
numeric indices properly. smileaf's suggested fix did not work for me. Use with
caution.
a dot brandon at chello dot nl 26-Jun-2007 02:18
I use this for quasi-SQL orderby. Loosely based on smileaf. Any good for you
nerds?

<?

function named_records_sort($named_recs, $order_by, $rev=false, $flags=0)
{// Create 1-dimensional named array with just
 // sortfield (in stead of record) values
    $named_hash = array();
     foreach($named_recs as $key=>$fields)
             $named_hash["$key"] = $fields[$order_by];
 
 // Order 1-dimensional array,
 // maintaining key-value relations  
    if($reverse) arsort($named_hash,$flags=0) ;
    else asort($named_hash, $flags=0);
 
 // Create copy of named records array
 // in order of sortarray 
    $sorted_records = array();
    foreach($named_hash as $key=>$val)
           $sorted_records["$key"]= $named_recs[$key];
 
return $sorted_records;} // named_recs_sort()

function show_sorted_records($named_recs, $order_by, $rev=false, $flags=0)
{$sorted_records=named_records_sort($named_recs, $order_by, $rev, $flags);
foreach($sorted_records as $name=>$fields)
  {echo "<b>$name</b>   ";
   foreach($fields as $field=>$val)
          echo "$field = $val "; echo "<br>";}
} // show_sorted_records()

$girl_friends=array();
$girl_friends["Anna"]=
array("born"=>'1989-08-22',"cupsize"=>'B-',"IQ"=>105, "daddy"=>'rich');
$girl_friends["Zoe"]
=array("born"=>'1978-03-11',"cupsize"=>'C#',"IQ"=>130, "daddy"=>'poor');
$girl_friends["Lilly"]
=array("born"=>'1985-06-16',"cupsize"=>'DD',"IQ"=>90, "daddy"=>'nasty');

$order_by="cupsize"; echo "And the winners are: <br>";
show_sorted_records($girl_friends, $order_by, true);

?>
gunnar at taljaren dot se 14-Jun-2007 08:00
for ($i=0;$i<5;$i++)
   $values[] = $i;
asort($values); 

works, but
for ($i=0;$i<5;$i++)
   $values[$i] =$i;
asort($values);
doesn't!
nilesh dot gamit at gmail dot com 25-Apr-2007 10:50
function to sort 2d array: recordSort(); It is really helpful as most PHP sort
functions provides facility for sorting 1d array & multi dimensional array
sorting is not handy. Normally this function will help u.. if u r displaying
some records n u want sorting by clicking on some column. basically same is
achieved by direct SQL changes like ORDER BY ASC/DESC. But in case, if your
records are not actual records, this function will help. i.e. some table has
following fields in DB.
name, email, telephone and are_you_married; are_you_married is either 0 / 1.
now u r displaying N for 1 and Y for 0; and you want sorting on are_you_married
on display. then ORDER BY ASC/DESC. will not work. So, try this…

<?php
    function recordSort($records, $field, $reverse, $defaultSortField = 0)
    {
            $uniqueSortId = 0;
            $hash = array(); $sortedRecords = array(); $tempArr = array();
$indexedArray = array(); $recordArray = array();

            foreach($records as $record) {
                $uniqueSortId++;
                $recordStr = implode("|", $record)."|".$uniqueSortId;
                $recordArray[] = explode("|", $recordStr);
            }

            $primarySortIndex = count($record);
            $records = $recordArray;

             foreach($records as $record) {
                $hash[$record[$primarySortIndex]] = $record[$field];
             }
            uasort($hash, "strnatcasecmp");
            if($reverse)
            $hash = array_reverse($hash, true);

            $valueCount = array_count_values($hash);

            foreach($hash as $primaryKey => $value) {
                $indexedArray[] = $primaryKey;
            }         

            $i = 0;
            foreach($hash as $primaryKey => $value) {
                $i++;
                if($valueCount[$value] > 1) {
                    foreach($records as $record)  {
                        if($primaryKey == $record[$primarySortIndex]) {
                            $tempArr[$record[$defaultSortField]."__".$i] =
$record;
                            break;
                        }
                    }

                    $index = array_search($primaryKey, $indexedArray);

                    if( ($i == count($records)) || ($value != $hash
[$indexedArray[$index+1]]) )  {
                        uksort($tempArr, "strnatcasecmp");

                        if($reverse)
                        $tempArr = array_reverse($tempArr);

                        foreach($tempArr as $newRecs) {
                            $sortedRecords [] = $newRecs;
                        }

                        $tempArr = array();
                    }
                }
                else {
                    foreach($records as $record)  {
                       if($primaryKey == $record[$primarySortIndex])  {
                                $sortedRecords[] = $record;
                                break;
                        }
                    }
                }
            }
            return $sortedRecords;
    }

    $array[0][0] = 'nilesh';   // sort_index = 0
    $array[0][1] = 'yogesh'; // sort_index = 1
    $array[0][2] = 'aakash'; // sort_index = 2
    $array[0][3] = '100';      // sort_index = 3
    $array[0][4] = 'nilesh';   // sort_index = 4
    $array[0][5] = 'Nil100';  // sort_index = 5
    $array[0][6] = 'Y';         // sort_index = 6

    $array[1][0] = 'Nil100';
    $array[1][1] = '1001';
    $array[1][2] = 'nilesh';
    $array[1][3] = 'nilesh';
    $array[1][4] = 'nilesh';
    $array[1][5] = 'yogesh';
    $array[1][6] = 'Nil100';

    $array[2][0] = 'Nil100';
    $array[2][1] = 'Y';
    $array[2][2] = '100';
    $array[2][3] = '10nilesh';
    $array[2][4] = 'aakash';
    $array[2][5] = '_aakash';
    $array[2][6] = 'aakash_';

    echo "array before sorting..."
    print_r($array);

    /* $sortedList = recordSort(2d_array, sort_index, reverse,
second_level_sort_index_if_duplicates_found_default_is_0 = '0'); */
    $sortedList = recordSort($array, 4, 0, 5);

    echo "array after sorting..."
    print_r($sortedList);
?>
smileaf at smileaf dot org 25-Jan-2007 02:34
Ok I was mistaken, after re-reading the previous post the ".$key" is important.
What caused the sorting issue for me wasn't that at all. But rather something
else.
doing an: asort($records, $flags); before returning fixes the sorting problems.
The sorting problem I was refearing to causes a character based sorting done on
numeric data.
so instead of:
1
2
3
...
10
12
20
It was returned back as
1
10
12
2
20
3
...
basically what I was trying to fix in the first place.
smileaf at smileaf dot org 25-Jan-2007 12:59
This revised version removes the ".$key" from the hash as I wasn't sure why it
was there and caused sorting problems for me.
And allows the use of the array flags in both ksort and krsort.
<?
function record_sort($records, $field, $reverse=false, $flags=0)
{
    $hash = array();
   
    foreach($records as $key => $record)
    {
        $hash[$record[$field]] = $record;
    }
   
    ($reverse)? krsort($hash, $flags) : ksort($hash, $flags);
   
    $records = array();
   
    foreach($hash as $record)
    {
        $records []= $record;
    }
   
    return $records;
}
?>
richard at happymango dot me dot uk 23-Nov-2006 11:52
This is a fixed version of the same function I posted below. Now it will handle
duplicate entries in the sorted field. EG: If there were two records that had
the name Heathrow it would still work.

<?php

function record_sort($records, $field, $reverse=false)
{
    $hash = array();
   
    foreach($records as $key => $record)
    {
        $hash[$record[$field].$key] = $record;
    }
   
    ($reverse)? krsort($hash) : ksort($hash);
   
    $records = array();
   
    foreach($hash as $record)
    {
        $records []= $record;
    }
   
    return $records;
}

?>
richard at happymango dot me dot uk 22-Nov-2006 11:35
This is a function to sort an indexed 2D array by a specified sub array key,
either ascending or descending.

It is usefull for sorting query results from a database by a particular field
after the query has been returned

This function can be quite greedy. It recreates the array as a hash to use
ksort() then back again

By default it will sort ascending but if you specify $reverse as true it will
return the records sorted descending

<?php

function record_sort($records, $field, $reverse=false)
{
    $hash = array();
   
    foreach($records as $record)
    {
        $hash[$record[$field]] = $record;
    }
   
    ($reverse)? krsort($hash) : ksort($hash);
   
    $records = array();
   
    foreach($hash as $record)
    {
        $records []= $record;
    }
   
    return $records;
}

// Example below

$airports = array
(
    array( "code" => "LHR", "name" => "Heathrow" ),
    array( "code" => "LGW", "name" => "Gatwick" ),
);

printf("Before: <pre>%s</pre>", print_r($airports, true));

$airports = record_sort($airports, "name");

printf("After: <pre>%s</pre>", print_r($airports, true));

?>

Example Outputs:

Before: Array
(
    [0] => Array ( [code] => LHR, [name] => Heathrow )
    [1] => Array ( [code] => LGW, [name] => Gatwick )
)

After: Array
(
    [0] => Array ( [code] => LGW, [name] => Gatwick )
    [1] => Array ( [code] => LHR, [name] => Heathrow )
)
php at web-in-time dot com 05-Sep-2006 09:47
acecream's function works fine, especially with the spectre extension.

nevertheless sometimes the index values have to be kept. To achieve this, just
replace:

$sorted_arr[] = $array[$arr_key]; 

with:

$sorted_arr[$arr_key] = $array[$arr_key];
rojaro 24-Jun-2004 02:38
Advanced sort array by second index function, which produces ascending
(default) or descending output and uses optionally natural case insensitive
sorting (which can be optionally case sensitive as well).
Only the first two arguments are required.

<?php

function sabsi ($array, $index, $order='asc', $natsort=FALSE, $case_sensitive=
FALSE) {
  if(is_array($array) && count($array)>0) {
    foreach(array_keys($array) as $key) $temp[$key]=$array[$key][$index];
    if(!$natsort) ($order=='asc')? asort($temp) : arsort($temp);
    else {
      ($case_sensitive)? natsort($temp) : natcasesort($temp);
      if($order!='asc') $temp=array_reverse($temp,TRUE);
    }
    foreach(array_keys($temp) as $key) (is_numeric($key))? $sorted[]=$array
[$key] : $sorted[$key]=$array[$key];
    return $sorted;
  }
  return $array;
}

?>
csaba at alum dot mit dot edu 23-Jun-2004 11:47
If you have a pair of arrays which have a one to one association (examples:
spouses, first to last name, SSN to name), when you sort one, you might wish to
sort the other in the same way to maintain the correlation.  This example
illustrates a way:

<?php
$aMen = array('Fred', 'Bob', 'Tim', 'John', 'Bill');
$aPartner = array('Sue', 'Mary', 'Ann', 'Cathy', 'Nancy');
asort($aMen);                   // aMen now sorted; numeric keys out of order
$aWomen = array_keys($aMen);    // create a new array for result
foreach ($aWomen as $idx => &$name) $name=$aPartner[$name];
                                // aWomen now has the sorted partners
$aMen = array_merge($aMen);     // put the numeric keys in order
?>

Csaba Gabor
KOmaSHOOTER at gmx dot de 21-May-2003 12:52
here another version from acecream multisorting for arrays :)

 

<?php
function array_sort_multi2($array, $key,$key2)

{
  for ($i = 0; $i < sizeof($array); $i++) {
       if(! empty($array[$i][$key][$key2])){
       $sort_values[$i] = $array[$i][$key][$key2];
       }else{
       $sort_values[$i] = $array[$i];
       }
  }
  asort ($sort_values);
  reset ($sort_values);
  while (list ($arr_keys, $arr_values) = each ($sort_values)) {
         $sorted_arr[] = $array[$arr_keys];
  }
  return $sorted_arr;
}
?>
spectre at hellfish dot NOSPAM dot org 28-Apr-2003 04:54
that works nicely, tho it breaks the result-array up if one or more of arrays
indexes are deleted before sorting. this one should fix it up:

change:
for ($i = 0; $i < sizeof($array); $i++) {

to:
foreach ($array as $i => $k) {
acecream 22-Apr-2003 11:02
my version of sorting multi dimensional array

<?php
function array_sort($array, $key)
{
   for ($i = 0; $i < sizeof($array); $i++) {
        $sort_values[$i] = $array[$i][$key];
   }
   asort ($sort_values);
   reset ($sort_values);
   while (list ($arr_key, $arr_val) = each ($sort_values)) {
          $sorted_arr[] = $array[$arr_key];
   }
   return $sorted_arr;
}
?>
mbevan at marginsoftware dot com 03-Dec-2002 09:25
Nevermind... use my last note as a quick tip: if you wish to keep the keys, use
asort() and arsort() in place of sort() and rsort().
01-Aug-2002 01:48
Sorry, my last post had a typo:
// unnecessary backslashes break create_function, oops.
  if ( is_string($var) ) $var = "\'$var\'";
//it should be:
  if ( is_string($var) ) $var = "'$var'";

-- FIXED and TESTED -- :)

Similar to above but for an array of arrays instead of an array of objects.

<?php
function aasort($x,$var,$cmp='strcasecmp'){
  if ( is_string($var) ) $var = "'$var'";
  uasort($x,
    create_function('$a,$b',
      'return '.$cmp.'( $a['.$var.'],$b['.$var.']);')
  );
  return $x;
}
?>
phzzzt .a.t. acm .d.o.t. org 01-Aug-2002 01:32
Similar to above but for an array of arrays instead of an array of objects.

<?php
function aasort($x,$var,$cmp='strcasecmp'){
  if ( is_string($var) ) $var = "\'$var\'";
  uasort($x,
    create_function('$a,$b',
      'return '.$cmp.'( $a['.$var.'],$b['.$var.']);')
  );
  return $x;
}
?>
salchicha at cable dot net dot co 03-Apr-2002 09:23
Here's one I whipped up to allow you to sort an array of a specific class by a
member or function:

<?php
// Sort a class by one of its members (even lowercase!!!)
function casort($arr, $var) {
   $tarr = array();
   $rarr = array();
   for($i = 0; $i < count($arr); $i++) {
      $element = $arr[$i];
      $tarr[] = strtolower($element->{$var});
   }

   reset($tarr);
   asort($tarr);
   $karr = array_keys($tarr);
   for($i = 0; $i < count($tarr); $i++) {
      $rarr[] = $arr[intval($karr[$i])];
   }

   return $rarr;
}
?>

It works very well. For example, I have a Room class with members title,
isActive(), date, etc. I can sort an array by casort($rooms, "title") or casort
($rooms, "isActive()") and it'll work.
rcwang at cmu dot edu 03-Mar-2002 01:42
Here's my version of sorting multi-dimensional array by 2nd index.
Feel free to change the code to suit your needs.

<?php
function aSortBySecondIndex($multiArray, $secondIndex) {
    while (list($firstIndex, ) = each($multiArray))
        $indexMap[$firstIndex] = $multiArray[$firstIndex][$secondIndex];
    asort($indexMap);
    while (list($firstIndex, ) = each($indexMap))
        if (is_numeric($firstIndex))
            $sortedArray[] = $multiArray[$firstIndex];
        else $sortedArray[$firstIndex] = $multiArray[$firstIndex];
    return $sortedArray;
}
?>
markus at runout dot at 29-Nov-2001 08:37
for sorting CASEINSENSITIVE try
natcasesort()

there's little difference to sort,
but maybe that doesn't matter for you.
freeman at generalresources dot com 04-May-2001 11:51
The asortbyindex($sortarray, $index) looks like sort not asort. The key of the
$sortarray was changed.
sweetland at whoadammit dot com 15-Aug-2000 07:02
Here's a little routine I whipped up to sort multi-dimensional arrays:
<?php
/**
 ** comesafter ($s1, $s2)
 **
 ** Returns 1 if $s1 comes after $s2 alphabetically, 0 if not.
 **/

function comesafter ($s1, $s2) {
        /**
         ** We don't want to overstep the bounds of one of the strings and
segfault,
         ** so let's see which one is shorter.
         **/

        $order = 1;

        if (strlen ($s1) > strlen ($s2)) {
                $temp = $s1;
                $s1 = $s2;
                $s2 = $temp;
                $order = 0;
        }

        for ($index = 0; $index < strlen ($s1); $index++) {
                /**
                 ** $s1 comes after $s2
                 **/

                if ($s1[$index] > $s2[$index]) return ($order);

                /**
                 ** $s1 comes before $s2
                 **/

                if ($s1[$index] < $s2[$index]) return (1 - $order);
        }
 
        /**
         ** Special case in which $s1 is a substring of $s2
         **/

        return ($order);
}

/**
 ** asortbyindex ($sortarray, $index)
 **
 ** Sort a multi-dimensional array by a second-degree index. For instance, the
0th index
 ** of the Ith member of both the group and user arrays is a string identifier.
In the
 ** case of a user array this is the username; with the group array it is the
group name.
 ** asortby
 **/

function asortbyindex ($sortarray, $index) {
        $lastindex = count ($sortarray) - 1;
        for ($subindex = 0; $subindex < $lastindex; $subindex++) {
                $lastiteration = $lastindex - $subindex;
                for ($iteration = 0; $iteration < $lastiteration;   
$iteration++) {
                        $nextchar = 0;
                        if (comesafter ($sortarray[$iteration][$index],
$sortarray[$iteration + 1][$index])) {
                                $temp = $sortarray[$iteration];
                                $sortarray[$iteration] = $sortarray[$iteration
+ 1];
                                $sortarray[$iteration + 1] = $temp;
                        }
                }
        }
        return ($sortarray);
}
?>

It's a bit long with all the comments, but I hope it helps.
bwuhlman at tallships dot ca 02-Aug-2000 10:01
Well, actually, asort has *two* annoying features.

It works perfectly well sorting hashes (or associative arrays, as you might
have it), but doggedly refuses to sort regular arrays maintaining index
assocation. Kind've makes sense, but the docs don't explicitly say you can't do
it.

Urgggh.
jacko at kring dot co dot uk 25-Feb-2000 07:26
asort has one anoying feature, it ignores any default or implicit order in the
data.  i.e. if two elements of an array contain "banana" then it is not
garanteed that the first will still be the first after the sort.
This makes the Burrows-Wheeler block sort a bit of a pain to impliment, with a
trailing string having to be appended to all strings before sorting, and
removed after sorting. To maintain the so called "banana" order.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Mar 18 20:11:43 2011 UTC

ksort — 配列をキーでソートする

説明
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_fill_keys> <array_diff_ukey
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
array_diff

(PHP 4 >= 4.0.1, PHP 5)

array_diff — 配列の差を計算する

説明

array array_diff ( array $array1 , array $array2 [, array $ ... ] )

array1 を array2 と比較し、その差を返します。

パラメータ

array1

    比較元の配列。

array2

    比較対象の配列。

...
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

uasort> <sizeof
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
sort

(PHP 4, PHP 5)

sort — 配列をソートする

説明

bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )

この関数は配列をソートします。この関数が正常に終了すると、各要素は低位から高位
へ並べ替えられます。

パラメータ

array

    入力の配列。

sort_flags

    オプションの 2 番目のパラメータ sort_flags は、以下の値によりソートの動作を
    修正するために使用することが可能です。

    ソート型のフラグ:
      □ SORT_REGULAR - 通常通りに項目を比較 (型は変更しません)
      □ SORT_NUMERIC - 数値的に項目を比較
      □ SORT_STRING - 文字列として項目を比較
      □ SORT_LOCALE_STRING - は、カレントのロケールにに基づき比較を行います。
        PHP 4.4.0 と PHP 5.0.2で追加されました。システムロケールを使用します。
        これは setlocale() を使用して変更可能です。

返り値

成功した場合に TRUE を、失敗した場合に FALSE を返します。

例

例1 sort() の例

<?php

$fruits = array("lemon", "orange", "banana", "apple");
sort($fruits);
foreach ($fruits as $key => $val) {
    echo "fruits[" . $key . "] = " . $val . "\n";
}

?>

上の例の出力は以下となります。

fruits[0] = apple
fruits[1] = banana
fruits[2] = lemon
fruits[3] = orange

fruits はアルファベットの昇順にソートされました。

注意

    注意: この関数は、 array パラメータの要素に対して新しいキーを割り当てます。
    その際、単純にキーを並べ替える代わりに、すでに割り当てられている既存のキー
    を削除してしまいます。

    注意: PHP の大半のソート関数と同様、sort() は » Quicksort でそれを実装して
    います。

警告

複数の型が混在する配列をソートする場合には、注意してください。 sort() が予測不
可能な結果を出力することがあります。

参考

  • asort() - 連想キーと要素との関係を維持しつつ配列をソートする
  • 配列ソート関数の比較



uasort> <sizeof
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes sort
admin at wapforum dot rs 24-Feb-2011 04:05
Quote: "Be careful when sorting arrays with mixed types values because sort()
can produce unpredictable results."

Well...
if (!sort($file, SORT_NUMERIC)) { exit; }
anaz114119 at gmail dot com 24-Dec-2010 10:34
sort from textfile by coloumn
example name||date||time||comments
if you want to sort by date
$column = 2
<?php
function array_sort($array,$column){
 $column = $column-1;
 foreach($array as $line){
 $bits = explode("||",$line);
 $bits ="$bits[$column]**$line";
 $array1[]=$bits;
}
 asort($array1);
 foreach($array1 as $line){
 $bit = explode("**",$line);
 $bit ="$bit[1]";
 $array2[]=$bit;
}
 return$array2;
}
?>
www.toptenz.tk
www.miyaru.co.tv
poulou_0 at hotmail dot com 21-Dec-2010 08:59
if you are not interested in high or low case sort

<?php
//where
$sortable_array[$k] = $v2;
//put
$sortable_array[$k] = strtolower($v2);

//and where
$sortable_array[$k] = $v;
//put
$sortable_array[$k] = strtolower($v);
?>
Matthew Fedak 31-Aug-2010 02:44
The code below will sort via a field passed as the $on parameter, 3rd parameter
is 'SORT_DESC' or 'SORT_ASC'. The function from the previous developer below
mine maintains the array index value good for associative arrays but for normal
arrays with associative fields like database queries returned as arrays use
this.

<?php
    function array_sort($array, $on, $order='SORT_DESC')
    {
      $new_array = array();
      $sortable_array = array();
 
      if (count($array) > 0) {
          foreach ($array as $k => $v) {
              if (is_array($v)) {
                  foreach ($v as $k2 => $v2) {
                      if ($k2 == $on) {
                          $sortable_array[$k] = $v2;
                      }
                  }
              } else {
                  $sortable_array[$k] = $v;
              }
          }
 
          switch($order)
          {
              case 'SORT_ASC':   
                  echo "ASC";
                  asort($sortable_array);
              break;
              case 'SORT_DESC':
                  echo "DESC";
                  arsort($sortable_array);
              break;
          }
 
          foreach($sortable_array as $k => $v) {
              $new_array[] = $array[$k];
          }
      }
      return $new_array;
    }
?>
phpdotnet at m4tt dot co dot uk 16-Aug-2010 02:03
Simple function to sort an array by a specific key. Maintains index
association.

<?php

function array_sort($array, $on, $order=SORT_ASC)
{
    $new_array = array();
    $sortable_array = array();

    if (count($array) > 0) {
        foreach ($array as $k => $v) {
            if (is_array($v)) {
                foreach ($v as $k2 => $v2) {
                    if ($k2 == $on) {
                        $sortable_array[$k] = $v2;
                    }
                }
            } else {
                $sortable_array[$k] = $v;
            }
        }

        switch ($order) {
            case SORT_ASC:
                asort($sortable_array);
            break;
            case SORT_DESC:
                arsort($sortable_array);
            break;
        }

        foreach ($sortable_array as $k => $v) {
            $new_array[$k] = $array[$k];
        }
    }

    return $new_array;
}

$people = array(
    12345 => array(
        'id' => 12345,
        'first_name' => 'Joe',
        'surname' => 'Bloggs',
        'age' => 23,
        'sex' => 'm'
    ),
    12346 => array(
        'id' => 12346,
        'first_name' => 'Adam',
        'surname' => 'Smith',
        'age' => 18,
        'sex' => 'm'
    ),
    12347 => array(
        'id' => 12347,
        'first_name' => 'Amy',
        'surname' => 'Jones',
        'age' => 21,
        'sex' => 'f'
    )
);

print_r(array_sort($people, 'age', SORT_DESC)); // Sort by oldest first
print_r(array_sort($people, 'surname', SORT_ASC)); // Sort by surname

/*
Array
(
    [12345] => Array
        (
            [id] => 12345
            [first_name] => Joe
            [surname] => Bloggs
            [age] => 23
            [sex] => m
        )
 
    [12347] => Array
        (
            [id] => 12347
            [first_name] => Amy
            [surname] => Jones
            [age] => 21
            [sex] => f
        )
 
    [12346] => Array
        (
            [id] => 12346
            [first_name] => Adam
            [surname] => Smith
            [age] => 18
            [sex] => m
        )
 
)
Array
(
    [12345] => Array
        (
            [id] => 12345
            [first_name] => Joe
            [surname] => Bloggs
            [age] => 23
            [sex] => m
        )
 
    [12347] => Array
        (
            [id] => 12347
            [first_name] => Amy
            [surname] => Jones
            [age] => 21
            [sex] => f
        )
 
    [12346] => Array
        (
            [id] => 12346
            [first_name] => Adam
            [surname] => Smith
            [age] => 18
            [sex] => m
        )
 
)
*/

?>
eriewave at hotmail dot com 29-Mar-2010 09:16
If you need to sort an array containing some equivalent values and you want the
equivalents to end up next to each other in the overall order (similar to a
MySQL's ORDER BY output), rather than breaking the function, do this:

<?php

sort($array, ksort($array))

?>

-When the sort() function finds two equivalents, it will sort them arbitrarily
by their key #'s as a second parameter.

-Dirk
EvalIsEvil at cjbn dot net 21-Mar-2010 09:52
Code Injection Exploit for SoftwareJonas's multisort function, below.

<?php
$sort = array(
    array( 'a' => '1', 'b' => '3'),
    array( 'a' => '2', 'b' => '1'),
    array( 'a' => '1', 'b' => '1'));

//Lets assume this happens to be user-input data, which is a plausible
scenario.
$by=array("'],null);touch('0wned');//");

//Creates a file named "0wned" in the current directory.
$result = multisort( $sort , $by );
?>

Eval is NEVER the answer. ;-)
SoftwareJonas 14-Mar-2010 03:46
Use eval() with array_multisort() to sort multiple columns:

<?php
function multisort($array, $sort_by) {
    foreach ($array as $key => $value) {
        $evalstring = '';
        foreach ($sort_by as $sort_field) {
            $tmp[$sort_field][$key] = $value[$sort_field];
            $evalstring .= '$tmp[\'' . $sort_field . '\'], ';
        }
    }
    $evalstring .= '$array';
    $evalstring = 'array_multisort(' . $evalstring . ');';
    eval($evalstring);

    return $array;
}

$test = array(
    array( 'a' => '1', 'b' => '3'),
    array( 'a' => '2', 'b' => '1'),
    array( 'a' => '1', 'b' => '1'));

echo 'Unsorted: ';
print_r($test);

$result = multisort( $test , array('a','b') );

echo 'Sorted: ';
print_r($result);
?>

Result:

Unsorted: Array
(
    [0] => Array
        (
            [a] => 1
            [b] => 3
        )

    [1] => Array
        (
            [a] => 2
            [b] => 1
        )

    [2] => Array
        (
            [a] => 1
            [b] => 1
        )

)
Sorted: Array
(
    [0] => Array
        (
            [a] => 1
            [b] => 1
        )

    [1] => Array
        (
            [a] => 1
            [b] => 3
        )

    [2] => Array
        (
            [a] => 2
            [b] => 1
        )

)
Dollar Hauler Admin 12-Mar-2010 06:10
I could never find a way to sort multidimensional arrays with 5+ keys while
maintaining the data structure, but here it is:

(you can add an infinite number of keys, but it has to be added manually :\ )

<?php

$array[0]['name']  = 'Chris';
$array[0]['phone'] = '3971095';
$array[0]['year']  = '1978';
$array[0]['address'] = 'Street 1';

$array[1]['name']  = 'Breanne';
$array[1]['phone'] = '3766350';
$array[1]['year']  = '1990';
$array[1]['address'] = 'Street 2';

$array[2]['name']  = 'Dusty';
$array[2]['phone'] = '1541120';
$array[2]['year']  = '1982';
$array[2]['address'] = 'Street 3';

function multisort($array, $sort_by, $key1, $key2=NULL, $key3=NULL, $key4=NULL,
$key5=NULL, $key6=NULL){
    // sort by ?
    foreach ($array as $pos =>  $val)
        $tmp_array[$pos] = $val[$sort_by];
    asort($tmp_array);
   
    // display however you want
    foreach ($tmp_array as $pos =>  $val){
        $return_array[$pos][$sort_by] = $array[$pos][$sort_by];
        $return_array[$pos][$key1] = $array[$pos][$key1];
        if (isset($key2)){
            $return_array[$pos][$key2] = $array[$pos][$key2];
            }
        if (isset($key3)){
            $return_array[$pos][$key3] = $array[$pos][$key3];
            }
        if (isset($key4)){
            $return_array[$pos][$key4] = $array[$pos][$key4];
            }
        if (isset($key5)){
            $return_array[$pos][$key5] = $array[$pos][$key5];
            }
        if (isset($key6)){
            $return_array[$pos][$key6] = $array[$pos][$key6];
            }
        }
    return $return_array;
    }

//usage (only enter the keys you want sorted):

$sorted = multisort($array,'year','name','phone','address');
print_r($sorted);

//output:
Array ( [0] => Array ( [year] => 1978 [name] => Chris [phone] => 3971095
[address] => Street 1 ) [2] => Array ( [year] => 1982 [name] => Dusty [phone]
=> 1541120 [address] => Street 3 ) [1] => Array ( [year] => 1990 [name] =>
Breanne [phone] => 3766350 [address] => Street 2 ) )
Brecht Cloetens 23-Nov-2009 11:57
<?php
   
/**
 * function: array_columns
 * author: Brecht Cloetens
 * params: $a = array() // original array
 *         $c = int() // number of columns
 */
function array_columns(&$a, $c=2)
{
    $m = ceil(count($a)/$c);
    $j = 0;
    for($i=0; $i<$m; $i++) {
        for($k=0; $k<$c; $k++) {
            $key = $i+($m*$k);
            settype($key,'integer');
            if(array_key_exists($key,$a)) {
                $b[$j] = $a[$key];
                $j++;
            }
        }
    }
    $a = $b;
}

$arr = range('a','z');
array_columns($arr,4);
print_r($arr);

?>

Example:
array(1,2,3,4,5) will be converted to array(1,4,2,5,3);

This can be easy if you want to display an array into a specified number of
columns.

<table>
    <tr>
        <td>$arr[0] => 1</td>
        <td>$arr[1] => 4</td>
    </tr>
    <tr>
        <td>$arr[2] => 2</td>
        <td>$arr[3] => 5</td>
    </tr>
    <tr>
        <td>$arr[4] => 3</td>
        <td></td>
    </tr>
</table>
Anonymous 17-Nov-2009 02:10
[EDIT BY danbrown AT php DOT net: The code provided by this anonymous author
contains bugfixes for and additions to code originally donated by "toenie" on
07-NOV-09.  The original author included the following note: "If you want to
sort while using an 2 dimensional array, you can use this script I just wrote
for myself. I thought it could be helpful for other people too."]

I also added the ability to sort in ascending and descending order.

$order = "ASC" will sort the array in ascending order
$order = "DESC" will sort the array in descending order

Here is the code:

<?php
    function order_array_num ($array, $key, $order = "ASC")
    {
        $tmp = array();
        foreach($array as $akey => $array2)
        {
            $tmp[$akey] = $array2[$key];
        }
       
        if($order == "DESC")
        {arsort($tmp , SORT_NUMERIC );}
        else
        {asort($tmp , SORT_NUMERIC );}

        $tmp2 = array();       
        foreach($tmp as $key => $value)
        {
            $tmp2[$key] = $array[$key];
        }       
       
        return $tmp2;
    }
?>
petr dot biza at gmail dot com 11-Sep-2009 01:29
Here is a function to sort an array by the key of his sub-array with keep key
in top level.

<?php
function sksort(&$array, $subkey="id", $sort_descending=false,
$keep_keys_in_sub = false) {
    $temp_array = $array;

    foreach ($temp_array as $key => &$value) {
     
      $sort = array();
      foreach ($value as $index => $val) {
          $sort[$index] = $val[$subkey];
      }
     
      asort($sort);
     
      $keys = array_keys($sort);
      $newValue = array();
      foreach ($keys as $index) {
        if($keep_keys_in_sub)
            $newValue[$index] = $value[$index];
          else
            $newValue[] = $value[$index];
      }
     
      if($sort_descending)
        $value = array_reverse($newValue, $keep_keys_in_sub);
      else
        $value = $newValue;
    }
   
    $array = $temp_array;
  }
?>
phpnet at theindy dot net 27-Aug-2009 05:45
In response to the msort function I find that the array_multisort function is a
lot faster.

-John
danm68 at gmail dot com 26-Aug-2009 04:59
sort() used with strings doesn't sort just alphabetically. It sorts all
upper-case strings alphabetically first and then sorts lower-case strings
alphabetically second.
Just in case anyone was as confused as I was and I've never seen this mentioned
anywhere.
otobrglez at gmail dot com 18-Feb-2009 08:45
This will select number of unique keys from array and order them in original
order.

<?php
/*
$rows - array of records
$st - number of keys that you want to have

By Oto Brglez.

*/

$pom_k = array();
for($i=0; $i<$st;){
    $pom = array_rand($rows,1);
    if(!in_array($pom,$pom_k)){
        $pom_k[] = $pom;
        $i++;
    };
};
sort($pom_k,SORT_NUMERIC);

?>
stepmuel at ee dot ethz dot ch 10-Dec-2008 04:14
A little shorter way to sort an array of objects; with a callback function.

<?php
function objSort(&$objArray,$indexFunction,$sort_flags=0) {
    $indices = array();
    foreach($objArray as $obj) {
        $indeces[] = $indexFunction($obj);
    }
    return array_multisort($indeces,$objArray,$sort_flags);
}

function getIndex($obj) {
    return $obj->getPosition();
}

objSort($objArray,'getIndex');
?>
jalil at measat dot org 15-Nov-2008 09:48
this is an implementation of the complement of
Matthew Hood's objectSort (http://my.php.net/manual/en/function.sort.php#75036
), which i found very convenient for sorting objects.

this does the reverse, it sorts according to the key
selected for the object but in reverse order.
and having both sort methods allows consistency and convenience for sorting
objects, if speed isn't your major concern.

the only change ( apart form data being reworded as object )  is the use of <
instead of > in the original.
you could of couse incorporate all in one routine, but why
complicate matters.

<?php
    function objectRSort(&$object, $key)
    {
        for ($i = count($object) - 1; $i >= 0; $i--)
        {
          $swapped = false;
          for ($j = 0; $j < $i; $j++)
          {
               if ($object[$j]->$key < $object[$j + 1]->$key)
               {
                    $tmp = $object[$j];
                    $object[$j] = $object[$j + 1];      
                    $object[$j + 1] = $tmp;
                    $swapped = true;
               }
          }
          if (!$swapped) return;
        }
    }
?>
lucazd at gmail dot com 26-Sep-2008 08:04
Please, think twice before creating (and posting) your homemade solution for
ordering an array by a field.

PHP already has a solution for this; usort, which is about x40 faster than any
other solution.

If creating a callback for each case hurts, you can do something like this:

<?php
/**
 * @author Lucas Dománico
 */
class util {
    static private $sortfield = null;
    static private $sortorder = 1;
    static private function sort_callback(&$a, &$b) {
        if($a[self::$sortfield] == $b[self::$sortfield]) return 0;
        return ($a[self::$sortfield] < $b[self::$sortfield])? -self::$sortorder
: self::$sortorder;
    }
    static function sort(&$v, $field, $asc=true) {
        self::$sortfield = $field;
        self::$sortorder = $asc? 1 : -1;
        usort($v, array('util', 'sort_callback'));
    }
}

# Usage:
for($i=0; $i<1000 ;$i++) {
  $v[] = array('score'=>rand(1,10000));
}
util::sort($v, 'score');

?>
www at designdetector dot com 09-Sep-2008 02:43
To sort an array of multiple text fields alphabetically you have to make the
text lowercase before sorting the array. Otherwise PHP puts acronyms before
words. You can see this in my example code. Simply store the original text
field at the end of the array line and call it later from there. You can safely
ignore the lowercase version which is added to the start of the array line.

<?php
echo '<pre>ORIGINAL DATA:
<br />';

$data = array(
'Saturn|7|8|9|0||',
'Hello|0|1|2|3||',
'SFX|5|3|2|4||',
'HP|9|0|5|6||'
);

print_r($data);

sort($data);
reset($data);

echo '<br />RAW SORT:
<br />';

print_r($data);

for ($c = 0; $c < count($data); $c++) {
    list ($letter,$g1,$g2,$g3,$g4,$end) = explode ('|', $data[$c]);
    $lowercase = strtolower($letter);
    $data2[$c] = array($lowercase,$g1,$g2,$g3,$g4,$letter);
}

sort($data2);
reset($data2);

echo '<br />LOWERCASE SORT:
<br />';

print_r($data2);

echo '</pre>';
?>
matpatnik at hotmail dot com 23-Jan-2008 11:46
This function will sort entity letters eg:&eacute;

I hope that help someone

function sort_entity($array) {
    $total = count($array);
    for ($i=0;$i<$total;$i++) {
        if ($array[$i]{0} == '&') {
            $array[$i] = $array[$i]{1}.$array[$i];
        } else {
            $array[$i] = $array[$i]{0}.$array[$i];
        }
    }
    sort($array);
   
    for ($i=0;$i<$total;$i++) {
        $array[$i] = substr($array[$i],1);
    }
   
    return $array;
}
jasons at work dot com 07-Jan-2008 08:25
Update to the msort code posted by: alishahnovin

I had a problem with the msort function not being case sensitive. All capital
letters A-Z would list in order then all lowercase letters would follow.

the line:
if ($item[$id]<$array[$lowest_id][$id]) {

was changed to:
if (strtolower($item[$id]) < strtolower($array[$lowest_id][$id])) {

<?php
function msort($array, $id="id", $sort_ascending=true) {
        $temp_array = array();
        while(count($array)>0) {
            $lowest_id = 0;
            $index=0;
            foreach ($array as $item) {
                if (isset($item[$id])) {
                                    if ($array[$lowest_id][$id]) {
                    if (strtolower($item[$id]) < strtolower($array[$lowest_id]
[$id])) {
                        $lowest_id = $index;
                    }
                    }
                                }
                $index++;
            }
            $temp_array[] = $array[$lowest_id];
            $array = array_merge(array_slice($array, 0,$lowest_id), array_slice
($array, $lowest_id+1));
        }
                if ($sort_ascending) {
            return $temp_array;
                } else {
                    return array_reverse($temp_array);
                }
    }
?>
david wh thomas at gm at 1l dot c0m 03-Sep-2007 01:02
Here's a variation on the above function to sort arrays with more than one key
by an arbitrary key's value.

This function allows sorting of an array of objects too

<?php
    /**
     * Sorts an array of objects by the value of one of the object properties
or array keys
     *
     * @param array $array
     * @param key value $id
     * @param boolean $sort_ascending
     * @param boolean $is_object_array
     * @return array
     */
 function vsort($array, $id="id", $sort_ascending=true, $is_object_array =
false) {
        $temp_array = array();
        while(count($array)>0) {
            $lowest_id = 0;
            $index=0;
            if($is_object_array){
                foreach ($array as $item) {
                    if (isset($item->$id)) {
                                        if ($array[$lowest_id]->$id) {
                        if ($item->$id<$array[$lowest_id]->$id) {
                            $lowest_id = $index;
                        }
                        }
                                    }
                    $index++;
                }
            }else{
                foreach ($array as $item) {
                    if (isset($item[$id])) {
                        if ($array[$lowest_id][$id]) {
                        if ($item[$id]<$array[$lowest_id][$id]) {
                            $lowest_id = $index;
                        }
                        }
                                    }
                    $index++;
                }                             
            }
            $temp_array[] = $array[$lowest_id];
            $array = array_merge(array_slice($array, 0,$lowest_id), array_slice
($array, $lowest_id+1));
        }
                if ($sort_ascending) {
            return $temp_array;
                } else {
                    return array_reverse($temp_array);
                }
    }

?>

Sample Usage:

<?php
$nodes = vsort($nodes,'term_data_weight', false, true);
print '<pre>'.print_r($nodes,1).'</pre>';
?>
quirk at qns dot se 22-Jul-2007 12:42
Hi, this is my version of sorting an array by field.

From browsing previous versions it pretty much resembles bluej's version. It's
way much faster than the versions where the sorting is made "manually" rather
than with native php functions, and I wrote it after trying one of those that
kept timing out my scripts if I had 10000 posts.

This one preserves numerical keys as well. So if you want to re-index the array
after using it with numerical keys just use the array_values on the result.
However there are cases where the key actually means something even if it's a
number (id etc) so I didn't want to take it for granted that it should be
reindexed.

Cheers
Q

<?php
        function sortArrayByField
        (
            $original,
            $field,
            $descending = false
        )
        {
            $sortArr = array();
           
            foreach ( $original as $key => $value )
            {
                $sortArr[ $key ] = $value[ $field ];
            }
   
            if ( $descending )
            {
                arsort( $sortArr );
            }
            else
            {
                asort( $sortArr );
            }
           
            $resultArr = array();
            foreach ( $sortArr as $key => $value )
            {
                $resultArr[ $key ] = $original[ $key ];
            }
       
            return $resultArr;
        }           
?>
alishahnovin at hotmail dot com 19-Jul-2007 11:16
Someone asked me if the msort I posted below can do a sort by descending... (as
it sorts by ascending...smallest to greatest).

It's a simple fix with an extra param, and then an array_reverse...but for the
lazy, here you are:

<?php
function msort($array, $id="id", $sort_ascending=true) {
        $temp_array = array();
        while(count($array)>0) {
            $lowest_id = 0;
            $index=0;
            foreach ($array as $item) {
                if (isset($item[$id])) {
                                    if ($array[$lowest_id][$id]) {
                    if ($item[$id]<$array[$lowest_id][$id]) {
                        $lowest_id = $index;
                    }
                    }
                                }
                $index++;
            }
            $temp_array[] = $array[$lowest_id];
            $array = array_merge(array_slice($array, 0,$lowest_id), array_slice
($array, $lowest_id+1));
        }
                if ($sort_ascending) {
            return $temp_array;
                } else {
                    return array_reverse($temp_array);
                }
    }
?>

<?php

//oh no, this is not in the ordered by id!!
$data[] = array("item"=>"item 1", "id"=>1);
$data[] = array("item"=>"item 3", "id"=>3);
$data[] = array("item"=>"item 2", "id"=>2);

var_dump(  msort($data, "id", false)  ); //just msort it...greatest to smallest

var_dump(  msort($data, "id")  ); //just msort it...smallest to greatest

/* outputs

array
  0 =>
    array
      'item' => 'item 3' (length=6)
      'id' => 3
  1 =>
    array
      'item' => 'item 2' (length=6)
      'id' => 2
  2 =>
    array
      'item' => 'item 1' (length=6)
      'id' => 1

array
  0 =>
    array
      'item' => 'item 1' (length=6)
      'id' => 1
  1 =>
    array
      'item' => 'item 2' (length=6)
      'id' => 2
  2 =>
    array
      'item' => 'item 3' (length=6)
      'id' => 3

*/

?>
bluej100@gmail 10-Jul-2007 10:03
The sort2d I posted before did nothing by default--that'll teach me to
copy-and-paste without thinking. Its sort function has to be associative. I've
changed the default to asort. natcasesort does actually work, though.

// $sort used as variable function--can be natcasesort, for example
// WARNING: $sort must be associative
function sort2d( &$arrIn, $index = null, $sort = 'asort') {
  // pseudo-secure--never allow user input into $sort
  if (strpos($sort, 'sort') === false) {$sort = 'asort';}
  $arrTemp = Array();
  $arrOut = Array();

  foreach ( $arrIn as $key=>$value ) {
    $arrTemp[$key] = is_null($index) ? reset($value) : $value[$index];
  }

  $sort($arrTemp);

  foreach ( $arrTemp as $key=>$value ) {
    $arrOut[$key] = $arrIn[$key];
  }

  $arrIn = $arrOut;
}

Also, uasort is probably actually the better solution for most 2d sorting,
unless you're sorting by a dozen different indexes.
NBS Studio 04-Jul-2007 08:14
This is my way of sorting files into date modified date order. It worked for
me!

$dir='topics';
$ext='php5';
$files=scandir($dir);
foreach($files as $fs){
    if(($fs!='.')&&($fs!='..')){
        $fs1.='¬'.filemtime($dir.'/'.$fs).'#'.$fs;
    }
}
$fs2=split('[¬]',$fs1);
arsort($fs2);
foreach($fs2 as $fs3){
    if(eregi($ext,$fs3)){
        $fs4.='¬'.$fs3;
    }
}
$fs5=split('[#]',$fs4);
foreach($fs5 as $fs6){
    if(eregi($ext,$fs6)){
        $fs7.='¬'.$fs6;
    }
}
$fs8=split('[¬]',$fs7);
foreach($fs8 as $fs9){
    $file_list.=$fs9.'
</br>';
}

print $file_list;
sinan at sinaneldem dot com 24-Jun-2007 03:29
here is little script which will merge arrays, remove duplicates and sort it by
alphabetical order:

<?php

$array1 = array('apple', 'banana','pear');
$array2 = array('grape', 'pear','orange');

function array_unique_merge_sort($array1, $array2){
$array = array_unique(array_merge($array1, $array2));
sort($array);
foreach ($array as $key => $value) {
    $new[$key] = $value;
}
return $new;
}

print_r (array_unique_merge_sort($array1, $array2));

?>

this will print out:

Array ( [0] => apple [1] => banana [2] => grape [3] => orange [4] => pear )
bluej100@gmail 07-Jun-2007 10:05
One more solution for multidimensional sort: variable functions.

<?php
// $sort used as variable function--can be natcasesort, for example
  function sort2d( &$arrIn, $index = null, $sort = 'sort') {
    // pseudo-secure--never allow user input into $sort
    if (strpos($sort, 'sort') === false) {$sort = 'sort';}
    $arrTemp = Array();
    $arrOut = Array();

    foreach ( $arrIn as $key=>$value ) {
      reset($value);
      $arrTemp[$key] = is_null($index) ? current($value) : $value[$index];
    }

    $sort($arrTemp);

    foreach ( $arrTemp as $key=>$value ) {
      $arrOut[$key] = $arrIn[$key];
    }

    $arrIn = $arrOut;
  }
?>

It appears to me that there are only two algorithms being proposed here
(several times each):

1) copy into temp, pass temp to sort function, re-order by temp
2) implement search function in PHP

I'm curious whether anyone's implementation of (2) can beat (1) for speed.
Someone have a fast PHP mergesort they can benchmark against this one?
Obviously, the fact that the (1) solutions use at least two, possibly three
times the memory is a drawback, but I expect that for most of us, speed is
significantly more important than memory. Maybe I'll check it myself when I
have a minute.
alishahnovin at hotmail dot com 28-May-2007 05:29
Here's my fixed up msort array. What it does is goes through a multidimensional
array, and sorts it by the desired key (defaulting to 'id').

So, for example, if you have an array like:

array[0]['value'] = "statement 2"
array[0]['id'] = "2"
array[1]['value'] = "statement 3"
array[1]['id'] = "3"
array[2]['value'] = "statement 1"
array[2]['id'] = "1"

it would rearrange and return the array to be like:

array[0]['value'] = "statement 1"
array[0]['id'] = "1"
array[1]['value'] = "statement 2"
array[1]['id'] = "2"
array[2]['value'] = "statement 3"
array[2]['id'] = "3"

The 'id' index can start at any point, and any array item missing the id index
will be added to the end.

<?php
function msort($array, $id="id") {
        $temp_array = array();
        while(count($array)>0) {
            $lowest_id = 0;
            $index=0;
            foreach ($array as $item) {
                if (isset($item[$id]) && $array[$lowest_id][$id]) {
                    if ($item[$id]<$array[$lowest_id][$id]) {
                        $lowest_id = $index;
                    }
                }
                $index++;
            }
            $temp_array[] = $array[$lowest_id];
            $array = array_merge(array_slice($array, 0,$lowest_id), array_slice
($array, $lowest_id+1));
        }
        return $temp_array;
    }
?>

Ex:

<?php

//oh no, this is not in the ordered by id!!
$data[] = array("item"=>"item 4");
$data[] = array("item"=>"item 1", "id"=>1);
$data[] = array("item"=>"item 3", "id"=>3);
$data[] = array("item"=>"item 2", "id"=>2);

var_dump(  msort($data)  ); //just msort it!

/* outputs

array
  0 =>
    array
      'item' => 'item 1' (length=6)
      'id' => 1
  1 =>
    array
      'item' => 'item 2' (length=6)
      'id' => 2
  2 =>
    array
      'item' => 'item 3' (length=6)
      'id' => 3
  3 =>
    array
      'item' => 'item 4' (length=6)

*/

?>
alishahnovin at hotmail dot com 25-May-2007 11:11
I had a multidimensional array, which needed to be sorted by one of the keys.
This is what I came up with...

<?php
function msort($array, $id="id") {
        $temp_array = array();
        while(count($array)>0) {
            $lowest_id = 0;
            $index=0;
            foreach ($array as $item) {
                if ($item[$id]<$array[$lowest_id][$id]) {
                    $lowest_id = $index;
                }
                $index++;
            }
            $temp_array[] = $array[$lowest_id];
            $array = array_merge(array_slice($array, 0,$lowest_id), array_slice
($array, $lowest_id+1));
        }
        return $temp_array;
    }
?>

Ex:

<?php

//oh no, this is not in the ordered by id!!
$data[] = array("item"=>"item 4", "id"=>4);
$data[] = array("item"=>"item 1", "id"=>1);
$data[] = array("item"=>"item 3", "id"=>3);
$data[] = array("item"=>"item 2", "id"=>2);

var_dump(  msort($data)  ); //just msort it!

/* outputs

array
  0 =>
    array
      'item' => 'item 1' (length=6)
      'id' => 1
  1 =>
    array
      'item' => 'item 2' (length=6)
      'id' => 2
  2 =>
    array
      'item' => 'item 3' (length=6)
      'id' => 3
  3 =>
    array
      'item' => 'item 4' (length=6)
      'id' => 4

*/

?>
(Qube#php@Efnet) 14-May-2007 10:38
How to use an anonymous array to sort any associative array by an arbitrary key
(or nested key):

$order = -1; # -1 = Ascending. Use 1 for descending.
$sortby = "['key1']['subkey']";
$mysort = create_function('$a,$b', "\$a1=\$a$sortby;\$b1=\$b$sortby; if (\$a1==
\$b1) return 0; else return (\$a1<\$b1) ? $order : 0- $
order;");
uasort($assocarray, $mysort);

You can use this in a recursive function if necessary (which is why I developed
it).
Matthew Hood 09-May-2007 02:27
The bubble sort below will sort an array of objects based on any one of the
values contained in them.

usage: objectSort($details, 'percent');

function objectSort(&$data, $key)
{
    for ($i = count($data) - 1; $i >= 0; $i--)
    {
      $swapped = false;
      for ($j = 0; $j < $i; $j++)
      {
           if ($data[$j]->$key > $data[$j + 1]->$key)
           {
                $tmp = $data[$j];
                $data[$j] = $data[$j + 1];       
                $data[$j + 1] = $tmp;
                $swapped = true;
           }
      }
      if (!$swapped) return;
    }
}
y5 at yellow5 dot us 15-Mar-2007 02:52
An improvement on the very nice code submitted by alex [at] vkpb [dot] com.
This will preserve the keys if the array is numeric:

function SortDataSet($aArray, $sField, $bDescending = false)
{
    $bIsNumeric = IsNumeric($aArray);
    $aKeys = array_keys($aArray);
    $nSize = sizeof($aArray);

    for ($nIndex = 0; $nIndex < $nSize - 1; $nIndex++)
    {
        $nMinIndex = $nIndex;
        $objMinValue = $aArray[$aKeys[$nIndex]][$sField];
        $sKey = $aKeys[$nIndex];

        for ($nSortIndex = $nIndex + 1; $nSortIndex < $nSize; ++$nSortIndex)
        {
            if ($aArray[$aKeys[$nSortIndex]][$sField] < $objMinValue)
            {
                $nMinIndex = $nSortIndex;
                $sKey = $aKeys[$nSortIndex];
                $objMinValue = $aArray[$aKeys[$nSortIndex]][$sField];
            }
        }

        $aKeys[$nMinIndex] = $aKeys[$nIndex];
        $aKeys[$nIndex] = $sKey;
    }

    $aReturn = array();
    for($nSortIndex = 0; $nSortIndex < $nSize; ++$nSortIndex)
    {
        $nIndex = $bDescending ? $nSize - $nSortIndex - 1: $nSortIndex;
        $aReturn[$aKeys[$nIndex]] = $aArray[$aKeys[$nIndex]];
    }

    return $bIsNumeric ? array_values($aReturn) : $aReturn;
}

function IsNumeric($aArray)
{
    $aKeys = array_keys($aArray);
    for ($nIndex = 0; $nIndex < sizeof($aKeys); $nIndex++)
    {
        if (!is_int($aKeys[$nIndex]) || ($aKeys[$nIndex] != $nIndex))
        {
            return false;
        }
    }

    return true;
}
joris at mangrove dot nl 01-Feb-2007 01:40
Commenting on note http://www.php.net/manual/en/function.sort.php#62311 :

Sorting an array of objects will not always yield the results you desire.

As pointed out correctly in the note above, sort() sorts the array by value of
the first member variable. However, you can not always assume the order of your
member variables! You must take into account your class hierarchy!

By default, PHP places the inherited member variables on top, meaning your
first member variable is NOT the first variable in your class definition!
However, if you use code analyzers or a compile cache, things can be very
different. E.g., in eAccelerator, the inherited member variables are at the
end, meaning you get different sort results with caching on or off.

Conclusion:
Never use sort on arrays with values of a type other than scalar or array.
alex [at] vkpb [dot] com 26-Jan-2007 11:36
Sorting of an array by a method of inserts.

<?

 
       function sortByField($multArray,$sortField,$desc=true){
            $tmpKey='';
            $ResArray=array();

            $maIndex=array_keys($multArray);
            $maSize=count($multArray)-1;

            for($i=0; $i < $maSize ; $i++) {

               $minElement=$i;
               $tempMin=$multArray[$maIndex[$i]][$sortField];
               $tmpKey=$maIndex[$i];

                for($j=$i+1; $j <= $maSize; $j++)
                  if($multArray[$maIndex[$j]][$sortField] < $tempMin ) {
                     $minElement=$j;
                     $tmpKey=$maIndex[$j];
                     $tempMin=$multArray[$maIndex[$j]][$sortField];

                  }
                  $maIndex[$minElement]=$maIndex[$i];
                  $maIndex[$i]=$tmpKey;
            }

           if($desc)
               for($j=0;$j<=$maSize;$j++)
                  $ResArray[$maIndex[$j]]=$multArray[$maIndex[$j]];
           else
              for($j=$maSize;$j>=0;$j--)
                  $ResArray[$maIndex[$j]]=$multArray[$maIndex[$j]];

           return $ResArray;
       }

// make array
$array['aaa']=array("name"=>"vasia","order"=>1);
$array['bbb']=array("name"=>"petia","order"=>2);
$array['ccc']=array("name"=>"kolia","order"=>3);
$array['ddd']=array("name"=>"zenia","order"=>4);

// set sort
$SortOrder=0; // desc by default , 1- asc

var_dump(sortByField($array,'order',$SortOrder));

array
  'ddd' =>
    array
      'name' => 'zenia' (length=5)
      'order' => 4
  'aaa' =>
    array
      'name' => 'vasia' (length=5)
      'order' => 1
  'bbb' =>
    array
      'name' => 'petia' (length=5)
      'order' => 2
  'ccc' =>
    array
      'name' => 'kolia' (length=5)
      'order' => 3

?>
crudo at pinknet dot cz 28-Nov-2006 01:54
Simple way, how to sort an array without loosing keys:

<?php

$sizes = $bad = $good = array("d" => "dddd", "a" => "aaaa", "c" => "cccc", "e"
=> "eeee", "b" => "bbbb");

// original
print_r($sizes);

/*
Array
(
    [d] => dddd
    [a] => aaaa
    [c] => cccc
    [e] => eeee
    [b] => bbbb
)
*/

// bad way
sort($bad);
print_r($bad);

/*
Array
(
    [0] => aaaa
    [1] => bbbb
    [2] => cccc
    [3] => dddd
    [4] => eeee
)
*/

// good way
$good=array_flip($good);
ksort($good);
$good=array_flip($good);

print_r($good);

/*
Array
(
    [a] => aaaa
    [b] => bbbb
    [c] => cccc
    [d] => dddd
    [e] => eeee
)
*/

?>
eran dot liberty at gmail dot com 15-Nov-2006 03:24
/**
 * Will sort an array by the value of the applied lambda function to each
element
 * without loosing the keys!
 * @param unknown_type $arr
 * @param unknown_type $func of the form mixvar func(your object)
 */
function sortByFunc(&$arr, $func) {
        $tmpArr = array();
        foreach ($arr as $k => &$e) {
            $tmpArr[] = array('f' => $func($e), 'k' => $k, 'e' =>&$e);
        }
        sort($tmpArr);
        $arr = array();
        foreach($tmpArr as &$fke) {
            $arr[$fke['k']] = &$fke['e'];
        }
}

example:
$arr = array(
    1 => array('name' => 'eran', 'age' => 30),
    2 => array('name' => 'naama', 'age' => 29),
    3 => array('name' => 'a', 'age' => 11),
    4 => array('name' => 'b', 'age' => 51),
    5 => array('name' => 'z', 'age' => 5),
);
foreach($arr as $key => $val) {
    echo "<br> $key => (" . $val['name'] . " ," . $val['age'] . ")";
}
sortByFunc($arr,create_function('$element','return $element["age"];'));
echo "<br> now sorted:";
foreach($arr as $key => $val) {
    echo "<br> $key => (" . $val['name'] . " ," . $val['age'] . ")";
}
output:
1 => (eran ,30)
2 => (naama ,29)
3 => (a ,11)
4 => (b ,51)
5 => (z ,5)
now sorted:
5 => (z ,5)
3 => (a ,11)
2 => (naama ,29)
1 => (eran ,30)
4 => (b ,51)
memzap at gmail dot com 21-Jul-2006 05:31
Here is how you would open a file, and put each line into an array. This sorts
by the first field $title field.  The next thing I would like to figure out is
how to do this same sort but with the ability to skip the first word of the
title. Like if the title has an "a" or "the" it would skip that portion of the
sort.

$currentfile = "file.txt";
$fp = fopen( $currentfile, "r" ) or die("Couldn't open $currentfile");
while ( ! feof( $fp ) ) {
    $line[] = fgets( $fp, 1024 );

    foreach ( $line as $newarray ) {
}
    $newline[] = trim($newarray);
    sort($newline);
    list($title1, $titleurl1, $rating1) = split ('\|',
$newline[0]);
    list($title2, $titleurl2, $rating2) = split ('\|',
$newline[1]);
    list($title3, $titleurl3, $rating3) = split ('\|',
$newline[2]);
    list($title4, $titleurl4, $rating4) = split ('\|',
$newline[3]);
g8z at yahoo dot com 14-Jul-2006 11:28
<?php
/**
This sort function allows you to sort an associative array while "sticking"
some fields.

$sticky_fields = an array of fields that should not be re-sorted. This is a
method of achieving sub-sorts within contiguous groups of records that have
common data in some fields.

For example:

$a = array();

$a []= array(
    'name'         => 'Sam',
    'age'         => 23,
    'hire_date'    => '2004-01-01'
);
$a []= array(
    'name'        => 'Sam',
    'age'        => 44,
    'hire_date'    => '2003-03-23'
);
$a []= array(
    'name'        => 'Jenny',
    'age'        => 20,
    'hire_date' => '2000-12-31'
);
$a []= array(
    'name'        => 'Samantha',
    'age'        => 50,
    'hire_date' => '2000-12-14'
);

$sticky_fields = array( 'name' );
print_r( stickysort( $a, 'age', DESC_NUM, $sticky_fields ) );

OUTPUT:

Array
(
    [0] => Array
        (
            [name] => Sam
            [age] => 44
            [hire_date] => 2003-03-23
        )
    [1] => Array
        (
            [name] => Sam
            [age] => 23
            [hire_date] => 2004-01-01
        )
    [2] => Array
        (
            [name] => Jenny
            [age] => 20
            [hire_date] => 2000-12-31
        )
    [3] => Array
        (
            [name] => Samantha
            [age] => 50
            [hire_date] => 2000-12-14
        )
)

Here's why this is the correct output - the "name" field is sticky, so it
cannot change its sort order. Thus, the "age" field is only sorted as a
sub-sort within records where "name" is identical. Thus, the "Sam" records are
reversed, because 44 > 23, but Samantha remains at the bottom, even though her
age is 50. This is a way of achieving "sub-sorts" and "sub-sub-sorts" (and so
on) within records of identical data for specific fields.

Courtesy of the $5 Script Archive: http://www.tufat.com
**/

define( 'ASC_AZ', 1000 );
define( 'DESC_AZ', 1001 );
define( 'ASC_NUM', 1002 );
define( 'DESC_NUM', 1003 );

function stickysort( $arr, $field, $sort_type, $sticky_fields = array() ) {
    $i = 0;
    foreach ($arr as $value) {
        $is_contiguous = true;
        if(!empty($grouped_arr)) {
            $last_value = end($grouped_arr[$i]);

            if(!($sticky_fields == array())) {
                foreach ($sticky_fields as $sticky_field) {
                    if ($value[$sticky_field] <> $last_value[$sticky_field]) {
                        $is_contiguous = false;
                        break;
                    }
                }
            }
        }
        if ($is_contiguous)
            $grouped_arr[$i][] = $value;
        else
            $grouped_arr[++$i][] = $value;
    }
    $code = '';
    switch($sort_type) {
        case ASC_AZ:
            $code .= 'return strcasecmp($a["'.$field.'"], $b["'.$field.'"]);';
            break;
        case DESC_AZ:
            $code .= 'return (-1*strcasecmp($a["'.$field.'"], $b
["'.$field.'"]));';
            break;
        case ASC_NUM:
            $code .= 'return ($a["'.$field.'"] - $b["'.$field.'"]);';
            break;
        case DESC_NUM:
            $code .= 'return ($b["'.$field.'"] - $a["'.$field.'"]);';
            break;
    }

    $compare = create_function('$a, $b', $code);

    foreach($grouped_arr as $grouped_arr_key=>$grouped_arr_value)
        usort ( $grouped_arr[$grouped_arr_key], $compare );

    $arr = array();
    foreach($grouped_arr as $grouped_arr_key=>$grouped_arr_value)
        foreach($grouped_arr[$grouped_arr_key] as $grouped_arr_arr_key=>
$grouped_arr_arr_value)
            $arr[] = $grouped_arr[$grouped_arr_key][$grouped_arr_arr_key];

    return $arr;
}
?>
g8z at yahoo dot com 10-Jul-2006 03:58
<?php
/**
This sort function allows you to sort an associative array while "sticking"
some fields.

$sticky_fields = an array of fields that should not be re-sorted. This is a
method of achieving sub-sorts within contiguous groups of records that have
common data in some fields.

Courtesy of the $5 Script Archive: http://www.tufat.com
**/

define( 'ASC_AZ', 1000 );
define( 'DESC_AZ', 1001 );
define( 'ASC_NUM', 1002 );
define( 'DESC_NUM', 1003 );

function stickysort( $arr, $field, $sort_type, $sticky_fields = array() ) {
    $i = 0;
    foreach ($arr as $value) {
        $is_contiguous = true;
        if(!empty($grouped_arr)) {
            $last_value = end($grouped_arr[$i]);

            if(!($sticky_fields == array())) {
                foreach ($sticky_fields as $sticky_field) {
                    if ($value[$sticky_field] <> $last_value[$sticky_field]) {
                        $is_contiguous = false;
                        break;
                    }
                }
            }
        }
        if ($is_contiguous)
            $grouped_arr[$i][] = $value;
        else
            $grouped_arr[++$i][] = $value;
    }
    $code = '';
    switch($sort_type) {
        case ASC_AZ:
            $code .= 'return strcasecmp($a["'.$field.'"], $b["'.$field.'"]);';
            break;
        case DESC_AZ:
            $code .= 'return (-1*strcasecmp($a["'.$field.'"], $b
["'.$field.'"]));';
            break;
        case ASC_NUM:
            $code .= 'return ($a["'.$field.'"] - $b["'.$field.'"]);';
            break;
        case DESC_NUM:
            $code .= 'return ($b["'.$field.'"] - $a["'.$field.'"]);';
            break;
    }

    $compare = create_function('$a, $b', $code);

    foreach($grouped_arr as $grouped_arr_key=>$grouped_arr_value)
        usort ( $grouped_arr[$grouped_arr_key], $compare );

    $arr = array();
    foreach($grouped_arr as $grouped_arr_key=>$grouped_arr_value)
        foreach($grouped_arr[$grouped_arr_key] as $grouped_arr_arr_key=>
$grouped_arr_arr_value)
            $arr[] = $grouped_arr[$grouped_arr_key][$grouped_arr_arr_key];

    return $arr;
}
?>
g8z at yahoo dot com 10-Jul-2006 03:57
<?php
/**
This sort function allows you to sort an associative array while "sticking"
some fields.

$sticky_fields = an array of fields that should not be re-sorted. This is a
method of achieving sub-sorts within contiguous groups of records that have
common data in some fields.

Courtesy of the $5 Script Archive: http://www.tufat.com
**/

define( 'ASC_AZ', 1000 );
define( 'DESC_AZ', 1001 );
define( 'ASC_NUM', 1002 );
define( 'DESC_NUM', 1003 );

function stickysort( $arr, $field, $sort_type, $sticky_fields = array() ) {
    $i = 0;
    foreach ($arr as $value) {
        $is_contiguous = true;
        if(!empty($grouped_arr)) {
            $last_value = end($grouped_arr[$i]);

            if(!($sticky_fields == array())) {
                foreach ($sticky_fields as $sticky_field) {
                    if ($value[$sticky_field] <> $last_value[$sticky_field]) {
                        $is_contiguous = false;
                        break;
                    }
                }
            }
        }
        if ($is_contiguous)
            $grouped_arr[$i][] = $value;
        else
            $grouped_arr[++$i][] = $value;
    }
    $code = '';
    switch($sort_type) {
        case ASC_AZ:
            $code .= 'return strcasecmp($a["'.$field.'"], $b["'.$field.'"]);';
            break;
        case DESC_AZ:
            $code .= 'return (-1*strcasecmp($a["'.$field.'"], $b
["'.$field.'"]));';
            break;
        case ASC_NUM:
            $code .= 'return ($a["'.$field.'"] - $b["'.$field.'"]);';
            break;
        case DESC_NUM:
            $code .= 'return ($b["'.$field.'"] - $a["'.$field.'"]);';
            break;
    }

    $compare = create_function('$a, $b', $code);

    foreach($grouped_arr as $grouped_arr_key=>$grouped_arr_value)
        usort ( $grouped_arr[$grouped_arr_key], $compare );

    $arr = array();
    foreach($grouped_arr as $grouped_arr_key=>$grouped_arr_value)
        foreach($grouped_arr[$grouped_arr_key] as $grouped_arr_arr_key=>
$grouped_arr_arr_value)
            $arr[] = $grouped_arr[$grouped_arr_key][$grouped_arr_arr_key];

    return $arr;
}
?>
Emiliyan at ServicesBG dot Com 29-Mar-2006 03:41
#This is a function that will sort an array...
function sort_by($array,  $keyname = null, $sortby) {
   $myarray = $inarray = array();   
   # First store the keyvalues in a seperate array
    foreach ($array as $i => $befree) {
        $myarray[$i] = $array[$i][$keyname];
    }
   # Sort the new array by
    switch ($sortby) {
    case 'asc':
    # Sort an array and maintain index association...
    asort($myarray);
    break;
    case 'arsort':
    # Sort an array in reverse order and maintain index association
    arsort($myarray);
    break;
    case 'natcasesor':
    # Sort an array using a case insensitive "natural order" algorithm
    natcasesort($myarray);
    break;
    }
    # Rebuild the old array
    foreach ( $myarray as $key=> $befree) {
       $inarray[$key] = $array[$key];
    }
    return $inarray;
}
sort_by(); example...
$info = sort_by($myarray, 'name', $use = 'asc');   
print_r($info);
ludvig dot ericson at gmail dot com 25-Feb-2006 05:48
A tip for those who like "raul at jimi dot com dot mx" need to preserve keys
after changing stuff in the middle of an array:
array_values.

Example:
<?php
$array = array(1, 2, 5, 9, 3);
unset($array[3]); // Remove index 3, which is 9.
$array = array_values($array);
?>

Hint: array_values can be fine for removing keys and reindex them by number
instead, too (applies to functions like posix_pwgetuid which returns an
associative array, unlike C and others, call array_values on it, and it'll be
the same format IIRC.)
jesper at snt dot utwente dot nl 24-Feb-2006 09:26
If you sort an array of objects, the first variable in the object will be used
for sorting:

<?php
class foo
{
  var $value; //First variable: Used for sorting
  var $id;

  function foo($i, $v)
  {
     $this->id = $i;
     $this->value = $v;
  }

}

for ($i = 0; $i < 10; $i++)
{
  $bar[] = new foo($i,rand(1,10));
}

// This will sort on value
sort($bar);
print_r($bar);
?>

Compare the piece of code above with the following:

<?php
class foo
{
  var $id; //First variable: Used for sorting
  var $value;

  function foo($i, $v)
  {
     $this->id = $i;
     $this->value = $v;
  }

}

for ($i = 0; $i = 10; $i++)
{
  $bar[] = new foo($i,rand(1,10));
}

// This will sort on id
sort($bar);
print_r($bar);
?>

As you can see the location of declaration of the variables matter!
If you want to sort on both or on a combination of variables, use ksort()
jerome a-t+ yamafoto d*o*t com 22-Feb-2006 05:39
when sorting an array, beware of variable type from elements you put in this
array

Example:

$a = 2; // $a is an integer
$b = 'item';
$arr = array($a, $b);
sort($arr);

print_r($arr);

this will output:
$arr[0] = 'item';
$arr[1] = 2;

$a = '2'; // $a is a string
$b = 'item';
$arr = array($a, $b);
sort($arr);

print_r($arr);

this will output:
$arr[0] = '2';
$arr[1] = 'item'

to avoid this problem use:

sort($arr, SORT_STRING)
nm at thenoodleman dot com 31-Jan-2006 01:18
Faster, more effective function:

array_sort (array, ['asc'/'desc'])

Second parameter specifies whether to order ascending or descending. Default is
ascending.

function array_sort($array, $type='asc'){
    $result=array();
    foreach($array as $var => $val){
        $set=false;
        foreach($result as $var2 => $val2){
            if($set==false){
                if($val>$val2 && $type=='desc' || $val<$val2 && $type=='asc'){
                    $temp=array();
                    foreach($result as $var3 => $val3){
                        if($var3==$var2) $set=true;
                        if($set){
                            $temp[$var3]=$val3;
                            unset($result[$var3]);
                        }
                    }
                    $result[$var]=$val;   
                    foreach($temp as $var3 => $val3){
                        $result[$var3]=$val3;
                    }
                }
            }
        }
        if(!$set){
            $result[$var]=$val;
        }
    }
    return $result;
}

Works for ordering by integers or strings, no need to specify which.

Example:

$array=array('a' => 50, 'b' => 25, 'c' => 75);
print_r(array_sort($array));

Returns:
Array
(
[b] => 25
[a] => 50
[c] => 75
)
james at miicro dot net 24-Jan-2006 06:26
Further to john dot dutcher at highmark dot com's comments - padding the name
could cause a problem if you get abnormally long names, it might be better to
rebuild the array thus:

Array (
[0] => Array ( [sortname_01] => Dutcher [sortname_02] => F [sortname_03] =>
John [name] => Dutcher, John F )
[1] => Array ( [sortname_01] => Dutch [sortname_02] => A [sortname_03] => Roger
[name] => Dutch, Roger A )
[2] => Array ( [sortname_01] => Dut [sortname_02] => H [sortname_03] => Maurice
[name] => Dut, Maurice H )
[3] => Array ( [sortname_01] => Dut [sortname_02] => S [sortname_03] => Mildred
[name] => Dut, Mildred S )
)

which should give:

Array (
[0] => Array ( [sortname_01] => Dut [sortname_02] => H [sortname_03] => Maurice
[name] => Dut, Maurice H )
[1] => Array ( [sortname_01] => Dut [sortname_02] => S [sortname_03] => Mildred
[name] => Dut, Mildred S )
[2] => Array ( [sortname_01] => Dutch [sortname_02] => A [sortname_03] => Roger
[name] => Dutch, Roger A )
[3] => Array ( [sortname_01] => Dutcher [sortname_02] => F [sortname_03] =>
John [name] => Dutcher, John F )
)
john dot dutcher at highmark dot com 11-Jan-2006 12:58
Regarding the array sorting of names by 'whatever' ....

That post addresses a nearly identical issue with sorting that I also have.

I just wanted to inquire though.........wouldn't the building of the
'sortname'  value require that the last name and first name be padded to their
full size as they are placed into the
'sortname' field in order to get proper sorting/alignment ?

Otherwise would one have .......

    dutcherjohnf                   (Dutcher, John F)
    dutchrogera                   (Dutch, Roger A)
    dutmauriceh                   (Dut, Maurice H)

Instead of:

    dut           maurice         h    
    dutch         roger          a
    dutcher      john            f

John D.
raul at jimi dot com dot mx 02-Dec-2005 05:50
I had an array like this:
$arr=array (1,4,3,6,5);

which returns this:
$arr[0]=1
$arr[1]=4
$arr[2]=3
$arr[3]=6
$arr[4]=5

But lets say i remove [2] which is number 3, i get:

$arr[0]=1
$arr[1]=4
$arr[3]=6
$arr[4]=5

And i want to reindex without doing a sort because i dont want to lose the
order of the numbers (like a pop in a stack but in the middle of the list), i
do this:

$arr=array_chunk($arr,count($arr));
$arr=$arr[0];

the result is:

$arr[0]=1
$arr[1]=4
$arr[2]=6
$arr[3]=5

This can be applied mostly for tree sorting, when you only have the id and the
parent values of the node, and you want to have N levels.
phillip dot metzger at gmail dot com 09-Nov-2005 05:36
For a case insensitive sort use this array_multisort().

<?php
$array_var = Array("Cheery", "zap", "Banana", "apple", "Zing");

array_multisort((strtolower($array_var)), SORT_ASC, SORT_STRING, $array_var);
?>

Result order:
apple
Banana
Cheery
zap
Zing
james at miicro dot net 19-Jul-2005 09:49
It's useful to know that if you're using this function on a multidimensional
array, php will sort the first key, then the second and so on. This is similar
to being able to use SQL to order by field1, field2 etc.

So:

Array (
[0] => Array ( [category] => work [name] => Smith )
[1] => Array ( [category] => play [name] => Johnson )
[2] => Array ( [category] => work [name] => Berger )
)

will become:

Array (
[0] => Array ( [category] => play [name] => Johnson )
[1] => Array ( [category] => work [name] => Berger )
[2] => Array ( [category] => work [name] => Smith )
)

Hope it helps someone.
whatever at toposphere dot com 02-Jul-2005 08:12
The usort solution below still has problems when sorting strings of different
lengths, just like the other flavors of sort that I've tried.

Here's a solution that I came up with -- it's kinda ugly, and it might not be
practical for large arrays, but it's works great for me.

I'm getting some people's names out of mySQL and placing them in an array like
this: "$lastname, $firstname $middlename". Because some people don't have
middle names, "sort" screws up the alphabetization. So what I've done is this:

$index = 0;
while ($rows = mysql_fetch_array($sqlResult)) {
    extract($rows);
    $my_array[$index]['sortname'] = strtolower(preg_replace("/[^a-zA-Z]/", "",
"$lastname$firstname$middlename"));
    $my_array[$index]['name'] = trim("$lastname, $firstname $middlename");
    $index++;
}
sort($my_array); // now in perfect alpha order

My "hack" is in the fourth line -- I take the entire name, last name first, and
use preg_replace() to take out all non-letter characters, and then used
strtolower() to make it all lowercase to ensure all letters would be treated
equally by PHP. This goes into the ['sortname'] key within the array.

(The ['sortname'] value has to come before ['name'], or else the array will be
sorted by ['name'] instead.)

This gives me:

Array
(
   [0] => Array ( [sortname] => shmojoe [name] => Shmo, Joe )
   [1] => Array ( [sortname] => shmojoem [name] => Shmo, Joe M )
)
... and so on

So the array gets sorted by ['sortname'], which never needs to be displayed,
and the associated ['name'] can be displayed in perfect alphabetical order,
whether there is one name, two names or three. And because ['sortname'] is
letters only, it works great for hyphenated last names or ones with
apostrophes, like Smith-Jones or O'Donnell.

I feel that the dual preg_replace() and strtolower() may not be the best
theoretical solution, and I don't know how it would run on a really large
array, but as I said, it's a great solution for my little site.
dwatson at planandgrow dot com 19-Mar-2005 01:55
Here is a recursive use of sort for multi-dim arrays:

<?php

/*Mulsort function recursively sorts a  multi-dimensional, numeric array in
place,
regardless of how many dimensions it has.  The array can be ragged -- not a
matrix. 
*/

function mulsort(&$a)
{
    sort($a);
    $c = count($a);
    for($i = 0; $i < $c; $i++)
        if (is_array($a[$i]))
            mulsort($a[$i]);
}

//The following array is just used to demo the mulsort function.
$array_demo = array ( array ( array (333,1,9,8,7,6,5), array (array(1, 'x',
22), 99, 88 ), -10 ),
        array ( array (11, 12, 'a', 'b', 'c'), array (8, 1, 2,-5) ) );

echo "Array before sorting:<br /><pre>";
var_dump($array_demo);
echo "</pre></ br></ br>";

mulsort($array_demo);

echo "Array after sorting:<br /><pre>";
var_dump($array_demo);
echo "</pre>";

?>
timc at hlyw dot com 18-Feb-2005 12:04
I dig the multi_sort function(s) from above.  But, they don't work for hash
arrays.  I added a keys variable to keep track of the key value as the array
gets sorted.  Feed back welcome.

<?php
function array_qsort (&$array, $column=0, $order=SORT_ASC, $first=0, $last= -2)
{
  // $array  - the array to be sorted
  // $column - index (column) on which to sort
  //          can be a string if using an associative array
  // $order  - SORT_ASC (default) for ascending or SORT_DESC for descending
  // $first  - start index (row) for partial array sort
  // $last  - stop  index (row) for partial array sort
  // $keys  - array of key values for hash array sort
 
  $keys = array_keys($array);
  if($last == -2) $last = count($array) - 1;
  if($last > $first) {
   $alpha = $first;
   $omega = $last;
   $key_alpha = $keys[$alpha];
   $key_omega = $keys[$omega];
   $guess = $array[$key_alpha][$column];
   while($omega >= $alpha) {
     if($order == SORT_ASC) {
       while($array[$key_alpha][$column] < $guess) {$alpha++; $key_alpha =
$keys[$alpha]; }
       while($array[$key_omega][$column] > $guess) {$omega--; $key_omega =
$keys[$omega]; }
     } else {
       while($array[$key_alpha][$column] > $guess) {$alpha++; $key_alpha =
$keys[$alpha]; }
       while($array[$key_omega][$column] < $guess) {$omega--; $key_omega =
$keys[$omega]; }
     }
     if($alpha > $omega) break;
     $temporary = $array[$key_alpha];
     $array[$key_alpha] = $array[$key_omega]; $alpha++;
     $key_alpha = $keys[$alpha];
     $array[$key_omega] = $temporary; $omega--;
     $key_omega = $keys[$omega];
   }
   array_qsort ($array, $column, $order, $first, $omega);
   array_qsort ($array, $column, $order, $alpha, $last);
  }
}
?>
anthony at ectrolinux dot com 08-Sep-2004 11:39
In a brief addition to the previous poster's message, the ascending sorting
order used by PHP directly corresponds to ISO-8859-1 (ASCII). Therefore the
character \48 (numeral 0) would be placed before the character \82 (R), which
would be placed before the character \110 (n), and so forth.
teunkloosterman at hotmail dot com 30-Aug-2004 08:14
Just to show how it sorts:

<?php
$array = Array("1", "2", "3", "4", "5", "6", "7", "8", "9", "0", "a", "b", "c",
"d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s",
"t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I",
"J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y",
"Z", " ", "!", "@", "#", "\\\$", "%", "^", "&", "*", "(", ")", "_", "-", "=",
"+", "\\\\", "|", ",", "<", ".", ">", "?", "'", "\\\"", "`", "~");
sort($array);
echo implode("", $array);
?>

returns:

 !"#$%&'()*+,-.0123456789<=>?
@ABCDEFGHIJKLMNOPQRSTUVWXYZ
\^_`abcdefghijklmnopqrstuvwxyz|~

note: the result begins with a space
Gerhard Conradi 10-Mar-2004 08:49
Hi @all,

to my previous author: thanks, thanks, thanks! Works great and saved me lot of
time. I added an extension for ascending/descending order. Here are the
changes:

// first i defined two constants for asc and desc
// you can skip that, but then you have to change the switch command at the end
of the function
define("ORDER_ASC", "asc");
define("ORDER_DESC", "desc");

function mu_sort($array, $key_sort, $asc_desc) { // start function
       
// check input parameters
if (func_num_args()<2 || func_num_args()>3) die("Wrong number of parameters for
the call of mu_sort()");
       
   $array = func_get_arg(0);
   $key_sort = func_get_arg(1);
   if (func_num_args()==3)
      $asc_desc = func_get_arg(2);
   else
      $asc_desc = ORDER_ASC;

   $key_sorta = explode(",", $key_sort);
   .... // from here it's exactly the same

   ... // until here
      } // end loop #2
   } // end loop #1

   // sort
   // if you don't want to use the constants defined at the top, change here to
whatever you're using
   switch($asc_desc) {
      case ORDER_DESC:
         rsort($output); break;
      default:
         sort($output);
   }

   // return sorted array
   return $output;
} // end function

Now you can call the function like this:
mu_sort($array, $key_sort, ORDER_DESC);
or even:
mu_sort($array, $key_sort); // This will sort the array by default ascending

Have fun...
matias at arenasoftware dot com 24-Mar-2003 01:36
Lets say you have the following array:
$array1 = Array(third => "Some text 3", second => "Some text 2", first => "Some
text 1", fourth => "Some text 4" );
and you want to sort it by first,second,third, fourth.
Very easy! Just create a second array:
$array2 = Array(first => "", second => "", third => "", fourth => "");
and do:
$result = array_merge($array2,$array1);

now $result = Array(first => "Some text 1",second => "Some text 2",third =>
"Some text 3",fourth => "Some text 4");

This is very usefull when you want to print data out of a database table for
example, but you would like to give it a custom order.
arjan321 at hotmail dot com 31-Jan-2003 08:23
Ik you want to sort case insensitive, use the natcasesort()
shailu_agrawal at yahoo dot no_spam dot com 13-Nov-2002 02:05
if 2nd parameter is "SORT_REGULAR" it will compare characters by ASCII values.
For ex: if unsorted values are:  B , a , A
with SORT_REGULAR sorted result will be: A , B , a
and with SORT_STRING sorted result will be: a , A , B
whit at transpect dot com 25-Oct-2002 09:06
fmmarzoa's qsort_multiarray gets the last record with the removal of a "-1"
from the 3rd line of the function definition. Here's a routine using it that
takes a tab-delimited table with the column names in the first row, and
displays it from an arbitrary column on the left to the last on the right with
option to sort by any one column:

<?php                                                                         
               
//tab-delimited ASCII file to sort - no more than one linefeed at end         
               
$infile="members.txt";
//first column on left to display - count from 0
$firstcol="1";

function qsort_multiarray($array, $num = 0, $order = "ASC", $left = 0, $right =
-1) {
        if($right == -1) {
                $right = count($array);
        }
        $links = $left;
        $rechts = $right;
        $mitte = $array[($left + $right) / 2][$num];
        if($rechts > $links) {
                do {
                        if($order == "ASC") {
                                while($array[$links][$num]<$mitte) $links++;
                                while($array[$rechts][$num]>$mitte) $rechts--;
                        } else {
                                while($array[$links][$num]>$mitte) $links++;
                                while($array[$rechts][$num]<$mitte) $rechts--;
                        }
                        if($links <= $rechts) {
                                $tmp = $array[$links];
                                $array[$links++] = $array[$rechts];
                                $array[$rechts--] = $tmp;
                        }
                } while($links <= $rechts);
                if ($left < $rechts) $array = qsort_multiarray
($array,$num,$order,$left, $rechts);
                if ($links < $right) $array = qsort_multiarray
($array,$num,$order,$links,$right);
        }
        return $array;
}

$mem=file("$infile");
$line=explode("\t","$mem[0]");
$cnt=count($line);
echo "<html><head><title>$infile</title></head><body>";
echo "<table border=\"1\"><tr>";
for ($i=$firstcol;$i<$cnt;$i++) {
        echo "<td><a href=\"$PHP_SELF?col=$i\">$line[$i]</a></td>";
}
echo "</tr>";
$cnt=count($mem);
for ($i=$firstcol;$i<$cnt;$i++) {
        $line=explode("\t","$mem[$i]");
        $cnt2=count($line);  
        for ($j=$firstcol;$j<$cnt2;$j++) {
                $mem2[$i][$j]=$line[$j];
        }
}
if(!isset($col)) $col=$firstcol;
$mem2=qsort_multiarray($mem2,$col);
for ($i=0;$i<$cnt;$i++) {
        echo "<tr>";
        for ($j=$firstcol;$j<$cnt2;$j++) {
                $show=$mem2[$i][$j];
                echo "<td>$show</td>";
        }
        echo "</tr>";
}
echo "</table></body></html>";
?>
14-Mar-2002 10:09
If you want to sort an array according to your locale do the following:
(de_DE as example)

setlocale("LC_ALL","de_DE");
usort($arraytobesorted, 'strcoll');

--ed: In PHP 4.4 and PHP 5.0 you can do:
setlocale("LC_ALL", "de_DE");
sort($arraytobesorted, SORT_LOCALE_STRNG);
RunMaster at gmx dot de 29-Aug-2001 05:11
Note that sort() is void, so an assignment like

$foo_array = sort( $foo_array );

wont work. In result you cannot combine sort() for use with other array-related
functions just like array_unique() or array_values(). None of the following
statements works:

sort( array_unique( $foo_array ) );
// returns empty string

$foo_array = array_unique( sort( $foo_array) );
// returns parameter failure

The only way to combine those functions is to apply sort() in a single line
statement.

So please dont waste your time with hours of debugging like me before I found
out, its void... ;-)
phpdotnetNO_SPAM at electronic-strategy dot com 05-Jul-2001 04:34
/*
Small function to Alphabetically sort Multidimensional arrays by index values
of an n dimension array.

I have only tested this for sorting an array of up to 6 dimensions by a value
within the second dimension. This code is very rough and works for my purposes,
but has not been tested beyond my needs.

Although a little clunky and not a mathematical type algorithm, it get's the
job done. It theoretically overcomes many of the problems I have seen with
multidimensional arrays in that it is possible to specify within the function,
not by reference :-(, which index you wish to sort by, no matter how many
dimensions down.

call function by assigning it to a new / existing array:

$row_array = multidimsort($row_array);
*/

function multidimsort($array_in) {
     $multiarray = array();
    $array_out = array();
    $loopvalue = 0;
   
    /* -1 as traversal of array starts from 0, count() starts from 1 */
    $multicount = count($array_in) - 1;

    /* add the indexes you wish to sort array by to a new array in this case
index is two levels down, but shouldn't make a difference if it goes further
indexes down. (Not tested!) */
    for($i = 0; $i <= $multicount; $i++) {
        array_push($multiarray, $array_in[$i][2]);
        //array_push($multiarray, $array_in[$i][2][4]);
        //array_push($multiarray, $array_in[$i][1][3][7]);
    }
   
    /* alphabetically sort the new array (Ascending in this case) can chage
sort to whatever type you like. Even apply user-defined sort. */
    asort($multiarray);
   
    /* reset internal pointer to beginning of array after above sort */
    reset($multiarray);
   
    /* traverse new array of index values and add the corresponding element of
the input array to the correct position in the output array */
    while (list ($key, $val) = each ($multiarray)) {
       
        $array_out[$loopvalue] = $array_in[$key];
       
        $loopvalue++;
    }

    /* return the output array which is all nicely sorted by the index you
wanted! */
    return $array_out;
}
Richard dot C dot Mitchell at Boeing dot com 23-Apr-2001 04:59
The usort function can be used to sort multi-dimension arrays, also.

To do a case-insensitive sort on the 7th column of a two-dimensional array:
usort($listing, create_function('$a,$b','return strcasecmp($a[7],$b[7]);'));

When using associative arrays:
usort($listing, create_function('$a,$b','return strcasecmp($a["name"],$b
["name"]);'));

Case-sensitive, descending (just change '$a,$b' to '$b,$a'):
usort($listing, create_function('$b,$a','return strcmp($a["name"],$b["name"]);
'));

A two-dimensional array of numbers (7th column, ascending):
usort($listing, create_function('$a,$b','return $a[7]==$b[7]?0:($a[7]<$b[7]?
-1:1);'));
peek at mailandnews dot com 07-Apr-2001 11:06
I ran into the same problem with case insensitive sorting. Actually I think
there should be a SORT_STRING_CASE flag but I tried the following:

usort($listing, 'strcasecmp');

This didn't work (why not?), but you can do a proper case insensitive sort like
this:

usort($listing, create_function('$a,$b','return strcasecmp($a,$b);'));
ultrafunkula at mad dot scientist dot com 31-Mar-2000 06:08
What you really want is asort(). The neat thing about PHP arrays is that even
though they have a traditional numerical index, they are not defined by it.
What I mean by this is if you define an array $data[], then $data[2] does not
necessarily exist between $data[1] and $data[3].
So if you asort() by the artist name and then use each() to recover the array
elements in the order they exist(rather than an incremental loop which ties you
to their arbitrary numerical key), you can sort your data by any dimension of
your array. Try this out:
$data[0][1]='Title 2';
$data[0][2]='Title 1';
$data[0][0]='Title 3';
$data[1][1]='Barney';
$data[1][0]='Charlie';
$data[1][2]='Al';
$data[2][2]='Sing the song of Al';
$data[2][1]='Jam with Barney';
$data[2][0]='Charlie Rocks';

while (list($key) = each($data[1])) {
print $data[0][$key].",".$data[1][$key].",".$data[2][$key]."<p>";
}

asort($data[1]);

while (list($key) = each($data[1])) {
print $data[0][$key].",".$data[1][$key].",".$data[2][$key]."<p>";
}

The interesting part is that the first, UNSORTED array doesn't come out in
numerical order, because it wasn't put in that way.  If you asort($data[2])
you'll sort by lyrics, and so on. Just make sure you remember to each() by the
same dimension as you asort().
misillet at tin dot it 17-Mar-2000 06:58
Note that using sort() it seems to sort by ASCII code, because "AC" is before
"Ab" in the result array
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Mar 18 20:11:43 2011 UTC
    さらに比較したい配列。

返り値

array1 のエントリのうち、他のどの配列にも含まれない要素のみを含む配列を返します
。

例

例1 array_diff() の例

<?php
$array1 = array("a" => "green", "red", "blue", "red");
$array2 = array("b" => "green", "yellow", "red");
$result = array_diff($array1, $array2);

print_r($result);
?>

$array1 に複数存在する場合でも全て同様に処理されます。この出力は次の通りです。

Array
(
    [1] => blue
)

注意

    注意:

    二つの要素は、(string) $elem1 === (string) $elem2 の場合のみ等しいと見直さ
    れます。言い換えると、文字列表現が同じ場合となります。

    注意:

    この関数は n 次元配列の一つの次元しかチェックしません。もちろん、array_diff
    ($array1[0], $array2[0]); のようにすることでより深い次元でのチェックもでき
    ます。

参考

  • array_diff_assoc() - 追加された添字の確認を含めて配列の差を計算する
  • array_intersect() - 配列の共通項を計算する
  • array_intersect_assoc() - 追加された添字の確認も含めて配列の共通項を確認す
    る



array_fill_keys> <array_diff_ukey
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes array_diff
eugeny dot yakimovitch at gmail dot com 30-Dec-2010 11:17
Note that array_diff is not equivalent to

<?php
function fullArrayDiff($left, $right)
{
    return array_diff(array_merge($left, $right), array_intersect($left,
$right));
}
?>

since it is a set-theoretical complement as in

http://en.wikipedia.org/wiki/Complement_(set_theory)
javierchinapequeno at yahoo dot es 21-Dec-2010 07:21
Hi, I´d like to give a piece of advice to all who need to use this function to
compare two arrays that have a great quantity of elements. You should sort both
arrays first before comparing, it will work faster.
Thanks
webmaster at drakkofox dot net 15-Oct-2010 02:48
If you simply want to verify if a array is different of another one, use IF.

array_diff was returning a empty array when i received values from a form and
compared they both(one was from a input type hidden array, and another was from
input type checkbox), even if one of they were different. i tried switching
places between arr1 and arr2, no good.
thefrox at gmail dot com 30-Jun-2010 12:28
Multidimensional array_diff

<?php
echo '<pre>';
$bdd['80395']= array('80396','80397','80398','777');
$folder['80395']= array('80396','80397','666','80398','154223');
$folder['80397']= array('34','35','36','45','57');

echo '<hr>';

function multidimensional_array_diff($a1,$a2)
{
  $r = array();
 
 foreach ($a2 as $key => $second)
 {
      foreach ($a1 as $key => $first)
      {
             
            if (isset($a2[$key]))
            {
                foreach ($first as $first_value)
                {
                    foreach ($second as $second_value)
                    {
                        if ($first_value == $second_value)
                        {
                            $true = true;
                            break;   
                        }
                    }
                    if (!isset($true))
                    {
                       
                        $r[$key][] = $first_value;
                    }
                    unset($true);
                }
            }
            else
            {
                $r[$key] = $first;
            }
      }
 }
  return $r;
}
print_r(single_diff_assoc($folder,$bdd));
?>

RESULT :

Array
(
    [80395] => Array
        (
            [0] => 666
            [1] => 154223
        )

    [80397] => Array
        (
            [0] => 34
            [1] => 35
            [2] => 36
            [3] => 45
            [4] => 57
        )

)
S Gower 15-Feb-2010 10:45
array_diff does not create a new array containing the values present in $array1
but not $array2 -- it simply unsets all of the value in $array1 that are in
$array2 and returns it.

This means that the indexes of the returned array are typically not continuous
from zero. For example:

<?php

$array1 = array('red', 'blue', 'green', 'octarine');
$array2 = array('red', 'yellow', 'green');
$diff = array_diff($array1, $array2);

print_r($diff); //Array ( [1] => blue [3] => octarine )

?>

The easiest way around this seems to be use array_merge:

<?php

print_r(array_merge($diff)) //Array ( [0] => blue [1] => octarine )

?>
pikiou at somethinggooglerelated dot com 13-Nov-2009 12:24
With previous solutions handling multi-dimensional arrays or objects through
serialization, if compared variables contain references at some point, these
will be serialized and stand as such after the diff function.
Here is a safer solution :
<?php
function array_diff_no_cast(&$ar1, &$ar2) {
   $diff = Array();
   foreach ($ar1 as $key => $val1) {
      if (array_search($val1, $ar2) === false) {
         $diff[$key] = $val1;
      }
   }
   return $diff;
}
?>

Example:
<?php
$referenced = Array(1,1);
$array1 = Array(&$referenced, Array(2,3));
$array2 = Array(Array(1,1), Array(4,5));
$result = array_diff_no_cast($array1, $array2);

print_r($result);   //Outputs Array(1 => Array(2,3))
//And $referenced stands unchanged (not serialized)
?>
vojtech dot hordejcuk at gmail dot com 03-Nov-2009 03:15
Based on one lad's code, I created following function for creating something
like HTML diff. I hope it will be useful.

<?php
private function diff ($old, $new)
{
  $old = preg_replace ('/ +/', ' ', $old);
  $new = preg_replace ('/ +/', ' ', $new);
 
  $lo = explode ("\n", trim ($old) . "\n");
  $ln = explode ("\n", trim ($new) . "\n");
  $size = max (count ($lo), count ($ln));

  $equ = array_intersect ($lo, $ln);
  $ins = array_diff ($ln, $lo);
  $del = array_diff ($lo, $ln);
 
  $out = '';
 
  for ($i = 0; $i < $size; $i++)
  {
    if (isset ($del [$i]))
    {
      $out .= '<p><del>' . $del [$i] . '</del></p>';
    }
   
    if (isset ($equ [$i]))
    {
      $out .= '<p>' . $equ [$i] . '</p>';
    }
   
    if (isset ($ins [$i]))
    {
      $out .= '<p><ins>' . $ins [$i] . '</ins></p>';
    }
  }
 
  return $out;
}
?>
Anonymous 15-Oct-2009 06:55
Hi!
I tried hard to find a solution to a problem I'm going to explain here, and
after have read all the array functions and possibilities, I had to create what
I think should exist on next PHP releases.

What I needed, it's some kind of Difference, but working with two arrays and
modifying them at time, not returning an array as a result with the diference
itself.

So, as an example:

A = 1,2,3
B = 2,3,4

should NOT be:

C = 1,4

but:

A = 1
B = 4

so basically, I wanted to delete coincidences on both arrays.

Now, I've some actions to do, and I know wich one I've to do with the values
from one array or another.
With the normal DIFF I can't, because if I've an array like C=1,4, I dont know
if I've to do the Action_A with 1 or with 4, but I really know that everything
in A, will go to the Action_A and everithing in B, will go to Action_B. So same
happens with 4, don't know wich action to apply...

So I created this:

<?php
function array_diff_ORG_NEW(&$org, &$new, $type='VALUES'){
    switch($type){
        case 'VALUES':
            $int = array_values(array_intersect($org, $new)); //C = A ^ B
            $org = array_values(array_diff($org, $int)); //A' = A - C
            $new= array_values(array_diff($new, $int)); //B' = B - C
            break;
        case 'KEYS':
            $int = array_values(array_intersect_key($org, $new)); //C = A ^ B
            $org = array_values(array_diff_key($org, $int)); //A' = A - C
            $new= array_values(array_diff_key($new, $int)); //B' = B - C
            break;
    }
}
?>

This cute, works by reference, and modifies the arrays deleting coincidences on
both, and leaving intact the non coincidences.

So a call to this will be somethin' like:

<?php
$original = array(1,2,3);
$new = array(2,3,4);

array_diff_ORG_NEW($original, $new, 'VALUES');
?>

And HERE, I'll have my arrays as I wanted:

$original = 1
$new = 4

Now, why I use it precisely?

Imagine you've some "Events" and some users you select when create the event,
can "see" this event you create. So you "share" the event with some users. Ok?

Imagine you created and Event_A, and shared with users 1,2,3.

Now you want to modify the event, and you decide to modify the users to share
it. Imagine you change it to users 2,3,4.

(numbers are users ID).

So you can manage when you are going to modify, to have an array with the IDs
in DDBB ($original), and then, have another array with ID's corresponding to
the users to share after modifying ($new). Wich ones you've to DELETE from
DDBB, and wich ones do you've to INSERT?

If you do a simple difference or somehow, you get somethin' like C=1,4.
You have no clue on wich one you've to insert or delete.

But on this way, you can know it, and that's why:

- What keeps on $original, it's somethin not existing in $new at the beggining.
So you know that all what you've inside $original, have to be deleted from DDBB
because what you did in the modifying process, it's to unselect those users
keeping in $original.
- What keeps on $new, it's something not existing in $original at the
beggining. Wich means that in the modifying process you added some new users.
And those have to be inserted in DDBB. So, everything keeping inside $new, have
to be inserted in the DDBB.

Conclusion:

- Remaining in $original --> delete from DB.
- Remaining in $new --> insert into DB.

And that's all!

I hope you find it useful, and I encourage PHP "makers", to add in a not
distant future, somethin' like this one natively, because I'm shure that I'm
not the first one needing something like this.

Best regards all,

Light.
firegun at terra dot com dot br 24-Jun-2009 05:52
Hello guys,

I´ve been looking for a array_diff that works with recursive arrays, I´ve tried
the ottodenn at gmail dot com function but to my case it doesn´t worked as
expected, so I made my own. I´ve haven´t tested this extensively, but I´ll
explain my scenario, and this works great at that case :D

We got 2 arrays like these:

<?php
$aArray1['marcie'] = array('banana' => 1, 'orange' => 1, 'pasta' => 1);
$aArray1['kenji'] = array('apple' => 1, 'pie' => 1, 'pasta' => 1);

$aArray2['marcie'] = array('banana' => 1, 'orange' => 1);
?>

As array_diff, this function returns all the items that is in aArray1 and IS
NOT at aArray2, so the result we should expect is:

<?php
$aDiff['marcie'] = array('pasta' => 1);
$aDiff['kenji'] = array('apple' => 1, 'pie' => 1, 'pasta' => 1);
?>

Ok, now some comments about this function:
 - Different from the PHP array_diff, this function DON´T uses the ===
operator, but the ==, so 0 is equal to '0' or false, but this can be changed
with no impacts.
 - This function checks the keys of the arrays, array_diff only compares the
values.

I realy hopes that this could help some1 as I´ve been helped a lot with some
users experiences. (Just please double check if it would work for your case, as
I sad I just tested to a scenario like the one I exposed)

<?php
function arrayRecursiveDiff($aArray1, $aArray2) {
    $aReturn = array();
  
    foreach ($aArray1 as $mKey => $mValue) {
        if (array_key_exists($mKey, $aArray2)) {
            if (is_array($mValue)) {
                $aRecursiveDiff = arrayRecursiveDiff($mValue, $aArray2[$mKey]);
                if (count($aRecursiveDiff)) { $aReturn[$mKey] =
$aRecursiveDiff; }
            } else {
                if ($mValue != $aArray2[$mKey]) {
                    $aReturn[$mKey] = $mValue;
                }
            }
        } else {
            $aReturn[$mKey] = $mValue;
        }
    }
  
    return $aReturn;
}
?>
pyerre 12-Sep-2008 01:20
be careful kids, this function can be tricky
<?php
$tab1=array(0=>"a");
$tab2=array(0=>"a",1=>"b");

print_r(array_diff($tab1,$tab2));
?>
gives
Array
(
)
Tim Trefren 04-Apr-2008 04:05
Here's a little wrapper for array_diff - I found myself needing to iterate
through the edited array, and I didn't need to original keys for anything.

<?php
function arrayDiff($array1, $array2){
    # This wrapper for array_diff rekeys the array returned
    $valid_array = array_diff($array1,$array2);
   
    # reinstantiate $array1 variable
    $array1 = array();
   
    # loop through the validated array and move elements to $array1
    # this is necessary because the array_diff function returns arrays that
retain their original keys
    foreach ($valid_array as $valid){
        $array1[] = $valid;
        }
    return $array1;
    }
?>
merlinyoda at dorproject dot net 28-Mar-2008 06:11
As touched on in kitchin's comment of 19-Jun-2007 03:49 and nilsandre at gmx
dot de's comment of 17-Jul-2007 10:45, array_diff's behavior may be
counter-intuitive if you aren't thinking in terms of set theory.

array_diff() returns a *mathematical* difference (a.k.a. subtraction) of
elements in array A that are in array B and *not* what elements are different
between the arrays (i.e. those that elements that are in either A or B but
aren't in both A and B).

Drawing one of those Ven diagrams or Euler diagrams may help with
visualization...

As far as a function for returning what you may be expecting, here's one:

<?php
function array_xor ($array_a, $array_b) {
    $union_array = array_merge($array_a, $array_b);
    $intersect_array = array_intersect($array_a, $array_b);
    return array_diff($union_array, $intersect_array)
}
?>
radim at badsi dot info 05-Sep-2007 09:03
array_diff doesn't work with arrays of objects because it compares the
string-represantation of the arguments (which is always "Object" for an
object).

Here is an easy way to compute the difference of two arrays of objects :

<?php

...

function array_obj_diff ($array1, $array2) {
   
    foreach ($array1 as $key => $value) {
        $array1[$key] = serialize ($value);
    }

    foreach ($array2 as $key => $value) {
        $array2[$key] = serialize ($value);
    }
   
    $array_diff = array_diff ($array1, $array2);
   
    foreach ($array_diff as $key => $value) {
        $array_diff[$key] = unserialize ($value);
    }
   
    return $array_diff;
}

array_obj_diff ($ao1, $ao2);
?>
asdf at asdf dot com 15-Aug-2007 12:21
Even tough the description of this function's behavior has changed it
does not appear as tough the function's behavior has changed.  Below is some
test code and its output:

<?php

    $a = array('1','2','3','4','5');
    $b = array('1','a','b','c','d','e');
    $c = array('2','f','g','h','i','j');
   
    print_r(array_diff($a, $b, $c));

?>

Array
(
    [2] => 3
    [3] => 4
    [4] => 5
)
nilsandre at gmx dot de 17-Jul-2007 04:45
Again, the function's description is misleading right now. I sought a function,
which (mathematically) computes A - B, or, written differently, A \ B. Or,
again in other words, suppose

A := {a1, ..., an} and B:= {a1, b1, ... , bm}

=> array_diff(A,B) = {a2, ..., an}

array_diff(A,B) returns all elements from A, which are not elements of B (= A
without B).

You should include this in the documentation more precisely, I think.
mr dot kschan at gmail dot com 13-Jul-2007 04:16
just comment ... i don't know whether the following implementation of
array_diff is having a much better meaning to the function name.

function ary_diff( $ary_1, $ary_2 ) {
  // compare the value of 2 array
  // get differences that in ary_1 but not in ary_2
  // get difference that in ary_2 but not in ary_1
  // return the unique difference between value of 2 array
  $diff = array();

  // get differences that in ary_1 but not in ary_2
  foreach ( $ary_1 as $v1 ) {
    $flag = 0;
    foreach ( $ary_2 as $v2 ) {
      $flag |= ( $v1 == $v2 );
      if ( $flag ) break;
    }
    if ( !$flag ) array_push( $diff, $v1 );
  }

  // get difference that in ary_2 but not in ary_1
  foreach ( $ary_2 as $v2 ) {
    $flag = 0;
    foreach ( $ary_1 as $v1 ) {
      $flag |= ( $v1 == $v2 );
      if ( $flag ) break;
    }
    if ( !$flag && !in_array( $v2, $diff ) ) array_push( $diff, $v2 );
  }

  return $diff;
}

i think array_diff should return the difference between the array independent
of the order of passing the parameter.
kitchin 19-Jun-2007 09:49
Until recently, the description said:
"array_diff() returns an array containing all the values of array1 that are not
present in any of the other arguments. Note that keys are preserved."

Now it says:
"Compares array1 against array2 and returns the difference."

Now it's not clear what the optional arguments after the first two do.  Also,
the difference is not symmetric in its arguments (that is array_intersect).
gilthans at NOgmailSPAM dot com 13-Jun-2007 05:11
I needed a function to only remove the element the amount of times he appears
in the second array. In other words, if you have Array(1, 1, 2) and Array(1),
the return value should be Array(1, 2).
So I built this function right here:

<?php
function array_diff_once(){
    if(($args = func_num_args()) < 2)
        return false;
    $arr1 = func_get_arg(0);
    $arr2 = func_get_arg(1);
    if(!is_array($arr1) || !is_array($arr2))
        return false;
    foreach($arr2 as $remove){
        foreach($arr1 as $k=>$v){
            if((string)$v === (string)$remove){ //NOTE: if you need the diff to
be STRICT, remove both the '(string)'s
                unset($arr1[$k]);
                break; //That's pretty much the only difference from the real
array_diff :P
            }
        }
    }
    //Handle more than 2 arguments
    $c = $args;
    while($c > 2){
        $c--;
        $arr1 = array_diff_once($arr1, func_get_arg($args-$c+1));
    }
    return $arr1;
}
$arr1 = Array("blue", "four"=>4, "color"=>"red", "blue", "green", "green",
"name"=>"jon", "green");
$arr2 = Array("4", "red", "blue", "green");
print_r(array_diff_once($arr1, $arr2));
?>
This prints:
Array ( [1] => blue [3] => green [name] => jon [4] => green )

Note that it removes the elements left to right, opposite to what you might
expect; in my case the order of elements had no importance. Fixing that would
require a small variation.
tim at php dot user 05-Jun-2007 03:06
The description is wrong, array_diff() returns an array consisting of all
elements in $array1 that are not in $array2. The example shows this.

Thats how it works on my php anyway.
ahigerd at stratitec dot com 01-Feb-2007 10:30
An earlier comment suggested using array_merge() to reindex the array. While
this will work, array_values() is about 30-40% faster and accomplishes the same
task.
03-Aug-2006 07:30
array_diff provides a handy way of deleting array elements by their value,
without having to unset it by key, through a lengthy foreach loop and then
having to rekey the array.

<?php

//pass value you wish to delete and the array to delete from
function array_delete( $value, $array)
{
    $array = array_diff( $array, array($value) );
    return $array;
}
?>
Colin 25-Jul-2006 04:44
Undocumented return:  it appears this will return NULL if an error occurs
(e.g., an argument is not an array) and is not caught.

<?
@array_diff(NULL, array(1));
@array_diff(array(1), NULL);
@array_diff();
?>

All return NULL.  (Note the "@")
ben dot lancaster at design-ontap dot co dot uk 07-Jul-2006 11:57
One common caveat of this function is that if the arrays match, an empty array
is return, not a strict boolean. E.g.:

<?php
$array1 = $array2 = array('a','b','c');

var_dump(array_diff($array1,$array2));
/*
 *Returns:
 * array(0) {
 * }
 */
?>
pavlicic at NOSPAM dot hotmail dot com 09-Mar-2006 09:55
<?php

// first array
$vid_player = $vm->getVideosByPlayer($player);

// second array
$vid_playlist = $vm->getVideosByPlaylist($playlist);

// this will not work...
$vid_player = array_diff($vid_player, $vid_playlist);

// but if you do this first...
$videos = array();
foreach ( $vid_player as $player )
{
    if ( $vid_playlist != null )
    {
        foreach ( $vid_playlist as $video )
        {
            if ( $player->id == $video->id )
                $videos[] = $player;
        }
    }
}

// this will work...
$vid_player = array_diff($vid_player, $videos);

?>
The first array_diff() compares two arrays only to find out that all the
objects are unique!
Jappie 22-Jan-2006 06:40
Sorry for the bug in my last comment (probably rightfully removed by the
admins).
If you want to compare more than 2 arrays, or don't know how many arrays need
to be compared, this is your function:

<?php
# An extention to array_diff:
# It returns an array of all values not present in all arrays given. If
'$strict' is true,
# it returns all values not present or not in the same order in all arrays
given. The
# arrays to compare must be placed in another array, which is used as argument
'$arrays'.
# Returns false if the '$arrays' is invalid.
function array_rdiff ($arrays, $strict = false) {
    # check if argument is valid.
    if (!is_array ($arrays))
        return false;
    foreach ($arrays as $array)
        if (!is_array ($array))
            return false;

    # set working variables
    $diff    = array ();
    $amount  = count ($arrays);
    $needles = array_shift ($arrays);

    # compare
    for ($n = 0; $n < $amount; $n++) {
        for ($m = 0; $needles[$m]; $m++) {
            $found     = true;
            $positions = array ($m);
            foreach ($arrays as $haystack) {
                if (($pos = array_search ($needles[$m], $haystack)) === false)
                    $found = false;
                if ($strict)
                    $positions[] = $pos;
            }
            if (!$found)
                $diff[] = $needle;
            elseif ($strict && (count (array_unique ($positions)) > 1))
                $diff[] = $needle;
        }
        $arrays[] = $needles;
        $needles  = array_shift ($arrays);
    }
    return array_unique ($diff);
}
?>
Simon Riget at paragi.dk 22-Jan-2006 01:27
A simple multidimentional key aware array_diff function.
   
<?php   
function arr_diff($a1,$a2){
  foreach($a1 as $k=>$v){
    unset($dv);
    if(is_int($k)){
      // Compare values
      if(array_search($v,$a2)===false) $dv=$v;
      else if(is_array($v)) $dv=arr_diff($v,$a2[$k]);
      if($dv) $diff[]=$dv;
    }else{
      // Compare noninteger keys
      if(!$a2[$k]) $dv=$v;
      else if(is_array($v)) $dv=arr_diff($v,$a2[$k]);
      if($dv) $diff[$k]=$dv;
    }   
  }
  return $diff;
}
?>

This function meets my immidiate needs but I'm shure it can be improved.
doug at NOSPAM dot thrutch dot co dot uk 06-Jan-2006 12:22
After spending half an hour scratching my head wondering why this function
wasn't working I realised I had the arguments the wrong way round!

I needed to remove the contents of $array1 from $array2 so I tried:

<?php
$diff    = array_diff($members1, $members2);
?>

WRONG!! A quick swap around and things worked smoothly...

<?php
$diff    = array_diff($members2, $members1);
?>

Hope this saves someone a bit of bother
air at multi dot fi 04-Jan-2006 11:41
A small thing that caused me trouble today, wich I don't see listed on this
page is that array_diff keeps the placing for the uniqe values, and removes the
duplicated. This gives us empty fields in the array, wich caused me a lot of
trouble. The solutions was simply to use array_merge() around the array_diff.

For example:
$array1 = array('blue', 'red', 'green');
$array2 = array('red');

array_diff($array1, $array2);

Will give us:
------
Array
(
   [0] => red
   [1] =>
   [2] => green
)

But if we use:

array_merge(array_diff($array1, $array2));

We will get:
------
Array
(
   [0] => red
   [1] => green
)
Viking Coder 03-Jan-2006 05:07
To anybody wanting a double-sided array_diff - mentioned by rudigier at noxx
dot at. Remember, array_diff gives you everything in the first array that isn't
in the subsequent arrays.

$array1=array('blue','red','green');
$array2=array('blue','yellow','green');

array_merge(array_diff($array1, $array2),array_diff($array2, $array1));

Result
------
Array
(
    [0] => red
    [1] => yellow
)
white_phoenix at ru dot ru 15-Dec-2005 07:37
To: effectpenguin at antarctida dot ru
Re: interesting effect
<?php
function arraycpy(&$target,&$array)
{
 if (!is_array($target)) {$target = array();}
 foreach($array as $k=>$v) {if ($k != "GLOBALS") {$target[$k] = $v;}}
}
arraycpy($old,$GLOBALS);
// some actions with variables:
$homer = "beer";
arraycpy($new,$GLOBALS);
$diff = array_diff($new,$old);
var_dump($diff);
?>
array(1) {
  ["homer"]=>
  string(4) "beer"
}
Windows NT WPX_NB 5.1 build 2600 PHP/5.0.4
penguin at antarctida dot ru 06-Oct-2005 12:41
Interesting effect...
I just wanted to see, what variables are created and not unset after some
actions.
So I write:

<?php
$a_var_GlobalsBefore = $GLOBALS;
?>
...some actions with variables
<?php
$a_var_GlobalsAfter = $GLOBALS;
$a_var_VariablesNotUnset = array_diff ($a_var_GlobalsAfter,
$a_var_GlobalsBefore);
?>

...and _ALL_ variables puff up in smoke.

Have no idea what causes this behavior, but found a nice workaround:

<?php
$a_var_GlobalsBefore = array_keys ($GLOBALS);
?>
...some actions with variables
<?php
$a_var_GlobalsAfter = array_keys ($GLOBALS);
$a_var_VariablesNotUnset = array_diff ($a_var_GlobalsAfter,
$a_var_GlobalsBefore);
?>

...and the unset variables are here.
rafmav 19-Apr-2005 11:24
Here is a few functions to do a fast diff between two arrays in a few lines.
You can use it with other functions described in the function array_merge :
array_merge_replace from an other user, and two functions using it :
array_merge_diff and array_merge_diff_reverse.
Note that the keys are preserved!
<?
// returns a two dimensions array with the deleted data
// and the added data
function array_diff_both($new,$old)
{
    $del=array_diff_assoc($old,$new);
    $add=array_diff_assoc($new,$old);
    return $diff=array("del"=>$del, "add"=>$add);
}

// returns a two dimensions array with the equal data,
// deleted data and the added data
function array_diff_all($arr_new,$arr_old)
{
    $arr_equ=array_intersect_assoc($arr_new,$arr_old);
    $arr_del=array_diff_assoc($arr_old,$arr_new);
    $arr_add=array_diff_assoc($arr_new,$arr_old);
    return $diff=array("equ"=>$arr_equ, "del"=>$arr_del, "add"=>$arr_add);
}
?>
rudigier at noxx dot at 09-Feb-2005 06:53
if you don't like the php diff (like me) then take look at my diff functions

if you have two arrays, lets say:

a1 = { blue, red, green }
a2 = { blue, yellow, green }

array_diff just gives me nothing, although there is a difference. instead of an
empty array, i needed an array which should contain "red" and "yellow" in this
case.

single_diff satisfies my wish.

function single_diff(&$a1,&$a2)
{
  $r = array(); // return
 
  foreach ($a1 as $pl) // payload
  {
    if (! in_array($pl, $a2, true) )
      $r[] = $pl;
  }
 
  foreach ($a2 as $pl) // payload
  {
    if (! in_array($pl, $a1, true) && ! in_array($pl, $r, true) )
      $r[] = $pl;
  }
  return $r;
}

--------------------
this one just keeps the keys of the arrays in mind by comparing the values
directly. just in case if there are values, which might occur multiple in one
of these arrays.

function single_diff_assoc(&$a1,&$a2)
{
  $r = array(); // return
 
  foreach ($a1 as $k => $pl) // payload
  {
    if (! isset($a2[$k]) || $a2[$k] != $pl)
      $r[$k] = $pl;
  }
 
  foreach ($a2 as $k => $pl) // payload
  {
    if ( (! isset($a1[$k]) || $a1[$k] != $pl ) && ! isset($r[$k]) )
      $r[$k] = $pl;
  }
  return $r;
}

recursion support might be useful, but feel free to modify this functions to
your own purposes.
j dot j dot d dot mol at ewi dot tudelft dot nl 31-Dec-2004 08:34
Here is some code to take the difference of two arrays. It allows custom
modifications like prefixing with a certain string (as shown) or custom compare
functions.

<?php
 // returns all elements in $all which are not in $used in O(n log n) time.
  // elements from $all are prefixed with $prefix_all.
  // elements from $used are prefixed with $prefix_used.
  function filter_unused( $all, $used, $prefix_all = "", $prefix_used = "" ) {
      $unused = array();

      // prefixes are not needed for sorting
      sort( $all );
      sort( $used );

      $a = 0;
      $u = 0;

      $maxa = sizeof($all)-1;
      $maxu = sizeof($used)-1;

      while( true ) {
          if( $a > $maxa ) {
              // done; rest of $used isn't in $all
              break;
          }
          if( $u > $maxu ) {
              // rest of $all is unused
              for( ; $a <= $maxa; $a++ ) {
                  $unused[] = $all[$a];
              }
              break;
          }

          if( $prefix_all.$all[$a] > $prefix_used.$used[$u] ) {
              // $used[$u] isn't in $all?
              $u++;
              continue;
          }

          if( $prefix_all.$all[$a] == $prefix_used.$used[$u] ) {
              // $all[$a] is used
              $a++;
              $u++;
              continue;
          }

          $unused[] = $all[$a];

          $a++;
      }

      return $unused;
  }
?>
sire at coolquotescollection dot com 26-Nov-2003 01:52
Continuing from r.kirschke's excellent diff function (above), here's a function
that will turn the result into nicely formatted HTML:

<?php
echo "<html><body bgcolor=white>";

$oldString = "Once there was a boy named Bart and a girl named Lisa.";
$newString = "Once upon a time there was a girl named Lisa.";

echo "Old String: " . $oldString . "<br>";
echo "New String: " . $newString . "<br>";
echo "Difference: " . diff_to_html($oldString, $newString);
// Returns a nicely formatted html string
function diff_to_html($oldString, $newString)
{
  $a1 = explode(" ", $oldString);
  $a2 = explode(" ", $newString);
  $result = arr_diff($a1, $a2);

  foreach ($result[0] as $num => $foo)
  {
    $source = $result[1][$num];
    $element = $result[0][$num];

    switch ($source)
    {
      case "1":
        $pre = "<font color=red><s>";
        $post = "</s></font>";
        break;
      case "2":
        $pre = "<font color=green>";
        $post = "</font>";
        break;
      case "b":
        $pre = "";
        $post = "";
        break;
    }
    // VERTICAL OUTPUT:
    // $return .= $num . $pre . " " . $source .
    // " " . $element . $post . "<br>";
    // READABLE OUTPUT:
    $return .= $pre . $element . $post . " ";
  }
  return $return;
}

?>
19-Nov-2003 12:54
From the page:
Note:  Please note that this function only checks one dimension of a
n-dimensional array. Of course you can check deeper dimensions by using
array_diff($array1[0], $array2[0]);

I've found a way to bypass that. I had 2 arrays made of arrays.
I wanted to extract from the first array all the arrays not found in the second
array. So I used the serialize() function:

<?php
function my_serialize(&$arr,$pos){
  $arr = serialize($arr);
}

function my_unserialize(&$arr,$pos){
  $arr = unserialize($arr);
}

 //make a copy
$first_array_s = $first_array;
$second_array_s = $second_array;

// serialize all sub-arrays
array_walk($first_array_s,'my_serialize');
array_walk($second_array_s,'my_serialize');

// array_diff the serialized versions
$diff = array_diff($first_array_s,$second_array_s);

// unserialize the result
array_walk($diff,'my_unserialize');

// you've got it!
print_r($diff);
?>
d dot u dot phpnet at holomind dot de 26-Mar-2003 07:48
I was not satisfied with the compare-funtions of array_diff() so i wrote a
litte diff-clone which compares arrays and shows all different entries. You can
easliy change the function formatline() for your needs.

function arr_diff( $a1, $a2, $show_matches=0);
...
output:
1 : 1 : - <head><title>Text</title></head>
1 : 1 : + <head><title>Text2</title></head>
4 : 4 : - code b
4 : 4 : + code a
8 : 8 : - code f

See details on:  (example and source)

http://www.holomind.de/phpnet/diff.php
http://www.holomind.de/phpnet/diff.src.php
r dot kirschke at gmx dot net 24-Mar-2003 09:26
Are you looking for a function which returns an edit script (a set of insert
and delete instructions on how to change one array into another)? At least,
that's what I hoped to find here, so here's some code based on http://
www.cs.arizona.edu/people/gene/PAPERS/diff.ps :

<?php
function diff_rek(&$a1,&$a2,$D,$k,&$vbck)
{
 $x=$vbck[$D][$k]; $y=$x-$k;
 if ($D==0)
 {
  if ($x==0) return array(array(),array());
  else
  return array(array_slice($a1,0,$x),array_fill(0,$x,"b"));
 }
 $x2=$vbck[$D-1][$k+1];
 $y2=$vbck[$D-1][$k-1]-($k-1);
 $xdif=$x-$x2; $ydif=$y-$y2;
 $l=min($x-$x2,$y-$y2);
 $x=$x-$l;
 $y=$y-$l;
 if ($x==$x2)
 {
   $res=diff_rek($a1,$a2,$D-1,$k+1,$vbck);
   array_push($res[0],$a2[$y-1]);
   array_push($res[1],"2");
   if ($l>0)
   {
    $res[0]=array_merge($res[0],array_slice($a2,$y,$l));
    $res[1]=array_merge($res[1],array_fill(0,$l,"b"));
   }
 }
 else
 {
   $res=diff_rek($a1,$a2,$D-1,$k-1,$vbck);
   array_push($res[0],$a1[$x-1]);
   array_push($res[1],"1");
   if ($l>0)
   {
    $res[0]=array_merge($res[0],array_slice($a1,$x,$l));
    $res[1]=array_merge($res[1],array_fill(0,$l,"b"));
   }
 }
 return $res;
}

function arr_diff(&$a1,&$a2)
{
 $max=70;
 $c1=count($a1);
 $c2=count($a2);
 $v[1]=0;
 for ($D=0; $D<=$max; $D++)
 {
   for ($k=-$D; $k<=$D; $k=$k+2)
  {
   if (($k==-$D) || ($k!=$D && $v[$k-1]<$v[$k+1]))
    $x=$v[$k+1];
   else
    $x=$v[$k-1]+1;
   $y=$x-$k;
   while (($x<$c1)&&($y<$c2)&&($a1[$x]==$a2[$y]))
    {
     $x++;
     $y++;
    }
    $v[$k]=$x;
    if (($x>=$c1)&&($y>=$c2))
   {
    $vbck[$D]=$v;
    return diff_rek($a1,$a2,$D,$c1-$c2,$vbck);
   };
  }
  $vbck[$D]=$v;
 };
 return -1;
}
?>

This works on arrays of all elements for which the operator "==" is defined.
arr_dif($a1,$a2) returns an array of two arrays:
$result[0] = array of elements from $a1 and $a2
$result[1] = array of chars - one for each element from $result[0]:
 "1" : The corresponding element is from $a1
 "2" : The corresponding element is from $a2
 "b" : The correspondig element is from both source arrays
The function returns -1, when the number of different elements is greater than
$max

Example:
$a1=array("hello","world");
$a2=array("good","bye","world");
=> arr_diff($a1,$a2) = array(array("hello","good","bye","world"), array
("1","2","2","b"));
csaba2000 at yahoo dot com 25-Feb-2003 09:58
<?php
function array_key_diff($ar1, $ar2) {  // , $ar3, $ar4, ...
    // returns copy of array $ar1 with those entries removed
    // whose keys appear as keys in any of the other function args
    $aSubtrahends = array_slice(func_get_args(),1);
    foreach ($ar1 as $key => $val)
        foreach ($aSubtrahends as $aSubtrahend)
            if (array_key_exists($key, $aSubtrahend))
                unset ($ar1[$key]);
    return $ar1;
}

$a = array("c" => "catty", "b" => "batty", "a" => "aunty", 5 => 4, 2.9 => 7,
11, "n" => "nutty");
$b = array(9, "d" => "ditty", "b" => "bratty", "a" => null, 10, 13);
$c = array_key_diff ($a, $b, array(5 => 6));
?>

$c is then equivalent to array('c' => 'catty', 6 => 11, 'n' => 'nutty')

Csaba Gabor from New York
ds2u at the hotmail dot com 24-Feb-2003 12:22
Yes you can get rid of gaps/missing keys by using:

<?php
$result = array_values(array_diff($array1,$array2));
?>

But to drop the storage of void spaces (actually a line feed) which are
irritatingly indexed when reading from files - just use difference:

<?php
$array = array ();
$array[0] = "\n";
$result = array_diff($result,$array);
?>

dst
jg at sto dot com dot au 02-Nov-2002 09:54
I have found an interesting use for array_diff. I remember seing somebody
having trouble deleting from an array because it left "holes".

I thought about using array_diff to fix the problem. Try running this code and
see what it does:

<?php

for($i=0;$i<4;$i++)
{
print("Deleting item $i from the array<BR>");

$my_array = array("value1","value2","value3","value4");

$my_array = array_diff($my_array,array_slice($my_array,$i,1));

foreach($my_array as $value)print("    -->$value<BR>\n");
}
?>

It seems to work for every member of the array. I'm not sure how efficient it
would be on really large arrays, though.

JG Estiot
drNOSPAMtdiggersSPAMNO at hotmail dot com 06-Aug-2002 08:10
array_diff does not have buggy behavior as described above.  The problem stems
from calling array_diff() each time in the loop, therefore regererating a new
array with an index always at the beginning EVERY time, so each will always
pick the first entry.  This is not buggy, but in fact what you've told the
program to do :)  The solution is not as much a solution, but properly
instructing the program what to do!

Cheers!
TheoDiggers
arjanz at intermax dot nl 09-Apr-2002 06:53
In PHP 4.0.6 the array_minus_array() as shown above didn't work properly,
especially when you use duplicated values:

When I wanted to substract
      'Array(1,1,2,3)'
with
      'Array (1,2,4)'

I wanted as result:

'Array(1,3)'

And not just 'Array (3)' as it would give using array_diff(), or nothing as
result using the above array_minus_array function.

This worked for me:

<?php
function array_minus_array($a,$b)  {
    $c = Array();
    foreach ($a as $key => $val) {          
           $posb = array_search($val,$b);
           if (is_integer($posb)) {
               unset($b[$posb]);              
           } else {
               $c[] = $val;
           }
    }
    return $c;
}
?>
alex at bacan dot cl_remove_this_for_email 08-Feb-2002 08:03
For those who are looking how to substract one array for another:
you cannot use the "-" operator !!!

But you can use this function:
<?php
function array_minus_array($a, $b) {
        $c=array_diff($a,$b);
        $c=array_intersect($c, $a);
        return $c;
}
?>

So, for example:
<?php
$a[]="a";
$a[]="b";
$a[]="c";
$b[]="a";
$c=array_minus_array($a,$b);
var_dump($c);
?>

Prints out:
array(2) {
  [1]=>
  string(1) "b"
  [2]=>
  string(1) "c"
}
which is $a-$b, as we wanted.

PD: you may also do a foreach ... if $a in_array $b ... but this is much more
elegant !!!
Credits to A.Atala "mandrake", who knows everything about mathematic.
SeanECoates at !donotspam!yahoo dot ca 16-Oct-2001 05:43
I just came upon a really good use for array_diff(). When reading a dir
(opendir;readdir), I _rarely_ want "." or ".." to be in the array of files I'm
creating. Here's a simple way to remove them:

<?php
 $someFiles = array();
 $dp = opendir("/some/dir");
 while($someFiles[] = readdir($dp));
 closedir($dp);
 
 $removeDirs = array(".","..");
 $someFiles = array_diff($someFiles, $removeDirs);
 
 foreach($someFiles AS $thisFile) echo $thisFile."\n";
?>

S
caugustin at alcyonis dot nospam dot fr 26-Jul-2001 10:57
In version 4.0.1 to 4.0.4, array_diff() works on array of array, but not
anymore in version 4.0.5 and 4.0.6.<br>
According to php team :
When I wrote array_diff I didn't think of this use. It
worked by accident. array_diff was changed to avoid
some ordering problems. The way it was there was no well
defined ordering. Due to automatic type conversion, you
you would have 3d < 99 <  370 < 3d. This made
array_diff fail, this was fixed by always using string
comparisons. That doesn't work for arrays though.
david at audiogalaxy dot com 08-Apr-2001 11:12
Note that array_diff() considers the type of the array elements when it
compares them.

If array_diff() doesn't appear to be working, check your inputs using var_dump
() to make sure you're not trying to diff an array of integers with an array of
strings.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Mar 18 20:11:43 2011 UTC
bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )

キーとデータの関係を維持しつつ、配列をキーでソートします。この関数は、主として
連想配列において有用です。

パラメータ

array

    入力の配列。

sort_flags

    オプションのパラメータ sort_flags によりソートの動作を修正可能です。詳細に
    ついては、 sort() を参照ください。

返り値

成功した場合に TRUE を、失敗した場合に FALSE を返します。

例

例1 ksort() の例

<?php
$fruits = array("d"=>"lemon", "a"=>"orange", "b"=>"banana", "c"=>"apple");
ksort($fruits);
foreach ($fruits as $key => $val) {
    echo "$key = $val\n";
}
?>

上の例の出力は以下となります。

a = orange
b = banana
c = apple
d = lemon

参考

  • asort() - 連想キーと要素との関係を維持しつつ配列をソートする
  • 配列ソート関数の比較



list> <krsort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes ksort
DavidG 17-Jun-2010 01:47
A nice way to do sorting of a key on a multi-dimensional array without having
to know what keys you have in the array first:

<?php
$people = array(
array("name"=>"Bob","age"=>8,"colour"=>"red"),
array("name"=>"Greg","age"=>12,"colour"=>"blue"),
array("name"=>"Andy","age"=>5,"colour"=>"purple"));

var_dump($people);

$sortArray = array();

foreach($people as $person){
    foreach($person as $key=>$value){
        if(!isset($sortArray[$key])){
            $sortArray[$key] = array();
        }
        $sortArray[$key][] = $value;
    }
}

$orderby = "name"; //change this to whatever key you want from the array

array_multisort($sortArray[$orderby],SORT_DESC,$people);

var_dump($people);
?>

Output from first var_dump:

[0]=&gt;
  array(3) {
    ["name"]=&gt;
    string(3) "Bob"
    ["age"]=&gt;
    int(8)
    ["colour"]=&gt;
    string(3) "red"
  }
  [1]=&gt;
  array(3) {
    ["name"]=&gt;

    string(4) "Greg"
    ["age"]=&gt;
    int(12)
    ["colour"]=&gt;
    string(4) "blue"
  }
  [2]=&gt;
  array(3) {
    ["name"]=&gt;
    string(4) "Andy"
    ["age"]=&gt;
    int(5)
    ["colour"]=&gt;

    string(6) "purple"
  }
}

Output from 2nd var_dump:

array(3) {
  [0]=&gt;
  array(3) {
    ["name"]=&gt;
    string(4) "Greg"
    ["age"]=&gt;
    int(12)
    ["colour"]=&gt;
    string(4) "blue"
  }
  [1]=&gt;
  array(3) {
    ["name"]=&gt;

    string(3) "Bob"
    ["age"]=&gt;
    int(8)
    ["colour"]=&gt;
    string(3) "red"
  }
  [2]=&gt;
  array(3) {
    ["name"]=&gt;
    string(4) "Andy"
    ["age"]=&gt;
    int(5)
    ["colour"]=&gt;

    string(6) "purple"
  }

There's no checking on whether your array keys exist, or the array data you are
searching on is actually there, but easy enough to add.
serpro at gmail dot com 13-Mar-2009 10:02
Here is a function to sort an array by the key of his sub-array.

<?php

function sksort(&$array, $subkey="id", $sort_ascending=false) {

    if (count($array))
        $temp_array[key($array)] = array_shift($array);

    foreach($array as $key => $val){
        $offset = 0;
        $found = false;
        foreach($temp_array as $tmp_key => $tmp_val)
        {
            if(!$found and strtolower($val[$subkey]) > strtolower($tmp_val
[$subkey]))
            {
                $temp_array = array_merge(    (array)array_slice
($temp_array,0,$offset),
                                            array($key => $val),
                                            array_slice($temp_array,$offset)
                                          );
                $found = true;
            }
            $offset++;
        }
        if(!$found) $temp_array = array_merge($temp_array, array($key =>
$val));
    }

    if ($sort_ascending) $array = array_reverse($temp_array);

    else $array = $temp_array;
}

?>

Example
<?php
$info = array("peter" => array("age" => 21,
                                           "gender" => "male"
                                           ),
                   "john"  => array("age" => 19,
                                           "gender" => "male"
                                           ),
                   "mary" => array("age" => 20,
                                           "gender" => "female"
                                          )
                  );

sksort($info, "age");
var_dump($info);

sksort($info, "age", true);
var_dump($ifno);
?>

This will be the output of the example:

/*DESCENDING SORT*/
array(3) {
  ["peter"]=>
  array(2) {
    ["age"]=>
    int(21)
    ["gender"]=>
    string(4) "male"
  }
  ["mary"]=>
  array(2) {
    ["age"]=>
    int(20)
    ["gender"]=>
    string(6) "female"
  }
  ["john"]=>
  array(2) {
    ["age"]=>
    int(19)
    ["gender"]=>
    string(4) "male"
  }
}

/*ASCENDING SORT*/
array(3) {
  ["john"]=>
  array(2) {
    ["age"]=>
    int(19)
    ["gender"]=>
    string(4) "male"
  }
  ["mary"]=>
  array(2) {
    ["age"]=>
    int(20)
    ["gender"]=>
    string(6) "female"
  }
  ["peter"]=>
  array(2) {
    ["age"]=>
    int(21)
    ["gender"]=>
    string(4) "male"
  }
}
maik dot riechert at animey dot net 12-Aug-2008 06:32
Be careful when using ksort for mixed type keys!!

$a = array(
    'first' => true,
    0       => 'sally',
);

$b = array(
    0       => 'sally',
    'first' => true,
);

ksort($a);
ksort($b);
var_dump($a);
var_dump($b);

Output is:
array(
    0 => 'sally',
    'first' => true,
)

array(
    'first' => true,
    0 => 'sally',
)

If you want same results for both arrays, use:

ksort($a, SORT_STRING);

The reason for that lays in the compare mechanism which would normally just
typecast 'first' to an integer or 0 to a string when comparing it to each
other. So you have to use SORT_STRING, otherwise you would lose information
when 'first' is converted to int.
06-Nov-2006 01:26
Why not just use built-in PHP functions? You can do an in-place natural sort by
keys with:

uksort($array, 'strnatcasecmp');
richard dot quadling at bandvulc dot co dot uk 24-Oct-2005 08:10
Just to complete the comments made by ssb45.

If the supplied array is an empty array, the value returned is NOT an array.

All that is required is to pre-initialize the result.

function natksort(&$aToBeSorted)
    {
    $aResult = array();
    $aKeys = array_keys($aToBeSorted);
    natcasesort($aKeys);
    foreach ($aKeys as $sKey)
        {
        $aResult[$sKey] = $aToBeSorted[$sKey];
        }
    $aToBeSorted = $aResult;
    return True;
    }
ssb45 at cornell dot edu 30-Jun-2005 11:58
The function that justin at booleangate dot org provides works well, but be
aware that it is not a drop-in replacement for ksort as is.  While ksort sorts
the array by reference and returns a status boolean, natksort returns the
sorted array, leaving the original untouched.  Thus, you must use this syntax:

$array = natksort($array);

If you want to use the more natural syntax:

$status = natksort($array);

Then use this modified version:

function natksort(&$array) {
    $keys = array_keys($array);
    natcasesort($keys);

    foreach ($keys as $k) {
        $new_array[$k] = $array[$k];
    }

    $array = $new_array;
    return true;
}
justin at booleangate dot org 18-Jan-2005 09:04
Here's a handy function for natural order sorting on keys.

function natksort($array) {
  // Like ksort but uses natural sort instead
  $keys = array_keys($array);
  natsort($keys);

  foreach ($keys as $k)
    $new_array[$k] = $array[$k];

  return $new_array;
}
yaroukh at email dot cz 06-May-2004 03:08
I believe documentation should mention which of array-functions do reset the
internal pointer; this one does so ...
pedromartinez at alquimiapaginas dot com 29-Nov-2003 03:58
A list of directories can be listed sorted by date (newer first) with this
script. This is usefull if the directories contain (for example) pictures and
you want the newer to appear first.

$maindir = "." ;
$mydir = opendir($maindir) ;

// SORT
$directorios = array();
while (false !== ($fn = readdir($mydir)))
{
    if (is_dir($fn) && $fn != "." && $fn != "..")
    {
        $directory = getcwd()."/$fn";
        $key = date("Y\-m\-d\-His ", filectime($directory));
        $directorios[$key] = $directory;
    }
}

ksort($directorios);
$cronosdir = array();
$cronosdir = array_reverse($directorios);

while (list($key, $directory) = each($cronosdir)) {
    echo "$key = $directory<bR>";
}

Pedro
09-Mar-2002 03:09
here 2 functions to ksort/uksort an array and all its member arrays

function tksort(&$array)
  {
  ksort($array);
  foreach(array_keys($array) as $k)
    {
    if(gettype($array[$k])=="array")
      {
      tksort($array[$k]);
      }
    }
  }

function utksort(&$array, $function)
  {
  uksort($array, $function);
  foreach(array_keys($array) as $k)
    {
    if(gettype($array[$k])=="array")
      {
      utksort($array[$k], $function);
      }
    }
  }
delvach at mail dot com 06-Nov-2001 09:29
A real quick way to do a case-insensitive sort of an array keyed by strings:

uksort($myArray, "strnatcasecmp");
sbarnum at mac dot com 19-Oct-2001 10:54
ksort on an array with negative integers as keys yields some odd results.  Not
sure if this is a bad idea (negative key values) or what.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Mar 18 19:11:43 2011 UTC

返り値

配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes in_array
Sascha Luedi 28-Feb-2011 05:33
strange behaviour of in_array:

If you have an array like:
<?php
$a = array(0,1,2,3,4,5);
in_array("bla", $a) returns true
in_array("bla6", $a) returns true
in_array("6bla", $a) returns false
?>

If you have an array like (without 0):
<?php
$a = array(1,2,3,4,5);
in_array("bla", $a) returns false
in_array("6bla", $a) returns false
in_array("5bla", $a) returns true
?>

so better use strict arg!
Joris Meijer 15-Feb-2011 01:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 04:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 08:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 09:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 06:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
cousinka at gmail dot com 09-Aug-2010 12:44
Here is a function which returns TRUE if a value exists in a multi array or in
a multi object

<?php
function in_multiarray($elem, $array)
    {
        // if the $array is an array or is an object
         if( is_array( $array ) || is_object( $array ) )
         {
             // if $elem is in $array object
             if( is_object( $array ) )
             {
                 $temp_array = get_object_vars( $array );
                 if( in_array( $elem, $temp_array ) )
                     return TRUE;
             }
            
             // if $elem is in $array return true
             if( is_array( $array ) && in_array( $elem, $array ) )
                 return TRUE;
                
            
             // if $elem isn't in $array, then check foreach element
             foreach( $array as $array_element )
             {
                 // if $array_element is an array or is an object call the
in_multiarray function to this element
                 // if in_multiarray returns TRUE, than return is in array,
else check next element
                 if( ( is_array( $array_element ) || is_object( $array_element
) ) && $this->in_multiarray( $elem, $array_element ) )
                 {
                     return TRUE;
                     exit;
                 }
             }
         }
        
         // if isn't in array return FALSE
         return FALSE;
    }
?>
Willian Gustavo Veiga 16-Jun-2010 02:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 06:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 03:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 14-Feb-2010 12:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 10:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 11:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 07:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 11:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 07:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 11:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 05:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 07:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 10:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 01:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 12:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 09:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 03:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 09:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 30-Oct-2008 05:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 09:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 07:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 03:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 09:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 11:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 07:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 10:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 05:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 21-May-2007 03:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 06:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 12:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 09-Apr-2006 03:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 03:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 02:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
14-Jan-2006 05:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 09:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 02:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 12:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 08-Jan-2003 01:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 02:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 10-Aug-2002 02:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 10:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 03:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Thu Mar 17 06:11:45 2011 UTC
文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes substr
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 16 20:11:41 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

natcasesort> <ksort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
list

(PHP 4, PHP 5)

list — 配列と同様の形式で、複数の変数への代入を行う

説明

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
strstr

(PHP 4, PHP 5)

strstr — 文字列が最初に現れる位置を見つける

説明

string strstr ( string $haystack , mixed $needle [, bool $before_needle = false
] )
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
strpos

(PHP 4, PHP 5)

strpos — 文字列が最初に現れる場所を見つける

説明

int strpos ( string $haystack , mixed $needle [, int $offset = 0 ] )

文字列 haystack の中で、 needle が最初に現れた位置を数字で返します。 PHP 5 以前
の strrpos() とは異なり、この関数は needle パラメータとして文字列全体をとり、そ
の文字列全体が検索対象となります。

パラメータ

haystack

    検索を行う文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

offset

    オプションのパラメータ offset により、検索を開始する haystack の文字を指定
    することができます。この場合でも、返される位置は haystack の先頭からの相対
    位置となります。

返り値

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 変数操作
  • 変数操作関数
  • debug_ zval_ dump
  • doubleval
  • empty
  • floatval
  • get_ defined_ vars
  • get_ resource_ type
  • gettype
  • import_ request_ variables
  • intval
  • is_ array
  • is_ bool
  • is_ callable
  • is_ double
  • is_ float
  • is_ int
  • is_ integer
  • is_ long
  • is_ null
  • is_ numeric
  • is_ object
  • is_ real
  • is_ resource
  • is_ scalar
  • is_ string
  • isset
  • print_ r
  • serialize
  • settype
  • strval
  • unserialize
  • unset
  • var_ dump
  • var_ export

var_dump> <unserialize
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
unset

(PHP 4, PHP 5)

unset — 指定した変数の割当を解除する

説明

void unset ( mixed $var [, mixed $var [, mixed $... ]] )

unset() は指定した変数を破棄します。

関数 unset() の内部動作は、破棄しようとする変数の型に依存します。

あるグローバル変数が関数の中で unset() された場合、ローカル変数のみが破棄されま
す。呼出側の環境にある変数は、 unset() がコールされる前と同じ値を保持します。
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>

上の例の出力は以下となります。

bar

グローバル変数を関数の内部で unset() するには、 $GLOBALS 配列を使います。
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>

参照渡しされた変数が関数内で unset() された場合に、ローカル変数のみが破棄されま
す。呼出側の環境でその変数は、 unset() がコールされる前と同じ値を保持します。
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>

上の例の出力は以下となります。

something
something

静的変数が関数の内部で unset() された場合、 unset() は、その関数の残りのコンテ
キスト内においてのみ変数を破棄します。関数を再度コールすると、破棄する前の値が
復元されます。
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Before unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "after unset: $bar\n";
}

foo();
foo();
foo();
?>

上の例の出力は以下となります。

Before unset: 1, after unset: 23
Before unset: 2, after unset: 23
Before unset: 3, after unset: 23

パラメータ

var

    破棄する変数。

var

    別の変数。

...

返り値

値を返しません。

変更履歴

バージョン                     説明
4.0.1      複数の引数がサポートされるようになりました。

例

例1 unset() の例

<?php
// 変数を一つ破棄する
unset($foo);

// 配列の要素の一つを破棄する
unset($bar['quux']);

// 複数の変数を破棄する
unset($foo1, $foo2, $foo3);
?>

例2 (unset) によるキャスト

<?php
$name = 'Felipe';

var_dump((unset) $name);
?>

注意

    注意: これは、関数ではなく言語構造のため、可変関数を用いてコールすることは
    できません。

    注意:

    現在のコンテキストで見えるものであれば、オブジェクトのプロパティでさえも破
    棄することが可能です。

    注意:

    PHP 5 以降では、オブジェクトのメソッド内で $this を破棄することはできません
    。

    注意:

    オブジェクトのアクセス不能なプロパティに対して unset() を使用した場合は、も
    しオーバーロードメソッド __unset が宣言されていればそれをコールします。

参考

  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • empty() - 変数が空であるかどうかを検査する
  • __unset
  • array_splice() - 配列の一部を削除し、他の要素で置換する



var_dump> <unserialize
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes unset
edouard dot berge at gmail dot com 24-Sep-2010 04:09
Warning!

When unset from an array, if you unset all elements, the array is always set

$tab=array('A'=>1,'B'=>2);
unset($tab['A']);
unset($tab['B']);
echo isset($tab)." ".count($tab);

output: 1 0
Andreas 24-Sep-2010 12:51
You can not unset a numeric key of an array, if key is a string. See this
example:

// Create a simple array with 3 different key types
$test[1] = array(
    10 => array('apples'),
    "20" => array('bananas'),
    '30' => array('peaches')
);
$test[2] = (array) json_decode(json_encode($test[1]));
$test[3] = (array) (object) $test[1];
// array form a stdClass object
$testClass = new stdClass();
$testClass->{10} =  array('apples');
$testClass->{"20"} =  array('bananas');
$test[4] = (array) $testClass[6];

echo "<pre>";
foreach($test as $testNum => $arr) {

    echo "\nTest: " . $testNum  . " \n";
    var_dump($arr);

    foreach($arr as $key => $fruit) {
        echo "key: " . $key . "\n";
        echo "key exists: ";
        var_dump(array_key_exists(strval($key), $arr));
        echo "typeof key is: " . gettype($key) . "\n";

        unset($arr[$key]);
    }
    var_dump($arr);
    echo "\n" . str_repeat("-", 80);
}
echo "</pre>";

And here is the output:

Test: 1
array(3) {
  [10]=>
  array(1) {
    [0]=>
    string(6) "apples"
  }
  [20]=>
  array(1) {
    [0]=>
    string(7) "bananas"
  }
  [30]=>
  array(1) {
    [0]=>
    string(7) "peaches"
  }
}
key: 10
key exists: bool(true)
typeof key is: integer
key: 20
key exists: bool(true)
typeof key is: integer
key: 30
key exists: bool(true)
typeof key is: integer
array(0) {
}

--------------------------------------------------------------
Test: 2
array(3) {
  ["10"]=>
  array(1) {
    [0]=>
    string(6) "apples"
  }
  ["20"]=>
  array(1) {
    [0]=>
    string(7) "bananas"
  }
  ["30"]=>
  array(1) {
    [0]=>
    string(7) "peaches"
  }
}
key: 10
key exists: bool(false)
typeof key is: string
key: 20
key exists: bool(false)
typeof key is: string
key: 30
key exists: bool(false)
typeof key is: string
array(3) {
  ["10"]=>
  array(1) {
    [0]=>
    string(6) "apples"
  }
  ["20"]=>
  array(1) {
    [0]=>
    string(7) "bananas"
  }
  ["30"]=>
  array(1) {
    [0]=>
    string(7) "peaches"
  }
}

--------------------------------------------------------------
Test: 3
array(3) {
  [10]=>
  array(1) {
    [0]=>
    string(6) "apples"
  }
  [20]=>
  array(1) {
    [0]=>
    string(7) "bananas"
  }
  [30]=>
  array(1) {
    [0]=>
    string(7) "peaches"
  }
}
key: 10
key exists: bool(true)
typeof key is: integer
key: 20
key exists: bool(true)
typeof key is: integer
key: 30
key exists: bool(true)
typeof key is: integer
array(0) {
}

--------------------------------------------------------------
Test: 4
array(2) {
  ["10"]=>
  array(1) {
    [0]=>
    string(6) "apples"
  }
  ["20"]=>
  array(1) {
    [0]=>
    string(7) "bananas"
  }
}
key: 10
key exists: bool(false)
typeof key is: string
key: 20
key exists: bool(false)
typeof key is: string
array(2) {
  ["10"]=>
  array(1) {
    [0]=>
    string(6) "apples"
  }
  ["20"]=>
  array(1) {
    [0]=>
    string(7) "bananas"
  }
}

--------------------------------------------------------------

Fix the problem with a rebuild of the array:
$oldArray = $array();
$array = array();
foreach($oldArray as $key => $item) {
    $array[intval($key)] = $item;
}
j dot vd dot merwe at enovision dot net 26-Aug-2010 12:08
A sample how to unset array elements from an array result coming from a mysql
request. In this sample it is checking if a file exists and removes the row
from the array if it not exists.

<?php
$db->set_query("select * from documents where document_in_user = 0"); //1 
$documents = $db->result_to_array($db->get_result()); //1

foreach ($documents as $key => $row) { //2

    $file     = "uploads/".rawurldecode($row['document_name']);
 
    if ( file_exists ( $file ) == FALSE ) {
         unset($documents[$key]);  //3
    } 
}

$documents = array_values($documents); // reindex the array (4)
?>

variables:
mysql table = documents,
array = $documents
array key (index) = $key
array row (record sort of speak) = $row

explanation:

1.
it gets the array from the table (mysql)

2.
foreach goes through the array $documents

3.
unset if record does not exist

4.
the array_values($documents) reindexes the $documents array, for otherwise you
might end up in trouble when your  process will start expecting an array
starting with key ($key) 0 (zero).
Anonymous 02-Jul-2010 02:20
further I realized that an object, when getting detroyed, does care about
destroying variable in object space visibility but not those in local
visibility, be aware of the found pattern:

<?php
class release_test{
  private $buffer;
  private $other_object;
  public function __construct(){
    $this->other_object=new other_object_class();
  }
  public function __destruct(){
    //note that you always have to unset class objects, in order to get the
resources released
    unset($this->other_object);
  }
  public allocate_mem_A(){
    $this->buffer=file("/tmp/bigfile");
  }
  public allocate_mem_B(){
    $buffer=file("/tmp/bigfile");
  }
  public allocate_mem_C(){
    $buffer=file("/tmp/bigfile");
    unset($buffer);
  }
  public allocate_mem_D(){
    $this->other_buffer=file("/tmp/bigfile");
  }
}

//this does not lead to a resource problem
$A=new release_test();
$A->allocate_mem_A();
$A->__destruct();
unset($A);

//this DOES lead to a resource problem
$B=new release_test();
$B->allocate_mem_B();
$B->__destruct();
unset($B);

//this does not lead to a resource problem
$C=new release_test();
$C->allocate_mem_C();
$C->__destruct();
unset($C);

//this does not lead to a resource problem
$D=new release_test();
$D->allocate_mem_D();
$D->__destruct();
unset($D);
?>
alex at bartl dot net 01-Jul-2010 05:11
unset($class_object) does not release resources allocated by the object. If
used in loops, which create and destroy objects, that might easily lead to a
resource problem. Explicitly call the destructor to circumvent the problem.

<?php
//this causes a resource problem
for($f=0;$f<10000;$f++){
  $my_class_object=new my_class_name();
  unset($my_class_object);
}

//this releases the resources allocate by the object
for($f=0;$f<10000;$f++){
  $my_class_object=new my_class_name();
  $my_class_object->__destruct();
  unset($my_class_object);
}
?>
alexanderashleyboese at gmail dot com 21-Apr-2010 06:09
I have noticed that sometimes if you have a globally declared instantiation of
a class, unsetting that instance does not always call destruct like you think
it should.

For instance, something like this might actually call the destruct later than
implied by the "unset":

<?php
class Data {

public function __destruct() {
echo "These are my last words...";
}

}

function main(){
$data = new Data;
one();
two();
}

function one ()
{
global $data;
echo "Running 1st";
unset($data);
}

function two()
{
echo "Running 2nd";
}

main();

//"Running 1stRunning 2ndThese are my last words..."
?>
phpmanual at kennel17 dot co dot uk 26-Feb-2010 04:55
Note that PHP 4 will generate a warning if you try to unset an array index that
doesn't exist and whose parent doesn't exist.

Example:

<?php

  $foo = array();

  unset($foo['Bar']['Baz']);

?>

RESULT: "Notice:  Undefined index:  Bar"

On PHP5 no error is raised, which seems to me like the correct behaviour.

Note that using unset($foo['Bar']) in the above example does not generate a
warning in either version.

(Tested on 4.4.9 and 5.2.4)
obsidianproject.co.uk 10-Sep-2009 01:41
A quick note on (unset) vs unset().

<?php
$a="test";
unset($a);
var_dump($a);
?>
will return

Notice: Undefined variable: a
NULL

<?php
$a="test";
var_dump((unset) $a);
?>
will return

NULL

When using unset() php will throw an E_NOTICE if you try and access the
variable after it has been unset, (unset) won't.

This has been tested in PHP 5.3.0
David Sawyer, Metaface Development 24-Apr-2009 04:26
Here's a simple function to remove a variable from an HTTP Query String:

<?php

function unset_query_string_var($varname,$query_string) {
    $query_array = array();
    parse_str($query_string,$query_array);
    unset($query_array[$varname]);
    $query_string = http_build_query($query_array);
    return $query_string;
}

?>

----------------------------

Example Usage #1:
Let's say you want to remove the variable "fruit" from $page_url below...

<?php
$page_url = "http://www.example.com/script.php?fruit=apple&color=red";
$url_data = parse_url($page_url);
$query_string = unset_query_string_var("fruit",$url_data['query']);
$page_url_new = $url_data['scheme'].'://'.$url_data['host'].$url_data['path'];
if (!empty($query_string)) $page_url_new .= '?'.$query_string;
$page_url_new .= $url_data['fragment'];
print $page_url_new;
?>

Output:
http://www.example.com/script.php?color=red

----------------------------

Example Usage #2:
To remove the variable "q" from the query string of the current page, try
something like...

<?php

$page_url = 'http://'.$_SERVER["SERVER_NAME"].$_SERVER['PHP_SELF'];
$query_string = unset_query_string_var("q",$_SERVER["QUERY_STRING"]);   
if (!empty($query_string)) $page_url .= '?'.$query_string;

?>
macnimble at gmail dot com 26-Mar-2009 10:39
Two ways of unsetting values within an array:

<?php
# remove by key:
function array_remove_key ()
{
  $args  = func_get_args();
  return array_diff_key($args[0],array_flip(array_slice($args,1)));
}
# remove by value:
function array_remove_value ()
{
  $args = func_get_args();
  return array_diff($args[0],array_slice($args,1));
}

$fruit_inventory = array(
  'apples' => 52,
  'bananas' => 78,
  'peaches' => 'out of season',
  'pears' => 'out of season',
  'oranges' => 'no longer sold',
  'carrots' => 15,
  'beets' => 15,
);

echo "<pre>Original Array:\n",
     print_r($fruit_inventory,TRUE),
     '</pre>';

# For example, beets and carrots are not fruits...
$fruit_inventory = array_remove_key($fruit_inventory,
                                    "beets",
                                    "carrots");
echo "<pre>Array after key removal:\n",
     print_r($fruit_inventory,TRUE),
     '</pre>';

# Let's also remove 'out of season' and 'no longer sold' fruit...
$fruit_inventory = array_remove_value($fruit_inventory,
                                      "out of season",
                                      "no longer sold");
echo "<pre>Array after value removal:\n",
     print_r($fruit_inventory,TRUE),
     '</pre>';
?>
lion_cat at mail ru 12-Nov-2008 10:22
about unset for arrays

if you unset the last array member
$ar[0]==2
$ar[1]==7
$ar[2]==9

unset ($ar[2])

after addition a new member by $ar[]=7,

you will get
$ar[0]==2
$ar[1]==7
$ar[3]==7,

So, unset has no effect to internal array counter!!!
thijs NOSPACE putman at gmail dot com 05-Nov-2008 01:17
"It is possible to unset even object properties visible in current context"

Although the note is clear, in my case it required a little example to grasp
its full impact:

If your object uses overloaded properties (using the "__set()" magic method)
and you unset one of your "real" properties, the "__set()" method will take
over if you try to assign a value to this property again.
In most cases, the "__set()" method is very much limited in the properties it
can set. In my case, I only allow "__set()" to change a limited, predefined,
set of properties. Most of them through their "public" name instead of their
actual name...

This generates a somewhat counter-intuitive situation: If you unset a variable,
you expect its value to become "null", which remains true. You also expect to
be able to set it again to another value.
In the example described above this is not the case: The "__get()" method is
invoked and, in my case, doesn't allow the property to be set again!
molotster on google mail com 14-Oct-2008 12:50
unset() does just what it's name says - unset a variable. It does not force
immediate memory freeing. PHP's garbage collector will do it when it see fits -
by intention as soon, as those CPU cycles aren't needed anyway, or as late as
before the script would run out of memory, whatever occurs first.

If you are doing $whatever = null; then you are rewriting variable's data. You
might get memory freed / shrunk faster, but it may steal CPU cycles from the
code that truly needs them sooner, resulting in a longer overall execution
time.
nox at oreigon dot de 05-Aug-2008 07:24
if you try to unset an object, please be careful about references.

Objects will only free their resources and trigger their __destruct method when
*all* references are unsetted.
Even when they are *in* the object... sigh!

<?php

class A {
  function __destruct() {
    echo "cYa later!!\n";
  }
}

$a = new A();
$a -> a = $a;
#unset($a); # Just uncomment, and you'll see

echo "No Message ... hm, what now?\n";
unset($a -> a);
unset($a);

echo "Finally that thing is gone\n";

?>

Of course the object completely dies at the end of the script.
stacionari at gmail dot com 17-Mar-2008 09:41
Sometimes you need to assigne values to an array index in some loop (if, while,
foreach etc.) but you wish to set starting index key to some number greater
then zero (lets say 5). One idea how to do this is:

<?php
    $values = array(5, 10, 15, 100);  //array of values that we wish to add to
our new array
   
    $myArray = array(4=>0);   //sets starting key to be 4 and assigns some
value (lets say 0)
    unset($myArray[4]);   //delete this index key, but preserves further
enumeration
   
    foreach($values as $value){
        $myArray[] = $value;   //asign values to our array
    }
   
    print_r($myArray);

/* Output:

Array ( [5] => 5 [6] => 10 [7] => 15 [8] => 100 )

*/

?>
pauljamescampbell at gmail dot com 15-Mar-2008 01:22
Here's my variation on the slightly dull unset method. It throws in a bit of
80's Stallone action spice into the mix. Enjoy!

<?php
/**
 * function rambo (first blood)
 *
 * Completely and utterly destroys everything, returning the kill count of
victims
 *
 * @param    It don't matter, it’s Rambo baby
 * @return    Integer    Body count (but any less than 500 and it's not really
worth mentioning)
 */
function rambo() {

    // Get the victims and initiate that body count status
    $victims = func_get_args();
    $body_count = 0;   
   
    // Kill those damn punks
    foreach($victims as $victim) {
        if($death_and_suffering = @unset($victim)) {
            $body_count++;
        }
    }
   
    // How many kills did Rambo tally up on this mission?
    return($body_count);
}
?>
Kai Kunstmann 10-Mar-2008 01:09
Since unset() is a language construct, it cannot be passed anything other than
a variable. It's sole purpose is to "unset" this variable, ie. to remove it
from the current scope and destroy it's associated data. This is true
especially for reference variables, where not the actual value is destroyed but
the reference to that value. This is why you can't wrap 'unset()' in a user
defined function: You would either unset a copy of the data if the parameter is
passed by value, or you would just unset the reference variable within the
functions scope if the parameter is passed by reference. There is no workaround
for that, as you cannot pass 'scope' to a function in PHP. Such a function can
only work for variables that exist in a common or global scope (compare 'unset
($_GLOBALS[variable])').

I don't know how PHP handles garbage collection internally, but I guess this
behavior can result in a huge memory leak: if a value variable goes out of
scope with a second variable still holding a reference to the in-memory value,
then unsetting that reference would still hold the value in memory but
potentially unset the last reference to that in-memory data, hence: occupied
memory that is rendered useless as you cannot reference it anymore.
levitating at gmail dot com 07-Jan-2008 12:19
>> shame, but it doesn't seem to pop the stack.

There is a simple solution to that. Delete the value, then use array_merge() on
your array:

<?php $folders= array_merge($folders) ; ?>
Maresa 16-Oct-2007 12:41
Note that since unset() returns void, you can't do this:

isset($some_var) && unset($some_var);

You'll get: Parse error: syntax error, unexpected T_UNSET in ...

The reason is because it would parse as
<bool> && <void>;
which is not a valid PHP statement.

Thus, the only alternative is to actually use if statement.
gerry+phpnet at buzka dot com 20-Sep-2007 04:07
Quote from http://fr.php.net/session_unset

"Do NOT unset the whole $_SESSION with unset($_SESSION) as this will disable
the registering of session variables through the $_SESSION superglobal."

So basically don't do:
unset($_SESSION)

Instead do:
$_SESSION = array();
Hayley Watson 24-Aug-2007 04:02
In regard to some confusion earlier in these notes about what causes unset() to
trigger notices when unsetting variables that don't exist....

Unsetting variables that don't exist, as in
<?php
unset($undefinedVariable);
?>
does not trigger an "Undefined variable" notice. But
<?php
unset($undefinedArray[$undefinedKey]);
?>
triggers two notices, because this code is for unsetting an element of an
array; neither $undefinedArray nor $undefinedKey are themselves being unset,
they're merely being used to locate what should be unset. After all, if they
did exist, you'd still expect them to both be around afterwards. You would NOT
want your entire array to disappear just because you unset() one of its
elements!
Sinured 17-Jul-2007 04:08
The main difference between <?php unset($var);?> and <?php $var = null;?> is,
that unset() will reset the state to $var to something like "not set at all".

<?php
// register_globals = Off
error_reporting(E_ALL);
echo $var; // Notice

$var = null;
echo $var; // Nothing

unset($var);
echo $var; // Notice
?>
chris at maedata dot com 18-Jun-2007 05:35
Regarding the 14-May-2007 note from anonymous:

As far as array elements go, unset() is really only useful for removing named
keys. For numeric keys, you can use array_splice to "unset" the element.

<?php
$a = array(
    'foo' => array('a', 'b', 'c'),
    'bar' => array('d', 'e', 'f')
);

print_r($a);

array_splice($a['foo'], 1, 1);

print_r($a);

unset($a['foo']);

print_r($a);
?>
chad 0x40 herballure 0x2e com 31-May-2007 02:11
It is observed on PHP 5.1.6 that <?php unset($this); ?> inside of a method will
remove the reference to $this in that method. $this isn't considered "special"
as far as unset() is concerned.
15-May-2007 05:51
shame, but it doesn't seem to pop the stack.

Array( [1\=>1
         [2\=>2
         [3\=>3
)

then unset($array[2\)

results in:

Array( [1\=>1
         [3\=>3
)

not

Array( [1\=>1
         [2\=>3
)

Shame really
RQuadling at GMail dot com 28-Mar-2007 01:28
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
09-Feb-2007 04:10
Just to confirm, USING UNSET CAN DESTROY AN ENTIRE ARRAY. I couldn't find
reference to this anywhere so I decided to write this.

The difference between using unset and using $myarray=array(); to unset is that
obviously the array will just be overwritten and will still exist.

<?php

$myarray=array("Hello","World");

echo $myarray[0].$myarray[1];

unset($myarray);
//$myarray=array();

echo $myarray[0].$myarray[1];

echo $myarray;
?>

Output with unset is:
<?
HelloWorld

Notice: Undefined offset: 0 in C:webpagesdainsidermyarray.php on line 10

Notice: Undefined offset: 1 in C:webpagesdainsidermyarray.php on line 10

Output with $myarray=array(); is:
?>

<?
HelloWorld

Notice: Undefined offset: 0 in C:webpagesdainsidermyarray.php on line 10

Notice: Undefined offset: 1 in C:webpagesdainsidermyarray.php on line 10

Array
?>
hessodreamy at gmail dot com 17-Jan-2007 11:51
To clarify what hugo dot dworak at gmail dot com said about unsetting things
that aren't already set:

unsetting a non-existent key within an array does NOT throw an error.
<?
$array = array();

unset($array[2]);
//this does not throw an error

unset($array[$undefinedVar]);
//Throws an error because of the undefined variable, not because of a
non-existent key.
?>
dibakar dot datta at gmail dot com 01-Apr-2006 07:31
Instead of using the unset function  for unregistering your session or other
array values you can also do this samll feature and get this task done with
just 1 line code.

Suppose, if you like to unregister your session store values.
You can use:
 
      $_SESSION = array();

Well this syntax saves lot's of time instead of unsetting each values.
hugo dot dworak at gmail dot com 26-Dec-2005 02:23
If one tries to unset a typical variable that does not exist, no errors,
warning or noticies will occur. However, if one tries to unset a non-existent
array or an array with non-existent key, this will result in a notice. For
instance:

<?php
  $true = true;
  $array = array ();
  unset ($true, $undefinedVariable, $array [$undefinedKey], $undefinedArray
[$undefinedKey]);
?>

The output is (PHP 5.0.5):

Notice: Undefined variable: undefinedKey
Notice: Undefined variable: undefinedKey
Notice: Undefined variable: undefinedArray
clark at everettsconsulting dot com 11-Sep-2005 07:50
In PHP 5.0.4, at least, one CAN unset array elements inside functions from
arrays passed by reference to the function.
As implied by the manual, however, one can't unset the entire array by passing
it by reference.

<?php
function remove_variable (&$variable)  // pass variable by reference
{
    unset($variable);
}

function remove_element (&$array, $key) // pass array by reference
{
    unset($array[$key]);
}

$scalar = 'Hello, there';
echo 'Value of $scalar is: ';
print_r ($scalar); echo '<br />';
// Value of $scalar is: Hello, there

remove_variable($scalar); // try to unset the variable
echo 'Value of $scalar is: ';
print_r ($scalar); echo '<br />';
// Value of $scalar is: Hello, there

$array = array('one' => 1, 'two' => 2, 'three' => 3);
echo 'Value of $array is: ';
print_r ($array); echo '<br />';
// Value of $array is: Array ( [one] => 1 [two] => 2 [three] => 3 )

remove_variable($array); // try to unset the array
echo 'Value of $array is: ';
print_r ($array); echo '<br />';
// Value of $array is: Array ( [one] => 1 [two] => 2 [three] => 3 )

remove_element($array, 'two'); // successfully remove an element from the array
echo 'Value of $array is: ';
print_r ($array); echo '<br />';
// Value of $array is: Array ( [one] => 1 [three] => 3 )

?>
no at spam dot com 30-Aug-2005 10:22
In addition to what timo dot hummel at 4fb dot de said;

>For the curious: unset also frees memory of the variable used.
>
>It might be possible that the in-memory size of the PHP Interpreter isn't
reduced, but your scripts won't touch the memory_limit boundary. Memory is
reused if you declare new variables.

It might be worth adding that functions apparently don't free up memory on exit
the same way unset does..
Maybe this is common knowledge, but although functions destroys variables on
exit, it (apparently) doesn't help the memory.

So if you use huge variables inside functions, be sure to unset them if you can
before returning from the function.

In my case, if I did not unset before return, then the script would use 20 MB
more of memory than if I did unset.
This was tested with php 5.0.4 on apache 2 on windows xp, with no memory limit.

Before I did the test, I was under the impression that when you exit from
functions, the memory used inside it would be cleared and reused. Maybe this
should be made clear in the manual, for either unset() or in the chapter for
functions.
tom at diacope dot com 04-Aug-2005 10:51
when working with $_SESSION or any other array like that and you want to delete
part of the session array it's always worked for me to do:

$_SESSION['data'] = NULL;
unset($_SESSION['data']);
muhamad_zakaria at yahoo dot com 05-Jul-2005 02:08
We have experienced when we applied 'unset' to the overloaded properties
(PHP5), consider the code below:
<?php
    class TheObj {
        public $RealVar1, $RealVar2, $RealVar3, $RealVar4;
        public $Var = array();

        function __set($var, $val) {
            $this->Var[$var] = $val;
        }
        function __get($var) {
            if(isset($this->Var[$var])) return $this->Var[$var];
            else return -1;
        }
    }

    $SomeObj = new TheObj;

    // here we set for real variables
    $SomeObj->RealVar1 = 'somevalue';
    $SomeObj->{'RealVar2'} = 'othervalue';
    $SomeObj->{'RealVar'.(3)} = 'othervaluetoo';
    $SomeObj->{'RealVar'.'4'} = 'anothervalue';

    // and here we set for virtual variables
    $SomeObj->Virtual1 = 'somevalue';
    $SomeObj->{'Virtual2'} = 'othervalue';
    $SomeObj->{'Virtual'.(3)} = 'othervaluetoo';
    $SomeObj->{'Virtual'.'4'} = 'anothervalue';

    // now we will try to unset these variables
    unset($SomeObj->RealVar1);
    unset($SomeObj->{'RealVar'.(3)});

    //the lines below will catch by '__get' magic method since these variables
are unavailable anymore
    print $SomeObj->RealVar1."\n";
    print $SomeObj->{'RealVar'.(3)}."\n";

    // now we will try to unset these variables
    unset($SomeObj->Virtual1);
    unset($SomeObj->{'Virtual'.(3)});

    //but, these variables are still available??? eventhough they're "unset"-ed
    print $SomeObj->Virtual1."\n";
    print $SomeObj->{'Virtual'.(3)}."\n";
?>

Please note that PHP doesn't have magic callback to unset overloaded
properties. This is the reason why unset($SomeObj->Virtual1) doesn't work.

But it does work when we set 'null' value such as the following code:
<?php
    // now we will set 'null' value instead of using unset statement
    $SomeObj->Virtual1 = null;
    $SomeObj->{'Virtual'.(3)} = null;

    // and now these variables are no longer available
    print $SomeObj->Virtual1."\n";
    print $SomeObj->{'Virtual'.(3)}."\n";
?>
Sound ugly, yeah?

This applied to the "virtual" array variable too, see more at http://
bugs.php.net/bug.php?id=33513 (at feedback) about it.
PS: we used PHP version 5.1.0-dev from the CVS snapshot when we wrote the above
codes.
franckraynal at free dot fr 26-Feb-2005 01:02
Here is another way to make 'unset' work with session variables from within a
function :

<?php
function unsetSessionVariable ($sessionVariableName) {
   unset($GLOBALS[_SESSION][$sessionVariableName]);
}
?>

May it work with others than me...
F.
bedbin at gmail dot com 02-Feb-2005 02:33
usefull tip:
if you have session variables like these.
<?php
echo "<pre>";
$_SESSION["num"] = array(1,2,3,4);
var_dump($_SESSION);

echo "-<br>";
unset($_SESSION);
var_dump($_SESSION);
?>
gives out:

array(1) {
  ["num"]=>
  array(4) {
    [0]=>
    int(1)
    [1]=>
    int(2)
    [2]=>
    int(3)
    [3]=>
    int(4)
  }
}
-
NULL

if you use empty instead unset you get same output as first var_dump($_SESSION)
gives.
I hope help sb.
Nghia 06-Jan-2005 04:41
I saw this mentioned somewhere else but if you do

$var = NULL

then I've noticed less memory usuage than with unset(). In fact, unset didn't
do anything.

This might be useful if you're doing a php-gtk app, thats starting to consume
significant memory over a long period of time. This was the code I used to test

// Check memory before here

for($i = 0; $i < 100; $i++)
{
  $dialog = &new GtkDialog();
  $dialog->realize();
  $dialog->destroy();

  $dialog = NULL;
  //unset($dialog);
}

// Check memory after here

Doing a difference between after and before results in:

Using destroy() and unset() ->  ~31kb
Using $dialog = NULL -> ~13 kb

The expected memory usuage should be 0kb or around there.
harycary at netscape dot net 14-Dec-2004 05:56
If you ever have to unset all the variables of a class from within a funciton
of that class use the following code:

<?php

class User
{

     function User_login ( ... )
     {...}

     function User_logout ( $greeting )
     {
         
          ...
          foreach ( array_keys ( get_object_vars ( &$this ) ) as $val)
          {    unset( $this->$val );    }
          $this->greeting = $greeting;
          ...

     }

}

?>
If anyone knows of a more effective way please post a reply.
mv at brasil dot com 08-Nov-2004 04:04
If you want to remove one element of Query String use this function, than place
the returned values in <a href="script.php?'. remove_query("arg1") .'">

    function remove_query($key) {
   
        $arrquery = explode("&", $_SERVER["QUERY_STRING"]);
       
        foreach ($arrquery as $query_value) {
       
            $valor = substr($query_value, strpos($query_value, "=") + 1);
            $chave = substr($query_value, 0, strpos($query_value, "="));
            $querystring[$chave] = $valor;
       
        }
       
        unset($querystring[$key]);
       
        foreach ($querystring as $query_key => $query_value) {
   
            $query[] = "{$query_key}={$query_value}";
   
        }
   
        $query = implode("&", $query);

        return $query;
   
    }
dan AT --nospam-- cubeland DOT co DOT uk 04-Nov-2004 07:38
dh at argosign dot de -
it is possible to unset globals from within functions thanks to the $GLOBALS
array:

<?php
$x = 10;

function test() {
    // don't need to do ' global $x; '
    unset ($GLOBALS['x']);
    echo 'x: ' . $GLOBALS['x'] . '<br />';
}

test();
echo "x: $x<br />";

// will result in
/*
x:
x:
*/
?>
timo dot hummel at 4fb dot de 07-Sep-2004 01:24
For the curious: unset also frees memory of the variable used.

It might be possible that the in-memory size of the PHP Interpreter isn't
reduced, but your scripts won't touch the memory_limit boundary. Memory is
reused if you declare new variables.
thorry at thorry dot net 05-Aug-2004 09:15
The documentation is not entirely clear when it comes to static variables. It
says:

If a static variable is unset() inside of a function, unset() destroys the
variable and all its references.

<?php
function foo()
{
   static $a;
   $a++;
   echo "$a\n";
   unset($a);
}

foo();
foo();
foo();
?> 

The above example would output:

1
2
3

And it does! But the variable is NOT deleted, that's why the value keeps on
increasing, otherwise the output would be:

1
1
1

The references are destroyed within the function, this handeling is the same as
with global variables, the difference is a static variable is a local variable.

Be carefull using unset and static values as the output may not be what you
expect it to be. It appears to be impossible to destroy a static variable. You
can only destroy the references within the current executing function, a
successive static statement will restore the references.

The documentation would be better if it would say:
"If a static variable is unset() inside of a function, unset() destroys all
references to the variable. "

Example: (tested PHP 4.3.7)
<?php
function foo()
{
   static $a;
   $a++;
   echo "$a\n";
   unset($a);
   echo "$a\n";
   static $a;   
   echo "$a\n";
}

foo();
foo();
foo();
?>

Would output:

1

1
2

2
3

3
anon at no spam dot no address dot com 17-Jul-2004 04:19
Adding on to what bond at noellebond dot com said, if you want to remove an
index from the end of the array, if you use unset, the next index value will
still be what it would have been.

Eg you have
<?php
 $x = array(1, 2);

 for ($i = 0; $i < 5; $i++)
 {
    unset($x[(count($x)-1)]); //remove last set key in the array

    $x[] = $i;
 }
?>

You would expect:
Array([0] => 1, [1] => 4)
as you want it to remove the last set key....

but you actually get
Array ( [0] => 1 [4] => 2 [5] => 3 [6] => 4 )

This is since even though the last key is removed, the auto indexing still
keeps its previous value.

The only time where this would not seem right is when you remove a value off
the end. I guess different people would want it different ways.

The way around this is to use array_pop() instead of unset() as array_pop()
refreshes the autoindexing thing for the array.
<?php
 $x = array(1, 2);

 for ($i = 0; $i < 5; $i++)
 {
    array_pop($x); // removes the last item in the array

    $x[] = $i;
 }
?>

 This returns the expected value of x = Array([0] => 1, [1] => 4);

Hope this helps someone who may need this for some odd reason, I did.
bond at noellebond dot com 26-May-2004 09:34
Note that though global arrays will not be altered by a function, an array in
an object WILL be altered if referenced within one of its methods.  For
example:

  function remove_index ($i)
  {
    unset($this->test_array[$i]);
    $temp_array = array_values($this->test_array);
    $this->test_array = $temp_array;
   
  }

Will remove key $i from the object's array and reindex it.
andre at twg dot com dot au 07-Mar-2004 05:16
Only This works with register_globals being 'ON'.

unset( $_SESSION['variable'] );

The above will not work with register_globals turned on (will only work outside
of a function).

$variable = $_SESSION['variable'];
unset( $_SESSION['variable'], $variable );

The above will work with register_globals on & inside a function
warhog at warhog dot net 27-Jan-2004 04:52
you may wan't to unset all variables which are defined, here's one way:

<?php

function unset_all_vars($a)
{ foreach($a as $key => $val)
  { unset($GLOBALS[$key]); }
  return serialize($a); }

unset_all_vars(get_defined_vars());

?>

you can also save than a serialized var of the "memory" and perhaps store this
in a temporary file.. very usefull if you work with text files and/or file
uploads when you've got very large variables.

greetz
kdechant at midwestarts dot com 23-Nov-2003 11:47
As of PHP version 4.3.3, unset() results in a parse error if it is used with
the @ error suppression operator.

For example:

@unset($var); // parse error
unset(@$var); // parse error
unset($var); // okay
frank at agentbrand dot com 09-Nov-2003 05:59
Use array_values() after unset() to reindex your array.
 Note that unset() removes the index as a key, you will need to reindex your
array again to get expected behavior
vmizuba at queens dot org 28-Oct-2003 03:25
for what it's worth...

in php 4.1, using unset to destroy a session variable, i.e. unset($_SESSION
['variable']); destroys it by erasing variable information but leaves behind
the variable name appended with a '!' in front of the name in the session
file... leaving the session file larger and x bytes wasted depending on the
variable name length
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 16 19:12:13 2011 UTC
FALSE を返します。

警告

この関数は論理値 FALSE を返す可能性がありますが、FALSE として評価される 0 や ""
といった値を返す可能性もあります。詳細については論理値のセクションを参照してく
ださい。この関数の返り値を調べるには ===演算子を使用してください。

例

例1 === の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// === を使用していることに注目しましょう。単純に == を使ったのでは
// 期待通りに動作しません。なぜなら 'a' が 0 番目 (最初) の文字だからです。
if ($pos === false) {
    echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
} else {
    echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
    echo " 見つかった位置は $pos です";
}
?>

例2 !== の使用

<?php
$mystring = 'abc';
$findme   = 'a';
$pos = strpos($mystring, $findme);

// !== 演算子も使用可能です。ここで != を使っても期待通りに動作しません。
// なぜなら 'a' が 0 番目の文字だからです。(0 != false) を評価すると
// false になってしまいます。
if ($pos !== false) {
     echo "文字列 '$findme' が文字列 '$mystring' の中で見つかりました";
         echo " 見つかった位置は $pos です";
} else {
     echo "文字列 '$findme' は、文字列 '$mystring' の中で見つかりませんでした";
}
?>

例3 オフセットの使用

<?php
// オフセット以前の内容を無視して文字を探すこともできます。
$newstring = 'abcdef abcdef';
$pos = strpos($newstring, 'a', 1); // $pos は 0 ではなく 7 となります。
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strrpos() - 文字列中に、ある部分文字列が最後に現れる場所を探す
  • stripos() - 大文字小文字を区別せずに文字列が最初に現れる位置を探す
  • strripos() - 文字列中で、特定の(大文字小文字を区別しない)文字列が最後に現れ
    た位置を探す
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す
  • stristr() - 大文字小文字を区別しない strstr
  • strstr() - 文字列が最初に現れる位置を見つける



strrchr> <strpbrk
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes strpos
akarmenia at gmail dot com 05-Mar-2011 12:44
My version of strpos with needles as an array. Also allows for a string, or an
array inside an array.

<?php
function strpos_array($haystack, $needles) {
    if ( is_array($needles) ) {
        foreach ($needles as $str) {
            if ( is_array($str) ) {
                $pos = strpos_array($haystack, $str);
            } else {
                $pos = strpos($haystack, $str);
            }
            if ($pos !== FALSE) {
                return $pos;
            }
        }
    } else {
        return strpos($haystack, $needles);
    }
}

// Test
echo strpos_array('This is a test', array('test', 'drive')); // Output is 10

?>
jaimthorn at yahoo dot com 09-Feb-2011 10:09
A complete set of strn*pos functions that look for the nth occurrence of the
needle in the haystack. Based on a version I posted earlier, below; this new
version conforms more to the semantics of strpos.

<?php

/**
 *  This function implements all the strn*pos functions, which return the $nth
occurrence of $needle
 *  in $haystack, or false if it doesn't exist / when illegal parameters have
been supplied.
 *
 *  @param  string  $haystack       the string to search in.
 *  @param  MIXED   $needle         the string or the ASCII value of the
character to search for.
 *  @param  integer $nth            the number of the occurrence to look for.
 *  @param  integer $offset         the position in $haystack to start looking
for $needle.
 *  @param  bool    $insensitive    should the function be case insensitive?
 *  @param  bool    $reverse        should the function work its way backwards
in the haystack?
 *  @return MIXED   integer         either the position of the $nth occurrence
of $needle in $haystack,
 *               or boolean         false if it can't be found.
 */
function strnripos_generic( $haystack, $needle, $nth, $offset, $insensitive,
$reverse )
{
    //  If needle is not a string, it is converted to an integer and applied as
the ordinal value of a character.
    if( ! is_string( $needle ) ) {
        $needle = chr( (int) $needle );
    }

    //  Are the supplied values valid / reasonable?
    $len = strlen( $needle );
    if( 1 > $nth || 0 === $len ) {
        return false;
    }

    if( $insensitive ) {
        $haystack = strtolower( $haystack );
        $needle   = strtolower( $needle   );
    }

    if( $reverse ) {
        $haystack = strrev( $haystack );
        $needle   = strrev( $needle   );
    }

    //  $offset is incremented in the call to strpos, so make sure that the
first
    //  call starts at the right position by initially decreasing $offset by
$len.
    $offset -= $len;
    do
    {
        $offset = strpos( $haystack, $needle, $offset + $len );
    } while( --$nth  && false !== $offset );

    return false === $offset || ! $reverse ? $offset : strlen( $haystack ) -
$offset;
}

/**
 *  @see    strnripos_generic
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, false
);
}

/**
 *  @see    strnripos_generic
 */
function strnipos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, false );
}

/**
 *  @see    strnripos_generic
 */
function strnrpos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, false, true );
}

/**
 *  @see    strnripos_generic
 */
function strnripos( $haystack, $needle, $nth, $offset = 0 )
{
    return strnripos_generic( $haystack, $needle, $nth, $offset, true, true );
}

$haystack = 'Dit is een HoTtentotTentenTentenToonstellingTest!';

echo strnpos  ( $haystack, 't', 5 ), ' === ', strnpos  ( $haystack, 116, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 't', 5 ), ' === ', strnipos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 't', 5 ), ' === ', strnrpos ( $haystack, 116, 5 ),
PHP_EOL;
echo strnripos( $haystack, 't', 5 ), ' === ', strnripos( $haystack, 116, 5 ),
PHP_EOL;
echo PHP_EOL;
echo strnpos  ( $haystack, 'T', 5 ), ' === ', strnpos  ( $haystack,  84, 5 ),
PHP_EOL;
echo strnipos ( $haystack, 'T', 5 ), ' === ', strnipos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnrpos ( $haystack, 'T', 5 ), ' === ', strnrpos ( $haystack,  84, 5 ),
PHP_EOL;
echo strnripos( $haystack, 'T', 5 ), ' === ', strnripos( $haystack,  84, 5 ),
PHP_EOL;
Anonymous 19-Aug-2010 09:50
beware the mindless "if needle is not string" :

root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567",5));'
bool(false)
root@voice1:/www/voice_ed#php -r 'var_dump(strpos("X1234567","5"));'
int(5)
root@voice1:/www/voice_ed#
gambajaja at yahoo dot com 17-Aug-2010 10:25
<?php
$my_array = array ('100,101', '200,201', '300,301');
$check_me_in = array ('100','200','300','400');
foreach ($check_me_in as $value_cmi){
    $is_in=FALSE; #asume that $check_me_in isn't in $my_array
    foreach ($my_array as $value_my){
        $pos = strpos($value_my, $value_cmi);
        if ($pos===0)
            $pos++;
        if ($pos==TRUE){
            $is_in=TRUE;
            $value_my2=$value_my;
            }
    }
    if ($is_in) echo "ID $value_cmi in \$check_me_in I found in value
'$value_my2' \n";
}
?>

The above example will output
ID 100 in $check_me_in I found in value '100,101'
ID 200 in $check_me_in I found in value '200,201'
ID 300 in $check_me_in I found in value '300,301'
usulaco at gmail dot com 11-Aug-2010 12:04
Parse strings between two others in to array.

<?php
function g($string,$start,$end){
     preg_match_all('/' . preg_quote($start, '/') . '(.*?)'. preg_quote($end, '
/').'/i', $string, $m);
     $out = array();

     foreach($m[1] as $key => $value){
       $type = explode('::',$value);
       if(sizeof($type)>1){
          if(!is_array($out[$type[0]]))
             $out[$type[0]] = array();
          $out[$type[0]][] = $type[1];
       } else {
          $out[] = $value;
       }
     }
  return $out;
}
print_r(g('Sample text, [/text to extract/] Rest of sample text [/WEB::http://
google.com/] bla bla bla. ','[/','/]'));
?>

results:
Array
(
    [0] => text to extract
    [WEB] => Array
        (
            [0] => http://google.com
        )

)

Can be helpfull to custom parsing :)
james [at] bandit co.nz 28-May-2010 11:38
strpos that accepts an array for $needle

<?php
// strpos that takes an array of values to match against a string
// note the stupid argument order (to match strpos)
function strpos_arr($haystack, $needle) {
    if(!is_array($needle)) $needle = array($needle);
    foreach($needle as $what) {
        if(($pos = strpos($haystack, $what))!==false) return $pos;
    }
    return false;
}
?>
olmstead31 at yahoo dot com 23-Mar-2010 03:48
I found that whatever I was using as a test with strpos it came out false exept
if $pos was == 1

I figured it gives me a numeric value if found else it is null or false
here is what i did to make my code work:

<?php
//EXAMPLE 1:
$quiamime = ',64,68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 0
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 2:
$quiamime = ',68,70,64,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to 6
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}

//EXAMPLE 3:
$quiamime = ',68,70,';
$me = '64'
$posi = strpos($quiaime, ",$me,");  //posi is equal to NULL or FALSE
if (!is_numeric($posi)){
 //code here
}else{
  //else code here
}
?>
jaimthorn at yahoo dot com 05-Mar-2010 07:55
restaurant.nl may find it bizarre, but I prefer this implementation of strnpos
because it doesn't give visible warnings when supplied with a needle of length
0 (which is, admittedly, non-standard behavior), AND it's faster...

<?php
/**
 *  Returns the position of the $nth occurrence of $needle in $haystack, or
false if it doesn't exist, or false when illegal parameters have been supplied.
 *
 *  @param  string  $haystack   the string to search in.
 *  @param  string  $needle     the string to search for.
 *  @param  integer $nth        the number of the occurrence to look for.
 *  @param  integer $offset     the position in $haystack to start looking for
$needle.
 *  @return MIXED   integer     either the position of the $nth occurrence of
$needle in $haystack,
 *               or boolean     false if it can't be found.
 */
function strnpos( $haystack, $needle, $nth, $offset = 0 )
{
   if( 1 > $nth || 0 === strlen( $needle ) )
   {
       return false;
   }

   //  $offset is incremented in the call to strpos, so make sure that the
first call starts at the right position by initially decrementing $offset.
   --$offset;
   do
   {
      $offset = strpos( $haystack, $needle, ++ $offset );
   } while( --$nth  && false !== $offset );

   return $offset;
}
?>
http://restaurants.nl 03-Mar-2010 04:50
I've seen some awful and even outright bizarre examples for finding the nth
occurrence of needle inside haystack starting at a given offset,
so here's what I believe is a better one:

<?php
function strnpos($haystack, $needle, $nth, $offset = 0)
{
    for ($retOffs=$offset-1; ($nth>0)&&($retOffs!==FALSE); $nth--) $retOffs =
strpos($haystack, $needle, $retOffs+1);
    return $retOffs;
}

echo strnpos("who's your daddy, daddy?", "d", 1);    // 11
echo strnpos("who's your daddy, daddy?", "d", 3);    // 14
echo strnpos("who's your daddy, daddy?", "d", 2, 14);    // 18
echo strnpos("who's your daddy, daddy?", "daddy", 2);    // 18
?>

enjoy
daevid at daevid dot com 26-Jan-2010 10:46
Dan Brown and I had a discussion on the PHP list about the speed difference
between the popular three string searching techniques. He wrote a simple timing
test, and I adapted it further. The end result is that all three are very close
and not even noticeable for sets < 1M. Although, technically strpos() is about
twice as fast (as the docs allude to above). Here it is for your own amusement
and testing purposes.

<?php
for ($i = 0; $i < 1000000; $i++ )
    $o[] =
sprintf('%04d-%02d-%02d',rand(0000,9999),rand(00,99),rand(00,99));
#print_r($o);
echo "array of ".number_format($i)."\n";
###################################################################
$now = microtime(true);
for($i=0;$i<count($o);$i++) {
       if(preg_match('/^[0]{4,}\-/U',$o[$i])) {
               //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
       }
}
$rank['preg_match'] = (microtime(true) - $now);
###################################################################
$later = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(substr($o[$i],0,4) == "0000") {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['substr'] = (microtime(true) - $later);
###################################################################
$after = microtime(true);
for($i=0;$i<count($o);$i++) {
        if(strpos($o[$i], '0000') === 0) {
                //echo "Offset #".$i." matches: ".$o[$i].PHP_EOL;
        }
}
$rank['strpos'] = (microtime(true) - $after);
###################################################################
asort($rank);
print_r($rank);
?>

array of 10,000
Array
(
    [strpos] => 0.00766682624817
    [substr] => 0.0116670131683
    [preg_match] => 0.0124950408936
)

array of 100,000
Array
(
    [strpos] => 0.0817799568176
    [substr] => 0.120522975922
    [preg_match] => 0.125612974167
)

array of 1,000,000
Array
(
    [strpos] => 0.805890083313
    [substr] => 1.19799995422
    [preg_match] => 1.25615906715
)

I ran out of memory with more than 1M array elements.
Achintya 06-Nov-2009 10:03
A function I made to find the first occurrence of a particular needle not
enclosed in quotes(single or double). Works for simple nesting (no backslashed
nesting allowed).

<?php
function strposq($haystack, $needle, $offset = 0){
    $len = strlen($haystack);
    $charlen = strlen($needle);
    $flag1 = false;
    $flag2 = false;
    for($i = $offset; $i < $len; $i++){
        if(substr($haystack, $i, 1) == "'"){
            $flag1 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, 1) == '"'){
            $flag2 = !$flag1 && !$flag2 ? true : false;
        }
        if(substr($haystack, $i, $charlen) == $needle && !$flag1 && !$flag2){
            return $i;       
        }
    }
    return false;
}

echo strposq("he'llo'character;\"'som\"e;crap", ";"); //16
?>
yasindagli at gmail dot com 05-Oct-2009 04:05
This function finds postion of nth occurence of a letter starting from offset.

<?php
function nth_position($str, $letter, $n, $offset = 0){
    $str_arr = str_split($str);
    $letter_size = array_count_values(str_split(substr($str, $offset)));
    if( !isset($letter_size[$letter])){
        trigger_error('letter "' . $letter . '" does not exist in ' . $str . '
after ' . $offset . '. position', E_USER_WARNING);
        return false;
    } else if($letter_size[$letter] < $n) {
        trigger_error('letter "' . $letter . '" does not exist ' . $n .' times
in ' . $str . ' after ' . $offset . '. position', E_USER_WARNING);
        return false;
    }
    for($i = $offset, $x = 0, $count = (count($str_arr) - $offset); $i <
$count, $x != $n; $i++){
        if($str_arr[$i] == $letter){
            $x++;
        }
    }
    return $i - 1;
}

echo nth_position('foobarbaz', 'a', 2); //7
echo nth_position('foobarbaz', 'b', 1, 4); //6
?>
digitalpbk [at] gmail.com 01-Oct-2009 03:37
This functions throws an "Offset not contained in string" error if the offset
is not in between 0 and the length of string.
KimKha 29-Sep-2009 08:56
The following function use to redirect to URL correctly if the URL have "http:/
/" or "https://", or to relative URL on your site.

<?php
function forward($url = NULL){
    $root = "http://example.com/mydir/";
   
    if($url == NULL) // Go to homepage
        $url = $root;
    else {
        $pos = strpos($url, "http://");
        if ($pos === false)
            $pos = strpos($url, "https://");
       
        if ($pos === false || $pos > 0) // Go to relative URL on your site
            $url = $root . $url;
    }
   
    header('Location:'.$url);   
}
?>
juniordez at gmail dot com 16-Sep-2009 04:47
Function to get the string pos ($search), before the position ($pos) passed as
parameter.

<?php

function strposReverse( $str, $search, $pos ){
        $str = strrev($str);
        $search = strrev($search);
        $pos = (strlen($str) - 1) - $pos;
       
        $posRev = strpos( $str, $search, $pos );
        return (strlen($str) - 1) - $posRev - (strlen($search) - 1);
    }
?>
ah dot d at hotmail dot com 11-Aug-2009 08:29
A strpos modification to return an array of all the positions of a needle in
the haystack

<?php
function strallpos($haystack,$needle,$offset = 0){
    $result = array();
    for($i = $offset; $i<strlen($haystack); $i++){
        $pos = strpos($haystack,$needle,$i);
        if($pos !== FALSE){
            $offset =  $pos;
            if($offset >= $i){
                $i = $offset;
                $result[] = $offset;
            }
        }
    }
    return $result;
}
?>

example:-

<?php
$haystack = "ASD is trying to get out of the ASDs cube but the other ASDs told
him that his behavior will destroy the ASDs world";

$needle = "ASD";

print_r(strallpos($haystack,$needle));

//getting all the positions starting from a specified position

print_r(strallpos($haystack,$needle,34));
?>
bob at mailinator dot com 03-Jun-2009 06:26
I found in a certain bit of my code that under certain circumstances, $needle
could be an empty string. This caused strpos to generate an error message.
To get round it, I had to first test to see if $needle was an empty string, and
then (ie 'else') go forward and do the strpos test if not.
vbracco at gmail dot com 04-Apr-2009 02:45
This function find position of first occurrence of any $needles in a string
$haystack.
Return the position as an integer. If needles is not found, strposa() will
return boolean  FALSE.

<?php
function strposa($haystack ,$needles=array(),$offset=0){
    $chr = array();
    foreach($needles as $needle){
        $chr[] = strpos($haystack,$needle,$offset);
    }
    if(empty($chr)) return false;
    return min($chr);
}

$string = "This is my string, very simple.";

echo strposa($string,array(".",","," ")); // 2
echo strposa($string,array("T")); // 0
echo strposa($string,array("Q","W")); // false
?>
lkj dot korn AT NOSPAMgmail d0t c0m 03-Apr-2009 08:57
Note that strpos() will return false if you supply an integer (thus, this
presumably applies to float, too) as needle. For example:

<?php
$id = 2; $text = '12345';
if(strpos($text, $id) === false){
  echo 'Yes, is false';
}
?>

Will output 'Yes, is false', a behavior which may not be very intuitive (you'd
think it would be covered by PHP's type juggling feature).
This can be easily fixed by adding $id = (string)$id; above the strpos()
statement.
teddanzig at yahoo dot com 23-Mar-2009 05:48
routine to return -1 if there is no match for strpos

<?php
//instr function to mimic vb instr fucntion
function InStr($haystack, $needle)
{
    $pos=strpos($haystack, $needle);
    if ($pos !== false)
    {
        return $pos;
    }
    else
    {
        return -1;
    }
}
?>
peterzuzek at gmail dot com 08-Feb-2009 07:01
A function that return the first occurance of a number in a string, if anyone
needs it.

Translation/prevod:
Funkcija, ki vrača pozicijo prve številke v besedi, če jo kdo potrebuje.

<?php

    function firstNumPos($str) {
        $poses = array(); // will be storing positions of the numbers

        for($i = 0; $i < 10; ++$i) { // cycle through numbers
            if(($a = strpos($str, (string)$i)) !== false) {
                $poses[] = $a;    // append the position of
                                // the first occurance of the number
            }
        }
        if(isset($poses[0])) { // if array not empty
            sort($poses);        // sort to get the lowest one on the 'bottom'
            return $poses[0];    // and return it
        }
        return false; // otherwise return false

    } // firstNumPos()

?>
jburns131 at jbwebware dot com 28-Dec-2008 12:48
The Situation:

I wanted to return TRUE if strpos returned position 0, and only position 0,
without the added overhead of preg_match.

The Solution:

As PHP treats 0 (zero) as NULL, and strpos returns the int 0 (but not NULL), I
used type casting and the "===" comparison operator (as it compares types) to
resolve my issue.

<?php

$hayStack = "dbHost";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

Returns:
db is in position zero

<?php

$hayStack = "another_db_host";
$needle  = "db"
$needlePos = strpos($hayStack, $needle);

if((string)$needlePos === (string)0) {
    echo "db is in position zero";
} else {
    echo "db is NOT in position zero";
}

?>

This returns:
db is in NOT position zero
Tim 18-Nov-2008 01:52
If you would like to find all occurences of a needle inside a haystack you
could use this function strposall($haystack,$needle);. It will return an array
with all the strpos's.

<?php
/**
 * strposall
 *
 * Find all occurrences of a needle in a haystack
 *
 * @param string $haystack
 * @param string $needle
 * @return array or false
 */
function strposall($haystack,$needle){
   
    $s=0;
    $i=0;
   
    while (is_integer($i)){
       
        $i = strpos($haystack,$needle,$s);
       
        if (is_integer($i)) {
            $aStrPos[] = $i;
            $s = $i+strlen($needle);
        }
    }
    if (isset($aStrPos)) {
        return $aStrPos;
    }
    else {
        return false;
    }
}
?>
atomkirk at hotmail dot com 23-Oct-2008 01:19
careful that when you put a strpos in an if statement that you take note that
if the string is in the 0 position it will return false, causing your control
structure to think its not in the string.
samundra dot shr at gmail dot com 28-Sep-2008 06:40
This is the code,I wrote today, I wanted to strip all the newlines, and format
the output in a single line so as to lower the filesize of my php source files.

<?php
/****************************************
@ Code By : Samundra Shrestha
@ Dated : September 28,2008
P.S. Remember to remove all single line comments from the source file
        otherwise the file may get corrupted.
******************************************/
if(!isset($_POST['change']) || !isset($_POST['filename']))
{
    print "<b>".strtoupper("Paste the fullpath of the file")."</b>";
    print "<form name='FrmChange' method='post' action='".$_SERVER
['PHP_SELF']."'>";
    print "<input type='textbox' name='filename' size='50px' maxlength='255'>";
    print "<input type='submit' name='change' value='Start'>";
    print "</form>";
}
else
{
$filename=$_POST['filename'];
if(!$fpin=@fopen($filename,"r"))
{
    print "<b>Error ! File Doesn't Exists</b>";
    exit();
}
$text="";
$i=0;
/*Put the contents of file into the string*/
while(!feof($fpin))
{
    $text.=fread($fpin,1024);
}
$count=strlen($text);
$pos=strpos($text,"\n"); //Gives the First occurence of newline
while($i<$count)
{   
    if($i<$pos-1)
    {
        $newtext.=$text{$i}; //C Style of String Indexing       
    }
    else
    {
        $pos=strpos($text,"\n",$i+1);
    }   
    $i++;   
}
$newtext.="?>";   //necessary as somehow it is removed from the original source
file.
$fp=fopen("sample.txt","wb+");
fwrite($fp,$newtext);
fclose($fp);   
print "File Changed Successfully.";
}
?>

The resultant code is all in one new line saved in file sample.txt

I hope, this comes handy to someone.

Cheers,
Samundra Shrestha
http://www.samundra.com.np
mickRacky 19-Sep-2008 06:17
here's a php implementation of stdc++ string class find_first_of using strpos.

<?php
function find_first_of($haystack, $needlesAsString, $offset=0)
{
  $max = strlen($needlesAsString);
  $index = strlen($haystack)+1;
  for($ii=0; $ii<$max;$ii++){
    $result = strpos($haystack,$needlesAsString[$ii], $offset);
    if( $result !== FALSE  && $result < $index)
      $index = $result;
  }
  return ( $index > strlen($haystack)? FALSE: $index);
}
?>

Example:
<?php
$test="Ralph: One of these days, Alice!!";
$look_for=":!,";   // punctuation marks

$ss = 0;
while( $answer=find_first_of($test,$look_for,$ss) ) {
  echo $answer . "\n";
  $ss = $answer+1;
 }
?>

This prints out:
5
24
31
32
Chuzasoft Inc. ARGENTINA 05-Aug-2008 07:16
Hi! Don't you people miss the pretty comparison operator 'LIKE' from mySql in
PHP??.
I've made this funtion to emulate that method. It's for search a match string
into another String
using the '%' caracter just like you do un the LIKE syntax.
For example:

<?php
$mystring = "Hi, this is good!";
$searchthis = "%thi% goo%";

$resp = milike($mystring,$searchthis);

       
if ($resp){
   echo "milike = VERDADERO";
} else{
   echo "milike = FALSO";
}

?>
Will print:
milike = VERDADERO

and so on...

this is the function:

<?php
function milike($cadena,$busca){
    if($busca=="") return 1;
   
    $vi = split("%",$busca);
     $offset=0;
    for($n=0;$n<count($vi);$n++){
        if($vi[$n]== ""){
            if($vi[0]== ""){
                   $tieneini = 1;
            }
        } else {
            $newoff=strpos($cadena,$vi[$n],$offset);
            if($newoff!==false){
                if(!$tieneini){
                    if($offset!=$newoff){
                        return false;
                    }
                }
                if($n==count($vi)-1){
                    if($vi[$n] != substr($cadena,strlen($cadena)-strlen($vi
[$n]), strlen($vi[$n]))){
                        return false;
                    }

                } else {
                    $offset = $newoff + strlen($vi[$n]);
                 }
            } else {
                return false;
            }
        }
    }
    return true;
}
?>

Good luck!
paul at thiswayupdesign dot co dot uk 18-Jun-2008 10:48
I wasn't aware of the !== operator, only the === for false. I was using this
code on strpos:

<?php
while( ! ($start=@strpos($source,$startTag,$end)) === false) {
  // ...
}
?>

This gave a false if the string was found at position 0, which is weird.

However using

<?php
while(($start=@strpos($source,$startTag,$end)) !== false) {
  // ...
}
?>

Gives no such error and seems to work correctly
pawhox 26-May-2008 01:19
Hello! I was founding a function, which finds any occurence of a string (no:
first occurence). I wasn't, so I maked this function! It may be very useful.

<?php

int strnpos(string $haystack, mixed $needle, int $occurence);

?>

Example:

<?php

strnpos("I like the bananas. You like coke. We like chocolate.", "like", 2); //
24

?>

Here's code of this function:

<?php

function strnpos($base, $str, $n)
    {       
        if ($n <= 0 || intval($n) != $n || substr_count($base, $str) < $n) 
return FALSE;
       
        $str = strval($str);
        $len = 0;
       
        for ($i=0 ; $i<$n-1 ; ++$i)
        {
            if ( strpos($base, $str) === FALSE ) return FALSE;
           
            $len += strlen( substr($base, 0, strpos($base, $str) + strlen
($str)) );
           
            $base = substr($base, strpos($base, $str) + strlen($str) );
        }
        return strpos($base, $str) + $len;
    }

?>
ilaymyhat-rem0ve at yahoo dot com 02-Apr-2008 12:17
This might be useful.

<?php
class String{
   
    //Look for a $needle in $haystack in any position
    public static function contains(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        return $result !== FALSE;
    }
   
    //intuitive implementation .. if not found returns -1.
    public static function strpos(&$haystack, &$needle, &$offset)
    {
        $result = strpos($haystack, $needle, $offset);
        if ($result === FALSE )
        {
            return -1;
        }
        return $result;
    }
   
}//String
?>
Suggested re-write for pink WARNING box 11-Jan-2008 11:45
WARNING

As strpos may return either FALSE (substring absent) or 0 (substring at start
of string), strict versus loose equivalency operators must be used very
carefully.

To know that a substring is absent, you must use: 

=== FALSE

To know that a substring is present (in any position including 0), you can use
either of:

!== FALSE  (recommended)
 > -1  (note: or greater than any negative number)

To know that a substring is at the start of the string, you must use: 

=== 0

To know that a substring is in any position other than the start, you can use
any of:

 > 0  (recommended)
!= 0  (note: but not !== 0 which also equates to FALSE)
!= FALSE  (disrecommended as highly confusing)

Also note that you cannot compare a value of "" to the returned value of
strpos. With a loose equivalence operator (== or !=) it will return results
which don't distinguish between the substring's presence versus position. With
a strict equivalence operator (=== or !==) it will always return false.
giulioNOSPAM at iunknown dot org 31-Oct-2007 10:19
A further implementation of the great rstrpos function posted in this page.
Missing some parameters controls, but the core seems correct.

<?php
// Parameters:
//
// haystack : target string
// needle   : string to search
// offset   : which character in haystack to start searching, FROM THE END OF
haystack
// iNumOccurrence : how many needle to search into haystack beginning from
offset ( i.e. the 4th occurrence of xxx into yyy )

function rstrpos ($haystack, $needle, $offset=0, $iNumOccurrence=1)
  {
  //
  $size = strlen ($haystack);
  $iFrom = $offset;
  $iLoop = 0;
  //
  do
    {
    $pos = strpos (strrev($haystack), strrev($needle), $iFrom);
    $iFrom = $pos + strlen($needle);
    }
  while ((++$iLoop)<$iNumOccurrence);
  //
  if($pos === false) return false;
  //
  return $size - $pos - strlen($needle);
  }
?>
Benjie 14-Oct-2007 11:49
str_replace evaluates its arguments exactly once.

for example:

<?php
$page = str_replace("##randompicture##", getrandompicture(), $page);
?>

will call getrandompicture() once, ie it will insert the same random picture
for each occurrence of ##randompicture## :(

Here is my quick and dirty workaround:

<?php
function add_random_pictures($text) {

  while (($i = strpos($text, "##randompicture##")) !== false) {
    $text = substr_replace($text, getrandompicture(), $i, strlen("##
randompicture##"));
  }
  return $text;

}

$page = add_random_pictures($page);
?>
Wagner Christian 17-Aug-2007 08:11
If you plan to use an integer as needle you need first to convert your integer
into a String else it's not going to work.

For exemple :
<?php
$id  = 1;
$my_text = "hel124lo";
$first_position =strpos($my_text ,substr($id,0));
?>

There are for sure some another solutions to convert an integer into a string
in php.
user at nomail dot com 15-May-2007 09:21
This is a bit more useful when scanning a large string for all occurances
between 'tags'.

<?php
function getStrsBetween($s,$s1,$s2=false,$offset=0) {
    /*====================================================================
    Function to scan a string for items encapsulated within a pair of tags

    getStrsBetween(string, tag1, <tag2>, <offset>

    If no second tag is specified, then match between identical tags

    Returns an array indexed with the encapsulated text, which is in turn
    a sub-array, containing the position of each item.

    Notes:
    strpos($needle,$haystack,$offset)
    substr($string,$start,$length)

    ====================================================================*/

    if( $s2 === false ) { $s2 = $s1; }
    $result = array();
    $L1 = strlen($s1);
    $L2 = strlen($s2);

    if( $L1==0 || $L2==0 ) {
        return false;
    }

    do {
        $pos1 = strpos($s,$s1,$offset);

        if( $pos1 !== false ) {
            $pos1 += $L1;

            $pos2 = strpos($s,$s2,$pos1);

            if( $pos2 !== false ) {
                $key_len = $pos2 - $pos1;

                $this_key = substr($s,$pos1,$key_len);

                if( !array_key_exists($this_key,$result) ) {
                    $result[$this_key] = array();
                }

                $result[$this_key][] = $pos1;

                $offset = $pos2 + $L2;
            } else {
                $pos1 = false;
            }
        }
    } while($pos1 !== false );

    return $result;
}
?>
Rich Deeson 26-Apr-2007 03:58
Here's a somewhat more efficient way to truncate a string at the end of a word.
This will end the string on the last dot or last space, whichever is closer to
the cut off point. In some cases, a full stop may not be followed by a space eg
when followed by a HTML tag.

<?php
    $shortstring = substr($originalstring, 0, 400);
    $lastdot = strrpos($shortstring, ".");
    $lastspace = strrpos($shortstring, " ");
    $shortstring = substr($shortstring, 0, ($lastdot > $lastspace? $lastdot :
$lastspace));
?>

Obviously, if you only want to split on a space, you can simplify this:

<?php
    $shortstring = substr($originalstring, 0, 400);
    $shortstring = substr($shortstring, 0, strrpos($shortstring, " "));
?>
sinai [at] simnet [dot] is 11-Apr-2007 12:35
If you want to check for either IE6 or 7 individually.

<?php

function browserIE($version)
{
  if($version == 6 || $version == 7)
  {
    $browser = strpos($_SERVER['HTTP_USER_AGENT'], "MSIE ".$version.".0;");
          
    if($browser == true)
    {
      return true;
    }
    else
    {
      return false;
    }
  else
  {
    return false;
}

?>
gal_chen123 at hotmail dot co dot il 03-Apr-2007 04:57
this function returns the text between 2 strings:

<?php
function get_between ($text, $s1, $s2) {
    $mid_url = "";
    $pos_s = strpos($text,$s1);
    $pos_e = strpos($text,$s2);
    for ( $i=$pos_s+strlen($s1) ; ( ( $i < ($pos_e)) && $i < strlen($text) ) ;
$i++ ) {
        $mid_url .= $text[$i];
    }
    return $mid_url;
}
?>

if $s1 or $s2 are not found, $mid_url will be empty
to add an offset, simply compare $pos_s to the offset, and only let it continue
if the offset is smaller then $pos_s.
jamie at jamiechong dot ca 19-Jan-2007 08:15
Try this function to find the first position of needle before a given offset.

For example:
<?php
$s = "This is a test a is This";
$offset = strpos($s, "test");

strnpos($s, "is", $offset);  // returns 17
strnpos($s, "is", -$offset); // returns 5

// Works just like strpos if $offset is positive.
// If $offset is negative, return the first position of needle
// before before $offset.
function strnpos($haystack, $needle, $offset=0)
{
    if ($offset>=0)
        $result=strpos($haystack, $needle, $offset);
    else
    {
        $offset=strlen($haystack)+$offset;
        $haystack=strrev($haystack);
        $needle=strrev($needle);
        $result=strpos($haystack, $needle, $offset);
        if ($result!==false)
        {
            $result+=strlen($needle);
            $result=strlen($haystack)-$result;
        }
    }
    return $result;
}

?>
koteskie at gmail dot com 18-Dec-2006 10:31
I've been looking at previous posts and came up with this function to find the
start and end off an certain occurance or all occurances of needle within
haystack.

I've made some minor tweaks to the code itself, like  counting the length of
needle only once and counting the result set array instead of using a count
variable.

I also added a length parameter to the result set to use in a following
substr_replace call etc...

<?php

function strpos_index($haystack = '',$needle = '',$offset = 0,$limit =
99,$return = null)
{
    $length = strlen($needle);
    $occurances = array();
    while((($count = count($occurances)) < $limit) && (false !== ($offset =
strpos($haystack,$needle,$offset))))
    {
        $occurances[$count]['length'] = $length;
        $occurances[$count]['start'] = $offset;
        $occurances[$count]['end'] = $offset = $offset + $length;
    }
    return $return === null ? $occurances : $occurances[$return];
}
       
?>
spinicrus at gmail dot com 14-Oct-2006 05:58
if you want to get the position of a substring relative to a substring of your
string, BUT in REVERSE way:

<?php

function strpos_reverse_way($string,$charToFind,$relativeChar) {
    //
    $relativePos = strpos($string,$relativeChar);
    $searchPos = $relativePos;
    $searchChar = '';
    //
    while ($searchChar != $charToFind) {
        $newPos = $searchPos-1;
        $searchChar = substr($string,$newPos,strlen($charToFind));
        $searchPos = $newPos;
    }
    //
    if (!empty($searchChar)) {
        //
        return $searchPos;
        return TRUE;
    }
    else {
        return FALSE;
    }
    //
}

?>
admin at xylotspace dot com 27-Sep-2006 02:33
Yay! I came up with a very useful function. This finds a beginning marker and
an ending marker (the first after the beginning marker), and returns the
contents between them. You specify an initial position in order to tell it
where to start looking. You can use a while() or for() loop to get all
occurence of a certain string within a string (for example, taking all
hyperlinks in a string of HTML code)...

<?php
function get_middle($source, $beginning, $ending, $init_pos) {
    $beginning_pos = strpos($source, $beginning, $init_pos);
    $middle_pos = $beginning_pos + strlen($beginning);
    $ending_pos = strpos($source, $ending, $beginning_pos + 1);
    $middle = substr($source, $middle_pos, $ending_pos - $middle_pos);
    return $middle;
}
?>

For example, to find the URL of the very first hyperlink in an HTML string
$data, use:

$first_url = get_middle($data, '<a href="', '"', 0);

It's done wonders for scraping HTML pages with certain tools on my website.
chasesan at gmail dot com 12-Jul-2006 10:48
You can use strpos to produce a funciton that will find the nth instance of a
certain string within a string. Personally I find this function almost more
useful then strpos itself.

I kinda wish they would put it stock into php but I doupt thats gonna happen
any time soon. ^_^

Here is da code:
<?php
//just like strpos, but it returns the position of the nth instance of the
needle (yay!)
function strpos2($haystack, $needle, $nth = 1)
{
    //Fixes a null return if the position is at the beginning of input
    //It also changes all input to that of a string ^.~
    $haystack = ' '.$haystack;
    if (!strpos($haystack, $needle))
        return false;
    $offset=0;
    for($i = 1; $i < $nth; $i++)
        $offset = strpos($haystack, $needle, $offset) + 1;
    return strpos($haystack, $needle, $offset) - 1;
}
?>
samuraj at xmail dot cz 24-Dec-2005 09:38
there was a code (from wodzuY2k at interia dot pl) removing all between
<script> tags..
but it didn't work if the tag begins like <SCRIPT language=javascript type=text
/javascript>

here is function removing all between "<script"  and  "/script>"

<?php

function remove_js($contents)           
{
  while(true)
  {
   $begPos = strpos($contents,"<script");
   if ($begPos===false) break; //all tags were found & replaced.
   $endPos = strpos($contents,"/script>",$begPos+strlen("<script"));
   $tmp = substr($contents,0,$begPos);
   $tmp .= substr($contents,$endPos+strlen("script>"));
   $contents = $tmp;
   if ($loopcontrol++>100) break; //loop infinity control
   continue;  //search again
  }
  return $contents;

}

?>
Virtual Hunter root(at)autocrash(dot)ru 23-Dec-2005 03:44
If you want to find positions of all needle's in haystack,
you can use this one:

<?php
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

But mind, that it will find from second char. You must use $pos=-1; before you
want search from first char.

<?php
$haystack="one two three one two three one two three one two three one";
$needle="one";

$pos=-1;
while (($pos=strpos($haystack,$needle,$pos+1))!==false) $pos_array[$i++]=$pos;
?>

RESULT:

$pos_array[0] = 0
$pos_array[1] = 14
$pos_array[2] = 28
$pos_array[3] = 42
$pos_array[4] = 56
csaba at alum dot mit dot edu 21-Nov-2005 02:00
<?php
function nthPos ($str, $needles, $n=1) {
    //    finds the nth occurrence of any of $needles' characters in $str
    //  returns -1 if not found; $n<0 => count backwards from end
    //  e.g. $str = "c:\\winapps\\morph\\photos\\Party\\Phoebe.jpg";
    //       substr($str, nthPos($str, "/\\:", -2)) => \Party\Phoebe.jpg
    //       substr($str, nthPos($str, "/\\:", 4)) => \photos\Party\Phoebe.jpg
    $pos = -1;
    $size = strlen($str);
    if ($reverse=($n<0)) { $n=-$n; $str = strrev($str); }
    while ($n--) {
    $bestNewPos = $size;
    for ($i=strlen($needles)-1;$i>=0;$i--) {
        $newPos = strpos($str, $needles[$i], $pos+1);
        if ($newPos===false) $needles = substr($needles,0,$i) . substr
($needles,$i+1);
        else $bestNewPos = min($bestNewPos,$newPos); }
    if (($pos=$bestNewPos)==$size) return -1; }
    return $reverse ? $size-1-$pos : $pos;
}
?>

Csaba Gabor from Vienna
dale at ucsc dot edu 11-Nov-2005 10:28
if you want need a fast function to find the first occurrence of any ch element
of an needle array this function might be of use:
<?php
$eurl = strpos_needle_array($text, array('"'=>0,'\''=>0,'>'=>0, ' '=>0, "\n"=>
0), $surl);

function strpos_needle_array(& $text, $needle_ary, $offset=0){   
    for($ch_pos=$offset;$ch_pos<strlen($text);$ch_pos++){
        if(isset($needle_ary[$text[$ch_pos]])){
            return $ch_pos;
        }
    }
    return false;
}
?>
info at quantummechanic dot com 06-Oct-2005 12:42
this function takes a space-deliminted string as a list of potential needles
and runs it against another string as a haystack.

the number of positive matches of needles within the haystack is returned as a
rounded percentile.

<?php
function keyMatch($needles,$haystack) {
    $nArray=split(" ",$needles);
    $found=0;
    $best=count($nArray);
      for($i=0;$i<count($nArray);$i++) {
        $pzn=strpos(strtoupper($haystack),strtoupper($nArray[$i]));
        if ($pzn>-1) { $found++; }
       }
    $pct=($found*100)/$best;
    return round($pct);
}

$test = keyMatch("the quick wolf","the quick brown fox jumps over the lazy
dog");
echo($test);
?>

RESULT:

67

(because "the" and "quick" were found but "wolf" was not)
webKami [at] akdomains.com 31-Mar-2005 03:06
Str Pos Nth (Position of nth occurance of a string)
A handy function to get the position of nth occurance of a substring in a
string, with an optional param to make it case insenstive. I am calling it
strposnth, suggestions welcome.

Third optional parameter gets the value of n, e.g puting in 2 will return
position of second occurance of needle in haystack: Valid inputs (1 = default)
2,3,4.....

Fourth optional parameter can be used to specify the function as case
insenstive: Valid inputs (0 = case senstive = default) 1 = case insenstive.

Code:

<?php

function strposnth($haystack, $needle, $nth=1, $insenstive=0)
{
    //if its case insenstive, convert strings into lower case
    if ($insenstive) {
        $haystack=strtolower($haystack);
        $needle=strtolower($needle);
    }
    //count number of occurances
    $count=substr_count($haystack,$needle);
   
    //first check if the needle exists in the haystack, return false if it does
not
    //also check if asked nth is within the count, return false if it doesnt
    if ($count<1 || $nth > $count) return false;

   
    //run a loop to nth number of accurance
    for($i=0,$pos=0,$len=0;$i<$nth;$i++)
    {   
        //get the position of needle in haystack
        //provide starting point 0 for first time ($pos=0, $len=0)
        //provide starting point as position + length of needle for next time
        $pos=strpos($haystack,$needle,$pos+$len);

        //check the length of needle to specify in strpos
        //do this only first time
        if ($i==0) $len=strlen($needle);
     }
   
    //return the number
    return $pos;
}

?>

I just construct this function after trying to search a similar one to use in a
shopping cart. I am using this to display a limited number of lines or text for
featured products. My aim is to limit the product description to 100 characters
or 3 lines / 3 list items whichever is less.

Example code goes like this

<?php

//get the product description from recordset
$text=$row['product_desc'];

//strip off text if its longer than 100 characters
if (strlen($text)>100) $text=substr($text,0,100)." ...";

//get ending of the third line
$pos=strposnth($text,"\n",3,1);

//if found, strip off text after that
if($pos) $text=substr($text,0,$pos);

//nl2li (new line 2 list) this function converts the \n seprated lines of text
into sorted or unsorted lists
//I have posted this function in nl2br
//http://uk2.php.net/manual/en/function.nl2br.php
$text=nl2li($text);
echo $text;

?>

Examples:

<?php
strposnth("I am trying to go now.","o"); // returns 13 (strpos behavior)
strposnth("I am trying to go now.","O"); // returns false (strpos behavior)
strposnth("I am trying to go now.","o",2); // returns 16 (second occurance)
strposnth("I am trying to go now.","o",7); // returns false (occurance count is
less than 7)
strposnth("I am trying to go now.","O",1,1); // returns 13 (stripos behavior)
strposnth("I am trying to go now.","O",3,1); // returns 19 (stripos behavior +
nth occurance)
?>

Regards,

webKami [at] akdomains.com
arias at elleondeoro dot com 07-Feb-2005 02:33
If you want to get all positions in an array, you can use this function. If the
optional parameter count is especified, the function will put there the number
of matches.

<?php
function strallpos($pajar, $aguja, $offset=0, &$count=null) {
  if ($offset > strlen($pajar)) trigger_error("strallpos(): Offset not
contained in string.", E_USER_WARNING);
  $match = array();
  for ($count=0; (($pos = strpos($pajar, $aguja, $offset)) !== false);
$count++) {
    $match[] = $pos;
    $offset = $pos + strlen($aguja);
  }
  return $match;
}
?>
admin at bwongar dot com 21-Jan-2005 02:17
I created a useful function that returns an array with the positions within a
string. For more info, read the comments:
<?php
// Returns an array in this fashion:
// array(count => position)
function strpos_array($haystack, $needle){
   $kill    = 0;    // Kills while loop when changed
   $offset    = 0;    // Offset for strpos()
   $i        = 0;    // Counter, not iterator

   while ($kill === 0) {
       $i++;
       $result = strpos($haystack, $needle, $offset);

       if ($result === FALSE) {        // If result is false (no more instances
found), kill the while loop
           $kill = 1;
       } else {
           $array[$i] = $result;    // Set array
           $offset = $result + 1;    // Offset is set 1 character after
previous occurence
       }

   }

   return $array;

}
?>
takapz at flor dot it 03-Dec-2004 05:28
here a little function for tag parsing

<?php
function parsing($tag,$string) {
        $start=strpos($string,"<" . $tag . ">" );
        $start=$start + strlen("<" . $tag . ">");
         $end=(strpos($string, "</" . $tag . ">"));
         $num=  ($end - $start);
         $valore=substr($string,$start,$num);
          return $valore;
}
?>
philip 25-Aug-2004 10:52
Many people look for in_string which does not exist in PHP, so, here's the most
efficient form of in_string() (that works in both PHP 4/5) that I can think of:
<?php
function in_string($needle, $haystack, $insensitive = 0) {
    if ($insensitive) {
        return (false !== stristr($haystack, $needle)) ? true : false;
    } else {
        return (false !== strpos($haystack, $needle))  ? true : false;
    }
}
?>
php .at. wwwcrm .dot. com 19-Aug-2004 05:33
Watch out for type!

The following code will return "not matched", which is a little
counter-intuitive.

<?php
$val1=123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

When $val1 is cast to string, it behaves as you might expect:

<?php
$val1=(string)123;
$val2="123,456,789";
if (strpos($val2, $val1)!==false) echo "matched";
else echo "not matched";
?>

Hope this saves someone the couple of hours that it took me to spot it :-)

Regards,
Alex Poole
bishop 21-Apr-2004 10:38
Code like this:
<?php
if (strpos('this is a test', 'is') !== false) {
    echo "found it";
}
?>

gets repetitive, is not very self-explanatory, and most people handle it
incorrectly anyway. Make your life easier:

<?php
function str_contains($haystack, $needle, $ignoreCase = false) {
    if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
    }
    $needlePos = strpos($haystack, $needle);
    return ($needlePos === false ? false : ($needlePos+1));
}
?>

Then, you may do:
<?php
// simplest use
if (str_contains('this is a test', 'is')) {
    echo "Found it";
}

// when you need the position, as well whether it's present
$needlePos = str_contains('this is a test', 'is');
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}

// you may also ignore case
$needlePos = str_contains('this is a test', 'IS', true);
if ($needlePos) {
    echo 'Found it at position ' . ($needlePos-1);
}
?>
amy_w at gmx dot de 02-Apr-2004 05:41
You can use this function to find ANY occurence of a string in an array - no
matter if it is just part of one of the array elements.

it returns the key of the first found occurence or false

<?php
function search_array($needle,$haystacks) {
    $found=false;
    foreach ($haystacks as $key => $haystack) {
        if (!(strpos($haystack,$needle)===false)) {
            $found=$key;
            break;
        }
    }
    return ($found);
}
?>
ebypdx at comcast dot net 10-Mar-2004 01:26
counting the occurrences of a substring, recursive-style instead of looping.

<?php
function countSubstrs($haystack, $needle)
{
    return (($p = strpos($haystack, $needle)) === false) ? 0 : (1 +
countSubstrs(substr($haystack, $p+1), $needle));
}
?>
kingbusiness at hotmail dot com 18-Dec-2003 06:34
A simple function to find the number of occurances in a string within a string

<?php
function StringCount($searchstring, $findstring)
{
    return (strpos($searchstring, $findstring) === false ? 0 :  count(split
($findstring, $searchstring)) - 1);
}
?>
justin at visunet dot ie 01-Oct-2003 04:20
Function:
stripos_words($haystack,'words in string')

This function finds and reports positions of all words in supplied haystack. It
returns the results as an array. The array has the following structure.

Array
(
    [69] => Array
        (
            [start] => 69
            [end] => 74
            [word] => honey
        )

    [226] => Array
        (
            [start] => 226
            [end] => 232
            [word] => cobweb
        )
}

Where, for convenience, the main key also contains the positions of each found
word occurrence.

If you want the main key to be 0,1,2,3,etc then set the third parameter
($pos_as_key) to false;

Hope this is of help to someone.

Cheers,
Justin :)

<?php
function stripos_words($haystack,$needles='',$pos_as_key=true)
{
    $idx=0; // Used if pos_as_key is false
   
    // Convert full text to lower case to make this case insensitive
    $haystack = strtolower($haystack);
   
    // Split keywords and lowercase them
    foreach ( preg_split('/[^\w]/',strtolower($needles)) as $needle )
    {
        // Get all occurences of this keyword
        $i=0; $pos_cur=0; $pos_found=0;
        while (  $pos_found !== false && $needles !== '')
        {
            // Get the strpos of this keyword (if thereis one)
            $pos_found = strpos(substr($haystack,$pos_cur),$needle);
            if ( $pos_found !== false )
            {
                // Set up key for main array
                $index = $pos_as_key ? $pos_found+$pos_cur : $idx++;
               
                // Populate main array with this keywords positional data
                $positions[$index]['start'] = $pos_found+$pos_cur;
                $pos_cur += ($pos_found+strlen($needle));
                $positions[$index]['end']   = $pos_cur;
                $positions[$index]['word'] = $needle;
                $i++;
            }
        }
    }

    // If we found anything then sort the array and return it
    if ( isset($positions) )
    {
        ksort($positions);
        return $positions;
    }

    // If nothign was found then return false
    return false;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 16 18:11:54 2011 UTC
haystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。

    注意:

    この関数は大文字小文字を区別することに注意してください。大文字小文字を区別
    しない検索を行う場合は、stristr() を使用してください。

    注意:

    もし特定の haystack に needle があるかどうかを調べるだけの場合、より高速で
    メモリ消費も少ない strpos() を代わりに使用してください。

パラメータ

haystack

    入力文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

before_needle

    TRUE にすると、strstr() の返り値は、haystack の中で最初に needle があらわれ
    る箇所より前の部分となります。

返り値

部分文字列を返します。 needle が見つからない場合は FALSE を返します。

変更履歴

バージョン                          説明
5.3.0      オプションの before_needle パラメータが追加されました。
4.3.0      strstr() がバイナリセーフとなりました。

例

例1 strstr() の例

<?php
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // @example.com と表示します

$user = strstr($email, '@', true); // PHP 5.3.0 以降
echo $user; // name と表示します
?>

参考

  • preg_match() - 正規表現によるマッチングを行う
  • stristr() - 大文字小文字を区別しない strstr
  • strpos() - 文字列が最初に現れる場所を見つける
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す



strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes strstr
hm2k at php dot net 02-Aug-2010 03:50
Added the optional parameter before_needle.

Now supported in PHP_Compat through the php_compat_strstr() function.

See: http://pear.php.net/package/PHP_Compat
Marcio Angel Medina 14-Aug-2009 08:05
use it to emulate the before_needle php V5.3

<?php
//$h = haystack, $n = needle
function strstrb($h,$n){
    return array_shift(explode($n,$h,2));
}
//sample
echo strstrb('qwe,asd,zxc',',');
// outputs: qwe
?>

works perfect !!!
Marcio Angel Medina 08-Aug-2009 04:28
use it to emulate the before_needle php V5.3
<?php
//$h = haystack, $n = needle
function strstrb($h,$n){
    return strrev(array_pop(explode($n,strrev($h))));
}
//sample
echo strstrb('qwe,asd,zxc',',');
// outputs: qwe
?>
sheyd at advisa dot fr 09-Jul-2009 09:19
Before PHP 5.3 to emulate $before_needle you can already have this :
 
<?php
function rstrstr($haystack, $needle)
{
    return substr(strrev(strstr(strrev($haystack), strrev($needle))), 0,
-strlen($needle));
}
?>
dpac dot mittal at gmail dot com 30-May-2009 12:37
You can emulate the $before_needle before v5.3 in a very very simple way. Just
applied a bit of common sense.

Here's the code:

<?php
function strstrbef($haystack, $needle)
{
    $needle=strrev($needle);
    $haystack=strrev($haystack);
    $result=strstr($haystack,$needle);
    $result=substr($haystack,strlen($needle));
    $result=strrev($result);
    return $result;
}
?>
w3b_monk3y at yahoo dot com 20-Jan-2009 08:28
If you want to emulate strstr's new before_needle parameter pre 5.3 strtok is
faster than using strpos to find the needle and cutting with substr. The amount
of difference varies with string size but strtok is always faster.
tim 26-Nov-2007 12:42
I simplified prafe at prafesplace dot com's function:

<?php
function strstrbi($haystack, $needle, $before_needle=FALSE, $include_needle=
TRUE, $case_sensitive=FALSE) {
 //Find the position of $needle
 if($case_sensitive) {
  $pos=strpos($haystack,$needle);
 } else {
  $pos=strpos(strtolower($haystack),strtolower($needle));
 }
 
 //If $needle not found, abort
 if($pos===FALSE) return FALSE;
 
 //Adjust $pos to include/exclude the needle
 if($before_needle==$include_needle) $pos+=strlen($needle);
 
 //get everything from 0 to $pos?
 if($before_needle) return substr($haystack,0,$pos);
 
 //otherwise, go from $pos to end
 return substr($haystack,$pos);
}
?>

It's now 600 bytes, down from 2k.

Also, here are replacements for strstr and stristr:

<?php
function strstr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos($haystack,$needle))===FALSE) return FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}

function stristr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos(strtolower($haystack),strtolower($needle)))===FALSE) return
FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}
?>
brett dot jr dot alton at gmail dot com 25-Nov-2007 04:02
For the needle_before (first occurance) parameter when using PHP 5.x or less,
try:

<?php
$haystack = 'php-homepage-20071125.png';
$needle = '-';
$result = substr($haystack, 0, strpos($haystack, $needle)); // $result = php
?>
prafe at prafesplace dot com 22-Nov-2007 05:14
If you want to use the $before_needle parameter that's only in PHP 5.3.0, I
found a way to use it in lower versions.

The code is a bit hefty, but it works. It also has added $include_needle and
$case_sensitive.

<?php
// ==== I don't guarantee this is faster than the PHP 6 before needle, ====
// ====  but it works for PHP below 6 atleast. ====
// ==== IT ALSO HAS INCLUDE NEEDLE BOOLEAN.. ====
function strstrbi($haystack,$needle,$before_needle,
$include_needle,$case_sensitive)
{
  $strstr = ($case_sensitive) ? 'strstr' : 'stristr';
  if($before_needle!=true && $before_needle!=false && isset($before_needle)){
      die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' :  parameter
'. chr(39).'$before_needle'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$before_needle'

  if($include_needle!=true && $include_needle!=false && isset($include_needle))
{
    die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' : parameter '.
chr(39).'$include_needle'.chr(39). ' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$include_needle'

  if($case_sensitive!=true && $case_sensitive!=false && isset($case_sensitive))
{
    die('PHP: Error in function '.chr(39).'$strstrbi' .chr(39).' : parameter '.
chr(39).'$case_sensitive'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$case_sensitive'

  if(!isset($before_needle)){
    $before_needle=false;
  }

  if(!isset($include_needle)){
    $include_needle=true;
  }

  if(!isset($case_sensitive)){
    $case_sensitive=false;
  }

  switch($before_needle){
    case true:
      switch($include_needle){
        case true:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),0));
          break;
        // END case true : $include_needle
        case false:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),1));
          break;
        // END case false : $include_needle
      }
      break;
    // END case true : $before_needle
    case false:
      switch($include_needle){
        case true:
          $ret=$strstr($haystack,$needle);
          break;
        // END case true: $include_needle
        case false:
          $ret=substr($strstr($haystack,$needle),1);
          break;
        // END case false: $include_needle
    }
    break;
    // END case false : $before_needle
  }

  if(!empty($ret)){
    return $ret;
  }else{
    return false;
  }
}
// === END FUNCTION 'strstrbi'

// Example

$email  = 'user@example.com';
$domain = strstrbi($email, '@', false, false, false);
echo $domain; // prints example.com

$user = strstrbi($email, '@', true, false, false);
echo $user; // prints user
?>
root at mantoru dot de 10-Nov-2007 11:22
Please note that $needle is included in the return string, as shown in the
example above. This ist not always desired behavior, _especially_ in the
mentioned example. Use this if you want everything AFTER $needle.

<?php
function strstr_after($haystack, $needle, $case_insensitive = false) {
    $strpos = ($case_insensitive) ? 'stripos' : 'strpos';
    $pos = $strpos($haystack, $needle);
    if (is_int($pos)) {
        return substr($haystack, $pos + strlen($needle));
    }
    // Most likely false or null
    return $pos;
}

// Example
$email = 'name@example.com';
$domain = strstr_after($email, '@');
echo $domain; // prints example.com
?>
gigaman2003 at halfempty dot co dot uk 24-Feb-2007 08:48
Often you will need to find all occurrences of a string (for security escapes
and such)

So I wrote this function to return an array with the locations of all the
occurrences. Almost like an advanced strstr.

<?php
function findall($needle, $haystack)
{
    //Setting up
    $buffer=''; //We will use a 'frameshift' buffer for this search
    $pos=0; //Pointer
    $end = strlen($haystack); //The end of the string
    $getchar=''; //The next character in the string
    $needlelen=strlen($needle); //The length of the needle to find (speeds up
searching)
    $found = array(); //The array we will store results in
   
    while($pos<$end)//Scan file
    {
        $getchar = substr($haystack,$pos,1); //Grab next character from pointer
        if($getchar!="\n" || buffer<$needlelen) //If we fetched a line break,
or the buffer is still smaller than the needle, ignore and grab next character
        {
            $buffer = $buffer . $getchar; //Build frameshift buffer
            if(strlen($buffer)>$needlelen) //If the buffer is longer than the
needle
            {
                $buffer = substr($buffer,-$needlelen);//Truncunate backwards to
needle length (backwards so that the frame 'moves')
            }
            if($buffer==$needle) //If the buffer matches the needle
            {
                $found[]=$pos-$needlelen+1; //Add the location of the needle to
the array. Adding one fixes the offset.
            }
        }
        $pos++; //Increment the pointer
    }
    if(array_key_exists(0,$found)) //Check for an empty array
    {
        return $found; //Return the array of located positions
    }
    else
    {
        return false; //Or if no instances were found return false
    }
}
?>

Haven't had the chance to speed test it, but many optimizations should be
possible. It just works enough for me. Hope it saves someone a lot of time.
06-Jun-2005 04:13
suggestion for [leo dot nard at free dot fr]:
to be able to cut the string without having the html entities being cut in
half, use this instead:

<?php

$oldstr = "F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller
skandinaviska (eller Franska, f&ouml;r den delen) tecken, kan man g&ouml;ra s&
aring;h&auml;r...";

$length = 50;

# First, first we want to decode the entities (to get them as usual chars),
then cut the string at for example 50 chars, and then encoding the result of
that again.

# Or, as I had it done, in one line:
$newstr = htmlentities(substr(html_entity_decode($oldstr), 0, $length));
$newstr2 = substr($oldstr, 0, $length);
# It's not quite as much code as the snippet you've coded to remove the
half-portions... ;)
# Hopefully somebody finds this useful!
echo "Without the decode-encode snippet:
$newstr2

With the decode-encode snippet:
$newstr";
?>

The above outputs this:

Without the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&ar

With the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller skandin

First post in this db ;)
Best regards, Mikael R nn, FIN
leo dot nard at free dot fr 24-May-2005 09:12
When encoding ASCII strings to HTML size-limited strings, sometimes some HTML
special chars were cut.

For example, when encoding "��" to a string of size 10, you would get: "à&a" =>
the second character is cut.

This function will remove any unterminated HTML special characters from the
string...

<?php
function cut_html($string)
{
    $a=$string;

    while ($a = strstr($a, '&'))
    {
        echo "'".$a."'\n";
        $b=strstr($a, ';');
        if (!$b)
        {
            echo "couper...\n";
            $nb=strlen($a);
            return substr($string, 0, strlen($string)-$nb);
        }
        $a=substr($a,1,strlen($a)-1);
    }
    return $string;
}
?>
Romuald Brunet 21-Jan-2004 08:25
Regarding the note of the manual concerning the speed of strstr against strpos,
for people who wants to check a needle occurs within haystack, it apprears that
strstr() is in facts faster than strpos().

Example:
<?php
// [VERY] Quick email check:
if ( strstr("email@domain.tld", "@") ) {
// Ok
}
?>

is faster than

<?php
if ( strpos("email@domain.tld", "@") !== FALSE ) {
// Ok
}

Without using the true equality with !==, strpos() is faster. But then if the
haystack starts with needle the condition whould not be met.
php at silisoftware dot com 14-Feb-2003 11:37
PHP versions before 4.3.0 (tested on 4.2.2 and 4.2.3) return the $haystack from
$needle only up to the first null character. So for example:

<?php
$string = strstr("one#two\x00three", "#");
// PHP 4.2.x:  $string contains "#two"
// PHP 4.3.0:  $string contains "#two\x00three"
?>

If you're trying to match nulls, you will probably get back an empty string:

<?php
$string = strstr("one#two\x00three", "\x00");
// PHP 4.2.x:  $string contains ""
// PHP 4.3.0:  $string contains "\x00three"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 16 18:11:54 2011 UTC
search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
strstr

(PHP 4, PHP 5)

strstr — 文字列が最初に現れる位置を見つける

説明

string strstr ( string $haystack , mixed $needle [, bool $before_needle = false
] )

haystack の中で needle が最初に現れる場所から文字列の終わりまでを返します。

    注意:

    この関数は大文字小文字を区別することに注意してください。大文字小文字を区別
    しない検索を行う場合は、stristr() を使用してください。

    注意:

    もし特定の haystack に needle があるかどうかを調べるだけの場合、より高速で
    メモリ消費も少ない strpos() を代わりに使用してください。

パラメータ

haystack

    入力文字列。

needle

    needle が文字列でない場合は、それを整数に変換し、その番号に対応する文字とし
    て扱います。

before_needle

    TRUE にすると、strstr() の返り値は、haystack の中で最初に needle があらわれ
    る箇所より前の部分となります。

返り値

部分文字列を返します。 needle が見つからない場合は FALSE を返します。

変更履歴

バージョン                          説明
5.3.0      オプションの before_needle パラメータが追加されました。
4.3.0      strstr() がバイナリセーフとなりました。

例

例1 strstr() の例

<?php
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // @example.com と表示します

$user = strstr($email, '@', true); // PHP 5.3.0 以降
echo $user; // name と表示します
?>

参考

  • preg_match() - 正規表現によるマッチングを行う
  • stristr() - 大文字小文字を区別しない strstr
  • strpos() - 文字列が最初に現れる場所を見つける
  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr() - 文字列の一部分を返す



strtok> <strspn
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes strstr
hm2k at php dot net 02-Aug-2010 03:50
Added the optional parameter before_needle.

Now supported in PHP_Compat through the php_compat_strstr() function.

See: http://pear.php.net/package/PHP_Compat
Marcio Angel Medina 14-Aug-2009 08:05
use it to emulate the before_needle php V5.3

<?php
//$h = haystack, $n = needle
function strstrb($h,$n){
    return array_shift(explode($n,$h,2));
}
//sample
echo strstrb('qwe,asd,zxc',',');
// outputs: qwe
?>

works perfect !!!
Marcio Angel Medina 08-Aug-2009 04:28
use it to emulate the before_needle php V5.3
<?php
//$h = haystack, $n = needle
function strstrb($h,$n){
    return strrev(array_pop(explode($n,strrev($h))));
}
//sample
echo strstrb('qwe,asd,zxc',',');
// outputs: qwe
?>
sheyd at advisa dot fr 09-Jul-2009 09:19
Before PHP 5.3 to emulate $before_needle you can already have this :
 
<?php
function rstrstr($haystack, $needle)
{
    return substr(strrev(strstr(strrev($haystack), strrev($needle))), 0,
-strlen($needle));
}
?>
dpac dot mittal at gmail dot com 30-May-2009 12:37
You can emulate the $before_needle before v5.3 in a very very simple way. Just
applied a bit of common sense.

Here's the code:

<?php
function strstrbef($haystack, $needle)
{
    $needle=strrev($needle);
    $haystack=strrev($haystack);
    $result=strstr($haystack,$needle);
    $result=substr($haystack,strlen($needle));
    $result=strrev($result);
    return $result;
}
?>
w3b_monk3y at yahoo dot com 20-Jan-2009 08:28
If you want to emulate strstr's new before_needle parameter pre 5.3 strtok is
faster than using strpos to find the needle and cutting with substr. The amount
of difference varies with string size but strtok is always faster.
tim 26-Nov-2007 12:42
I simplified prafe at prafesplace dot com's function:

<?php
function strstrbi($haystack, $needle, $before_needle=FALSE, $include_needle=
TRUE, $case_sensitive=FALSE) {
 //Find the position of $needle
 if($case_sensitive) {
  $pos=strpos($haystack,$needle);
 } else {
  $pos=strpos(strtolower($haystack),strtolower($needle));
 }
 
 //If $needle not found, abort
 if($pos===FALSE) return FALSE;
 
 //Adjust $pos to include/exclude the needle
 if($before_needle==$include_needle) $pos+=strlen($needle);
 
 //get everything from 0 to $pos?
 if($before_needle) return substr($haystack,0,$pos);
 
 //otherwise, go from $pos to end
 return substr($haystack,$pos);
}
?>

It's now 600 bytes, down from 2k.

Also, here are replacements for strstr and stristr:

<?php
function strstr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos($haystack,$needle))===FALSE) return FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}

function stristr($haystack, $needle, $before_needle=FALSE) {
 //Find position of $needle or abort
 if(($pos=strpos(strtolower($haystack),strtolower($needle)))===FALSE) return
FALSE;

 if($before_needle) return substr($haystack,0,$pos+strlen($needle));
 else return substr($haystack,$pos);
}
?>
brett dot jr dot alton at gmail dot com 25-Nov-2007 04:02
For the needle_before (first occurance) parameter when using PHP 5.x or less,
try:

<?php
$haystack = 'php-homepage-20071125.png';
$needle = '-';
$result = substr($haystack, 0, strpos($haystack, $needle)); // $result = php
?>
prafe at prafesplace dot com 22-Nov-2007 05:14
If you want to use the $before_needle parameter that's only in PHP 5.3.0, I
found a way to use it in lower versions.

The code is a bit hefty, but it works. It also has added $include_needle and
$case_sensitive.

<?php
// ==== I don't guarantee this is faster than the PHP 6 before needle, ====
// ====  but it works for PHP below 6 atleast. ====
// ==== IT ALSO HAS INCLUDE NEEDLE BOOLEAN.. ====
function strstrbi($haystack,$needle,$before_needle,
$include_needle,$case_sensitive)
{
  $strstr = ($case_sensitive) ? 'strstr' : 'stristr';
  if($before_needle!=true && $before_needle!=false && isset($before_needle)){
      die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' :  parameter
'. chr(39).'$before_needle'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$before_needle'

  if($include_needle!=true && $include_needle!=false && isset($include_needle))
{
    die('PHP: Error in function '.chr(39).'$strstrbi'. chr(39).' : parameter '.
chr(39).'$include_needle'.chr(39). ' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$include_needle'

  if($case_sensitive!=true && $case_sensitive!=false && isset($case_sensitive))
{
    die('PHP: Error in function '.chr(39).'$strstrbi' .chr(39).' : parameter '.
chr(39).'$case_sensitive'.chr(39).' is not a supplied as a boolean.');
  } // END BOOLEAN CHECK '$case_sensitive'

  if(!isset($before_needle)){
    $before_needle=false;
  }

  if(!isset($include_needle)){
    $include_needle=true;
  }

  if(!isset($case_sensitive)){
    $case_sensitive=false;
  }

  switch($before_needle){
    case true:
      switch($include_needle){
        case true:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),0));
          break;
        // END case true : $include_needle
        case false:
          $temp=strrev($haystack);
          $ret=strrev(substr($strstr($temp,$needle),1));
          break;
        // END case false : $include_needle
      }
      break;
    // END case true : $before_needle
    case false:
      switch($include_needle){
        case true:
          $ret=$strstr($haystack,$needle);
          break;
        // END case true: $include_needle
        case false:
          $ret=substr($strstr($haystack,$needle),1);
          break;
        // END case false: $include_needle
    }
    break;
    // END case false : $before_needle
  }

  if(!empty($ret)){
    return $ret;
  }else{
    return false;
  }
}
// === END FUNCTION 'strstrbi'

// Example

$email  = 'user@example.com';
$domain = strstrbi($email, '@', false, false, false);
echo $domain; // prints example.com

$user = strstrbi($email, '@', true, false, false);
echo $user; // prints user
?>
root at mantoru dot de 10-Nov-2007 11:22
Please note that $needle is included in the return string, as shown in the
example above. This ist not always desired behavior, _especially_ in the
mentioned example. Use this if you want everything AFTER $needle.

<?php
function strstr_after($haystack, $needle, $case_insensitive = false) {
    $strpos = ($case_insensitive) ? 'stripos' : 'strpos';
    $pos = $strpos($haystack, $needle);
    if (is_int($pos)) {
        return substr($haystack, $pos + strlen($needle));
    }
    // Most likely false or null
    return $pos;
}

// Example
$email = 'name@example.com';
$domain = strstr_after($email, '@');
echo $domain; // prints example.com
?>
gigaman2003 at halfempty dot co dot uk 24-Feb-2007 08:48
Often you will need to find all occurrences of a string (for security escapes
and such)

So I wrote this function to return an array with the locations of all the
occurrences. Almost like an advanced strstr.

<?php
function findall($needle, $haystack)
{
    //Setting up
    $buffer=''; //We will use a 'frameshift' buffer for this search
    $pos=0; //Pointer
    $end = strlen($haystack); //The end of the string
    $getchar=''; //The next character in the string
    $needlelen=strlen($needle); //The length of the needle to find (speeds up
searching)
    $found = array(); //The array we will store results in
   
    while($pos<$end)//Scan file
    {
        $getchar = substr($haystack,$pos,1); //Grab next character from pointer
        if($getchar!="\n" || buffer<$needlelen) //If we fetched a line break,
or the buffer is still smaller than the needle, ignore and grab next character
        {
            $buffer = $buffer . $getchar; //Build frameshift buffer
            if(strlen($buffer)>$needlelen) //If the buffer is longer than the
needle
            {
                $buffer = substr($buffer,-$needlelen);//Truncunate backwards to
needle length (backwards so that the frame 'moves')
            }
            if($buffer==$needle) //If the buffer matches the needle
            {
                $found[]=$pos-$needlelen+1; //Add the location of the needle to
the array. Adding one fixes the offset.
            }
        }
        $pos++; //Increment the pointer
    }
    if(array_key_exists(0,$found)) //Check for an empty array
    {
        return $found; //Return the array of located positions
    }
    else
    {
        return false; //Or if no instances were found return false
    }
}
?>

Haven't had the chance to speed test it, but many optimizations should be
possible. It just works enough for me. Hope it saves someone a lot of time.
06-Jun-2005 04:13
suggestion for [leo dot nard at free dot fr]:
to be able to cut the string without having the html entities being cut in
half, use this instead:

<?php

$oldstr = "F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller
skandinaviska (eller Franska, f&ouml;r den delen) tecken, kan man g&ouml;ra s&
aring;h&auml;r...";

$length = 50;

# First, first we want to decode the entities (to get them as usual chars),
then cut the string at for example 50 chars, and then encoding the result of
that again.

# Or, as I had it done, in one line:
$newstr = htmlentities(substr(html_entity_decode($oldstr), 0, $length));
$newstr2 = substr($oldstr, 0, $length);
# It's not quite as much code as the snippet you've coded to remove the
half-portions... ;)
# Hopefully somebody finds this useful!
echo "Without the decode-encode snippet:
$newstr2

With the decode-encode snippet:
$newstr";
?>

The above outputs this:

Without the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&ar

With the decode-encode snippet:
F&ouml;r att klippa av en str&auml;ng som inneh&aring;ller skandin

First post in this db ;)
Best regards, Mikael R nn, FIN
leo dot nard at free dot fr 24-May-2005 09:12
When encoding ASCII strings to HTML size-limited strings, sometimes some HTML
special chars were cut.

For example, when encoding "��" to a string of size 10, you would get: "à&a" =>
the second character is cut.

This function will remove any unterminated HTML special characters from the
string...

<?php
function cut_html($string)
{
    $a=$string;

    while ($a = strstr($a, '&'))
    {
        echo "'".$a."'\n";
        $b=strstr($a, ';');
        if (!$b)
        {
            echo "couper...\n";
            $nb=strlen($a);
            return substr($string, 0, strlen($string)-$nb);
        }
        $a=substr($a,1,strlen($a)-1);
    }
    return $string;
}
?>
Romuald Brunet 21-Jan-2004 08:25
Regarding the note of the manual concerning the speed of strstr against strpos,
for people who wants to check a needle occurs within haystack, it apprears that
strstr() is in facts faster than strpos().

Example:
<?php
// [VERY] Quick email check:
if ( strstr("email@domain.tld", "@") ) {
// Ok
}
?>

is faster than

<?php
if ( strpos("email@domain.tld", "@") !== FALSE ) {
// Ok
}

Without using the true equality with !==, strpos() is faster. But then if the
haystack starts with needle the condition whould not be met.
php at silisoftware dot com 14-Feb-2003 11:37
PHP versions before 4.3.0 (tested on 4.2.2 and 4.2.3) return the $haystack from
$needle only up to the first null character. So for example:

<?php
$string = strstr("one#two\x00three", "#");
// PHP 4.2.x:  $string contains "#two"
// PHP 4.3.0:  $string contains "#two\x00three"
?>

If you're trying to match nulls, you will probably get back an empty string:

<?php
$string = strstr("one#two\x00three", "\x00");
// PHP 4.2.x:  $string contains ""
// PHP 4.3.0:  $string contains "\x00three"
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 16 17:11:43 2011 UTC

array() と同様に、この関数は実際には関数ではなく言語の構成要素です。 list() は
、単一の操作で一連の変数に値を代入するために使われます。

パラメータ

varname

    変数。

返り値

代入した配列を返します。

例

例1 list() の例

<?php

$info = array('コーヒー', '茶色', 'カフェイン');

// すべての変数の取得
list($drink, $color, $power) = $info;
echo "$drink の色は $color で、$power が含まれています。\n";

// 一部の変数の取得
list($drink, , $power) = $info;
echo "$drink には $power が含まれています。\n";

// 三番目のみの取得
list( , , $power) = $info;
echo "$power 欲しい!\n";

// list() は文字列では動作しません
list($bar) = "abcde";
var_dump($bar); // NULL
?>

例2 list() の使用法の例

<table>
 <tr>
  <th>社員氏名</th>
  <th>給与</th>
 </tr>

<?php

$result = mysql_query("SELECT id, name, salary FROM employees", $conn);
while (list($id, $name, $salary) = mysql_fetch_row($result)) {
    echo " <tr>\n" .
          "  <td><a href=\"info.php?id=$id\">$name</a></td>\n" .
          "  <td>$salary</td>\n" .
          " </tr>\n";
}

?>

</table>

例3 ネストした list() の使用法

<?php

list($a, list($b, $c)) = array(1, array(2, 3));

var_dump($a, $b, $c);

?>

int(1)
int(2)
int(3)

例4 配列の添字を使用した list() の例

<?php

$info = array('coffee', 'brown', 'caffeine');

list($a[0], $a[1], $a[2]) = $info;

var_dump($a);

?>

次のような出力になります(list() の文法に書かれた順番と、要素の順番の違いに注
意):

array(3) {
  [2]=>
  string(8) "caffeine"
  [1]=>
  string(5) "brown"
  [0]=>
  string(6) "coffee"
}

注意

警告

list()は、最も右のパラメータから値を代入します。プレーンな変数を使用している場
合には、このことを気にする必要はありません。しかし、添字配列を使用している場合
には、配列の添字の順番が list() に書いたものと同じく左から右となることを通常は
期待しますが、そうはなりません。この配列の添字は逆の順番となります。

    注意:

    list() は数値添字の配列のみを生成します。添字は 0 から始まります。

参考

  • each() - 配列から現在のキーと値のペアを返して、カーソルを進める
  • array() - 配列を生成する
  • extract() - 配列からシンボルテーブルに変数をインポートする



natcasesort> <ksort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes list
develop at dieploegers dot de 31-Mar-2010 11:37
Remember, that list starts from index 0. You can skip an index if you just
leave the column blank like this:

<?php
list(,$a,$b,$c) = array(1,2,3,4);
?>

You CAN'T (at least not in 5.3.1, what I have tested) set the column to null:

<?php
list(null,$a,$b,$c) = array(1,2,3,4);
?>

This will fail.
Anonymous 12-Mar-2010 05:29
Quick little function that is similar to list but for objects.

<?php
    function listObj() {
        $stack = debug_backtrace();
        if (isset($stack[0]['args'])) {
            $i = 0;
            $args = $stack[0]['args'];
            foreach ($args[0] as $key => $value)
                $args[++$i] = $value;
        }
    }

    class obj {public $var = "test"; public $vars = "test2"; function obj() {}}
    listObj(new obj, &$var, &$var2);
    echo $var, $var2;
?>
claude dot pache at gmail dot com 13-May-2009 10:26
A simple way to swap variables (correction of a note of mario dot mueller dot
work at gmail dot com below):
<?php
list($var1, $var2) = array($var2, $var1); // swaps the values of $var1 and
$var2
?>
Note that this is not equivalent to:
<?php
$var2 = $var1; $var1 = $var2; // $var1 and $var2 get both the old value of
$var1
?>
as one could fear. Indeed, the array is constructed with the values of $var1
and $var2 (and not with the variables $var1 and $var2 themselves) before the
assignment is carried out.

Similarly, it is possible to bypass the problem pointed by sasha in the
previous note by providing an expression rather than a variable on the
right-hand side of the assignment operator:
<?php
$var = array ("test" ,"blah");
list ($a,$var) = $var + array();
echo $a ; // prints "test", not "b"
echo $var ; // prints "blah"
?>
tristan in oregon 09-Apr-2008 02:44
Here's yet another way to make a list()-like construct for associative arrays.
This one has the advantage that it doesn't depend on the order of the keys, it
only extracts the keys that you specify, and only extracts them into the
current scope instead of the global scope (which you can still do, but at least
here you have the option).

<?php
    $arr  = array("foo" => 1, "bar" => 2, "baz" => 3);
    $keys = array("baz");

//  $foo = 10;
    $bar = 20;
    $baz = 30;

    extract(array_intersect_key($arr, $keys));

    var_dump($foo);
    var_dump($bar);
    var_dump($baz);
?>

Should print
NULL
int(20)
int(3)

If your version of PHP doesn't have array_intersect_key() yet (below 5.1 I
think), it's easy to write a limited feature replacement for this purpose.

<?php
function my_array_intersect_key ($assoc, $keys)
{
    $intersection = array();
    foreach ($assoc as $key => $val)
        if (in_array($key, $keys))
            $intersection[$key] = $val;

    return $intersection;
}
?>
kevin at vanzonneveld dot net 06-Feb-2008 03:12
Another way to do it associative (if your array isn't numeric), is to just use
array_values like this:

<?php
$os = array();
$os["main"] = "Linux";
$os["distro"] = "Ubuntu";
$os["version"] = "7.10";

list($main, $distro, $version) = array_values($os);
?>
danieljames3 at g mail 20-Jan-2008 01:51
With regard to the note written by ergalvan at bitam dot com:

You must take note that list() assigns variables starting from the rightmost
one (as stated in the warning). That makes $record having the value "value4"
and then $var1, $var2 and $var3 take their values from the "new" $record
variable.

It's clear that the behavior stated in the warning wasn't followed by version
5.0.4 (and perhaps previous versions?)

----------

I'm still seeing this behavior in PHP 5.2.5.  Hopefully someone can comment on
why it's been changed.
Hayley Watson 04-Nov-2007 08:36
In the code by tenz699 at hotmail dot com, the list() construct is taking
values from the result of the each() function, not from the associative array;
the example is therefore spurious.

each() returns an array of four elements, indexed in the order 1, 'value', 0,
'key'. As noted in the documentation, the associative keys are ignored, and the
numerically-indexed values are assigned in key order.

<?php
$array = array('foo'=>'bar');
$t = each($array);
print_r($t);
list($a,$b,$c,$d) = $t;
var_dump($a);
var_dump($b);
var_dump($c);
var_dump($d);
?>

Output:
Array
(
    [1] => bar
    [value] => bar
    [0] => foo
    [key] => foo
)
string(3) "foo"
string(3) "bar"
NULL
NULL
tenz699 at hotmail dot com 18-Sep-2007 05:50
PhP manual's NOTE says: list() only works on numerical arrays and assumes the
numerical indices start at 0.

I'm finding it do works for associative arrays too,as below:

<?
$tenzin = array ("1" => "one", "2" => "two","3"=>"three");
while(list($keys,$values) = each($tenzin))
echo($keys." ".$values."<br>");
?>

gives O/P
1 one 
2 two
3 three

tsarma
mick at wireframe dot com 08-Aug-2007 07:08
It's worth noting that, as expected, list() does not have to have as many
variables (and/or empty skips) as there are elements in the array. PHP will
disregard all elements that there are no variables for. So:

<?php
$Array_Letters = array('A', 'B', 'C', 'D', 'E', 'F');

list($Letter_1, $Letter_2) = $Array_Letters;

echo $Letter_1 . $Letter_2;
?>

Will output: AB

Mick
tobylewis at logogriph dot com 08-May-2007 10:55
The list construct assigns elements from a numbered array starting from element
zero.  It does not assign elements from associative arrays.  So

$arr = array();
$arr[1] = 'x';
list($a, $b) = $arr;
var_dump($a); //outputs NULL because there is no element [0]
var_dump($b); //outputs 'x'

and

$arr = array('red'=>'stop','green'=>'go');
list($a, $b) = $arr;
var_dump($a); //outputs NULL
var_dump($b); //outputs NULL

If there are not enough elements in the array for the variables in the list the
excess variables are assigned NULL.

If there are more elements in the array than variables in the list, the extra
array elements are ignored without error.

Also the warning above about order of assignment is confusing until you get
used to php arrays.  The order in which array elements are stored is the order
in which elements are assigned to the array.  So even in a numbered array if
you assign $may_arr[2] before you assign $my_array[0] then element [2] will be
in the array before [0].  This becomes apparent when using commands like, push,
shift or foreach which work with the stored order of the elements.  So the
warning only applies when the variables in the list are themselves array
elements which have not already been assigned to their array.
ergalvan at bitam dot com 04-May-2006 06:29
With regard to the note written by dolan at teamsapient dot com:

You must take note that list() assigns variables starting from the rightmost
one (as stated in the warning). That makes $record having the value "value4"
and then $var1, $var2 and $var3 take their values from the "new" $record
variable.

It's clear that the behavior stated in the warning wasn't followed by version
5.0.4 (and perhaps previous versions?)
dolan at teamsapient dot com 06-Apr-2006 06:08
I noticed w/ version 5.1.2, the behavior of list() has changed (this occurred
at some point between version 5.0.4 and 5.1.2).  When re-using a variable name
in list() that list() is being assigned to, instead of the values being
assigned all at once, the reused variable gets overwritten before all the
values are read.

Here's an example:
** disclaimer: obviously this is sloppy code, but I want to point out the
behavior change (in case anyone else comes across similar code) **

<?
$data = array();
$data[] = array("value1", "value2", "value3", "value4");
$data[] = array("value1", "value2", "value3", "value4");
$data[] = array("value1", "value2", "value3", "value4");
$data[] = array("value1", "value2", "value3", "value4");

foreach($data as $record)
{
    list($var1, $var2, $var3, $record) = $record;
    echo "var 1: $var1, var 2: $var2, var 3: $var3, record: $record\\n";
}
?>

OUTPUT on version 5.0.4:
var 1: value1, var 2: value2, var 3: value3, record: value4
var 1: value1, var 2: value2, var 3: value3, record: value4
var 1: value1, var 2: value2, var 3: value3, record: value4
var 1: value1, var 2: value2, var 3: value3, record: value4

OUTPUT on version 5.1.2:
var 1: v, var 2: a, var 3: l, record: value4
var 1: v, var 2: a, var 3: l, record: value4
var 1: v, var 2: a, var 3: l, record: value4
var 1: v, var 2: a, var 3: l, record: value4
mzizka at hotmail dot com 03-Jan-2006 04:49
Elements on the left-hand side that don't have a corresponding element on the
right-hand side will be set to NULL. For example,

<?php
$y = 0;
list($x, $y) = array("x");
var_dump($x);
var_dump($y);
?>

Results in:

string(1) "x"
NULL
Nearsighted 25-Jul-2005 02:34
list, coupled with while, makes for a handy way to populate arrays.

while (list($repcnt[], $replnk[], $date[]) = mysql_fetch_row($seek0))
{
// insert what you want to do here.
}

PHP will automatically assign numerical values for the array because of the []
signs after the variable.

From here, you can access their row values by array numbers.

eg.

for ($i=0;$i<$rowcount;$i++)
{
echo "The title number $repcnt[$i] was written on $date[$i].";
}
webmaster at miningstocks dot com 01-Jun-2005 06:05
One way to use the list function with non-numerical keys is to use the
array_values() function

<?php
$array = array ("value1" => "one", "value2" => "two");
list ($value1, $value2) = array_values($array);
?>
mortoray at ecircle-ag dot com 16-Feb-2005 09:29
There is no way to do reference assignment using the list function, therefore
list assignment is will always be a copy assignment (which is of course not
always what you want).

By example, and showing the workaround (which is to just not use list):

    function &pass_refs( &$a ) {
        return array( &$a );
    }

    $a = 1;
    list( $b ) = pass_refs( $a ); //*
    $a = 2;
    print( "$b" ); //prints 1

    $ret = pass_refs( $a );
    $b =& $ret[0];
    $a = 3;
    print( "$b" ); //prints 3

*This is where some syntax like the following would be desired:
   list( &$b ) = pass_refs( $a );
or maybe:
   list( $b ) =& pass_refs( $a );
jennevdmeer at zonnet dot nl 21-Oct-2004 03:29
This is a function simulair to that of 'list' it lists an array with the 'key'
as variable name and then those variables contain the value of the key in the
array.
This is a bit easier then list in my opinion since you dont have to list up all
variable names and it just names them as the key.

<?php
 function lista($a) {
  foreach ($a as $k => $v) {
   $s = "global \$".$k;
   eval($s.";");
   $s = "\$".$k ." = \"". $v."\"";
   eval($s.";");
  }
 }
?>
HW 14-Aug-2004 08:08
The list() construct can be used within other list() constructs (so that it can
be used to extract the elements of multidimensional arrays):
<?php
$matrix = array(array(1,2),
                array(3,4));

list(list($tl,$tr),list($bl,$br)) = $matrix;

echo "$tl $tr $bl $br";
?>
Outputs "1 2 3 4".
jeronimo at DELETE_THIS dot transartmedia dot com 29-Jan-2004 03:28
If you want to swap values between variables without using an intermediary, try
using the list() and array() language constructs. For instance:

<?

// Initial values.
$biggest = 1;
$smallest = 10;

// Instead of using a temporary variable...
$temp = $biggest;
$biggest = $smallest;
$smallest = $temp;

// ...Just swap the values.
list($biggest, $smallest) = array($smallest, $biggest);

?>

This works with any number of variables; you're not limited to just two.
Cheers,
Jeronimo
rubein at earthlink dot net 29-Dec-2000 01:15
Note: If you have an array full of arrays, you can't use list() in conjunction
to foreach() when traversing said array, e.g.

$someArray = array(
  array(1, "one"),
  array(2, "two"),
  array(3, "three")
);

foreach($somearray as list($num, $text)) { ... }


This, however will work

foreach($somearray as $subarray) {
  list($num, $text) = $subarray;
  ...
}
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Mar 16 17:11:43 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

md5_file> <localeconv
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
ltrim

(PHP 4, PHP 5)

ltrim — 文字列の最初から空白 (もしくはその他の文字) を取り除く

説明

string ltrim ( string $str [, string $charlist ] )

文字列の最初から空白 (もしくはその他の文字) を取り除きます。

パラメータ

str

    入力文字列。

charlist

    charlistパラメータにより、削除する文字を指定することも可能です。削除したい
    全ての文字をリストにしてください。..を文字の範囲を指定する際に使用可能です
    。

返り値

この関数は文字列の最初から空白文字を取り除き、取り除かれた文字列を返します。2番
目のパラメータを指定しない場合、 ltrim()は以下の文字を削除します。

  • " " (ASCII 32 (0x20)), 通常の空白。
  • "\t" (ASCII 9 (0x09)), タブ。
  • "\n" (ASCII 10 (0x0A)), 改行。
  • "\r" (ASCII 13 (0x0D)), 復帰。
  • "\0" (ASCII 0 (0x00)), NUL バイト。
  • "\x0B" (ASCII 11 (0x0B)), 垂直タブ。

変更履歴

バージョン                 説明
4.1.0      charlist パラメータが追加されました。

例

例1 ltrim() の使用例

<?php

$text = "\t\tThese are a few words :) ...  ";
$binary = "\x09Example string\x0A";
$hello  = "Hello World";
var_dump($text, $binary, $hello);

print "\n";


$trimmed = ltrim($text);
var_dump($trimmed);

$trimmed = ltrim($text, " \t.");
var_dump($trimmed);

$trimmed = ltrim($hello, "Hdle");
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_slice> <array_search
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011

view this page in

[English             ] Change language
array_shift

(PHP 4, PHP 5)

array_shift — 配列の先頭から要素を一つ取り出す

説明

mixed array_shift ( array &$array )

array_shift() は、array の最初の値を取り出して返します。配列 array は、要素一つ
分だけ短くなり、全ての要素は前にずれます。数値添字の配列のキーはゼロから順に新
たに振りなおされますが、リテラルのキーはそのままになります。

    注意: この関数は、配列 (array) ポインタを使用した後にリセット (reset()) し
    ます。

パラメータ

array

    入力の配列。

返り値

取り出した値を返します。array が空の場合や配列でない場合は NULL を返します。

例

例1 array_shift() の例

<?php
$stack = array("orange", "banana", "apple", "raspberry");
$fruit = array_shift($stack);
print_r($stack);
?>

上の例の出力は以下となります。

Array
(
    [0] => banana
    [1] => apple
    [2] => raspberry
)

そして、$fruit には orange が代入されます。

参考

  • array_unshift() - 一つ以上の要素を配列の最初に加える
  • array_push() - 一つ以上の要素を配列の最後に追加する
  • array_pop() - 配列の末尾から要素を取り除く



array_slice> <array_search
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes array_shift
ar at xonix dot ch 14-Aug-2010 10:54
If you need the first or last entry of an array, then this could help you.

<?php
function array_last_entry($arr){
    if(!is_array($arr))
        return;
   
    if(empty($arr))
        return;
       
    return end($arr);
}

function array_first_entry($arr){
    if(!is_array($arr))
        return;
       
    if(empty($arr))
        return;
       
    reset($arr);
    return current($arr);   
}

$arr = array( '5' => 'five', '3' => 'three', '8' => 'eight',);

echo 'last entry: '.array_last_entry($arr).'<br>';

echo 'first entry: '.array_first_entry($arr).'<br>';

echo 'alternative output:<br>';
 
echo 'last entry: '.$arr[count($arr)-1];

echo '<br>first entry: '.$arr[0];
?>

The output will look like:
last entry: eight
first entry: five
alternative output:
last entry:
first entry:

As you can see, if you have to handle arrays with non-continuous indexes, these
functions may be very helpful.
patrick at pwfisher dot com 22-Aug-2009 03:23
Here's a utility function to parse command line arguments.

<?php
/**
 * CommandLine class
 *
 * @package             Framework
 */
/**
 * Command Line Interface (CLI) utility class.
 *
 * @author              Patrick Fisher <patrick@pwfisher.com>
 * @since               August 21, 2009
 * @package             Framework
 * @subpackage          Env
 */
class CommandLine {

    /**
     * PARSE ARGUMENTS
     *
     * [pfisher ~]$ echo "<?php
     * >     include('CommandLine.php');
     * >     \$args = CommandLine::parseArgs(\$_SERVER['argv']);
     * >     echo "\n", '\$out = '; var_dump(\$args); echo "\n";
     * > ?>" > test.php
     *
     * [pfisher ~]$ php test.php plain-arg --foo --bar=baz --funny="spam=eggs"
--alsofunny=spam=eggs \
     * > 'plain arg 2' -abc -k=value "plain arg 3" --s="original" --s=
'overwrite' --s
     *
     * $out = array(12) {
     *   [0]                => string(9) "plain-arg"
     *   ["foo"]            => bool(true)
     *   ["bar"]            => string(3) "baz"
     *   ["funny"]          => string(9) "spam=eggs"
     *   ["alsofunny"]      => string(9) "spam=eggs"
     *   [1]                => string(11) "plain arg 2"
     *   ["a"]              => bool(true)
     *   ["b"]              => bool(true)
     *   ["c"]              => bool(true)
     *   ["k"]              => string(5) "value"
     *   [2]                => string(11) "plain arg 3"
     *   ["s"]              => string(9) "overwrite"
     * }
     *
     * @author              Patrick Fisher <patrick@pwfisher.com>
     * @since               August 21, 2009
     * @see                 http://www.php.net/manual/en/
features.commandline.php
     *                      #81042 function arguments($argv) by technorati at
gmail dot com, 12-Feb-2008
     *                      #78651 function getArgs($args) by B Crawford,
22-Oct-2007
     * @usage               $args = CommandLine::parseArgs($_SERVER['argv']);
     */
    public static function parseArgs($argv){
   
        array_shift($argv);
        $out                            = array();
       
        foreach ($argv as $arg){
       
            // --foo --bar=baz
            if (substr($arg,0,2) == '--'){
                $eqPos                  = strpos($arg,'=');
               
                // --foo
                if ($eqPos === false){
                    $key                = substr($arg,2);
                    $value              = isset($out[$key]) ? $out[$key] :
true;
                    $out[$key]          = $value;
                }
                // --bar=baz
                else {
                    $key                = substr($arg,2,$eqPos-2);
                    $value              = substr($arg,$eqPos+1);
                    $out[$key]          = $value;
                }
            }
            // -k=value -abc
            else if (substr($arg,0,1) == '-'){
           
                // -k=value
                if (substr($arg,2,1) == '='){
                    $key                = substr($arg,1,1);
                    $value              = substr($arg,3);
                    $out[$key]          = $value;
                }
                // -abc
                else {
                    $chars              = str_split(substr($arg,1));
                    foreach ($chars as $char){
                        $key            = $char;
                        $value          = isset($out[$key]) ? $out[$key] :
true;
                        $out[$key]      = $value;
                    }
                }
            }
            // plain-arg
            else {
                $value                  = $arg;
                $out[]                  = $value;
            }
        }
        return $out;
    }
}
?>
regs at voidship dot net 03-Nov-2008 08:50
Using array_shift over larger array was fairly slow.  It sped up as the array
shrank, most likely as it has to reindex a smaller data set.

For my purpose, I used array_reverse, then array_pop, which doesn't need to
reindex the array and will preserve keys if you want it to (didn't matter in my
case). 

Using direct index references, i.e., array_test[$i], was fast, but direct index
referencing + unset for destructive operations was about the same speed as
array_reverse and array_pop.  It also requires sequential numeric keys.
chris {at} w3style {dot} co {dot} uk 06-Oct-2008 01:06
As pointed out earlier, in PHP4, array_shift() modifies the input array
by-reference, but it doesn't return the first element by reference.  This may
seem like very unexpected behaviour.  If you're working with a collection of
references (in my case XML Nodes) this should do the trick.

<?php

/**
 * This function exhibits the same behaviour is array_shift(), except
 * it returns a reference to the first element of the array instead of a copy.
 *
 * @param array &$array
 * @return mixed
 */
function &array_shift_reference(&$array)
{
  if (count($array) > 0)
  {
    $key = key($array);
    $first =& $array[$key];
  }
  else
  {
    $first = null;
  }
  array_shift($array);
  return $first;
}

class ArrayShiftReferenceTest extends UnitTestCase
{
   
  function testFunctionRemovesFirstElementOfNumericallyIndexedArray()
  {
    $input = array('foo', 'bar');
    array_shift_reference($input);
    $this->assertEqual(array('bar'), $input, '%s: The array should be shifted
one element left');
  }

  function testFunctionRemovesFirstElementOfAssociativeArray()
  {
    $input = array('x' => 'foo', 'y' => 'bar');
    array_shift_reference($input);
    $this->assertEqual(array('y' => 'bar'), $input, '%s: The array should be
shifted one element left');
  }

  function testFunctionReturnsReferenceToFirstElementOfNumericallyIndexedArray
()
  {
    $foo = 'foo';
    $input = array(&$foo, 'bar');
    $first =& array_shift_reference($input);
    $this->assertReference($foo, $first, '%s: The return value should reference
the first array element');
  }

  function testFunctionReturnsReferenceToFirstElementOfAssociativeArray()
  {
    $foo = 'foo';
    $input = array('x' => &$foo, 'y' => 'bar');
    $first =& array_shift_reference($input);
    $this->assertReference($foo, $first, '%s: The return value should reference
the first array element');
  }

  function testFunctionReturnsNullIfEmptyArrayPassedAsInput()
  {
    $input = array();
    $first = array_shift_reference($input);
    $this->assertNull($first, '%s: Array has no first element so NULL should be
returned');
  }

}

?>
sggoyal at gmail dot com 08-Sep-2008 05:08
// To Change order of Array by Saurabh Goyal
    function change_array_order($table,$order)
    {
       //init the new table
       $new_table = array();
       foreach($order as $colname)
       {
          $new_table[$colname] = $table[$colname];
       }
       return $new_table;
    }

if array value like:-
$row = array('usr_id'=>'23','usr_name'=>'Saurabh', 'usr_surname'=>
'Goyal','usr_firstname'=>'Saurabh');

//you want change order & show only particular field
change_array_order($row,array('usr_name','usr_firstname',
                                            'usr_surname'));

Regard's

Saurabh Goyal
http://sggoyal.blogspot.com
nospam at dyce dot losethisbit dot com 02-Jul-2008 12:15
Just a useful version which returns a simple array with the first key and
value. Porbably a better way of doing it, but it works for me ;-)

<?php

function array_kshift(&$arr)
{
  list($k) = array_keys($arr);
  $r  = array($k=>$arr[$k]);
  unset($arr[$k]);
  return $r;
}

// test it on a simple associative array
$arr = array('x'=>'ball','y'=>'hat','z'=>'apple');

print_r($arr);
print_r(array_kshift($arr));
print_r($arr);

?>

Output:

Array
(
    [x] => ball
    [y] => hat
    [z] => apple
)
Array
(
    [x] => ball
)
Array
(
    [y] => hat
    [z] => apple
)
Maikel 19-Feb-2008 05:43
In response to nando_f at nothingsimple dot com

The example is correct,  array_shift do an unset to first element  because the
parameter is passed by reference
Ben 03-Oct-2007 04:17
baughmankr at appstate dot edu, I think this is more efficient.

<?php
function array_shorten($arr)
{
  list($k) = array_keys($arr);
  unset($arr[$k]);
  return $arr;
}
?>
baughmankr at appstate dot edu 18-Sep-2007 09:04
I needed to remove the first set of keys and values from an associative array. 
Had to write this function:

function shortenArray($_arr)
{
    $i=1;
    $_shorter=array();
    foreach ($_arr as $k => $v)
    {
        if ($i != 1)
        {
            $_shorter[$k] = $v;
        }
        $i++;
    }
    return $_shorter;
}
dmhouse at gmail dot com 08-Aug-2007 08:54
If you want a version of array_shift() that works non-destructively (i.e., an
easy function to grab the first element of the array without modifying the
array), try reset().
Traps 09-Jul-2007 05:52
For those that may be trying to use array_shift() with an array containing
references (e.g. working with linked node trees), beware that array_shift() may
not work as you expect: it will return a *copy* of the first element of the
array, and not the element itself, so your reference will be lost.

The solution is to reference the first element before removing it with
array_shift():

<?php

// using only array_shift:
$a = 1;
$array = array(&$a);
$b =& array_shift($array);
$b = 2;
echo "a = $a, b = $b<br>"; // outputs a = 1, b = 2

// solution: referencing the first element first:
$a = 1;
$array = array(&$a);
$b =& $array[0];
array_shift($array);
$b = 2;
echo "a = $a, b = $b<br>"; // outputs a = 2, b = 2

?>
C_Prevost at myob 30-Apr-2007 11:52
no, it demonstrates quite well that it removes the first element in the
original array, updating the keys, and that it also returns the original first
element.
richard at happymango dot me dot uk 12-Apr-2007 01:09
If you want to loop through an array, removing its values one at a time using
array_shift() but also want the key as well, try this.

<?php

while($key = key($array))
{
     $value = array_shift($array);
     //code goes here
}

?>

its like foreach but each time the value is removed from the array so it
eventually ends up empty

<?php

//example below

$airports = array
(
    "LGW" => "London Gatwick",
    "LHR" => "London Heathrow",
    "STN" => "London Stanstead"
);

echo count($airports)." Airport in the array<br /><br />";

while($key = key($airports))
{
    $value = array_shift($airports);
    echo $key." is ".$value."<br />";
}

echo "<br />".count($airports)." Airport left in the array";

?>

Example Outputs:

3 Airport in the array

LGW is London Gatwick
LHR is London Heathrow
STN is London Stanstead

0 Airport left in the array
François 27-Oct-2006 03:35
Note that array_shift() can be rather time consuming. Whenever possible, you
should consider using array_slice() instead.
Consider the following code :

$monthlyHits = 0;
reset ($hitsArray);
foreach($hitsArray as $visitTime ) {
if ($visitTime < $monthStart ) {
array_shift($hitsArray);
$monthlyHits++;
}
}

This could be replaced by :
$monthlyHits = 0;
reset ($hitsArray);
foreach($hitsArray as $visitTime ) {
if ($visitTime < $monthStart ) {
$monthlyHits++;
}
}
$monthlyHits = array_slice($hitsArray,$monthlyHits);

Here is a benchmark I did on a 10 000 rows array :
First method, 9000 mili-seconds.
Second method, 4 mili-seconds
alreece45 at yahoo dot com 10-Aug-2006 03:13
I haven't really read into it, but if you're complaining about a change in PHP
5.0.5 that made it so you couldn't do:

<?php

$val = array_shift(preg_split());

?>

or

<?php

$val = array_shit(function_that_returns_array);

?>

Then you're not using this function correctly. This function's argument is
supposed to be a pointer to a variable. It then modifies that variable and
returns a value. When you specify a function, php CAN NOT modify the return
value of that function. It should be common sense but apparently its not.

Also, on a efficiency note, you might want to consider using another function
such as reset or perhaps making your own function such as below:

<?php

function first_element($array) {

return reset($array);

}

?>

Unless of course for some reason you need to save the microseconds this takes.

}
bmr at ediweb dot org 31-May-2006 02:27
If the array has non-numerical keys, array_shift extracts the first element,
whichever is the key, and recompute the numerical keys, if there are any. Ie :

$array = array("c" => "ccc", 0 => "aaa", "d" => "ddd", 5 => "bbb");
$first = array_shift($array);
echo '$first = ' . $first . ', $array = ' . var_export($array, true);

will display :

$first = ccc, $array = array ( 0 => 'aaa', 'd' => 'ddd', 1 => 'bbb', )

It means that array_shift works with associative arrays too, and leaves the
keys unchanged if they are non-numerical.
20-Sep-2005 02:57
<?php

//----------------------------------------------------------
// The combination of array_shift/array_unshift
// greatly simplified a function I created for
// generating relative paths. Before I found them
// the algorithm was really squirrely, with multiple
// if tests, length calculations, nested loops, etc.
// Great functions.
//----------------------------------------------------------

function create_relative_path($inSourcePath, $inRefPath)
{
    // break strings at slashes
    $s_parts            = explode('/', $inSourcePath);
    $r_parts            = explode('/', $inRefPath);
   
    // delete items up to the first non-equal part
    while ($s_parts[0] === $r_parts[0])
    {
        array_shift($s_parts);
        array_shift($r_parts);
    }
   
    // add wild card to r_parts for each remaining
    // item of s_parts
    while ($s_parts[0])
    {
        array_unshift($r_parts, '..');
        array_shift($s_parts);
    }
   
    return implode('/', $r_parts);
}

//----------------------------------------------------------
// Example:
//     Given a source path $sp generates the relative
//     location of $rp. $sp could be assigned using
//     $_SERVER['PHP_SELF'] but it's hardcoded for
//     the example.
//----------------------------------------------------------
$sp = '/WebServer/Documents/MyBigProject/php/project_script.php';
$rp = '/WebServer/Documents/MyLibraries/lib_script.php';

// plugging them into the function
$rel_path = create_relative_path($sp, $rp);

// yeilds
'../../../MyLibraries/lib_script.php'

// and it could be used like
include_once(create_relative_path($_SERVER['PHP_SELF'], $rp));
lukasz dot dywicki DEL at gmail dot com 27-Jul-2005 12:48
Im using this function to browse arrays from database. For example data:
<?php
$data = array(
      array('row 1-cell 1','row 1-cell 2'),
      array('row 2-cell 1','row 2-cell 2'),
      array('row 3-cell 1','row 3-cell 2'),
);

while($row=array_shift($data)) {
      echo $row[0];
}
?>
Output:
row 1-cell 1
row 2-cell 1
row 3-cell 1
arturo {dot} ronchi {at} gmail {dot} com 20-Apr-2005 01:24
Here is a little function if you would like to get the top element and rotate
the array afterwards.

function array_rotate(&$arr)
{
  $elm = array_shift($arr);
  array_push($arr, $elm);
  return $elm;
}
09-Feb-2005 12:27
This function will save the key values of an array, and it will work in lower
versions of PHP:

<?php

function array_shift2(&$array){
    reset($array);
    $key = key($array);
    $removed = $array[$key];
    unset($array[$key]);
    return $removed;
}

?>
James McGuigan 14-Dec-2004 07:26
while(array_shift()) can be used to process multiple arrays and/or database
results in a single loop. The || short circuts and only evaluates the first
statement until it runs out of data.

It can help to reduce duplicated code (the rule is code once and once only).

Note that each ($row = ) statement much be encased in ()'s otherwise you will
get funny results. If you use two array_shift($array) statements and forget the
()'s, you will repeatedly get the first element of the first array for the for
the count of the $array.

<?php

require_once('class.db.php');

$sql = "SELECT title FROM links";
$result = mysql_query($sql, $db->connection);

$defaults = array(
     array('title' => 'None'),
     array('title' => 'Unknown')
);

while ( ($row = mysql_fetch_assoc($result))
     || ($row = array_shift($defaults)))
{
  echo $row['title'] . "<br>";
}

?>

This will print out (depending on database contents):
Title1
Title2
Title3
...
None
Unknown
alex at netflex dot nl 13-Mar-2003 06:55
Hi,

if you want to shift the first element of a large array (more than 10.000?) and
it must realy fast then you can use this better:

<?php
reset($array);
list($oldKey, $oldElement) = each($array);
unset($array[$oldKey]);
?>

note: the index wil not be changed (not reindexed)
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Mar 14 18:11:43 2011 UTC
パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes substr
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Mar 14 18:11:43 2011 UTC

// ASCII 制御文字 (0 から 31 まで) を
// $binary の先頭から取り除きます
$clean = ltrim($binary, "\x00..\x1F");
var_dump($clean);

?>

上の例の出力は以下となります。

string(32) "        These are a few words :) ...  "
string(16) "    Example string
"
string(11) "Hello World"

string(30) "These are a few words :) ...  "
string(30) "These are a few words :) ...  "
string(7) "o World"
string(15) "Example string
"

参考

  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • rtrim() - 文字列の最後から空白 (もしくは他の文字) を削除する



md5_file> <localeconv
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Mar 2011
 
add a note add a note User Contributed Notes ltrim
Mike 08-Jan-2011 08:03
Keep in mind the amount of resources preg_replace() uses. 
I would suggest a simple if statement if you need to parse through large
amounts of data. 
<?php
function remove_leading_zeros_from_number($number_string) {
  $limit = 9000.1
  $temp = $number
  (float) $temp;
  if ($number < $limit) {
    $number += 0;
  } else {
    preg_replace('~^[0]*([1-9][0-9]*)$~','$1',$number_string)
  }
}
?>

Code is untested, but probably sound.
tanmar.de 06-May-2010 05:36
The neat trick from Mr. Sherwood has only one ugly side-effect: If the "number"
contained in the string is considerably large, you will end up with an int (or
float) value that has nothing to do with the original number ...

You may use preg_replace instead:

$number_string = preg_replace('~^[0]*([1-9][0-9]*)$~','$1',$number_string);

This kills any leading zeros safely without changing any other data.

Hope this helps.
Usamah M dot Ali (usamah1228 at gmail dot com) 04-Feb-2008 10:42
For those who use right-to-left languages such as Arabic, Hebrew, etc., it's
worth mentioning that ltrim() (which stands for left trim) & rtrim() (which
stands for right trim) DO NOT work contextually. The nomenclature is rather
semantically incorrect. So in an RTL script, ltrim() will trim text from the
right direction (i.e. beginning of RTL strings), and rtrim() will trim text
from the left direction (i.e. end of RTL strings).
John Sherwood 06-Aug-2006 07:13
To remove leading/trailing zeroes (example: "0123.4560"), doing a += 0 is
easier than trim tricks.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Mar 14 18:11:43 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
array_slice

(PHP 4, PHP 5)

array_slice — 配列の一部を展開する

説明

array array_slice ( array $array , int $offset [, int $length [, bool
$preserve_keys = false ]] )

array_slice()は、array から引数 offset および length で指定された連続する要素を
返します。

    注意: この関数は、配列 (array) ポインタを使用した後にリセット (reset()) し
    ます。

パラメータ

array

    入力の配列。

offset

    offset が負の値ではない場合、要素位置の計算は、配列 array の offset から始
    められます。 offset が負の場合、要素位置の計算は array の最後から行われます
    。

length

    lengthが指定され、正の場合、連続する複数の要素が返されます。length が指定さ
    れ、負の場合、配列の末尾から連続する複数の要素が返されます。省略された場合
    、offset から配列の最後までの全ての要素が返されます。

preserve_keys

    array_slice() はデフォルトで配列の数値キーを並べなおし、リセットすることに
    注意してください。 preserve_keys を TRUE にする事でこの動作を変更することが
    できます。

返り値

切り取った部分を返します。

変更履歴

バージョン                          説明
5.0.2      オプションのパラメータ preserve_keys が追加されました。

例

例1 array_slice() の例

<?php
$input = array("a", "b", "c", "d", "e");

$output = array_slice($input, 2);      // "c", "d", "e" を返す
$output = array_slice($input, -2, 1);  // "d" を返す
$output = array_slice($input, 0, 3);   // "a", "b", "c" を返す

// 配列キーの違いに注意
print_r(array_slice($input, 2, -1));
print_r(array_slice($input, 2, -1, true));
?>

上の例の出力は以下となります。

Array
(
    [0] => c
    [1] => d
)
Array
(
    [2] => c
    [3] => d
)

参考

  • array_splice() - 配列の一部を削除し、他の要素で置換する
  • unset() - 指定した変数の割当を解除する



array_splice> <array_shift
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes array_slice
delew 11-Feb-2011 09:17
just a little tip.
to preserve keys without providing length: use NULL

array_slice($array, $my_offset, NULL, true);
xananax at yelostudio dot com 03-Feb-2011 03:23
<?php
/**
 * Reorders an array by keys according to a list of values.
 * @param array $array the array to reorder. Passed by reference
 * @param array $list the list to reorder by
 * @param boolean $keepRest if set to FALSE, anything not in the $list array
will be removed.
 * @param boolean $prepend if set to TRUE, will prepend the remaining values
instead of appending them
 * @author xananax AT yelostudio DOT com
 */
function array_reorder(array &$array,array $list,$keepRest=TRUE,$prepend=
FALSE,$preserveKeys=TRUE){
    $temp = array();
    foreach($list as $i){
        if(isset($array[$i])){
            $tempValue = array_slice(
                $array,
                array_search($i,array_keys($array)),
                1,
                $preserveKeys
            );
            $temp[$i] = array_shift($tempValue);
            unset($array[$i]);
        }
    }
    $array = $keepRest ?
        ($prepend?
            $array+$temp
            :$temp+$array
        )
        : $temp;
}

/** exemple ** /
$a = array(
    'a'    =>    'a',
    'b'    =>    'b',
    'c'    =>    'c',
    'd'    =>    'd',
    'e'    =>    'e'
);
$order = array('c','b','a');

array_reorder($a,$order,TRUE);
echo '<pre>';
print_r($a);
echo '</pre>';
/** exemple end **/
?>
ch1902uk 20-Jan-2011 01:22
Here's an array_slice function for associative arrays. It slices by array key
from and including that key. If the $length is a string it is assumed to be
another array key and the array is sliced up to but not including the end key
otherwise it slices that length.

<?php

function array_slice_assoc ($array, $key, $length, $preserve_keys = true)
{
   $offset = array_search($key, array_keys($array));

   if (is_string($length))
      $length = array_search($length, array_keys($array)) - $offset;

   return array_slice($array, $offset, $length, $preserve_keys);
}

?>

Example usage:

<?php
$arr = array('a' => 'a', 'b' => 'b', 'c' => 'c', 'd' => 'd', 'e' => 'e', 'f' =>
'f');

print_r(array_slice_assoc($arr, 'b', 2, true));
/*
Array
(
    [b] => b
    [c] => c
)
*/

print_r(array_slice_assoc($arr, 'b', 'e', true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
)
*/

print_r(array_slice_assoc($arr, 'b', -1, true));
/*
Array
(
    [b] => b
    [c] => c
    [d] => d
    [e] => e
)
*/
?>
joel dot a dot villarreal at gmail dot com 19-Oct-2010 10:41
An implementation of array_slice that do not resets the cursor.

<?php
function get_from_array($arr, $start, $length)
{
    $sliced = array();
    foreach ($arr as $k => $v)
    {
        if ($start <= $k && $k <= $start + $length - 1)
        {
            $sliced[] = $v;
            if (count($sliced) == $length) break; 
        }
    }
    return $sliced;
}
?>

Cheers,
Joel A. Villarreal Bertoldi
yuwas at ht dot cx 04-Apr-2010 01:54
By combining this with str_split() and implode(),slices can also be excerpted
from strings with the following simple function:
<?php
function str_slice($string,$offset,$length=999,$preserve_keys=False){
  if( $length == 999 ){ $length = strlen($string)-$offset };
  $slice_arr = array_slice(str_split($string),$offset,$length,$preserve_keys);
  return implode($slice_arr);
};
?>

Perhaps there's a better way to preset $length.
jamie at jamiechong dot ca 18-Oct-2009 11:04
A flexible array_split function:

<?php
// split the given array into n number of pieces
function array_split($array, $pieces=2)
{  
    if ($pieces < 2)
        return array($array);
    $newCount = ceil(count($array)/$pieces);
    $a = array_slice($array, 0, $newCount);
    $b = array_split(array_slice($array, $newCount), $pieces-1);
    return array_merge(array($a),$b);
}

// Examples:
$a = array(1,2,3,4,5,6,7,8,9,10);
array_split($a, 2);    // array(array(1,2,3,4,5), array(6,7,8,9,10))
array_split($a, 3);    // array(array(1,2,3,4), array(5,6,7), array(8,9,10))
array_split($a, 4);    // array(array(1,2,3), array(4,5,6), array(7,8), array
(9,10))

?>
jamon at clearsightdesign dot com 11-Apr-2009 12:46
I was trying to find a good way to find the previous several and next several
results from an array created in a MySQL query. I found that most MySQL
solutions to this problem were complex. Here is a simple function that returns
the previous and next rows from the array.

<?php

/*
** function array_surround by Jamon Holmgren of ClearSight Design
** Version 1.0 - 4/10/2009
** Please direct comments and questions to my first name at symbol
clearsightdesign.com
**
** Returns an array with only the $before and $after number of results
** This is set to work best with MySQL data results
** Use this to find the rows immediately before and after a particular row, as
many as you want
**
** Example usage:
**   $mysql_ar is an array of results from a MySQL query and the current id is
$cur_id
**   We want to get the row before this one and five rows afterward
**
** $near_rows = array_surround($mysql_ar, "id", $cur_id, 1, 5)
**
**   Previous row is now $near_rows[-1]
**   Current row is now $near_rows[0]
**   Next row is $near_rows[1] ... etc
**   If there is no previous row, $near_rows[-1] will not be set...test for it
with is_array($near_rows[-1])
**
*/
function array_surround($src_array, $field, $value, $before = 1, $after = 1) {
    if(is_array($src_array)) {
        // reset all the keys to 0 through whatever in case they aren't
sequential
        $new_array = array_values($src_array);
        // now loop through and find the key in array that matches the criteria
in $field and $value
        foreach($new_array as $k => $s) {
            if($s[$field] == $value) {
                // Found the one we wanted
                $ck = $k; // put the key in the $ck (current key)
                break;
            }
        }
        if(isset($ck)) { // Found it!
            $result_start = $ck - $before; // Set the start key
            $result_length = $before + 1 + $after; // Set the number of keys to
return
            if($result_start < 0) { // Oops, start key is before first result
                $result_length = $result_length + $result_start; // Reduce the
number of keys to return
                $result_start = 0; // Set the start key to the first result
            }
            $result_temp = array_slice($new_array, $result_start,
$result_length); // Slice out the results we want
            // Now we have an array, but we want array[-$before] to array
[$after] not 0 to whatever.
            foreach($result_temp as $rk => $rt) { // set all the keys to
-$before to +$after
                $result[$result_start - $ck + $rk] = $rt;
            }
            return $result;
        } else { // didn't find it!
            return false;
        }
    } else { // They didn't send an array
        return false;
    }
}

?>

I hope you find this useful! I welcome constructive criticism or comments or of
course praise ;) -- just e-mail me.

- Jamon Holmgren
Mr. P 14-Nov-2008 10:11
Note that offset is not the same thing as key. Offset always starts at 0, while
keys might be any number.

So this:

<?php print_r(array_slice(array(0 => 0, 5 => 5, 13 => 13),1)); ?>

will result in this:
Array
(
    [0] => 5
    [1] => 13
)
s0i0m at dreamevilconcepts dot com 12-Sep-2008 02:53
Using the varname function referenced from the array_search page, submitted by
dcez at land dot ru. I created a multi-dimensional array splice function. It's
usage is like so:

$array['admin'] = array('blah1', 'blah2');
$array['voice'] = array('blah3', 'blah4');
array_cut('blah4', $array);

...Would strip blah4 from the array, no matter where the position of it was in
the array ^^ Returning this...

Array ( [admin] => Array ( [0] => blah1 [1] => blah2 ) [voice] => Array ( [0]
=> blah3 ) )

Here is the code...

<?php

  function varname ($var)
  {
    // varname function by dcez at land dot ru
    return (isset($var)) ? array_search($var, $GLOBALS) : false;
  }

  function array_cut($needle, $haystack)
  {
    foreach ($haystack as $k => $v)
    {
      for ($i=0; $i<count($v); $i++)
        if ($v[$i] === $needle)
        {
          return array_splice($GLOBALS[varname($haystack)][$k], $i, 1);
          break; break;
        }
    }

?>

Check out dreamevilconcept's forum for more innovative creations!
disnider at gmail dot com 25-Jun-2008 07:02
it will split array into  2 halfs :
<?    

function array_split($array)
    {           
        $end=count($array);
       
        $half = ($end % 2 )?  ceil($end/2): $end/2;
       
        return array(array_slice($array,0,$half),array_slice($array,$half));
    }

//testing with odd count

$array=array('a','b','c','d');

echo "Odd: <br>";
var_dump(array_split($array));

//testing with even count

$array=array('a','b','c','d','f');

echo "Even: <br>";
var_dump(array_split($array));
?>

Output:
===========

Odd:
array(2) {
  [0]=>
  array(2) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "c"
    [1]=>
    string(1) "d"
  }
}

Even:
array(2) {
  [0]=>
  array(3) {
    [0]=>
    string(1) "a"
    [1]=>
    string(1) "b"
    [2]=>
    string(1) "c"
  }
  [1]=>
  array(2) {
    [0]=>
    string(1) "d"
    [1]=>
    string(1) "f"
  }
}
ted.devito at 9gmail9 dot 99com 03-May-2008 04:21
based on worldclimb's arem(), here is a recursive array value removal tool that
can work with multidimensional arrays.

function remove_from_array($array,$value){
    $clear = true;
    $holding=array();
  
    foreach($array as $k => $v){
        if (is_array($v)) {
            $holding [$k] = remove_from_array ($v, $value);
            }
        elseif ($value == $v) {
            $clear = false;
            }
        elseif($value != $v){
            $holding[$k]=$v; // removes an item by combing through the array in
order and saving the good stuff
        }
    }  
    if ($clear) return $holding; // only pass back the holding array if we
didn't find the value
}
worldclimb at 99gmail99 dot com 21-Mar-2008 08:51
array_slice can be used to remove elements from an array but it's pretty simple
to use a custom function.

One day array_remove() might become part of PHP and will likely be a reserved
function name, hence the unobvious choice for this function's names.

<?
function arem($array,$value){
    $holding=array();
    foreach($array as $k => $v){
        if($value!=$v){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

function akrem($array,$key){
    $holding=array();
    foreach($array as $k => $v){
        if($key!=$k){
            $holding[$k]=$v;
        }
    }   
    return $holding;
}

$lunch = array('sandwich' => 'cheese', 'cookie'=>'oatmeal','drink' =>
'tea','fruit' => 'apple');
echo '<pre>';
print_r($lunch);
$lunch=arem($lunch,'apple');
print_r($lunch);
$lunch=akrem($lunch,'sandwich');
print_r($lunch);
echo '</pre>';
?>

(remove 9's in email)
slimjackson at gmail dot com 29-Oct-2007 06:06
Re: 'cpa at NOSPAM dot conceptivator dot com' and 'gportlock at gembiz dot co
dot uk'

limitText can be further simplified by adding a limit parameter to the explode
function - eliminating the need for the use of array_slice entirely. Note that
this only works for extracting the first n words of the string, and not the
last.

Also, you've mistakenly used array_splice instead of array_slice in your
functions.

<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text, $wordCount);
    return implode( " ", $wordArray );
}
?>
aexchecker at yahoo dot com 04-Oct-2007 03:39
<?php
/**
 * @desc
 * Combines two arrays by inserting one into the other at a given position then
 * returns the result.
 *
 * @since   2007/10/04
 * @version v0.7 2007/10/04 18:47:52
 * @author  AexChecker <AexChecker@yahoo.com>
 * @param   array $source
 * @param   array $destination
 * @param   int [optional] $offset
 * @param   int [optional] $length
 * @return  array
 */
function array_insert($source, $destination, $offset = NULL, $length = NULL) {
    if (!is_array($source) || empty($source)) {
        if (is_array($destination) && !empty($destination)) {
            return $destination;
        }
        return array();
    }
    if (is_null($offset)) {
        return array_merge($destination, $source);
    }
    $offset = var2int($offset);
    if (is_null($length)) {
        if ($offset === 0) {
            return array_merge($source, array_slice($destination, 1));
        }
        if ($offset === -1) {
            return array_merge(array_slice($destination, 0, -1), $source);
        }
        return array_merge(
            array_slice($destination, 0, $offset),
            $source,
            array_slice($destination, ++$offset)
        );
    }
    if ($offset === 0) {
        return array_merge($source, array_slice($destination, $length));
    }
    $destination_count = count($destination);
    $length = var2int($length);
    if ($offset > 0) {
        if ($destination_count - $offset < 1) {
            return array_merge($destination, $source);
        }
    } else{
        if (($t = $destination_count + $offset) < 1) {
            return array_merge($source, $destination);
        }
        $offset = $t;
    }
    if ($length > 0) {
        $length+= $offset;
    } elseif ($length < 0 && !($length * -1 < $destination_count)) {
        return $source;
    } else {
        $length = $offset;
    }
    return array_merge(
        array_slice($destination, 0, $offset),
        $source,
        array_slice($destination, $length)
    );
}
?>
phpnotasp at gmail dot com 16-Jul-2007 09:42
It should be noted that this function does NOT modify the original array. So if
you need to array_pop() or array_shift() without modifying the original array,
you can use array_slice().

<?php

$input = array('a', 'b', 'c');
$output = array_slice($input, 1);

print_r($output);
print_r($input);

/*
Array
(
    [0] => b
    [1] => c
)
Array
(
    [0] => a
    [1] => b
    [2] => c
)
*/
?>
sean at getclicky dot com 19-Jun-2007 07:54
People... let's keep things simple here. :) Some of the functions to mimic >
5.0.2 behavior (preserving keys) are ridiculously complicated. Look how simple
it can be:

<?php
function atrim( $a, $num ) {
  while( sizeof( $a ) > $num ) array_pop( $a );
  return $a;
}
?>
cpa at NOSPAM dot conceptivator dot com 07-Jun-2007 12:15
'gportlock at gembiz dot co dot uk' has an error in his limitText function. It
simply takes a text string, then cuts off the first X words and returns the
rest of the string. I believe the intended use is to return only the first X
words and cut off the rest.

The correct version should be (notice the inserted 0 offset):
<?php
function limitText( $text, $wordCount )
{
    $wordArray = explode(" ", $text);
    array_splice($wordArray, 0, $wordCount);
    return implode( " ", $wordArray );
}
?>
gportlock at gembiz dot co dot uk 24-May-2007 02:29
This function returns a text string that is limited by the word count. This
funtion is particularly useful for paid advertising where you pay by the word.

function limitText( $text, $wordCount ){

        $wordArray = explode(" ", $text);
        array_splice($wordArray, $wordCount);
        return implode( " ", $wordArray );
}
bc at bnc-automatisering dot nl 15-Mar-2007 11:41
first at all, ur php version check does not work correctly.
version 4.3.10 (4310 > 520)

Second, $a is not initialized.
Third, to let the function work the same as slice (offset) it should be:

function narray_slice($array, $offset, $length){
    $a = 0;
    foreach ($array as $key => $value) {
        if (($a >= $offset) && ($a - $offset < $length))
            $output_array[$key] = $value;
        $a++;
    }
    return $output_array;
}
14-Mar-2007 04:09
I noticed that some other people made supportive functions for maintaining
numeric keys for PHP versions less than 5.0.2. So here is my version of it.

<?php

//Slice an array but keep numeric keys
function narray_slice($array, $offset, $length) {
   
    //Check if this version already supports it
    if (str_replace('.', '', PHP_VERSION) >= 502)
       return array_slice($array, $offset, $length, true);
       
    foreach ($array as $key => $value) {
   
        if ($a >= $offset && $a - $offset <= $length)
            $output_array[$key] = $value;
        $a++;
       
    }
   
    return $output_array;

}

?>
aflavio at gmail dot com 01-Mar-2007 09:43
/**
    * Remove a value from a array
    * @param string $val
    * @param array $arr
    * @return array $array_remval
    */
    function array_remval($val, &$arr)
    {
          $array_remval = $arr;
          for($x=0;$x<count($array_remval);$x++)
          {
              $i=array_search($val,$array_remval);
              if (is_numeric($i)) {
                  $array_temp  = array_slice($array_remval, 0, $i );
                $array_temp2 = array_slice($array_remval, $i+1, count
($array_remval)-1 );
                $array_remval = array_merge($array_temp, $array_temp2);
              }
          }
          return $array_remval;
    }

$stack=Array('apple','banana','pear','apple', 'cherry', 'apple');
array_remval("apple", $stack);

//output: Array('banana','pear', 'cherry')
Apware 16-Feb-2007 12:34
A simple test of this function:

<?php

print_r(array_slice(array('a','b','c','d'), 0, 3));        // normal behaviour

print_r(array_slice(array('a','b','c','d'), 0, 10));    // result: no error,
returns as many as possible

print_r(array_slice(array(), 0, 10));                    // result: no error,
returns empty array

?>
19-Dec-2006 05:10
The version check on "ps at b1g dot de" function fails on my copy of PHP.  My
Version of PHP is "4.3.10-18", and it ends up checking 4310 <=> 502.
Since we are looking for a version over 4.1.0, we cas use version_compare.
 
<?php
    // PHP >= 5.0.2 is able to do this itself
    if(function_exists('version_compare') and version_compare(PHP_VERSION,
'5.0.2') >= 0) {
      return array_slice($array, $offset, $length, true);
    }
?>
ludvig ericson at http://toxik.a12.se/ 05-Nov-2006 11:49
This function can also be used for pure laziness,
<?php
$myVar = end(array_slice(anotherFunction(), 0, 1));
?>
Imagine that anotherFunction() returns, say, three indexes, and you are sure
you only want the Nth index, you could use this as a poor man's way of getting
by the fact that PHP can't do this:
<?php
$myVar = (anotherFunction())[1];
?>
Which is sad.
ps at b1g dot de 03-Nov-2006 10:44
The following function is the same as array_slice with preserve_keys=true, but
it works with PHP versions < 5.0.2.
When PHP >= 5.0.2 is available, the function uses the faster PHP-own
array_slice-function with preserve_keys=true, otherwise it uses its own 
implementation.

<?php
/**
 * array_slice with preserve_keys for every php version
 *
 * @param array $array Input array
 * @param int $offset Start offset
 * @param int $length Length
 * @return array
 */
function array_slice_preserve_keys($array, $offset, $length = null)
{
    // PHP >= 5.0.2 is able to do this itself
    if((int)str_replace('.', '', phpversion()) >= 502)
        return(array_slice($array, $offset, $length, true));

    // prepare input variables
    $result = array();
    $i = 0;
    if($offset < 0)
        $offset = count($array) + $offset;
    if($length > 0)
        $endOffset = $offset + $length;
    else if($length < 0)
        $endOffset = count($array) + $length;
    else
        $endOffset = count($array);
   
    // collect elements
    foreach($array as $key=>$value)
    {
        if($i >= $offset && $i < $endOffset)
            $result[$key] = $value;
        $i++;
    }
   
    // return
    return($result);
}
?>

Good for backwards compatibility I hope somebody might find this useful.
david at bagnara dot org 19-Oct-2006 03:42
I was trying to pass an argument list through the constructors. I tried various
things such as func_get_args(). My conclusion is to pass the args to the
constructor as an array. Each constructor can remove the fields it wants and
pass the array on.

Using the following prototype, each child class can have any number of
parameters added to the beginning of the class constructor and the rest passed
onto the parent.

If the default value is desired for an argument, just pass NULL.

This could possibly be better done with array_shift or the like.

<?php

class aChild extends aParent
{
    // TODO customise this list for this class
    public
        $a, $b, $c;

    function __construct( $args = array() )
    {
        //set up default values for this class
        // TODO customise this list for this class
        $default = array( "a-def", "b-def", "c-def" ) ;
        // now overwrite the default with non NULL args
        foreach( $args as $key=>$val )
        {
            // more args than needed?
            if( !isset( $default[$key] ) )
            {
                break;
            }
            // this arg not null
            if( isset( $val ) )
            {
                $default[$key] = $val ;
            }
        }
        // set this to the new values
        // TODO customise this list for this class
        list( $this->a, $this->b, $this->c ) = $default ;
        // take off the ones we used
        $args = array_slice( $args, count( $default ) ) ;
        parent::__construct( $args ) ;
    }
}

$x = new aChild( array( "aChild a", NULL, "aChild c", NULL, "aParent second",
"aParent third" ) ) ;
?>
DRB 24-Aug-2006 08:08
In response to the problem mentioned in the previous post (no name 06-May-2006
12:21) the following is a working solution:

$myarray = array_slice($myarray, 1, count($myarray), true);

It is too bad that the "preserve_keys" option is not available for the
array_shift and array_pop functions as this would be somewhat simpler.
06-May-2006 07:21
If you specify the fourth argument (to not reassign the keys), then there
appears to be no way to get the function to return all values to the end of the
array. Assigning -0 or NULL or just putting two commas in a row won't return
any results.
taylorbarstow at the google mail service 07-Apr-2006 09:01
Array slice function that works with associative arrays (keys):

function array_slice_assoc($array,$keys) {
    return array_intersect_key($array,array_flip($keys));
}
andreasblixt (at) msn (dot) com 06-Sep-2005 04:53
<?php
    // Combines two arrays by inserting one into the other at a given position
then returns the result
    function array_insert($src, $dest, $pos) {
        if (!is_array($src) || !is_array($dest) || $pos <= 0) return FALSE;
        return array_merge(array_slice($dest, 0, $pos), $src, array_slice
($dest, $pos));
    }
?>
ssb45 at cornell dot edu 28-Jul-2005 02:20
In reply to jenny at jennys dot info:

Here is a much easier way to find the $offset of a $key in an $array:

$offset = array_search($key, array_keys($array));
fanfatal at fanfatal dot pl 08-Jul-2005 10:09
Hmm ... i wrote an usefull function whitch is such like strpos but it works on
arrays ;]

<?php
/*
 *    Find position of first occurrence of a array
 *
 *    @param array $haystack
 *    @param array $needle
 *    @return int
 *    @author FanFataL
 */
function array_pos($haystack, $needle) {
    $size = count($needle);
    $sizeh = count($haystack);
    if($size > $sizeh) return false;

    $scale = $sizeh - $size + 1;

    for($i = 0; $i < $scale; $i++)
        if($needle === array_slice($haystack, $i, $size))
            return $i;

    return false;
}

// Sample:
$a = array('aa','bb','cc','dd','ee');
$b = array('cc','dd');
$pos = array_pos($a, $b);
?>

Greatings ;-)
...
david dot tulloh at infaze dot com dot au 24-Jun-2005 01:26
Nice one liner to extract a column from a 2D array.
It works by using array_slice on every row, through array_map.

<?php
// set up a small test environment
$test_subject[] = array("a", "b", "c");
$test_subject[] = array("d", "e", "f");

$column=1;

// do the actual work
$result = array_map('array_slice', $test_subject,
    array_fill(0, count($test_subject), $column),
    array_fill(0, count($test_subject), 1)
);

// and the end result
result == array ( array("b"), array("e") );
?>
liz at matrixmailing dot com 06-Jun-2005 09:16
For those with PHP < 5.0.2, and have a number as your array key, to avoid
having the key reset with array_slice, add a blank character to the beginning
or end of the key.
<?

$array[" ".$key] = $value;

?>
bishop 08-Dec-2004 09:58
Sometimes you need to pick certain non-integer and/or non-sequential keys out
of an array. Consider using the array_pick() implementation below to pull
specific keys, in a specific order, out of a source array:

<?php

$a = array ('a' => 1, 'b' => 2, 'c' => 3, 'd' => 4);
$b = array_pick($a, array ('d', 'b'));

// now:
// $a = array ('a' => 1, 'c' => '3');
// $b = array ('d' => 4, 'b' => '2');

function &array_pick(&$array, $keys)
{
    if (! is_array($array)) {
        trigger_error('First parameter must be an array', E_USER_ERROR);
        return false;
    }

    if (! (is_array($keys) || is_scalar($keys))) {
        trigger_error('Second parameter must be an array of keys or a scalar
key', E_USER_ERROR);
        return false;
    }

    if (is_array($keys)) {
        // nothing to do
    } else if (is_scalar($keys)) {
        $keys = array ($keys);
    }

    $resultArray = array ();
    foreach ($keys as $key) {
        if (is_scalar($key)) {
            if (array_key_exists($key, $array)) {
                $resultArray[$key] = $array[$key];
                unset($array[$key]);
            }
        } else {
            trigger_error('Supplied key is not scalar', E_USER_ERROR);
            return false;
        }
    }

    return $resultArray;
}

?>
pies at sputnik dot pl 18-Sep-2004 04:29
My shot at Dams's array_slice_key() implementation:

function array_slice_key($array, $offset, $len=-1){

    if (!is_array($array))
        return FALSE;

    $length = $len >= 0? $len: count($array);
    $keys = array_slice(array_keys($array), $offset, $length);
    foreach($keys as $key) {
        $return[$key] = $array[$key];
    }
 
    return $return;
}
Samuele at norsam dot org 05-Apr-2004 04:44
Note that if $offset+$length>count($array) then resulting array will NOT be
filled with empty elements at his end, so it is not sure that it will have
exactly $length elements. Example:
<?php
$a=Array(7,32,11,24,65); // count($a) is 5
$b=array_slice($a,2,4);  // 2+4=6, and 6>count($a)
print_r($b);
?>
will return a 3-elements array:
  Array
  (
      [0] => 11
      [1] => 24
      [2] => 65
  )
23-Feb-2004 10:47
Use unset() to delete a associative array.

Ex:
<?php
                                                                              
                                               
$item['chaise'] = array ('qty' => 1,
                        'desc' => 'Chaise bercante 10"',
                        'avail' => 10);
                                                                              
                                               
$item['divan'] = array ('qty' => 1,
                        'desc' => 'Divan brun laitte"',
                        'avail' => 10);
                                                                              
                                               
if (isset($item['chaise'])) {
        ++$item['chaise']['qty'];
        }
                                                                              
                                               
unset($item['divan']);
                                                                              
                                               
foreach ($item as $s) {
        echo "<br />Commande " . $s['qty'] . " " . $s['desc'];
}
                                                                              
                                               
?>
jenny at jennys dot info 22-Feb-2004 06:12
Here's a function which returns the array offset based on the array key.  This
is useful if you'd like to use array_slice to get all keys/values after key
"foo".

<?
function array_offset($array, $offset_key) {
  $offset = 0;
  foreach($array as $key=>$val) {
    if($key == $offset_key)
      return $offset;
    $offset++;
  }
  return -1;
}

$array = array('foo'=>'foo', 'bar'=>'bar', 'bash'=>'bash', 'quux'=>'quux');
print_r($array);
// Prints the following:
// Array
// (
//     [foo] => foo
//     [bar] => bar
//     [bash] => bash
//     [quux] => quux
// )

$offset = array_offset($array,'bar');
// $offset now contains '1'
$new = array_slice($array,$offset+1);
print_r($new);
// Prints the following:
// Array
// (
//     [bash] => bash
//     [quux] => quux
// )
?>
webmaster_nospam at wavesport dot com 13-Nov-2002 12:48
This function may surprise you if you use arbitrary numeric values for keys,
i.e.

<?php
//create an array
$ar = array('a'=>'apple', 'b'=>'banana', '42'=>'pear', 'd'=>'orange');

print_r($ar);
// print_r describes the array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [42] => pear
//    [d] => orange
// )

//use array_slice() to extract the first three elements
$new_ar = array_slice($ar, 0, 3);

print_r($new_ar);
// print_r describes the new array as:
// Array
// (
//    [a] => apple
//    [b] => banana
//    [0] => pear
// )
?>

The value 'pear' has had its key reassigned from '42' to '0'.

When $ar is initially created the string '42' is automatically type-converted
by array() into an integer.  array_slice() and array_splice() reassociate
string keys from the passed array to their values in the returned array but
numeric keys are reindexed starting with 0.
t dot oddy at ic dot ac dot uk 25-Apr-2002 01:47
[Editor's Note:
It is easier to do the same thing using array_values()
]
array_slice() can be used to "re-index" an array to start from key 0.  For
example, unpack creates an array with keys starting from 1;

<?php
var_dump(unpack("C*","AB"));
?>

produces

<?php
array(2) {
  [1]=>
  int(65)
  [2]=>
  int(66)
}
?>

and

<?php
var_dump(array_slice(unpack("C*","AB"),0));
?>

give you

<?php
array(2) {
  [0]=>
  int(65)
  [1]=>
  int(66)
}
?>
developer at i-space dot org 03-Feb-2002 04:22
remember that array_slice returns an array with the current element. you must
use array_slice($array, $index+1) if you want to get the next elements.
richardgere at jippii dot fi 27-Jan-2002 05:14
The same thing, written by a maladroit :)

<?php
function array_slice2( $array, $offset, $length = 0 )
{
  if( $offset < 0 )
    $offset = sizeof( $array ) + $offset;

  $length = ( !$length ? sizeof( $array ) : ( $length < 0 ? sizeof( $array ) -
$length : $length + $offset ) );

  for( $i = $offset; $i < $length; $i++ )
    $tmp[] = $array[$i];

  return $tmp;     
}
?>
dams at php dot net 16-Dec-2001 03:09
Here is a version of Array_slice which takes into account keys.

That may be a suggestion for future developpement.

<?php
function array_slice_key($array, $offset){
  if (!is_array($array))
      return FALSE;
     
  if (func_num_args() == 3){
    $length = func_get_arg(2);
    $length = max(0,intval($length));
  } else {
    $length = count($array);
  }
 
  $i = 0;
  $return = array();
  $keys = array_slice(array_keys($array), $offset, $length);
  foreach( $keys as $key){
    $return[$key] = $array[$key];
  }
  return $return;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Feb 28 20:12:08 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • その他の基本モジュール
  • JSON
  • JSON 関数
  • json_ decode
  • json_ encode
  • json_ last_ error

json_encode> <JSON 関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
json_decode

(PHP 5 >= 5.2.0, PECL json >= 1.2.0)

json_decode — JSON 文字列をデコードする

説明

mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [,
int $options = 0 ]]] )

JSON エンコードされた文字列を受け取り、それを PHP の変数に変換します。

パラメータ

json

    デコード対象となる json 文字列。

    この関数は UTF-8 でエンコードされたデータでのみ動作します。

assoc

    TRUE の場合は、返されるオブジェクトが連想配列形式になります。

depth

    ユーザ指定の再帰の深さ。

options

    JSON デコードオプションのビットマスク。現在サポートしているオプションは
    JSON_BIGINT_AS_STRING のみです (デフォルトでは、大きな整数値を float に変換
    します)。

    この変更は開発版の PHP に含まれています。おそらく 5.3 より先のバージョンに
    なるでしょう。

返り値

json でエンコードされたデータを、適切な PHP の型として返します。 true、false お
よび null (大文字小文字を区別しません) はそれぞれ TRUE、FALSE そして NULL とし
て返されます。 json のデコードに失敗したりエンコードされたデータが再帰制限を超
えていたりした場合は NULL を返します。

例

例1 json_decode() の例

<?php
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

fprintf> <echo
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
explode

(PHP 4, PHP 5)

explode — 文字列を文字列により分割する

説明

array explode ( string $delimiter , string $string [, int $limit ] )

文字列の配列を返します。この配列の各要素は、 string を文字列 delimiter で区切っ
た部分文字列となります。

パラメータ

delimiter

    区切り文字列。

string

    入力文字列。

limit

    limit に正の値が指定された場合、返される配列には最大 limit の要素が含まれ、
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strnatcasecmp> <stristr
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
strlen

(PHP 4, PHP 5)

strlen — 文字列の長さを得る

説明

int strlen ( string $string )

与えられた string の長さを返します。

パラメータ
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes substr
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Mon Feb 28 20:12:08 2011 UTC

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes substr
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Feb 27 18:11:32 2011 UTC
string

    長さを調べる文字列。

返り値

成功した場合に string の長さ、 string が空の文字列だった場合に 0 を返します。

例

例1 strlen() の例

<?php
$str = 'abcdef';
echo strlen($str); // 6

$str = ' ab cd ';
echo strlen($str); // 7
?>

参考

  • count() - 変数に含まれるすべての要素、あるいはオブジェクトに含まれるプロパ
    ティの数を数える
  • mb_strlen() - 文字列の長さを得る



strnatcasecmp> <stristr
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes strlen
canschi dot sergiu at yahoo dot com 08-Jan-2011 09:52
Hello all,

May I pos my firs  function as novice in php here .
This funtion count all characters in a strign without spaces , so only chars,
no spaces .

<?php
function countchar ($string) {
   
$result = strlen ($string)  -   substr_count($string, ' ');
echo $result; 
}

countchar ($a);
?>

Hope to be useful for somebody !
basil at gohar dot us 08-Jun-2010 09:03
We just ran into what we thought was a bug but turned out to be a documented
difference in behavior between PHP 5.2 & 5.3.  Take the following code example:

<?php

$attributes = array('one', 'two', 'three');

if (strlen($attributes) == 0 && !is_bool($attributes)) {
    echo "We are in the 'if'\n";  //  PHP 5.3
} else {
    echo "We are in the 'else'\n";  //  PHP 5.2
}

?>

This is because in 5.2 strlen will automatically cast anything passed to it as
a string, and casting an array to a string yields the string "Array".  In 5.3,
this changed, as noted in the following point in the backward incompatible
changes in 5.3 (http://www.php.net/manual/en/migration53.incompatible.php):

"The newer internal parameter parsing API has been applied across all the
extensions bundled with PHP 5.3.x. This parameter parsing API causes functions
to return NULL when passed incompatible parameters. There are some exceptions
to this rule, such as the get_class() function, which will continue to return
FALSE on error."

So, in PHP 5.3, strlen($attributes) returns NULL, while in PHP 5.2, strlen
($attributes) returns the integer 5.  This likely affects other functions, so
if you are getting different behaviors or new bugs suddenly, check if you have
upgraded to 5.3 (which we did recently), and then check for some warnings in
your logs like this:

strlen() expects parameter 1 to be string, array given in /var/www/sis/lib/
functions/advanced_search_lib.php on line 1028

If so, then you are likely experiencing this changed behavior.
Vladimir Zafirov 27-May-2009 04:28
You can also just say:
<?php
  strlen(utf8_decode($a))
?>
The utf8_decode($a) will take care of converting the utf characters that have
more than one byte in to one symbol and the strlen() will count those correctly
as length 1.
anto dot justus at gmail dot com 24-Apr-2009 03:14
It seems to me that all strings in PHP are ASCII, this is fine for some but for
me I need more. I thought I would show off a small function that I made that
will tell you the length of a UTF-8 string. This comes in handy if you want to
restrict the size of user input to say 30 chars - but don't want to force ascii
only input on your users.

<?php
function utf8_strlen($str)
    {
    $count = 0;

    for($i = 0; $i < strlen($str); $i++)
        {
        $value = ord($str[$i]);
        if($value > 127)
            {
            if($value >= 192 && $value <= 223)
                $i++;
            elseif($value >= 224 && $value <= 239)
                $i = $i + 2;
            elseif($value >= 240 && $value <= 247)
                $i = $i + 3;
            else
                die('Not a UTF-8 compatible string');
            }
      
        $count++;
        }
  
    return $count;
    }
?>
Amaroq 20-Mar-2009 07:51
When dealing with submitted forms that you've imposed a character limit on, you
must remember that functions that count characters consider "\r\n" to be two
characters.

<?php
//These will both output 2.
echo strlen("\r\n");
echo mb_strlen("\r\n");
?>

If I had thought of this starting out, I would have saved myself several hours
of trouble trying to get php to cut a message to the same length that my
auxiliary javascript validation imposed on it.
Anonymous 16-Feb-2009 05:51
simple speed test for UTF-8 strings:

<?php

header("Content-type: text/html; charset=UTF-8");
ini_set('mbstring.internal_encoding', 'UTF-8');

?><pre><?

function utf8_strlen($s) {
    $c = strlen($s); $l = 0;
    for ($i = 0; $i < $c; ++$i) if ((ord($s[$i]) & 0xC0) != 0x80) ++$l;
    return $l;
}

function utf0_strlen($s) {
    $l = 0; $i = 0;
    while ($n = ord($s[$i++])) if (($n & 0xC0) != 0x80) ++$l;
    return $l;
}

function utfs_strlen($s) {
    $c = strlen($s);
    $l = 0;
    for($i = 0; $i < $c; $i++) {
        $v = ord($s[$i]);
        if($v > 127) {
            if($v >= 192 && $v <= 223) ++$i;
            elseif($v >= 224 && $v <= 239) $i += 2;
            elseif($v >= 240 && $v <= 247) $i += 3;
            else die('Not a UTF-8 compatible string');
        }
        ++$l;
    }
    return $l;
}

function spl_strlen($s) {
  return count(preg_split("//u", $s)) - 2;
}

function dcd_strlen($s) {
    return strlen(utf8_decode($s));
}

function preg_strlen($s) {
  return preg_match_all('/[\x00-\x7F\xC0-\xFD]/', $s, $d);
}

$src = '=123! !ы"в#$%&\'()*+,—./:;<=>?@[\]^_`{|}~'.
    '    йцукенгшщзхъфывапролджтьбю'.chr(0).'ы';

$tc = 10000; //test count

$l = mb_strlen($src, 'UTF-8'); //real testing string length

$lst = array('strlen', 'mb_strlen', 'dcd_strlen',
    'preg_strlen', 'utfs_strlen', 'utf8_strlen',
    'utf0_strlen', 'spl_strlen'); // list of functions

foreach ($lst as $f) {
    $t = microtime(1);
    for($i = 0; $i < $tc; $i++) $f($src);
    $t = microtime(1) - $t;
    printf("%14s : %0.6f : %03u%s\n",
        $f, $t, $q = $f($src), $q != $l ? ' - failed!' : '');
}
?></pre>

main results:
        strlen : 0.009419 : 112 failed!
     mb_strlen : 0.016377 : 075
    dcd_strlen : 0.063055 : 075
   preg_strlen : 1.106809 : 075
   utfs_strlen : 1.701586 : 075
   utf8_strlen : 2.321344 : 075
   utf0_strlen : 2.578518 : 073 failed!
    spl_strlen : 3.789029 : 075
jonathan dot protzenko at gmail dot com 23-Aug-2008 02:35
paolo dot mosna at gmail dot com's solution for getting the length of a unicode
string didn't work for me. Instead, I used the following dirty function (which
can be surely improved, but I'm giving the idea) :

<?php
function ustrlen($s) {
  $a = preg_split("//u", $s);
  $i = -2;
  foreach ($a as $b)
    $i++;
  return $i;
}
?>

This will return the correct length for any unicode string.
radu_keepwalking at yahoo dot com 15-Apr-2008 11:37
Another way to preview a text with or without html tags, and end not cut in a
middle of a word.

<?php
function preview_text($TEXT, $LIMIT, $TAGS = 0) {

    // TRIM TEXT
    $TEXT = trim($TEXT);

    // STRIP TAGS IF PREVIEW IS WITHOUT HTML
    if ($TAGS == 0) $TEXT = preg_replace('/\s\s+/', ' ', strip_tags($TEXT));

    // IF STRLEN IS SMALLER THAN LIMIT RETURN
    if (strlen($TEXT) < $LIMIT) return $TEXT;

    if ($TAGS == 0) return substr($TEXT, 0, $LIMIT) . " ...";
    else {

        $COUNTER = 0;
        for ($i = 0; $i<= strlen($TEXT); $i++) {

            if ($TEXT{$i} == "<") $STOP = 1;

            if ($STOP != 1) {

                $COUNTER++;
            }

            if ($TEXT{$i} == ">") $STOP = 0;
            $RETURN .= $TEXT{$i};

            if ($COUNTER >= $LIMIT && $TEXT{$i} == " ") break;

        }

        return $RETURN . "...";
    }

}
?>
mail4adry at inwind dot it 21-Aug-2007 08:53
This can be useful to put a preview of an article on the front page when the
rest of the article is displayed on another page:

<?php
function getPreviewText($text) {
    // Strip all tags
    $desc = strip_tags(html_entity_decode($text), "<a><em>");
    $charlen = 0; $crs = 0;
    if(strlen_HTML($desc) == 0)
        $preview = substr($desc, 0, 69);
    else
    {
        $i = 0;
        while($charlen < 80)
        {
            $crs = strpos($desc, " ", $crs)+1;
            $lastopen = strrpos(substr($desc, 0, $crs), "<");
            $lastclose = strrpos(substr($desc, 0, $crs), ">");
            if($lastclose > $lastopen)
            {
                // we are not in a tag
                $preview = substr($desc, 0, $crs);
                $charlen = strlen_noHTML($preview);
            }
            $i++;
        }
    }
    return $preview."&#8230;"
}
?>

will display text cut as near as possible to character 80 respecting each <a>
and <em> tags and ending with ...
mail4adry at inwind dot it 21-Aug-2007 04:28
<?php
/**
 * return length of a string regardeless of html tags in it
 *
 * @param string $html
 * @return string
 */
function strlen_noHtml($string){
    $crs = 0;
    $charlen = 0;
    $len = strlen($string);
    while($crs < $len)
    {
        $offset = $crs;
        $crs = strpos($string, "<", $offset);
        if($crs === false)
        {
           $crs = $len;
           $charlen += $crs - $offset;
        }
        else
        {
            $charlen += $crs - $offset;
            $crs = strpos($string, ">", $crs)+1;
        }
    }
    return $charlen;
}

/**
 * return length of a string regarding html tags in it
 *
 * @param string $html
 * @return string
 */
function strlen_Html($string){
    $crs = 0;
    $charlen = 0;
    $len = strlen($string);
    while($crs < $len)
    {
        $scrs = strpos($string, "<", $crs);
        if($scrs === false)
        {
           $crs = $len;
        }
        else
        {
            $crs = strpos($string, ">", $scrs)+1;
            if($crs === false)
                $crs = $len;
            $charlen += $crs - $scrs;
        }
    }
    return $charlen;
}
?>

Example:

<?php
$text = "<p>Test 'a' paragraph.</p><!-- Comment --> Other text";

echo "strlen without HTML chars:".strlen_noHtml($text);
echo "<br>";
echo "strlen of HTML chars:".strlen_html($text);
?>

Will output:
strlen without HTML chars:30
strlen of HTML chars:23
bradmwalker at cableone dot net 01-Jul-2007 10:48
want a predicate that tests a string for emptiness? use strlen instead of empty
(). strlen only returns a false-equivalent value for ''.

example:

<?php
// takes string_array and returns an array without any values w/empty strings
function filter_empties ($string_array) {
    // note: the immensely retarded empty() function returns true on string '0'
    // use strlen as empty string predicate
    return count($string_array) ? array_filter ($string_array, 'strlen') :
$string_array;
}
?>
topera at gmail dot com 27-Jun-2007 03:32
<?php
//------------------------------------------
// This function returns the necessary
// size to show some string in display
// For example:
// $a = strlen_layout("WWW"); // 49
// $a = strlen_layout("..."); // 16
// $a = strlen_layout("Hello World"); // 99
//------------------------------------------
function strlen_pixels($text) {
    /*
        Pixels utilized by each char (Verdana, 10px, non-bold)
        04: j
        05: I\il,-./:; <espace>
        06: J[]f()
        07: t
        08: _rz*
        09: ?csvxy
        10: Saeko0123456789$
        11: FKLPTXYZbdghnpqu
        12: AÇBCERV
        13: <=DGHNOQU^+
        14: w
        15: m
        16: @MW
    */

    // CREATING ARRAY $ps ('pixel size')
    // Note 1: each key of array $ps is the ascii code of the char.
    // Note 2: using $ps as GLOBAL can be a good idea, increase speed
    // keys:    ascii-code
    // values:  pixel size

    // $t: array of arrays, temporary
    $t[] = array_combine(array(106), array_fill(0, 1, 4));

    $t[] = array_combine(array(73,92,105,108,44), array_fill(0, 5, 5));
    $t[] = array_combine(array(45,46,47,58,59,32), array_fill(0, 6, 5));
    $t[] = array_combine(array(74,91,93,102,40,41), array_fill(0, 6, 6));
    $t[] = array_combine(array(116), array_fill(0, 1, 7));
    $t[] = array_combine(array(95,114,122,42), array_fill(0, 4, 8));
    $t[] = array_combine(array(63,99,115,118,120,121), array_fill(0, 6, 9));
    $t[] = array_combine(array(83,97,101,107), array_fill(0, 4, 10));
    $t[] = array_combine(array(111,48,49,50), array_fill(0, 4, 10));
    $t[] = array_combine(array(51,52,53,54,55,56,57,36), array_fill(0, 8, 10));
    $t[] = array_combine(array(70,75,76,80), array_fill(0, 4, 11));
    $t[] = array_combine(array(84,88,89,90,98), array_fill(0, 5, 11));
    $t[] = array_combine(array(100,103,104), array_fill(0, 3, 11));
    $t[] = array_combine(array(110,112,113,117), array_fill(0, 4, 11));
    $t[] = array_combine(array(65,195,135,66), array_fill(0, 4, 12));
    $t[] = array_combine(array(67,69,82,86), array_fill(0, 4, 12));
    $t[] = array_combine(array(78,79,81,85,94,43), array_fill(0, 6, 13));
    $t[] = array_combine(array(60,61,68,71,72), array_fill(0, 5, 13));
    $t[] = array_combine(array(119), array_fill(0, 1, 14));
    $t[] = array_combine(array(109), array_fill(0, 1, 15));
    $t[] = array_combine(array(64,77,87), array_fill(0, 3, 16));  
  
    // merge all temp arrays into $ps
    $ps = array();
    foreach($t as $sub) $ps = $ps + $sub;
  
    // USING ARRAY $ps
    $total = 1;
    for($i=0; $i<strlen($text); $i++) {
        $temp = $ps[ord($text[$i])];
        if (!$temp) $temp = 10.5; // default size for 10px
        $total += $temp;
    }
    return $total;
}
?>

Rafael Pereira dos Santos
paolo dot mosna at gmail dot com 10-Jan-2007 03:58
Title: Strlen() ant bytes string lenght.
Just to remember that strlen() return the number of characters of a string.
Often the strlen() function is used to compute the length in bytes of a string.
This is correct until string is single byte encoded. If multi-byte char-set is
used this constraint i no more verified. So when you require the number of
bytes of a ASCII or UTF-8 encoded string, it is better to use following
function:

<?php
    /**
     * Count the number of bytes of a given string.
     * Input string is expected to be ASCII or UTF-8 encoded.
     * Warning: the function doesn't return the number of chars
     * in the string, but the number of bytes.
     *
     * @param string $str The string to compute number of bytes
     *
     * @return The length in bytes of the given string.
     */
    function strBytes($str)
    {
      // STRINGS ARE EXPECTED TO BE IN ASCII OR UTF-8 FORMAT
     
      // Number of characters in string
      $strlen_var = strlen($str);
 
      // string bytes counter
      $d = 0;
     
     /*
      * Iterate over every character in the string,
      * escaping with a slash or encoding to UTF-8 where necessary
      */
      for ($c = 0; $c < $strlen_var; ++$c) {
         
          $ord_var_c = ord($str{$d});
         
          switch (true) {
              case (($ord_var_c >= 0x20) && ($ord_var_c <= 0x7F)):
                  // characters U-00000000 - U-0000007F (same as ASCII)
                  $d++;
                  break;
             
              case (($ord_var_c & 0xE0) == 0xC0):
                  // characters U-00000080 - U-000007FF, mask 110XXXXX
                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                  $d+=2;
                  break;
 
              case (($ord_var_c & 0xF0) == 0xE0):
                  // characters U-00000800 - U-0000FFFF, mask 1110XXXX
                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                  $d+=3;
                  break;
 
              case (($ord_var_c & 0xF8) == 0xF0):
                  // characters U-00010000 - U-001FFFFF, mask 11110XXX
                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                  $d+=4;
                  break;
 
              case (($ord_var_c & 0xFC) == 0xF8):
                  // characters U-00200000 - U-03FFFFFF, mask 111110XX
                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                  $d+=5;
                  break;
 
              case (($ord_var_c & 0xFE) == 0xFC):
                  // characters U-04000000 - U-7FFFFFFF, mask 1111110X
                  // see http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8
                  $d+=6;
                  break;
              default:
                $d++;   
          }
      }
     
      return $d;
    }
?>

This function has been adapted form the JSON function used to convert character
in UTF-8 representation.

With this new function we solved problem in JSON and in PEAR/SOAP php
libraries.
liquix at hjelpesentral dot no 17-Aug-2006 12:57
An easy function to make sure the words in a sentence is not above the maximum
lengt of characters. This is used to prevent that users posting for an example
comments on your page and drag the page width out.

Returns true or false
<?php
function wordlength($txt, $limit)
{
   $words = explode(' ', $txt);

   foreach($words as $v)
   {
       if(strlen($v) > $limit)
       {
            return false;
       }
   }

   return true;
}
?>

Uses like this:
<?php

$txt = "Onelongword and some small ones";

if(!wordlength($txt, 10))
{
    die("One of the words where too long");
}

?>

That will return false since one of the words in $txt is too long. (Maximum set
to 10)
Hage Yaapa 12-Jan-2006 11:51
Sometimes you really wanna make sure no user edits the 'maxlength' attribute of
the HTML page and POSTs a 5 Mb string to your script. Probably, advanced
programmers already take precautions, this one is just a very simple tip for
beginners on how to check the character lenth of the POST variables in an
effective manner.

<?php

// ALWAYS clean the POST variables of any HTML tags first.
// And here we do it in one easy step.
 $_POST = array_map('strip_tags', $_POST);
 
// These are the POST variables in the example
 $alias = $_POST['alias'];
 $name = $_POST['name'];
 $status = $_POST['status'];
 $year = $_POST['year'];
 
// We create an array that contains the expected character length
// for each POST variable
 $exlen = array (
      'alias'=>12,
      'name'=>30,
      'status'=>10,
      'year'=>4
);
 
// Now check if any of them exceeds the expected length
 foreach ($exlen as $key=>$val) {
      if (strlen($$key) > $val) {
            // The user has definitely edited the HTML! He has a lot of time,
could be bad.
          // This section can edited according to your needs - very simple to
complex.
          // Log the event or send an e-mail to the admin at the basic.
          // However, in this example we just print a warning.   
          print 'WARNING: The FBI is looking for you, dude!';
          exit;
          // The best part is that the script won't look for any other
          // POST variables other than the ones which we are expecting already.
      }
}
?>

Similarly, with the use of Regular Expressions you could check the data type
and string format too.
bartek at proteus,pl 19-Jul-2005 12:08
> Just a precisation, maybe obvious, about the strlen() behaviour:
> with binary strings (i.e. returned by the pack() finction) is made
> a byte count... so strlen returns the number of bytes contained
> in the binary string.

This is not always true. strlen() might be shadowed by mb_strlen().
If that is the case it might treat binary data as unocode string and return
wrong value (I just found it out after fighting with egroupware email
attachment handling bug).

So, if your data is binary I would suggest using somthing like this (parts of
the code from egroupware):

<?php
$has_mbstring = extension_loaded('mbstring') ||@dl
(PHP_SHLIB_PREFIX.'mbstring.'.PHP_SHLIB_SUFFIX);
$has_mb_shadow = (int) ini_get('mbstring.func_overload');

if ($has_mbstring && ($has_mb_shadow & 2) ) {
   $size = mb_strlen($this->output_data,'latin1');
} else {
   $size = strlen($this->output_data);
}
?>
--
Bartek
triadsebas at triads dot buildtolearn dot net 17-Jul-2005 12:49
A nice use of the strlen() function, the following function will check if one
of the words in $input is longer than $maxlenght,  $maxlenght is standard 40.
<?php
function check_input($input, $maxlenght= 40)
$temp_array = explode(" ", $input);
foreach ($temp_array as $word) {
if (strlen($word) > $maxlenght) {
return false;
}
}
return true;
}
?>
Example:
<?php
if (!check_input($_POST['message'])) {
print 'One of your words in your message in longer than 40 chars. Please edit
your message.';
}
?>
http://nsk.wikinerds.org 22-Apr-2005 04:02
Beware: strlen() counts new line characters at the end of a string, too!

<?php
  $a = "123\n";
  echo "<p>".strlen($a)."</p>";
?>

The above code will output 4.
packe100 at hotmail dot com 14-Mar-2005 03:07
Just a precisation, maybe obvious, about the strlen() behaviour: with binary
strings (i.e. returned by the pack() finction) is made a byte count... so
strlen returns the number of bytes contained in the binary string.
php at capcarrere dot org 06-Feb-2005 02:32
Hi,

if you want to trim a sentence to a certain number of
characters so that it is displayed nicely in a HTML page
(in a table for instance), then you actually want to count
the number of characters displayed rather than the
actual number of characters of the string.

For instance:
"L&agrave; bas" should really be 5 character long,
rather than 10.

Also you don't want to cut a special char in the middle.
For instance:
If 3 is the maximum number of characters,

"L&agrave; bas"  should be cut as "L&agrave; ..."
and not "L&a...";

So here is a simple method to dothat:

<?php
function nicetrim ($s) {
// limit the length of the given string to $MAX_LENGTH char
// If it is more, it keeps the first $MAX_LENGTH-3 characters
// and adds "..."
// It counts HTML char such as &aacute; as 1 char.
//

  $MAX_LENGTH = 22;
  $str_to_count = html_entity_decode($s);
  if (strlen($str_to_count) <= $MAX_LENGTH) {
    return $s;
  }

  $s2 = substr($str_to_count, 0, $MAX_LENGTH - 3);
  $s2 .= "...";
  return htmlentities($s2);
}
?>
Patrick(a)Bierans()de 29-Nov-2004 11:24
<?php
function array_strlen(&$array,$fuse=200,$depth=0)
{
  // returns the strlen of all elements in a given array, an array inside
  // an array will add another 8 points

  // fuse: Recursion is limited to 200 calls, if you want unlimited calls
  //       use fuse=0 - warning: if an array element contains a reference
  //       to the array itself it will run endless if fuse set to 0 or below.

  $strlen=0;
  $fuse-=1;
  if ($fuse==0) return $strlen;

  if (is_array($array))
  {
    if ($depth>0) $strlen+=8;
    reset($array);
    $depth+=1;
    foreach ($array as $sub) $strlen+=array_strlen($sub,$fuse,$depth);
  }
  else
  {
    $strlen+=strlen($array);
  }
  return $strlen;
} // array_strlen()
?>
chernyshevsky at hotmail dot com 05-Sep-2004 10:36
The easiest way to determine the character count of a UTF8 string is to pass
the text through utf8_decode() first:

<?php
$length = strlen(utf8_decode($s));
?>

utf8_decode() converts characters that are not in ISO-8859-1 to '?', which, for
the purpose of counting, is quite alright.
dtorop932 at hotmail dot com 03-Dec-2003 10:25
To follow up on dr-strange's utf8_strlen(), here are two succinct alternate
versions.  The first is slower for multibyte UTF-8, faster for single byte
UTF-8.  The second should be much faster for all but very brief strings, and
can easily live inline in code.  Neither validates the UTF-8.

Note that the right solution is to use mb_strlen() from the mbstring module, if
one is lucky enough to have that compiled in...

<?php
// choice 1
function utf8_strlen($str) {
  $count = 0;
  for ($i = 0; $i < strlen($str); ++$i) {
    if ((ord($str[$i]) & 0xC0) != 0x80) {
      ++$count;
    }
  }
  return $count;
}

// choice 2
function utf8_strlen($str) {
  return preg_match_all('/[\x00-\x7F\xC0-\xFD]/', $str, $dummy);
}
?>
Patrick 01-Aug-2003 09:36
Just a general pointer that I have hit upon after some struggle:

Most blobs can easily be treated as strings, so to retreat info on a blob or to
manipulate it in any way, I recommend trying out string-related functions
first. They've worked well for me.
suchy at ecl dot pl 13-May-2003 10:22
a little modification of rasmus solution

<?php
$tmp=0; $s="blah";
while($c=$s[$tmp++]) { echo $c; }
?>

but what happens when the string contains zeros?

<?php $s="blah0blah"; ?>
the script stops....

here is sample of code and the string is correcly parsed using strlen() even
when containing zeros:

<?php
$s="blah0blah";
$si=0;
$s_len=strlen($s);
for ($si=0;$si<$s_len;$si++)
{
 $c=$s[$si];
 echo $c;
}
?>
dr - strange at shaw dot ca 03-Oct-2002 02:08
It seems to me that all strings in PHP are ASCII, this is fine for some but for
me I need more. I thought I would show off a small function that I made that
will tell you the length of a UTF-8 string. This comes in handy if you want to
restrict the size of user input to say 30 chars - but don't want to force ascii
only input on your users.

<?php
function utf8_strlen($str)
    {
    $count = 0;

    for($i = 0; $i < strlen($str); $i++)
        {
        $value = ord($str[$i]);
        if($value > 127)
            {
            if($value >= 192 && $value <= 223)
                $i++;
            elseif($value >= 224 && $value <= 239)
                $i = $i + 2;
            elseif($value >= 240 && $value <= 247)
                $i = $i + 3;
            else
                die('Not a UTF-8 compatible string');
            }
       
        $count++;
        }
   
    return $count;
    }
?>
26-May-2001 07:11
Note that PHP does not need to traverse the string to know its length with
strlen(). The length is an attribute of the array used to store the characters.
Do not count on strings being terminated by a NULL character. This may not work
with some character encodings, and PHP strings are binary-safe !
PHP4 included a NULL character after the last position in the string, however,
this does not change the behavior of strlen or the binary safety: this NULL
character is not stored.

However PHP4 allows now to reference the position after the end of the string
for both read and write access:

* when reading at that position (e.g. $s[strlen($s)]), you get a warning with
PHP3, and you'll get 0 with PHP4 not returning a warning.

* you can assign it directly in PHP4 with one character to increase the string
length by one character:

<?php
$s[strlen($s)]=65; //append 'A'
$s[]=65; //append 'A'
$s[strlen($s)]=0; //append NUL (stored!)
$s[]=0; //append NUL (stored!)
?>

Such code did not work in PHP3, where the only way to extend the string length
was by using a concat operator.

However, reading or writing past the end of the string, using an array index
superior to the current string length will still raise a warning in PHP4.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Feb 27 18:11:32 2011 UTC
substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes substr
southern 25-Feb-2011 02:56
substr is case sensitive.  To make it case-insensitive, use something like:

<?php
if (substr($text,0,6)==strtoupper($find_me))
{
echo "Case insensitive $find_me detected.";
}
?>
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Feb 27 18:11:32 2011 UTC

    もし limit パラメータが負の場合、最後の -limit 個の要素を除く全ての構成要素
    が返されます。

    limit パラメータがゼロの場合は、1 を指定したものとみなされます。

歴史的理由により、implode() はいずれのパラメータ順も受け入れることができますが
、 explode() はそうできません。 string 引数の前に必ず delimiter 引数がくるよう
に確認する必要があります。

返り値

string の内容を delimiter で分割した文字列の配列を返します。

空の文字列 ("") が delimiter として使用された場合、 explode() は FALSE を返しま
す。delimiter に引数 string に含まれていない値が含まれている場合は、 limit が負
の値なら空の配列、そうでなければ引数 string を含む配列を返します。

変更履歴

バージョン                     説明
5.1.0      limit に負の数を指定できるようになりました。
4.0.1      limit パラメータが追加されました。

例

例1 explode() の例

<?php
// 例 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// 例 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>

例2 limit パラメータの例

<?php
$str = 'one|two|three|four';

// 正の値を持つ limit
print_r(explode('|', $str, 2));

// 負の値を持つ limit (PHP 5.1 以降)
print_r(explode('|', $str, -1));
?>

上の例の出力は以下となります。

Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • preg_split() - 正規表現で文字列を分割する
  • str_split() - 文字列を配列に変換する
  • str_word_count() - 文字列に使用されている単語についての情報を返す
  • strtok() - 文字列をトークンに分割する
  • implode() - 配列要素を文字列により連結する



fprintf> <echo
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes explode
jehoshua02 at gmail dot com 23-Feb-2011 07:37
If you are looking for a simpler multi-explode that returns a flat array, use a
regular expression to standardize all delimiters before exploding.

<?php

// function to explode on multiple delimiters
function multi_explode($pattern, $string, $standardDelimiter = ':')
{
    // replace delimiters with standard delimiter, also removing redundant
delimiters
    $string = preg_replace(array($pattern, "/{$standardDelimiter}+/s"),
$standardDelimiter, $string);

    // return the results of explode
    return explode($standardDelimiter, $string);
}

// test

    // set up variables
    $string = "zero  one | two :three/ four\ five:: six|| seven eight nine\n
ten \televen twelve thirteen fourteen fifteen";
    $pattern = '/[:\|\\\\\/\s]/';  // colon (:), pipe (escaped '\|'), slashes
(escaped '\\\\' and '\/'), white space (\s)

    // call function
    $result = multi_explode($pattern, $string);
   
    // display results
    var_dump($result);

?>

Output:

array
  0 => string 'zero' (length=4)
  1 => string 'one' (length=3)
  2 => string 'two' (length=3)
  3 => string 'three' (length=5)
  4 => string 'four' (length=4)
  5 => string 'five' (length=4)
  6 => string 'six' (length=3)
  7 => string 'seven' (length=5)
  8 => string 'eight' (length=5)
  9 => string 'nine' (length=4)
  10 => string 'ten' (length=3)
  11 => string 'eleven' (length=6)
  12 => string 'twelve' (length=6)
  13 => string 'thirteen' (length=8)
  14 => string 'fourteen' (length=8)
  15 => string 'fifteen' (length=7)

See:
http://www.php.net/manual/en/book.pcre.php
dhz 30-Dec-2010 05:21
A one-liner to extract a portion of a string, starting from the END of the
string....
<?php
$extracted_string = implode('.', array_slice(explode('.', $original_string),
-2));
?>
jamestrowbridge at gmail dot com 19-Dec-2010 08:50
FYI, use double quotes for the separator parameter:

<?php
$string = "Hello\nHello\nHello";
$arr = explode('\n',$string);//Using single quotes
print_r($arr);
/*
Returns:
Array
(
    [0] => Hello
Hello
Hello
)
*/
?>
Is different than:
<?php
$string = "Hello\nHello\nHello";
$arr = explode("\n",$string);//Using double quotes
print_r($arr);
/*
Returns:
Array
(
    [0] => Hello
    [1] => Hello
    [2] => Hello
)
*/
?>
xananax at yelostudio dot com 10-Nov-2010 02:18
I needed a way to explode an array, just like one would explode a string, and
could not find anything on the net.
Maybe this can be made more efficient, but it fits my purpose. Contributions
and comments welcome.
<?php
    /**
     * Allows to explode an array into multiple arrays on a set delimiter.
     * Delimiter Can be set either by key, or by value, or by both (in which
case,
     * both key and value must be strictly equal to values provided).
     * Note that numeric indexes don't work since the original array is reduced
     * at each loop (thus making numerical indexes useless).
     * @param array $array the array to explode
     * @param mixed $key the key to check
     * @param mixed $value the value to check
     * @param int $limit You can limit the number of parts with this. If set to
0, limit is infinite
     * @param boolean $removeDelimiter if set to TRUE, removes the delimiter
key from the returned arrays
     * @return array|boolean an array of as many parts as needed, or FALSE on
error.
     */
    function array_explode(array $array, $key=NULL, $value=NULL, $limit=0,
$removeDelimiter=TRUE){
        if($key===NULL && $value===NULL){return FALSE;}
        $parts = array();
        $delimiter = NULL;
        $partsN = 0;
        while($v = current($array)){
            $k = key($array);
            if(
                (($key!==NULL && $value!==NULL) && ($k===$key && $v===$value))
||
                ($key!==NULL && $value===NULL && $k===$key) ||
                ($value!==NULL && $key===NULL && $v===$value)
            ){
                $delimiter = TRUE;
                if($removeDelimiter){array_shift($array);}
                $partsN++;
                if($partsN===$limit){$parts[$partsN] = $array;return $parts;}
            }
            $parts[$partsN][] = array_shift($array);
        }
        if($delimiter){
            return $parts;
        }
        return FALSE;
    }
?>
mvpetrovich 10-Sep-2010 12:35
In using explode, with the list command, you will get errors if the number of
variables is larger than the produced array by explode.

For example:

<?php
$str = 'aa|bb|cc';
list($one, $two, $three, $four) = explode('|', $str);
?>

To solve these cases, where you would like to assign empty strings to the extra
variables (and eliminate errors), append a delimiter string to the string as
follows.

<?php
$str = 'aa|bb|cc';
list($one, $two, $three, $four) = explode('|', $str . '|||');
?>

This way, the list variables will always be assigned.
tiago dot dias at flow-me dot com 09-Sep-2010 10:40
Beaware splitting empty strings.

<?php
$str = "";
$res = explode(",", $str);
print_r($res);
?>

If you split an empty string, you get back a one-element array with 0 as the
key and an empty string for the value.

Array
(
    [0] =>
)

To solve this, just use array_filter() without callback. Quoting manual page
"If the callback function is not supplied, array_filter() will remove all the
entries of input that are equal to FALSE.".

<?php
$str = "";
$res = array_filter(explode(",", $str));
print_r($res);
?>

Array
(
)
Cody G. 08-Aug-2010 01:41
I'm sure you guys get just a bit frustrated at times when you need a fraction
of a very simple string and you use "explode()", but then you have to define a
whole extra variable. (That is because you need to store a function-returned
array in a variable before you can extract a value).

If you're extracting the last half, or third, of a string, there's an easy
inline workaround. Check this:

<?php
 $mystr = "separated-text";
 print(str_replace("-","",strstr("-",$mystr)));
 //Returns "text"
?>

If the separator (dash) can be left in, you don't even need the "str_replace()"
function.

Lets try this with 3 fractions:

<?php
 $mystr = "separated-text-again";
 //Comment submission wouldn't let me
 // combine this into one statement.
 // That's okay, it's more readable.
 $split1 = str_replace("-","",strstr("-",$mystr));
 print(str_replace("-","",strstr("-",$split1)));
 //Returns "again"
?>

Anything more than 3 fractions gets really confusing, in that case you should
use "explode()".

Hope this helps!
~Cody G.
m0gr14 at gmail dot com 31-Jul-2010 02:02
Here's a function for "multi" exploding a string.

<?php
//the function
//Param 1 has to be an Array
//Param 2 has to be a String
function multiexplode ($delimiters,$string) {
    $ary = explode($delimiters[0],$string);
    array_shift($delimiters);
    if($delimiters != NULL) {
        foreach($ary as $key => $val) {
             $ary[$key] = multiexplode($delimiters, $val);
        }
    }
    return  $ary;
}

// Example of use
$string = "1-2-3|4-5|6:7-8-9-0|1,2:3-4|5";
$delimiters = Array(",",":","|","-");

$res = multiexplode($delimiters,$string);
echo '<pre>';
print_r($res);
echo '</pre>';

//returns
/*
Array
(
    [0] => Array
        (
            [0] => Array
                (
                    [0] => Array
                        (
                            [0] => 1
                            [1] => 2
                            [2] => 3
                        )

                    [1] => Array
                        (
                            [0] => 4
                            [1] => 5
                        )

                    [2] => Array
                        (
                            [0] => 6
                        )

                )

            [1] => Array
                (
                    [0] => Array
                        (
                            [0] => 7
                            [1] => 8
                            [2] => 9
                            [3] => 0
                        )

                    [1] => Array
                        (
                            [0] => 1
                        )

                )

        )

    [1] => Array
        (
            [0] => Array
                (
                    [0] => Array
                        (
                            [0] => 2
                        )

                )

            [1] => Array
                (
                    [0] => Array
                        (
                            [0] => 3
                            [1] => 4
                        )

                    [1] => Array
                        (
                            [0] => 5
                        )

                )

        )

)
*/
?>
info at noextratime dot com 04-Jul-2010 08:09
Here is a function for "double" exploding a string, like in the case of a
flattened multi-dimensional array.
<?php

function doubleExplode ($del1, $del2, $array){
    $array1 = explode("$del1", $array);
foreach($array1 as $key=>$value){
$array2 = explode("$del2", $value);
foreach($array2 as $key2=>$value2){
$array3[] = $value2; 
}
}
    $afinal = array();
for ( $i = 0; $i <= count($array3); $i += 2) {
    if($array3[$i]!=""){
    $afinal[trim($array3[$i])] = trim($array3[$i+1]);
    }
}
return $afinal;
}
$proddetails = 'Size=Large, Color=Black';
$test = doubleExplode(',', '=', $proddetails);
print_r($test);
?>

/*
Array
(
    [Size] => Large
    [Color] => Black
)
*/
jessebusman at gmail dot com 27-May-2010 07:45
Sometimes you need to explode a string by different delimiters. In that case
you can use this function:

<?php
print_r(explodeX(Array(".","!"," ","?",";"),"This.sentence?contains wrong;
characters"));
// Returns:
// Array("This","sentence","contains","wrong","characters")

function explodeX($delimiters,$string)
{
    $return_array = Array($string); // The array to return
    $d_count = 0;
    while (isset($delimiters[$d_count])) // Loop to loop through all delimiters
    {
        $new_return_array = Array();
        foreach($return_array as $el_to_split) // Explode all returned elements
by the next delimiter
        {
            $put_in_new_return_array = explode($delimiters
[$d_count],$el_to_split);
            foreach($put_in_new_return_array as $substr) // Put all the
exploded elements in array to return
            {
                $new_return_array[] = $substr;
            }
        }
        $return_array = $new_return_array; // Replace the previous return array
by the next version
        $d_count++;
    }
    return $return_array; // Return the exploded elements
}
?>
Onur Nizam onur dot nizam at yahoo dot com 16-May-2010 07:27
The regular expression parameters such as \n or \t can be used as well as other
strings as the delimeter which can be used to parse any given text files or
downloaded web pages to read line by line.

An example may be considered as, name surname and phone numbers are written
into a text file line by line and columns are seperated by tabs, can be
exploded and read easily through the return and tab characters. After storing
them in the array they can be manipulated or displayed in any other formats.

<?php
// Explode text file and store each row of the file into the array elements
function explodeRows($data) {
  $rowsArr = explode("\n", $data);
  return $rowsArr;
}

// Explode the columns according to tabs
function explodeTabs($singleLine) {
  $tabsArr = explode("\t", $singleLine);
  return $tabsArr;
}

// Open the text file and get the content
$filename = "phonebook.txt";
$handle   = fopen($filename, 'r');
$data     = fread($handle, filesize($filename));
$rowsArr  = explodeRows($data);

// Display content which is exploded by regular expression parameters \n and \t
for($i=0;$i<count($rowsArr);$i++) {
  $lineDetails = explodeTabs($rowsArr[$i]);
    echo "<br>Name : " . $lineDetails[0];
    echo "<br>Surname : " . $lineDetails[1];
    echo "<br>Tel Number : " . $lineDetails[2];
    echo "<br><br>";
}

/*
phonebook.txt text file can be something like this;
name1    sname1    +905429998877
name2    sname2    +905429998876
name3    sname3    +905429998875

The output will be as follows;
Name : name1
Surname : sname1
Tel Number : +905429998877

Name : name2
Surname : sname2
Tel Number : +905429998876

Name : name3
Surname : sname3
Tel Number : +905429998875
*/

?>
drieick at hotmail dot com 22-Apr-2010 03:34
When explode is given an empty $string, it'll return an array with a single
empty element.

<?php

# returns Array([0] => );
print_r(explode(',', ''));

?>

This is not a bug, but it can be pretty tricky (especially with callbacks that
expect a certain type of array). So, be sure to check your arrays. It's not a
bug, because there's nothing to split.
locoluis at gmail dot com 08-Apr-2010 04:02
That with all stateful encodings that use bytes between 0x00 and 0x7f for
something other than, say, encoding ASCII characters. Including GBK, BIG5,
Shift-JIS etc.

explode and other such PHP functions work on bytes, not characters.

What you do is to convert the string to UTF-8 using iconv(), then explode, then
go back to GBK.
gxd305 at gmail dot com 17-Nov-2009 01:47
when the encoding of $string  is 'GBK' and $delimiter is '|' , the return value
may be wrong.
for example:

<?php
$result = explode("|", "滕华弢|海青");
var_dump($result);
?>

and the result will be:
array (
  0 => '滕华,
  1 => '',
  2 => '海青',
)

bcz "弢" 's GBK is '0x8f7c'. and "|" 's ASCII is '0x7c'.

So, all GBK-encoding characters include '7c' will lead to the error result.
nick dot brown at free dot fr 14-Oct-2009 10:47
My application was running out of memory (my hosting company limits PHP to
32MB).  I have a string containing between 100 and 20000 triplets, separated by
a space, with each triplet consisting of three double-precision numbers,
separated by commas.  Total size of the biggest string, with 20000 triplets, is
about 1MB.

The application needs to split the string into triplets, then split the triplet
into numbers.  In C, this would take up about 480K (20000 times 3 x 8 bytes)
for the final array.  The intermediate array of strings shouldn't be much
bigger than the long string itself (1MB).  And I expect some overhead from PHP,
say 300% to allow for indexes etc.

Well, PHP5 manages to run out of memory *at the first stage* (exploding the
string on the space character).  I'm expecting to get an array of 20000
strings, but it needs more than 32MB to store it.  Amazing.

The workaround was easy and had the bonus of producing faster code (I compared
it on a 10000 triplet string).  Since in any case I had to split up the numeric
triplets afterwards, I decided to use preg_match_all() on the original string. 
Despite the fact that the resulting "matches" array contains more data per
element than the result of explode() - because it stores the matched triplet,
plus its component numbers - it takes up far less memory.

Moral: be careful when using explode() on big strings, as it can also explode
your memory usage.
Jrg Wagner 12-Oct-2009 09:28
Here is a very concise example for a quote aware explode - substrings in quotes
(or another definable enclosure char) are not exploded.
An additional parameter allows to determine whether the enclosure chars should
be preserved within the resulting array elements. Please note that as of PHP
5.3 the str_getcsv function offers a built-in way to do this!

<?php
function csv_explode($delim=',', $str, $enclose='"', $preserve=false){
  $resArr = array();
  $n = 0;
  $expEncArr = explode($enclose, $str);
  foreach($expEncArr as $EncItem){
    if($n++%2){
      array_push($resArr, array_pop($resArr) . ($preserve?$enclose:'') .
$EncItem.($preserve?$enclose:''));
    }else{
      $expDelArr = explode($delim, $EncItem);
      array_push($resArr, array_pop($resArr) . array_shift($expDelArr));
      $resArr = array_merge($resArr, $expDelArr);
    }
  }
  return $resArr;
}
?>
Anonymous 28-Sep-2009 10:20
Note to the previous example: we can do the whole string->array conversion
using explode() exclusively.

<?php
    // converts pure string into a trimmed keyed array
    function string_2_array( $string, $delimiter = ',', $kv = '=>')
    {
        if ($element = explode( $delimiter, $string ))
        {
            // create parts
            foreach ( $element as $key_value )
            {
                // key -> value pair or single value
                $atom = explode( $kv, $key_value );

                if( trim($atom[1]) )
                {
                  $key_arr[trim($atom[0])] = trim($atom[1]);
                }
                else
                {
                    $key_arr[] = trim($atom[0]);
                }
            }
        }
        else
        {
            $key_arr = false;
        }

        return $key_arr;
    }
?>
Anonymous 03-Sep-2009 02:18
<?php
// converts pure string into a trimmed keyed array
function string2KeyedArray($string, $delimiter = ',', $kv = '=>') {
  if ($a = explode($delimiter, $string)) { // create parts
    foreach ($a as $s) { // each part
      if ($s) {
        if ($pos = strpos($s, $kv)) { // key/value delimiter
          $ka[trim(substr($s, 0, $pos))] = trim(substr($s, $pos + strlen
($kv)));
        } else { // key delimiter not found
          $ka[] = trim($s);
        }
      }
    }
    return $ka;
  }
} // string2KeyedArray

$string = 'a=>1, b=>23   , $a, c=> 45% , true,d => ab c ';
print_r(string2KeyedArray($string));
?>

Array
(
  [a] => 1
  [b] => 23
  [0] => $a
  [c] => 45%
  [1] => true
  [d] => ab c
)
Anonymous 11-Aug-2009 05:55
If you are exploding string literals in your code that have a dollar sign ($)
in it, be sure to use single-quotes instead of double-quotes, since php will
not spare any chance to interpret the variable-friendly characters after the
dollar signs as variables, leading to unintended consequences, the most typical
being missing characters.

<?php
$doubleAr = explode(" ", "The $quick brown fox");
$singleAr = explode(" ", 'The $quick brown fox');
echo $doubleAr[1]; // prints "";
echo $singleAr[1]; // prints "$quick";
?>
vzverev at nm dot ru 24-Jul-2009 02:33
If you are going to use foreach after explode(), call reset() before foreach:
<?php
$arr = explode("\n", 'test \n test2 \n test3');
reset($arr);
foreach($arr as $line)
{ /* do something */ ; }
?>
marcus at synchromedia dot co dot uk 15-Jun-2009 01:50
Just in case the comment about empty strings is not clear:

<?php
$a = array();
var_dump($a);
$s = implode("\n", $a);
var_dump($s);
$b = explode("\n", $s);
var_dump($b);
$b = preg_split('/\n/', $s,-1,PREG_SPLIT_NO_EMPTY);
var_dump($b);
?>

Results in:

array(0) {
}
string(0) ""
array(1) {
  [0]=>
  string(0) ""
}
array(0) {
}

i.e. exploding an empty string results in an array with one element. You can
use preg_split to skip the empty item, but that may not be quite what you need
should your array have empty elements intentionally.
SR 21-Apr-2009 02:50
Keep in mind that explode() can return empty elements if the delimiter is
immediately repeated twice (or more), as shown by the following example:

<?php
$foo = 'uno dos  tres'; // two spaces between "dos" and "tres"
print_r(explode(' ', $foo));
?>

Array
(
    [0] => uno
    [1] => dos
    [2] =>
    [3] => tres
)

Needless to say this is definitely not intuitive and must be handled carefully.
Michael 19-Apr-2009 09:29
Here's a simple script which uses explode() to check to see if an IP address is
in an array (can be used as a ban-check, without needing to resort to database
storage and queries).

<?php

 function denied($one) {

  $denied = array(

   0 => '^255.255.255.255',
   1 => '^255.250',
   2 => '^255.255.250'

  );

  for ($i = 0 ; $i < sizeof($denied) ; $i++) {

   if (sizeof(explode($denied[$i], '^' . $one . '$')) == 2) {
    return true;
   }

  }

  return false;

 }

 if (denied($_SERVER['REMOTE_ADDR'])) {
  header('Location: denied.php');
 }

?>
Navi 31-Mar-2009 12:03
<?php
function my_explode($delim, $str, $lim = 1)
{
    if ($lim > -2) return explode($delim, $str, abs($lim));

    $lim = -$lim;
    $out = explode($delim, $str);
    if ($lim >= count($out)) return $out;

    $out = array_chunk($out, count($out) - $lim + 1);

    return array_merge(array(implode($delim, $out[0])), $out[1]);
}
?>
This function can assume `limit' parameter less than 0, for example:
<?php
print_r(my_explode('.', 'file.some.ext.jpg', -2));
?>
prints
Array
(
    [0] => file.some.ext
    [1] => jpg
)
adrian at bilsoftware dot com 23-Feb-2009 10:40
<?php
function explode_escaped($delimiter, $string){
        $exploded = explode($delimiter, $string);
        $fixed = array();
        for($k = 0, $l = count($exploded); $k < $l; ++$k){
            if($exploded[$k][strlen($exploded[$k]) - 1] == '\\') {
                if($k + 1 >= $l) {
                    $fixed[] = trim($exploded[$k]);
                    break;
                }
                $exploded[$k][strlen($exploded[$k]) - 1] = $delimiter;
                $exploded[$k] .= $exploded[$k + 1];
                array_splice($exploded, $k + 1, 1);
                --$l;
                --$k;
            } else $fixed[] = trim($exploded[$k]);
        }
        return $fixed;
    }
?>

Here's a function which explodes string with delimiter, but if delimiter is
"escaped" by backslash, function won't split in that point. Example:

<?php

$result = explode_escaped(',', 'string, piece, group\, item\, item2, next
\,asd');
print_r($result);
?>
Will give:
Array
(
    [0] => string
    [1] => piece
    [2] => group, item, item2
    [3] => next,asd
)
Elad Elrom 05-Dec-2008 05:02
<?php
// Remove words if more than max allowed character are insert or add a string
in case less than min are displayed
// Example: LimitText("The red dog ran out of thefence",15,20,"<br>");

function LimitText($Text,$Min,$Max,$MinAddChar) {
   if (strlen($Text) < $Min) {
       $Limit = $Min-strlen($Text);
       $Text .= $MinAddChar;
   }
   elseif (strlen($Text) >= $Max) {
       $words = explode(" ", $Text);
       $check=1;
       while (strlen($Text) >= $Max) {
           $c=count($words)-$check;          
           $Text=substr($Text,0,(strlen($words[$c])+1)*(-1));
           $check++;
       }
   }
 
   return $Text;
}
?>
Nobody 17-Nov-2008 01:38
A really better and shorter way to get extension is via:

<?php $extension = end(explode('.', $filename)); ?>

this will print the last part after the last dot :)
shaun 29-Aug-2008 07:24
For anyone trying to get an array of key => value pairs from a query string,
use parse_str.  (Better alternative than the explode_assoc function listed way
down the page unless you need different separators.)
pinkgothic at gmail dot com 15-Oct-2007 09:26
coroa at cosmo-genics dot com mentioned using preg_split() instead of explode()
when you have multiple delimiters in your text and don't want your result array
cluttered with empty elements. While that certainly works, it means you need to
know your way around regular expressions... and, as it turns out, it is slower
than its alternative. Specifically, you can cut execution time roughly in half
if you use array_filter(explode(...)) instead.

Benchmarks (using 'too many spaces'):
Looped 100000 times:
preg_split: 1.61789011955 seconds
filter-explode: 0.916578054428 seconds

Looped 10000 times:
preg_split: 0.162719011307 seconds
filter-explode: 0.0918920040131 seconds

(The relation is, evidently, pretty linear.)

Note: Adding array_values() to the filter-explode combination, to avoid having
those oft-feared 'holes' in your array, doesn't remove the benefit, either.
(For scale - the '9' becomes a '11' in the benchmarks above.)

Also note: I haven't tested anything other than the example with spaces - since
djogo_curl at yahoo's note seems to imply that explode() might get slow with
longer delimiters, I expect this would be the case here, too.

I hope this helps someone. :)
seventoes at gmail dot com 10-Dec-2006 03:49
Note that explode, split, and functions like it, can accept more than a single
character for the delimiter.

<?php
$string = "Something--next--something else--next--one more";

print_r(explode('--next--',$string));
?>
djogo_curl at yahoo 01-Dec-2004 12:50
Being a beginner in php but not so in Perl, I was used to split() instead of
explode(). But as split() works with regexps it turned out to be much slower
than explode(), when working with single characters.
coroa at cosmo-genics dot com 16-Nov-2003 04:01
To split a string containing multiple seperators between elements rather use
preg_split than explode:

preg_split ("/\s+/", "Here  are    to    many  spaces in   between");

which gives you
array ("Here", "are", "to", "many", "spaces", "in", "between");
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Feb 27 17:11:15 2011 UTC

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>

上の例の出力は以下となります。

object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

例2 もうひとつの例

<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>

例3 json_decode() でのありがちな間違い

<?php

// 以下の文字列は JavaScript としては有効ですが JSON としては無効です

// 名前と値はダブルクォートで囲む必要があります。
// シングルクォートは使えません
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// 名前をダブルクォートで囲まなければなりません
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// 最後にカンマをつけてはいけません
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>

例4 depth エラー

<?php
// データをエンコードします
$json = json_encode(
    array(
        1 => array(
            'English' => array(
                'One',
                'January'
            ),
            'French' => array(
                'Une',
                'Janvier'
            )
        )
    )
);

// エラーを定義します
$json_errors = array(
    JSON_ERROR_NONE => 'No error has occurred',
    JSON_ERROR_DEPTH => 'The maximum stack depth has been exceeded',
    JSON_ERROR_CTRL_CHAR =>
 'Control character error, possibly incorrectly encoded',
    JSON_ERROR_SYNTAX => 'Syntax error',
);

// さまざまな深さのエラーを表示します
foreach(range(4, 3, -1) as $depth) {
    var_dump(json_decode($json, True, $depth));
    echo 'Last error : ', $json_errors[json_last_error()], PHP_EOL, PHP_EOL;
    }
?>

上の例の出力は以下となります。

array(1) {
  [1]=>
  array(2) {
    ["English"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["French"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
Last error : No error has occurred

NULL
Last error : The maximum stack depth has been exceeded

例5 json_decode() で大きな整数値を扱う例

<?php
$json = '12345678901234567890';

var_dump(json_decode($json));
var_dump(json_decode($json, false, 512, JSON_BIGINT_AS_STRING));

?>

上の例の出力は以下となります。

float(1.2345678901235E+19)
string(20) "12345678901234567890"

注意

    注意:

    JSON の仕様は JavaScript そのものではなく、JavaScript のサブセットです。

    注意:

    デコードに失敗した場合は、json_last_error() を使用すればエラーの正確な状態
    を知ることができます。

変更履歴

 バージョン                                 説明
将来のバージ options パラメータが追加されました。
ョン
5.3.0        オプションの depth が追加されました。デフォルトの再帰の深さが 128
             から 512 に増えました。
5.2.3        ネストの制限が 20 から 128 に拡張されました。

参考

  • json_encode() - 値を JSON 形式にして返す
  • json_last_error() - 直近に発生したエラーを返す



json_encode> <JSON 関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 25 Feb 2011
 
add a note add a note User Contributed Notes json_decode
contacto at hardcode dot com dot ar 25-Nov-2010 09:53
If you have a json encoded array that contains non UTF8 chars, this function
will do the trick:

<?php
$array = json_decode(safeJSON_chars($iso_8859_1_data));

function safeJSON_chars($data) {

    $aux = str_split($data);

    foreach($aux as $a) {

        $a1 = urlencode($a);

        $aa = explode("%", $a1);

        foreach($aa as $v) {

            if($v!="") {

                if(hexdec($v)>127) {

                $data = str_replace($a,"&#".hexdec($v).";",$data);

                }

            }

        }

    }

    return $data;

}
?>

Of course it works if you want to show this inside a HTML page, so entities
will be converted.
Hope this helps you as much as it helped me.
Anonymous 03-Nov-2010 09:22
to deal with escaped dbl-quotes this is required:
if ($json[$i] == '"' && $json[($i-1)]!="\\")    $comment = !$comment;
revision is as follows:

<?php
if ( !function_exists('json_decode') ){
function json_decode($json)
{
    $comment = false;
    $out = '$x=';
 
    for ($i=0; $i<strlen($json); $i++)
    {
        if (!$comment)
        {
            if (($json[$i] == '{') || ($json[$i] == '['))       $out .= ' array
(';
            else if (($json[$i] == '}') || ($json[$i] == ']'))   $out .= ')';
            else if ($json[$i] == ':')    $out .= '=>';
            else                         $out .= $json[$i];         
        }
        else $out .= $json[$i];
        if ($json[$i] == '"' && $json[($i-1)]!="\\")    $comment = !$comment;
    }
    eval($out . ';');
    return $x;
}
}
?>
Jestep 08-Sep-2010 08:26
I had a JSON string with multiple commas in it without any quotes, which was
causing the json_decode to return false.

Once the double quotes were added, everything worked out fine.

A quick:

while(strpos($contents, ',,') !== false) {
    $contents = str_replace(',,', ',"",', $contents);
}

solved the problem, and the function worked correctly. If you have tried
everything and are still a FALSE return, I suggest trying the JSON validator in
another post.
T erkif 10-Aug-2010 10:03
it seems, that some of the people are not aware, that if you are using
json_decode to decode a string it HAS to be a propper json string:

<?php
var_dump(json_encode('Hello'));

var_dump(json_decode('Hello'));  // wrong
var_dump(json_decode("Hello")); // wrong
var_dump(json_decode('"Hello"')); // correct
var_dump(json_decode("'Hello'")); // wrong

result:

string(7) ""Hello""
NULL
NULL
string(5) "Hello"
NULL
zgardner at allofe dot com 19-Jul-2010 05:23
There seems to be a difference in the way json_decode works between 5.2.9 and
5.2.6. Trying to run json_decode on a URL in 5.2.6 will return the URL, but in
5.2.9 it will return NULL.

5.2.6
var_dump(json_decode("http://www.php.net")); // Displays string(18) "http://
www.php.net"

5.2.9
var_dump(json_decode("http://www.php.net")); // Displays NULL

The servers I tested it on both had json version 1.2.1.
steveo at crecon dot com 23-Jun-2010 06:11
I was getting an array like:
  Array
  (
      [COLUMNS] => Array
          (
              [0] => ID
              [1] => FIRST
              [2] => LAST
           )
      [DATA] => Array
          (
              [0] => Array
                    (
                          [0] => 10
                          [1] => Mary
                          [2] => Smith
                     )
               [1] => Array
                     (
                          [0] => 11
                          [1] => Joe
                          [2] => Black
                     )
               [2] => Array
                     (
                          [0] => 12
                          [1] => Tom
                          [2] => Green
                     )
               [3] => Array
       . . .

With lots more columns and data from a json_decode call to a Cold Fusion .cfc
which returned a database query. This is easy to turn into a nice associative
array with the following code:

<?php
  foreach ($results['DATA'] as $rowcount => $row){
     foreach ($row as $colcount => $col){
       $lines[$rowcount][$results['COLUMNS'][$colcount]]=$col;
     }
  }
?>

to get:
Array
(
  [0] => Array
       (
          [ID]      => 10
          [FIRST] => Mary
          [LAST]  => Smith
        )
  [1] => Array
       (
         [ID]       => 11
         [FIRST]  => Joe
         [LAST]   => Black
       )
. . . etc.

I hope this helps someone.
majca J 06-Jun-2010 12:42
Noted in a comment below is that this function will return NULL when given a
simple string.

This is new behavior - see the result in PHP 5.2.4 :
php > var_dump(json_decode('this is a simple string'));
string(23) "this is a simple string"

in PHP 5.3.2 :
php > var_dump(json_decode('this is a simple string'));
NULL

I had several functions that relied on checking the value of a purported JSON
string if it didn't decode into an object/array. If you do too, be sure to be
aware of this when upgrading to PHP 5.3.
phpuser 20-May-2010 10:52
If you keep having problems, try removing "problematic" characters from the
json string:

$obj = json_decode(preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $json_string);
NemoStein 19-May-2010 05:43
Pass you URL encoded ( urlencode($json) ), then decode it ( urldecode($_GET
['json']) )...

Should do the trick...
Mitchell Simoens 05-May-2010 11:27
In my case, I was passing simple JSON in the URL...

eg myfile.php?test=["one", "two", "three"]

but I kept getting NULL no matter what I tried. I did a simple echo of
$_REQUEST["test"] and noticed that the browser added the "\" to the
double-quotes. I had to prepare the data first then do the decode:

<?php
$data = str_replace("\\", "", $_REQUEST["test"]);
$results = json_decode($data);
?>

This produced what was expected
php dot net at spam dot lublink dot net 02-Apr-2010 02:25
If the JSON is coming from javascript watch out for undefined variables :

Javascript ( using dojo ) returns this to me sometimes :

{ "index" : [undefined] }

When I pass this to json_decode, it returns null. Make sure that you check all
your javascript variables properly because this can break whatever it is you
are doing.
CraigHarris at gmail dot com 19-Feb-2010 08:55
Be aware that json_decode() will return null if you pass it a JSON encoded
string.

<?php echo json_encode('Some String'); ?>
"Some String"
<?php echo json_decode(json_encode('Some String')); ?>
NULL
<?php // expected output ?>
Some String
php at hm2k.org 12-Feb-2010 12:45
If var_dump produces NULL, you may be experiencing JSONP aka JSON with padding,
here's a quick fix...

<?php

//remove padding
$body=preg_replace('/.+?({.+}).+/','$1',$body);

// now, process the JSON string
$result = json_decode($body);

var_dump($result);
?>
nix 29-Jan-2010 11:39
Be aware, when decoding JSON strings, where an empty string is a key, this
library replaces the empty string with "_empty_".

So the following code gives an unexpected result:
<?php
var_dump(json_decode('{"":"arbitrary"}'));
?>

The result is as follows:
object(stdClass)#1 (1) {
  ["_empty_"]=>
  string(6) "arbitrary"
}

Any subsequent key named "_empty_" (or "" [the empty string] again) will
overwrite the value.
yohan dot widyakencana at kreators dot com 29-Jan-2010 08:37
When in php 5.2.3, I found that json_decode 4000000000 float value into integer
value resulting int(-294967296) from var_dump function

When in php 5.3.x, php correctly returning float(4000000000)

thank you for people creating & upgrading php

Yohan W.
colin.mollenhour.com 21-Jan-2010 06:51
For those of you wanting json_decode to be a little more lenient (more like
Javascript), here is a wrapper:

<?php
function json_decode_nice($json, $assoc = FALSE){
    $json = str_replace(array("\n","\r"),"",$json);
    $json = preg_replace('/([{,])(\s*)([^"]+?)\s*:/','$1"$3":',$json);
    return json_decode($json,$assoc);
}
?>

Some examples of accepted syntax:

<?php
$json = '{a:{b:"c",d:["e","f",0]}}';
$json =
'{
   a : {
      b : "c",
      "d.e.f": "g"
   }
}';
?>

If your content needs to have newlines, do this:

<?php
$string = "This
Text
Has
Newlines";
$json = '{withnewlines:'.json_encode($string).'}';
?>

Note: This does not fix trailing commas or single quotes.
wesgeek at gmx dot com 24-Dec-2009 06:22
If you are having issues with magic_quotes_gpc being turned on and can't
disable it use json_decode(stripslashes($json)).
benny at zami-nospam-nga dot com 16-Oct-2009 09:35
I pulled my hair off for hours trying to get rid of strange backslashes in my
incoming JSON-data in POST-pool, making it impossible to decode the incoming
JSON-data.

For those of you facing the same problem:

just make sure you disable 'magic_quotes_gpc' in your php.ini and the incoming
data will not be pseudo-escaped anymore. Now your incoming JSON-data should
just be decoded fine.

Maybe this will help.
simonKenyonShepard at trisis dot co dot uk 14-Oct-2009 06:23
BEWARE!

json_decode will NOT WORK if there ARE LINE BREAKS in the JSON!

Use str_replace to get rid of them.
confusioner at msn dot com 18-Jul-2009 12:33
if you can not decode unicode characters with json_decode, use addslashes()
while using json_encode. The problem comes from unicode chars starting with \
such as \u30d7

$json_data = addslashes(json_encode($unicode_string_or_array));
Nick Telford 25-Jun-2009 11:06
In PHP <= 5.1.6 trying to decode an integer value that's > PHP_INT_MAX will
result in an intger of PHP_INT_MAX.

In PHP 5.2+ decoding an integer > PHP_INT_MAX will cause a conversion to a
float.

Neither behaviour is perfect, capping at PHP_INT_MAX is marginally worse, but
the float conversion loses precision.

If you expect to deal with large numbers at all, let alone in JSON, ensure
you're using a 64-bit system.
premiersullivan at gmail dot com 21-Jun-2009 11:14
This function will remove trailing commas and encode in utf8, which might solve
many people's problems. Someone might want to expand it to also change single
quotes to double quotes, and fix other kinds of json breakage.

<?php
    function mjson_decode($json)
    {
        return json_decode(removeTrailingCommas(utf8_encode($json)));
    }
   
    function removeTrailingCommas($json)
    {
        $json=preg_replace('/,\s*([\]}])/m', '$1', $json);
        return $json;
    }
?>
www at walidator dot info 30-May-2009 02:16
Here's a small function to decode JSON. It might not work on all data, but it
works fine on something like this:

$json_data = '{"response": {
    "Text":"Hello there"
 },
 "Details": null, "Status": 200}
 ';

===== CUt HERE :) =====

<?php
if ( !function_exists('json_decode') ){
function json_decode($json)
{ 
    // Author: walidator.info 2009
    $comment = false;
    $out = '$x=';
   
    for ($i=0; $i<strlen($json); $i++)
    {
        if (!$comment)
        {
            if ($json[$i] == '{')        $out .= ' array(';
            else if ($json[$i] == '}')    $out .= ')';
            else if ($json[$i] == ':')    $out .= '=>';
            else                         $out .= $json[$i];           
        }
        else $out .= $json[$i];
        if ($json[$i] == '"')    $comment = !$comment;
    }
    eval($out . ';');
    return $x;
} 
}
?>
Gravis 10-May-2009 02:38
with two lines you can convert your string from JavaScript toSource() (see
http://www.w3schools.com/jsref/jsref_toSource.asp) output format to JSON
accepted format.  this works with subobjects too!
note: toSource() is part of JavaScript 1.3 but only implemented in Mozilla
based javascript engines (not Opera/IE/Safari/Chrome).

<?php
  $str = '({strvar:"string", number:40, boolvar:true, subobject:{substrvar:"sub
string", subsubobj:{deep:"deeply nested"}, strnum:"56"}, false_val:false,
false_str:"false"})'; // example javascript object toSource() output

  $str = substr($str, 1, strlen($str) - 2); // remove outer ( and )
  $str = preg_replace("/([a-zA-Z0-9_]+?):/" , "\"$1\":", $str); // fix variable
names

  $output = json_decode($str, true);
  var_dump($output);
?>

var_dump output:
array(6) {
  ["strvar"]=>
  string(6) "string"
  ["number"]=>
  int(40)
  ["boolvar"]=>
  bool(true)
  ["subobject"]=>
  array(3) {
    ["substrvar"]=>
    string(10) "sub string"
    ["subsubobj"]=>
    array(1) {
      ["deep"]=>
      string(13) "deeply nested"
    }
    ["strnum"]=>
    string(2) "56"
  }
  ["false_val"]=>
  bool(false)
  ["false_str"]=>
  string(5) "false"
}

hope this saves someone some time.
jan at hooda dot de 21-Dec-2008 04:20
This function will convert a "normal" json to an array.

<?php
   function json_code ($json) { 

      //remove curly brackets to beware from regex errors

      $json = substr($json, strpos($json,'{')+1, strlen($json));
      $json = substr($json, 0, strrpos($json,'}'));
      $json = preg_replace('/(^|,)([\\s\\t]*)([^:]*) (([\\s\\t]*)):(([\\s\\t]
*))/s', '$1"$3"$4:', trim($json));

      return json_decode('{'.$json.'}', true);
   } 

   $json_data = '{
      a: 1,
      b: 245,
      c with whitespaces: "test me",
      d: "function () { echo \"test\" }",
      e: 5.66
   }'; 

   $jarr = json_code($json_data);
?>
Aaron Kardell 14-Nov-2008 03:39
Make sure you pass in utf8 content, or json_decode may error out and just
return a null value.  For a particular web service I was using, I had to do the
following:

<?php
$contents = file_get_contents($url);
$contents = utf8_encode($contents);
$results = json_decode($contents);
?>

Hope this helps!
steven at acko dot net 07-Oct-2008 07:49
json_decode()'s handling of invalid JSON is very flaky, and it is very hard to
reliably determine if the decoding succeeded or not. Observe the following
examples, none of which contain valid JSON:

The following each returns NULL, as you might expect:

<?php
var_dump(json_decode('['));             // unmatched bracket
var_dump(json_decode('{'));             // unmatched brace
var_dump(json_decode('{}}'));           // unmatched brace
var_dump(json_decode('{error error}')); // invalid object key/value
notation
var_dump(json_decode('["\"]'));         // unclosed string
var_dump(json_decode('[" \x "]'));      // invalid escape code

Yet the following each returns the literal string you passed to it:

var_dump(json_decode(' [')); // unmatched bracket
var_dump(json_decode(' {')); // unmatched brace
var_dump(json_decode(' {}}')); // unmatched brace
var_dump(json_decode(' {error error}')); // invalid object key/value notation
var_dump(json_decode('"\"')); // unclosed string
var_dump(json_decode('" \x "')); // invalid escape code
?>

(this is on PHP 5.2.6)

Reported as a bug, but oddly enough, it was closed as not a bug.

[NOTE BY danbrown AT php DOT net: This was later re-evaluated and it was
determined that an issue did in fact exist, and was patched by members of the
Development Team.  See http://bugs.php.net/bug.php?id=45989 for details.]
jrevillini 26-Sep-2008 07:01
When decoding strings from the database, make sure the input was encoded with
the correct charset when it was input to the database.

I was using a form to create records in the DB which had a content field that
was valid JSON, but it included curly apostrophes.  If the page with the form
did not have

<meta http-equiv="Content-Type" content="text/html;charset=utf-8">

in the head, then the data was sent to the database with the wrong encoding. 
Then, when json_decode tried to convert the string to an object, it failed
every time.
soapergem at gmail dot com 23-Aug-2008 06:59
There have been a couple of comments now alerting us to the fact that certain
expressions that are valid JavaScript code are not permitted within
json_decode. However, keep in mind that JSON is ***not*** JavaScript, but
instead just a subset of JavaScript. As far as I can tell, this function is
only allowing whatever is explicitly outlined in RFC 4627, the JSON spec.

For instance, ganswijk, the reason you can't use single quotes to enclose
strings is because the spec makes no mention of allowing single quotes (and
therefore they are not allowed). And the issue of adding an extra comma at the
end of an array is likewise not technically permitted in strict JSON, even
though it will work in JavaScript.

And xris, while the example you provided with an unenclosed string key within
an object is valid JavaScript, JavaScript != JSON. If you read it closely,
you'll see that the JSON spec clearly does not allow this. All JSON object keys
must be enclosed in double-quotes.

Basically, if there's ever any question for what is permitted, just read the
JSON spec: http://tools.ietf.org/html/rfc4627
bizarr3_2006 at yahoo dot com 06-Aug-2008 02:47
If json_decode() failes, returns null, or returns 1, you should check the data
you are sending to decode...

Check this online JSON validator... It sure helped me a lot.

http://www.jsonlint.com/
ganswijk at xs4all dot nl 07-Jul-2008 02:42
It was quite hard to figure out the allowed Javascript formats. Some extra
remarks:

json_decode() doesn't seem to allow single quotes:
<?php
print_r(json_decode('[0,{"a":"a","b":"b"},2,3]'));  //works
print_r(json_decode("[0,{'a':'a','b':'b'},2,3]"));  //doesn't work
?>

json_decode() doesn't allow an extra comma in a list of entries:
<?php
print_r(json_decode('[0,1 ]'));  //works
print_r(json_decode('[0,1,]'));  //doesn't work
?>

(I like to write a comma behind every entry when the entries are spread over
several lines.)

json_decode() does allow linefeeds in the data!
?>
xris / a t/ basilicom.de 27-Jun-2008 03:48
Please note: in javascript, the following is a valid object:
<?php
   { bar: "baz" }
?>

While PHP needs double quotes:

<?php
  { "bar": "baz" }
?>
phpben 16-Apr-2008 07:18
Re requiring to escape the forward slash:

I think PHP 5.2.1 had that problem, as I remember it occurring here when I
posted that comment; but now I'm on 5.2.5 it doesn't, so it has obviously been
fixed. The JSON one gets from all the browsers escape the forward slashes
anyway.
steve at weblite dot ca 24-Jan-2008 11:25
For JSON support in older versions of PHP you can use the Services_JSON class,
available at http://pear.php.net/pepr/pepr-proposal-show.php?id=198

<?php
if ( !function_exists('json_decode') ){
    function json_decode($content, $assoc=false){
                require_once 'Services/JSON.php';
                if ( $assoc ){
                    $json = new Services_JSON(SERVICES_JSON_LOOSE_TYPE);
        } else {
                    $json = new Services_JSON;
                }
        return $json->decode($content);
    }
}

if ( !function_exists('json_encode') ){
    function json_encode($content){
                require_once 'Services/JSON.php';
                $json = new Services_JSON;
               
        return $json->encode($content);
    }
}
?>
yasarbayar at gmail dot com 26-Jul-2007 09:13
It took me a while to find the right JSON string format grabbed from mysql to
be used in json_decode(). Here is what i came up with:

Bad(s) (return NULL):
{30:'13',31:'14',32:'15'}
{[30:'13',31:'14',32:'15']}
{["30":"13","31":"14","32":"15"]}

Good :
[{"30":"13","31":"14","32":"15"}]

returns:
array(1) { [0]=>  array(3) { [30]=>  string(2) "13" [31]=>  string(2) "14" [32]
=>  string(2) "15" } }

hope this saves sometime..
nospam (AT) hjcms (DOT) de 22-Apr-2007 04:15
You can't transport Objects or serialize Classes, json_* replace it bei
stdClass!
<?php

$dom = new DomDocument( '1.0', 'utf-8' );
$body = $dom->appendChild( $dom->createElement( "body" ) );
$body->appendChild( $dom->createElement( "forward", "Hallo" ) );

$JSON_STRING = json_encode(
   array(
      "aArray" => range( "a", "z" ),
      "bArray" => range( 1, 50 ),
      "cArray" => range( 1, 50, 5 ),
      "String" => "Value",
      "stdClass" => $dom,
      "XML" => $dom->saveXML()
   )
);

unset( $dom );

$Search = "XML";
$MyStdClass = json_decode( $JSON_STRING );
// var_dump( "<pre>" , $MyStdClass , "</pre>" );

try {

   throw new Exception( "$Search isn't a Instance of 'stdClass' Class by
json_decode()." );

   if ( $MyStdClass->$Search instanceof $MyStdClass )
      var_dump( "<pre>instanceof:" , $MyStdClass->$Search , "</pre>" );

} catch( Exception $ErrorHandle ) {

   echo $ErrorHandle->getMessage();

   if ( property_exists( $MyStdClass, $Search ) ) {
      $dom = new DomDocument( "1.0", "utf-8" );
      $dom->loadXML( $MyStdClass->$Search );
      $body = $dom->getElementsByTagName( "body" )->item(0);
      $body->appendChild( $dom->createElement( "rewind", "Nice" ) );
      var_dump( htmlentities( $dom->saveXML(), ENT_QUOTES, 'utf-8' ) );
   }
}

?>
paul at sfdio dot com 21-Jan-2007 03:08
I've written a javascript function to get around this functions limitations and
the limitations imposed by IE's lack of native support for json serialization.
Rather than converting variables to a json formatted string to transfer them to
the server this function converts any javascript variable to a string
serialized for use as POST or GET data.

String js2php(Mixed);

js2php({foo:true, bar:false, baz: {a:1, b:2, c:[1, 2, 3]}}));

will return:

foo=true&bar=false&baz[a]=1&baz[b]=2&baz[c][0]=1&...etc

function js2php(obj,path,new_path) {
  if (typeof(path) == 'undefined') var path=[];
  if (typeof(new_path) != 'undefined') path.push(new_path);
  var post_str = [];
  if (typeof(obj) == 'array' || typeof(obj) == 'object') {
    for (var n in obj) {
      post_str.push(js2php(obj[n],path,n));
    }
  }
  else if (typeof(obj) != 'function') {
    var base = path.shift();
    post_str.push(base + (path.length > 0 ? '[' + path.join('][') + ']' : '') +
'=' + encodeURI(obj));
    path.unshift(base);
  }
  path.pop();
  return post_str.join('&');
}
Adrian Ziemkowski 13-Dec-2006 07:52
Beware when decoding JSON from JavaScript.  Almost nobody uses quotes for
object property names and none of the major browsers require it, but this
function does!   {a:1} will decode as NULL, whereas the ugly {"a":1} will
decode correctly.   Luckily the browsers accept the specification-style quotes
as well.
giunta dot gaetano at sea-aeroportimilano dot it 04-Sep-2006 03:16
Take care that json_decode() returns UTF8 encoded strings, whereas PHP normally
works with iso-8859-1 characters.

If you expect to receive json data comprising characters outside the ascii
range, be sure to use utf8_decode to convert them:

$php_vlaues = utf8_decode(json_decode($somedata))
giunta dot gaetano at sea-aeroportimilano dot it 04-Sep-2006 10:20
Please note that this function does NOT convert back to PHP values all strings
resulting from a call to json-encode.

Since the json spec says that "A JSON text is a serialized object or array",
this function will return NULL when decoding any json string that does not
represent either an object or an array.

To successfully encode + decode single php values such as strings, booleans,
integers or floats, you will have to wrap them in an array before converting
them.
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sun Feb 27 16:11:37 2011 UTC
Received cookie: COUNTRY=JPN%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011

view this page in

[English             ] Change language
array_keys

(PHP 4, PHP 5)

array_keys — 配列のキーすべて、あるいはその一部を返す

説明

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict ] )

needle で haystack を検索します。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
    haystack の中の needle の型も確認します。

返り値
Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011

view this page in

[English             ] Change language
substr

(PHP 4, PHP 5)

substr — 文字列の一部分を返す

説明

string substr ( string $string , int $start [, int $length ] )

文字列 string の、start で指定された位置から length バイト分の文字列を返します
。

パラメータ

string

    入力文字列。最低 1 文字以上を指定しなければなりません。

start

    start が正の場合、返される文字列は、 string の 0 から数えて start番目から始
    まる文字列となります。例えば、文字列'abcdef'において位置 0にある文字は、'a'
    であり、位置2には'c'があります。

    start が負の場合、返される文字列は、 stringの後ろから数えて start番目から始
    まる文字列となります。

    string の長さが start 文字以下の場合は FALSE が返されます。

    例1 負の start の使用

    <?php
    $rest = substr("abcdef", -1);    // "f" を返す
    $rest = substr("abcdef", -2);    // "ef" を返す
    $rest = substr("abcdef", -3, 1); // "d" を返す
    ?>

length

    length が指定され、かつ正である場合、返される文字列は start (string の長さ
    に依存します) から数えてlength文字数分となります。

    length が指定され、かつ負である場合、 string の終端から多くの文字が省略され
    ます (start が負の場合は、開始位置を算出したあとで)。もし start が切り出し
    位置を超える場合、 false が返されます。

    length が指定され、かつ 0 である場合は、空文字列なら NULL、そうでなければ
    FALSE を返します。

    length を省略した場合は、 start の位置から文字列の最後までの部分文字列を返
    します。

    例2 負の length の使用

    <?php
    $rest = substr("abcdef", 0, -1);  // "abcde" を返す
    $rest = substr("abcdef", 2, -1);  // "cde" を返す
    $rest = substr("abcdef", 4, -4);  // false を返す
    $rest = substr("abcdef", -3, -1); // "de" を返す
    ?>

返り値

文字列の一部を返します。失敗した場合に FALSE を返します。あるいは空文字列を返し
ます。

変更履歴

バージ                                   説明
 ョン
5.2.2 - start が負の切り出しを意味したり切り出し位置を超える値になった場合に
5.2.6   false を返すようになりました。それ以外のバージョンでは、文字列の先頭か
        ら取得します。

例

例3 基本的な substr() の使用法

<?php
echo substr('abcdef', 1);     // bcdef
echo substr('abcdef', 1, 3);  // bcd
echo substr('abcdef', 0, 4);  // abcd
echo substr('abcdef', 0, 8);  // abcdef
echo substr('abcdef', -1, 1); // f

// 文字列中の 1 文字にアクセスすることも
// "角括弧" を使用することで可能
$string = 'abcdef';
echo $string[0];                 // a
echo $string[3];                 // d
echo $string[strlen($string)-1]; // f

?>

例4 substr() でのキャストの挙動

<?php
class apple {
    public function __toString() {
        return "green";
    }
}

echo "1) ".var_export(substr("pear", 0, 2), true).PHP_EOL;
echo "2) ".var_export(substr(54321, 0, 2), true).PHP_EOL;
echo "3) ".var_export(substr(new apple(), 0, 2), true).PHP_EOL;
echo "4) ".var_export(substr(true, 0, 1), true).PHP_EOL;
echo "5) ".var_export(substr(false, 0, 1), true).PHP_EOL;
echo "6) ".var_export(substr("", 0, 1), true).PHP_EOL;
echo "7) ".var_export(substr(1.2e3, 0, 4), true).PHP_EOL;
?>

上の例の出力は以下となります。

1) 'pe'
2) '54'
3) 'gr'
4) '1'
5) false
6) false
7) '1200'

エラー / 例外

エラー時に FALSE を返します。
<?php
var_dump(substr('a', 1)); // bool(false)
?>

参考

  • strrchr() - 文字列中に文字が最後に現れる場所を取得する
  • substr_replace() - 文字列の一部を置換する
  • preg_match() - 正規表現によるマッチングを行う
  • trim() - 文字列の先頭および末尾にあるホワイトスペースを取り除く
  • mb_substr() - 文字列の一部を得る
  • wordwrap() - 文字列分割文字を使用して、指定した文字数に文字列を分割する
  • 文字列への文字単位のアクセスと修正



trim> <substr_replace
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011
 
add a note add a note User Contributed Notes substr
nikolai dot wuestemann at t-online dot de 14-Jan-2011 04:56
If you want to have a string BETWEEN two strings, just use this function:

<?php
function get_between($input, $start, $end)
{
  $substr = substr($input, strlen($start)+strpos($input, $start), (strlen
($input) - strpos($input, $end))*(-1));
  return $substr;
}

//Example:

$string = "123456789";
$a = "12";
$b = "9";

echo get_between($string, $a, $b);

//Output:
//345678
?>
Cristianlf 29-Oct-2010 09:10
I needed a function like lpad from oracle, or right from SQL
 then I use this code :

<?php
function right($string,$chars)
{
    $vright = substr($string, strlen($string)-$chars,$chars);
    return $vright;
   
}

    echo right('0r0j4152',4);
?>

Result:
 4152
------------------------------------------------
This function is really simple, I just wanted to share, maybe helps someone out
there. 

regards,
magickey 18-Oct-2010 09:23
Simple UTF-8 Multibyte solution (without mb_substr)

<?php
  $string="texto en español";
  echo substr($string,0,14); //Outputs: texto en espa�
?>

<?php
  $string="texto en español";
  echo utf8_encode(substr(utf8_decode($string),0,14)); //Outputs: texto en
españ
?>
joseph dot davidson dot 707 at gmail dot com 09-Oct-2010 07:58
Using substr() to examine characters of a string without altering the string.

<?php
$string = 'This is my string';
$length = strlen($string);
$myChar = 'm';

for($i = 0; $i < $length; $i++) {

    $showString_i = substr($string, $i, 1);
    if($myChar == $showString_i) return $i;
}
?>

can also examine subs.
uranetz 23-Sep-2010 09:20
Find differences between wokr of substr function when string length less then
-start
ex:
$id=4;
var_dump(substr($id, -3));
at PHP Version 5.2.12 at windows it outputs: string(1) "4"
but at PHP Version 5.2.4-2ubuntu5.10: bool(false)
jeff dot swain at pcmmllc dot com 20-Jul-2010 12:00
I noticed a slight issue when parsing out long strings using the substr
function.

Here is my string: $merge = "UPDATE AssistanceRequest SET RequestorID = '4301'
WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

To parse out the WHERE portion I used:
$whereClause = substr($merge, strpos($merge,'WHERE', (strlen($merge) - strpos
($merge,'WHERE'))));
Normally the function returned: $whereClause = "WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

This $whereClause gives me the WHERE clause to modify the MSSQL database
records being manipulated. So that when I used $whereClause as the WHERE clause
to create subsequent SQL, I used the following syntax: $setDeleteFlag = "UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' " . $whereClause;

This should have returned: $setDeleteFlag = "UPDATE AssistanceRequestor SET
bIsDirty = 'DELETE' WHERE RequestorID IN ( '4535','6222','4865','5137','4893')"

As long as the length of the original $merge string was less than 104
characters, the $setDeleteFlag sql came out correctly. However, when the length
of the original $merge string exceeded 104 characters, I got this returned:

$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' UPDATE
AssistanceRequestor SET bIsDirty = 'DELETE' WHERE RequestorID IN (
'4535','6222','4865','5137','4893')"

The result was that the bIsDirty field for every record in the database was set
to 'DELETE'. I fixed it by breaking apart the substr to create the original
$whereClause so that it looked like this:

$wherePosition = strpos($merge,'WHERE');
$whereClause = substr($merge, $wherePosition, strlen($merge) - $wherePosition);
$setDeleteFlag = "UPDATE AssistanceRequestor SET bIsDirty = 'DELETE' " .
$whereClause;

I do have to note that I run PHP 5.x on my development server, while I think
the production host is still on 4.x. I did not seem to have an issue in
development, but I don't think I tested strings longer than 104 characters.
Maybe this issue has been corrected in version 5.x.
kueb at NOSPAM dot gmx dot de 15-Apr-2010 12:50
I had some problems with the order of the closing of tags.

Example:
<p>some <b><i>very</i>long</b> text to show my problem</p>
would be converted to (if the script would cut the part after "very":
<p>some <b><i>very</p></b></i>

My second problem was, that the script didn't recognized tags like <a href="#"
title="title">

So my version based on bennys and erez' work looks like this:

<?php
function mb_substrws($text, $length = 180) {
    if((mb_strlen($text) > $length)) {
        $whitespaceposition = mb_strpos($text, ' ', $length) - 1;
        if($whitespaceposition > 0) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition +
1)), 1);
            if ($chars[ord('<')] > $chars[ord('>')]) {
                $whitespaceposition = mb_strpos($text, ">",
$whitespaceposition) - 1;
            }
            $text = mb_substr($text, 0, ($whitespaceposition + 1));
        }
        // close unclosed html tags
        if(preg_match_all("|(<([\w]+)[^>]*>)|", $text, $aBuffer)) {
            if(!empty($aBuffer[1])) {
                preg_match_all("|</([a-zA-Z]+)>|", $text, $aBuffer2);
                if(count($aBuffer[2]) != count($aBuffer2[1])) {
                    $closing_tags = array_diff($aBuffer[2], $aBuffer2[1]);
                    $closing_tags = array_reverse($closing_tags);
                    foreach($closing_tags as $tag) {
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }

    }
    return $text;
}
?>
lwjct at hotmail dot com 25-Mar-2010 09:39
It doesn't support Chinese characters under utf-8 so well.

with utf-8, each Chinese character counts with 3 in length.
with utf-16, each one counts as 2 in length.
Jarrod Nettles (jarrod at squarecrow dot com) 01-Feb-2010 08:46
I've seen numerous requests over the years from people trying to put together
templating systems using XML parsers or regular expressions - you can create a
simple template system with the following class. It could easily be expanded to
take advantage of parameters, conditionals, etc.

<?php

class Template
{
    const OPEN_BRACKET = "{";
    const CLOSE_BRACKET = "}";

    public static function inject(array $source, $template)
    {
        $ob_size = strlen(self::OPEN_BRACKET);
        $cb_size = strlen(self::CLOSE_BRACKET);
       
        $pos = 0;
        $end = strlen($template);
       
        while($pos <= $end)
        {
            if($pos_1 = strpos($template, self::OPEN_BRACKET, $pos))
            {
                if($pos_1)
                {
                    $pos_2 = strpos($template, self::CLOSE_BRACKET, $pos_1);
                   
                    if($pos_2)
                    {
                        $return_length = ($pos_2-$cb_size) - $pos_1;
                       
                        $var = substr($template, $pos_1+$ob_size,
$return_length);
                       
                        $template = str_replace
(self::OPEN_BRACKET.$var.self::CLOSE_BRACKET, $source[$var], $template);
                       
                        $pos = $pos_2 + $cb_size;
                    }
                    else
                    {
                        throw new exception("Incorrectly formed template -
missing closing bracket. Please check your syntax.");
                        break;
                    }
                }
            }
            else
            {
                //exit the loop
                break;
            }
        }
       
        return $template;
    }
   
}

//array of values to inject into the template
$array = array("NAME" => "John Doe",
                "DOB"    => "12/21/1986",
                "ACL" => "Super Administrator");

//template using '{' and '}' to signify variables
$template = "This is your template, {NAME}. You were born on {DOB} and you are
a {ACL} on this system.";

echo Template::inject($array, $template);
?>
vnonov at gmail dot com / Viktor Nonov 28-Jan-2010 06:32
<?php

//removes string from the end of other

function removeFromEnd($string, $stringToRemove) {
    $stringToRemoveLen = strlen($stringToRemove);
    $stringLen = strlen($string);
   
    $pos = $stringLen - $stringToRemoveLen;

    $out = substr($string, 0, $pos);

    return $out;
}

$string = 'picture.jpg.jpg';
$string = removeFromEnd($string, '.jpg');
?>
biner(gf) 19-Nov-2009 05:46
<?php
//substring without words breaking

$str = "aa bb ccc ddd ee fff gg hhh iii";

echo substr(($str=wordwrap($str,$,'$$')),0,strpos($str,'$$'));
?>
info /a/ nopticon /dot/ com 08-Oct-2009 06:52
<?php

// Substring without losing word meaning and
// tiny words (length 3 by default) are included on the result.
// "..." is added if result do not reach original string length

function _substr($str, $length, $minword = 3)
{
    $sub = '';
    $len = 0;
   
    foreach (explode(' ', $str) as $word)
    {
        $part = (($sub != '') ? ' ' : '') . $word;
        $sub .= $part;
        $len += strlen($part);
       
        if (strlen($word) > $minword && strlen($sub) >= $length)
        {
            break;
        }
    }
   
    return $sub . (($len < strlen($str)) ? '...' : '');
}

?>
kaj dot strom at kapsi dot fi 05-Oct-2009 11:42
One thing to keep in mind when using string indexes and UTF-8 is that string
indexes are NOT multi-byte safe.

<?php
$string = 'äää1';
echo $string[3];
?>

Outputs:
¤

When it logically should output "1". This is not a bug, as PHP 'normal' string
functions are not intended to be multi-byte safe. This can be solved by using
this function

<?php
/**
 *
 * @param string $string String to "search" from
 * @param int $index Index of the letter we want.
 * @return string The letter found on $index.
 */
function charAt($string, $index){
    if($index < mb_strlen($string)){
        return mb_substr($string, $index, 1);
    }
    else{
        return -1;
    }
}
?>
gkhelloworld at gmail dot com 26-Jul-2009 10:44
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:40
Shortens the filename and its expansion has seen.

$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}

// RETURN: Hellothisfileha...andthisfayl.exe
// other simples on rollyz.net
gkhelloworld at gmail dot com 26-Jul-2009 10:39
Shortens the filename and its expansion has seen.

<?php
$file = "Hellothisfilehasmorethan30charactersandthisfayl.exe";

function funclongwords($file)
{
if (strlen($file) > 30)
{
$vartypesf = strrchr($file,".");
$vartypesf_len = strlen($vartypesf);
$word_l_w = substr($file,0,15);
$word_r_w = substr($file,-15);
$word_r_a = substr($word_r_w,0,-$vartypesf_len);

return $word_l_w."...".$word_r_a.$vartypesf;
}
else
return $file;
}
// RETURN: Hellothisfileha...andthisfayl.exe
?>
erez at meezoog dot com 07-Jul-2009 04:59
An improvement to substrws - multi-byte, and closes tags better.

/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function mb_substrws( $text, $len=180 ) {

    if( (mb_strlen($text) > $len) ) {

        $whitespaceposition = mb_strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 ) {
            $chars = count_chars(mb_substr($text, 0, ($whitespaceposition+1)),
1);
            if ($chars[ord('<')] > $chars[ord('>')])
                $whitespaceposition = mb_strpos($text,">",$whitespaceposition)
-1;
            $text = mb_substr($text, 0, ($whitespaceposition+1));
        }

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }
    return $text;
}
kaysar in ymail in com 08-Jun-2009 06:58
Drop extensions of a file (even from a file location string)

<?php

$filename = "c:/some dir/abc defg. hi.jklmn";

echo substr($filename, 0, (strlen ($filename)) - (strlen (strrchr
($filename,'.'))));

?>

output: c:/some dir/abc defg. hi

Hope it may help somebody like me.. (^_^)
benny at bennyborn dot de 06-May-2009 08:52
If you need a word-sensitive and also html-tags aware version of substr, this
one should do the job. It works fine for me

<?php
/**
* word-sensitive substring function with html tags awareness
* @param text The text to cut
* @param len The maximum length of the cut string
* @returns string
**/
function substrws( $text, $len=180 ) {

    if( (strlen($text) > $len) ) {

        $whitespaceposition = strpos($text," ",$len)-1;

        if( $whitespaceposition > 0 )
            $text = substr($text, 0, ($whitespaceposition+1));

        // close unclosed html tags
        if( preg_match_all("|<([a-zA-Z]+)>|",$text,$aBuffer) ) {

            if( !empty($aBuffer[1]) ) {

                preg_match_all("|</([a-zA-Z]+)>|",$text,$aBuffer2);

                if( count($aBuffer[1]) != count($aBuffer2[1]) ) {

                    foreach( $aBuffer[1] as $index => $tag ) {

                        if( empty($aBuffer2[1][$index]) || $aBuffer2[1][$index]
!= $tag)
                            $text .= '</'.$tag.'>';
                    }
                }
            }
        }
    }

    return $text;
}
?>
Andreas Bur (andreas dot buro at gmail dot com) 29-Apr-2009 01:25
For getting a substring of UTF-8 characters, I highly recommend mb_substr

<?php
        $utf8string = "cakeæøå";

        echo substr($utf8string,0,5);
        // output cake#
        echo mb_substr($utf8string,0,5,'UTF-8');
        //output cakeæ
?>
webmaster at oehoeboeroe dot nl 18-Apr-2009 09:07
You might expect substr('123456', 6) to return an empty string. Instead it
returns boolean FALSE.

This behavior should be mentioned in the Return Values section of the manual.
Instead it is only mentioned in the Parameters section.

If you need an empty string instead of a boolean FALSE you should typecast the
result to a string.

<?php
$a = substr('123456', 6);              // equivalent to $a = FALSE
$a = (string) substr('123456', 6);   // equivalent to $a = '';
?>
Jakob S. 15-Apr-2009 02:13
If you need to get the first $num Chars of $str and remove them from $str
you'll want to use following function:

<?php
function string_shift(&$str,$num) {
    $cutOff=substr($str,0,$num);
    $str=substr($str,$num);
    return $cutOff;
}
?>
sajjad at sajjad dot biz 08-Apr-2009 07:28
Substring utf-8 strings!
very simple!

<?php
function substru($str,$from,$len){
    return preg_replace('#^(?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $from
.'}'.'((?:[\x00-\x7F]|[\xC0-\xFF][\x80-\xBF]+){0,'. $len .'}).*#s','$1', $str);
}
?>
link 22-Mar-2009 01:52
And as always there is bound to be a bug:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
}
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.       
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;($i<=$end && isset($textarray[$i]));$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
link 21-Mar-2009 03:19
I created some functions for entity-safe splitting+lengthcounting:

<?php
function strlen_entities($text)
{
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    return count($textarray[0]);
} 
function substr_entities($text,$start,$limit=0)
{
    $return = '';
    preg_match_all(
        '/((?:&(?:#[0-9]{2,}|[a-z]{2,});)|(?:[^&])|'.        
        '(?:&(?!\w;)))s',$text,$textarray);
    $textarray = $textarray[0];
    $numchars = count($textarray)-1;
    if ($start>=$numchars)
        return false;
    if ($start<0)
    {
        $start = ($numchars)+$start+1;
    }
    if ($start>=0)
    {
        if ($limit==0)
        {
            $end=$numchars;
        }
        elseif ($limit>0)
        {
            $end = $start+($limit-1);
        }
        else
        {
            $end = ($numchars)+$limit;
        }

        for ($i=$start;$i<=$end;$i++)
        {
            $return .= $textarray[$i];
        }
        return $return;
    }
}
?>
ralphingATNOSPAMDOTpocztaDOTonetDOTpl 11-Mar-2009 01:08
this function return string between two delimiters
i found it very useful to get text between html tags

<?php
function strbet($inputStr, $delimeterLeft, $delimeterRight, $debug=false) {
    $posLeft=strpos($inputStr, $delimeterLeft);
    if ( $posLeft===false ) {
        if ( $debug ) {
            echo "Warning: left delimiter '{$delimeterLeft}' not found";
        }
        return false;
    }
    $posLeft+=strlen($delimeterLeft);
    $posRight=strpos($inputStr, $delimeterRight, $posLeft);
    if ( $posRight===false ) {
        if ( $debug ) {
            echo "Warning: right delimiter '{$delimeterRight}' not found";
        }
        return false;
    }
    return substr($inputStr, $posLeft, $posRight-$posLeft);
}
?>
jude dot dadzie at gmail dot com 24-Feb-2009 03:30
Here's a simple direct way of extracting the information you need from a
string...

Suppose your string is "C:/www/vhosts/example.com/images/image1.jpg" which
points to an image. Let's assume you want the part "images/image1.jpg". We have
to do the ff:

<?php
$image="C:/www/vhosts/example.com/images/image1.jpg"

$image=substr($image,strpos($image,'image', (strlen($image)-strpos
($image,'image'))));

echo $image."<br/>"; //will give 'images/image1.jpg'
?>
wrapbit at yahoo dot com 31-Oct-2008 09:00
<?php
$cfg[csvEnc] = '"';
$cfg[csvEsc] = '\\';
$cfg[csvTerm] = ",";

if( !function_exists("parse_csv_aux") ){
    function parse_csv_aux( $string ){
        global $cfg;
        $product = "";
        $in_quote = FALSE;
        $skipped_quote = FALSE;
        for($i = 0 ; $i < strlen($string) ; $i++){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    if($skipped_quote){
                        $product .= $cfg[csvEnc];
                        $skipped_quote = FALSE;
                    }
                    else if( !$skipped_quote ){
                        $skipped_quote = TRUE;
                    }
                    $in_quote = FALSE;
                }
                else{
                    if($skipped_quote) $skipped_quote = FALSE;
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= " ~ ";
                }
            }
            else{
                if($in_quote){
                    //$in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        return $product;
    }
}

if( !function_exists("parse_csv") ){
    function parse_csv($string){
        global $cfg;
        $data = array();
        if( is_string($string) && ( stripos($string, "\n") !== FALSE )    ){
            $data = explode("\n", parse_csv_aux($string) );
            foreach($data as $key => $row){
                $columns = array();
                //$row = strtr(    $row, array( "\";\"" => "\";\"", ";" => " ;
" )    );
                if( stripos($row, " ~ ") !== FALSE ){
                    $columns = explode( " ~ ", $row );
                    if( !is_array($columns) )$columns = array( strval($columns)
);
                    $data[$key] = $columns;
                }
            }
            return $data;
        }
        else if( is_string($string) && ( stripos( ($string = parse_csv_aux
($string)), " ~ ") !== FALSE )    ){
            $columns = explode( " ~ ", $string );
            if( !is_array($columns) )$columns = array( strval($columns) );
            return array($columns);
        }
        else return strval($string);
    } /* end function parse_csv */
} /* end not function exists parse_csv */

if( !function_exists("store_csv_aux") ){
    function store_csv_aux( $string ){
        global $cfg;
        $string = strtr( $string, array( "\n" => "" ) );
        $product = "";
        $in_quote = FALSE;
        for( $i = 0 ; $i < strlen($string) ; $i++ ){
            if( $string{$i} == $cfg[csvEnc] ){
                if($in_quote){
                    $product .= "\"{$cfg[csvEnc]}";
                }
                else{
                    $product .= "\"\"{$cfg[csvEnc]}";
                    $in_quote = TRUE;
                }
            }
            else if( $string{$i} == "," ){
                if($in_quote){
                    $product .= ",";
                }
                else{
                    $product .= "\",";
                    $in_quote = TRUE;
                }
            }
            else{
                if($in_quote){
                    $product .= $cfg[csvEnc];
                    $in_quote = FALSE;
                    $product .= $string{$i};
                }
                else{
                    $product .= $string{$i};
                }
            }
        }
        if($in_quote)$product .= $cfg[csvEnc];
        return $product;
    }
}

if( !function_exists("store_csv") ){
    function store_csv($data){
        global $cfg;
        if(!is_array($data))return strval($data);
        $passed_rows = FALSE;
        $product = "";
        foreach($data as $row){
            if( $passed_rows )$product .= "\n";
            if( is_array($row) ){
                $columns = "";
                $passed_cols = FALSE;
                foreach($row as $column){
                    if( $passed_cols )$columns .= ",";
                    $columns .= store_csv_aux( $column );
                    $passed_cols =TRUE;
                }
                $product .= strval($columns);
            }
            else{
                $product .= strtr( strval($row), array("\n" => "") );
            }
            $passed_rows = TRUE;
        }
        return $product;
    } /* end function store_csv */
} /* end not function exists store_csv */
?>

[EDIT BY danbrown AT php DOT net: This is a bugfix rewrite of a function
originally written by "Alexander Peev".]
bill at eupeople dot net 31-Oct-2008 12:52
hi, really basic function to take blob with full http url's and turn then into
"more info" links, handy for page layout etc ;)

<?php
function urltolink($data){

    while (strpos($wdata, "http")) {

    $op=strpos($wdata, "http");
    $rdata=substr($wdata, 0, $op);
    $ndata=substr($wdata, $op, strlen($wdata)-$op);
   
    $cp=strpos($ndata, "\n");
    $link=substr($ndata, 0, $cp);
    $oc=$op+$cp;
    $wdata=substr($wdata, $oc, strlen($wdata)-$oc);
   
    $edata=$edata."$rdata <a href=\"$link\">more info</a><br />";
    }
    return $edata;
}
?>
mar dot czapla at gmail dot com 24-Oct-2008 09:31
Here we have gr8 function which simply convert ip address to a number using
substr with negative offset.
You can need it if you want to compare some IP addresses converted to a
numbers.
For example when using ip2country, or eliminating same range of ip addresses
from your website :D

<?php

function ip2no($val)
{   
    list($A,$B,$C,$D)    =    explode(".",$val);
    return
        substr("000".$A,-3).
        substr("000".$B,-3).
        substr("000".$C,-3).
        substr("000".$D,-3);
}

$min        =    ip2no("10.11.1.0");
$max        =    ip2no("111.11.1.0");
$visitor    =    ip2no("105.1.20.200");

if($min<$visitor && $visitor<$max)   
    {    echo 'Welcome !';    }
else   
    {    echo 'Get out of here !';    }

?>
mr.davin 29-Sep-2008 05:01
Simple use of substr to determine possession:

<?php
function possessive ($word) {
    return  $word.(substr($word, -1) == 's' ? "'" : "'s");
}

// Davis => Davis'
// Paul => Paul's
?>
NULL_byte 19-Sep-2008 10:21
<?php

function insert_substr($str, $pos, $substr) {
    $part1 = substr($str, 0, -$pos);
    $part2 = substr($str, -$pos);
    return $part1.$substr.$part2;
}

?>
baldaris69 at yahoo dot com 29-Aug-2008 07:57
***Caution newbie***
To extract a file Extension this fuction could be useful.

<?php
$file_extension = substr($filename , strrpos($filename , '. ') +1);
?>

Suppose your file name is Baldaris.jpeg

strrpos will return the last dot position in the string 9 so

so the compiler will execute substr($filename , 10)

$file_extension will have value jpeg

pretty cool...

Cheer's

Baldaris
post [at] jannik - zappe [dot] de 05-Aug-2008 02:59
Just a little function to cut a string by the wanted amount. Works in both
directions.

<?php
function cutString($str, $amount = 1, $dir = "right")
{
  if(($n = strlen($str)) > 0)
  {
    if($dir == "right")
    {
      $start = 0;
      $end = $n-$amount;
    } elseif( $dir == "left") {
      $start = $amount;
      $end = $n;
    }
   
    return substr($str, $start, $end);
  } else return false;
}
?>

Enjoy ;)
jamesvanboxtel at wsu dot edu 31-Jul-2008 09:17
Here is a quick function to get the substring of a string up to and including
the last occurrence of $needle

<?php
function substrtruncate($string, $needle)
{
    return substr($string, 0, strrpos($string, $needle)+1);
}

$current_dir = substrtruncate($_SERVER['SCRIPT_NAME'], '/');
?>
Anonymous 29-Jul-2008 06:18
I wrote this simple function to limit the middle characters of a string to a
specified length.

<?php
$input = "hello world"
echo(limitchrmid($imput,10)) // hel ... rld

//limit chars middle
function limitchrmid($value,$lenght){
    if (strlen($value) >= $lenght ){
        $lenght_max = ($lenght/2)-3;
        $start = strlen($value)- $lenght_max;
        $limited = substr($value,0,$lenght_max);
        $limited.= " ... ";                  
        $limited.= substr($value,$start,$lenght_max);
    }
    else{
        $limited = $value;
    }
    return $limited;
}
?>
svihel 27-Jun-2008 08:09
joao dot martins at plako dot net
26-Mar-2008 09:14

ben at enemy dot dk
10-Feb-2008 05:48

Updated function. The previous one will return empty value if the $string has
no letter spaces. This is usefull if some of your strings have only one word.

<?php
function cutText($string, $setlength) {
    $length = $setlength;
    if($length<strlen($string)){
        while (($string{$length} != " ") AND ($length > 0)) {
            $length--;
        }
        if ($length == 0) return substr($string, 0, $setlength);
        else return substr($string, 0, $length);
    }else return $string;
}
?>
serzh at nm dot ru 03-Jun-2008 10:13
easy and quick way to limit length of a text by not cutting full words:

textLimit('some words', 7) is 'some...'

<?php
function textLimit($string, $length, $replacer = '...')
{
  if(strlen($string) > $length)
  return (preg_match('/^(.*)\W.*$/', substr($string, 0, $length+1), $matches) ?
$matches[1] : substr($string, 0, $length)) . $replacer;
 
  return $string;
}
?>
Anonymous 17-Mar-2008 11:53
Split a string to an array of strings specified by an array of lengths:

<?php
function split_by_lengths($inString, $arrayLengths)
{
    $output = array();
    foreach ($arrayLengths as $oneLength)
    {
        $output[] = substr($inString, 0, $oneLength);
        $inString = substr($inString, $oneLength);
    }
    return ($output);
}
?>
split_by_lengths('teststringtestteststring', array(4,6,4,4,6)) returns:
array('test','string','test','test','string')

Don't use it on user input without some error handling!
kriskra at gmail dot com 01-Mar-2008 01:21
The javascript charAt equivalent in php of felipe has a little bug. It's
necessary to compare the type (implicit) aswell or the function returns a wrong
result:
<?php
function charAt($str,$pos) {
    return (substr($str,$pos,1) !== false) ? substr($str,$pos,1) : -1;
}
?>
Anonymous 23-Feb-2008 01:12
I've used the between, after, before, etc functions that biohazard put together
for years and they work great.  I've also added to it a new function that I use
a lot and thought others might like it as well.  It uses his before/after
functions so they are required to use it.

<?php
$example_html = "<p>test1 Test2</p><title>hi there</title><p>Testing</p>";
$paragraph_text = multi_between('<p>', '</p>', $example_html);

//Prints an arry of:
//Array ( [1] => test1 Test2 [2] => Testing )
print_r($paragraph_text);

function multi_between($this, $that, $inthat)
{
   $counter = 0;
   while ($inthat)
   {
      $counter++;
      $elements[$counter] = before($that, $inthat);
      $elements[$counter] = after($this, $elements[$counter]);
      $inthat = after($that, $inthat);
   }
   return $elements;
}
//Get the help functions from biohazard's post below.
?>
highstrike at gmail dot com 06-Jan-2008 04:47
Because i didnt see a function that would cut a phrase from a text (article or
whatever) no matter where, front/middle/end and add ... + keeping the words
intact, i wrote this:

Usage:
- The parameter $value if array will need the whole text and the portion you
want to start from, a string. EG: cuttext(array($text, $string), 20). If the
string is "have" and is near the beginning of the text, the function will cut
like "I have a car ...", if the string is in the middle somewhere it will cut
like "... if you want to have your own car ..." and if its somewhere near the
end it will cut like "... and you will have one."
- The $length parameter is self explanatory.

Note: if you have just a string "127hh43h2h52312453jfks2" and you want to cut
it, just use the function like so: cuttext($string, 10) and it will cut it like
"127hh43h2h..."

<?php

////////////////////////////////////////////////////////
// Function:         cuttext
// Description: Cuts a string and adds ...

function cuttext($value, $length)
{   
    if(is_array($value)) list($string, $match_to) = $value;
    else { $string = $value; $match_to = $value{0}; }

    $match_start = stristr($string, $match_to);
    $match_compute = strlen($string) - strlen($match_start);

    if (strlen($string) > $length)
    {
        if ($match_compute < ($length - strlen($match_to)))
        {
            $pre_string = substr($string, 0, $length);
            $pos_end = strrpos($pre_string, " ");
            if($pos_end === false) $string = $pre_string."...";
            else $string = substr($pre_string, 0, $pos_end)."...";
        }
        else if ($match_compute > (strlen($string) - ($length - strlen
($match_to))))
        {
            $pre_string = substr($string, (strlen($string) - ($length - strlen
($match_to))));
            $pos_start = strpos($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start);
            if($pos_start === false) $string = "...".$pre_string;
            else $string = "...".substr($pre_string, $pos_start);
        }
        else
        {       
            $pre_string = substr($string, ($match_compute - round(($length /
3))), $length);
            $pos_start = strpos($pre_string, " "); $pos_end = strrpos
($pre_string, " ");
            $string = "...".substr($pre_string, $pos_start, $pos_end)."...";
            if($pos_start === false && $pos_end === false) $string =
"...".$pre_string."...";
            else $string = "...".substr($pre_string, $pos_start,
$pos_end)."...";
        }

        $match_start = stristr($string, $match_to);
        $match_compute = strlen($string) - strlen($match_start);
    }
   
    return $string;
}

?>
morgangalpin att gmail dotty com 24-Sep-2007 05:55
Adding the $limit parameter introduced a bug that was not present in the
original. If $limit is small or negative, a string with a length exceeding the
limit can be returned. The $limit parameter should be checked. It takes
slightly more processing, but it is dwarfed in comparison to the use of strlen
().

<?php
  function short_name($str, $limit)
  {
    // Make sure a small or negative limit doesn't cause a negative length for
substr().
    if ($limit < 3)
    {
      $limit = 3;
    }

    // Now truncate the string if it is over the limit.
    if (strlen($str) > $limit)
    {
      return substr($str, 0, $limit - 3) . '...';
    }
    else
    {
      return $str;
    }
  }
?>
corphi 12-Sep-2007 11:06
I prefer
<?php
function short_name($str, $limit)
{
    return strlen($str) > $limit ? substr($str, 0, $limit - 3) . '...' : $str;
}
?>

Now, every returned string has a maximum length of $limit chars (instead of
$limit + 3).
Petez 31-Aug-2007 10:56
I wanted to work out the fastest way to get the first few characters from a
string, so I ran the following experiment to compare substr, direct string
access and strstr:

<?php
/* substr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = substr($string,0,11);
    if ($opening == 'Lorem ipsum'){
        true;
    }else{
        false;
    }
}
$endtime1 = endTimer();

/* direct access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    if ($string[0] == 'L' && $string[1] == 'o' && $string[2] == 'r' && $string
[3] == 'e' && $string[4] == 'm' && $string[5] == ' ' && $string[6] == 'i' &&
$string[7] == 'p' && $string[8] == 's' && $string[9] == 'u' && $string[10] ==
'm'){
        true;
    }else{
        false;
    }
}
$endtime2 = endTimer();

/* strstr access */
beginTimer();
for ($i = 0; $i < 1500000; $i++){
    $opening = strstr($string,'Lorem ipsum');
    if ($opening == true){
        true;
    }else{
        false;
    }
}
$endtime3 = endTimer();

echo $endtime1."\r\n".$endtime2."\r\n".$endtime3;
?>

The string was 6 paragraphs of Lorem Ipsum, and I was trying match the first
two words. The experiment was run 3 times and averaged. The results were:

(substr) 3.24
(direct access) 11.49
(strstr) 4.96

(With standard deviations 0.01, 0.02 and 0.04)

THEREFORE substr is the fastest of the three methods for getting the first few
letters of a string.
ein at anti-logic dot com 30-Jul-2007 10:06
If you need to divide a large string (binary data for example) into segments, a
much quicker way to do it is to use streams and the php://memory stream
wrapper.

For example, if you have a large string in memory, write it to a memory stream
like
<?php
$segment_length = 8192; // this is how long our peice will be
$fp = fopen("php://memory", 'r+'); // create a handle to a memory stream
resource
fputs($fp, $payload); // write data to the stream
$total_length=ftell($fp); // get the length of the stream
$payload_chunk = fread ( $fp, $segment_length  );
?>

Working with large data sets, mine was 21MB, increased the speed several
factors.
Robert Chapin 26-Jun-2007 09:40
All the references to "curly braces" on this page appear to be obsolete.

According to http://us.php.net/manual/en/language.types.string.php

"Using square array-brackets is preferred because the {braces} style is
deprecated as of PHP 6."

Robert Chapin
Chapin Information Services
lanny at freemail dot hu 26-Jun-2007 10:31
Starting from version 5.2.3 if $start is negative and larger then the length of
the string, the result is an empty string, while in earlier versions the result
was the string itself!

substr ("abcdef", -1000);

result in 5.2.0
'abcdef'

result in 5.2.3
''

This is a small inconsistency, one of those things that makes the life of a PHP
programmer like hell.
Antoine 10-May-2007 04:08
The functions submitted below are a waste of time and memory. To convert a
string to an integer or a trimmed float, use the built in conversion instead of
parsing the string, e.g :

<?php
$x = "27.2400";
echo (float)$x; // 27.24
echo (int)$x; // 27
?>
siavashg at gmail dot com 06-Mar-2007 09:51
A further addition to Jean-Felix function to extract data between delimeters.

The previous function wouldn't return the correct data if the delimeters used
where long than one char. Instead the following function should do the job.

<?php
function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight) {
   $posLeft  = stripos($inputstr,$delimeterLeft)+strlen($delimeterLeft);
   $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
   return  substr($inputstr,$posLeft,$posRight-$posLeft);
}
?>
Jean-Felix, Bern 28-Feb-2007 03:10
If you need to extract information in a string between delimeters then you can
use this:

Inputstring is:
"Heidi Klum Supermodel" <info@HeidiKlum.com>

Here the script
<?php
   $emailadresse = "\"Heidi Klum Supermodel\" <info@HeidiKlum.com>";
  
   $outputvalue = extractBetweenDelimeters($emailadresse,"\"","\"");
   echo  $outputvalue;  // shows Heidi Klum Supermodel
   echo "<br>";
   $outputvalue = extractBetweenDelimeters($emailadresse,"<",">");
   echo  $outputvalue;  // shows info@HeidiKlum.com
  
  
   function extractBetweenDelimeters($inputstr,$delimeterLeft,$delimeterRight)
{
    $posLeft  = stripos($inputstr,$delimeterLeft)+1;
    $posRight = stripos($inputstr,$delimeterRight,$posLeft+1);
    return  substr($inputstr,$posLeft,$posRight-$posLeft);
   }
  
?>
ijavier aka(not imatech) igjav 14-Feb-2007 10:20
<?php
/*
    An advanced substr but without breaking words in the middle.
    Comes in 3 flavours, one gets up to length chars as a maximum, the other
with length chars as a minimum up to the next word, and the other considers
removing final dots, commas and etcteteras for the sake of beauty (hahaha).
   This functions were posted by me some years ago, in the middle of the ages I
had to use them in some corporations incorporated, with the luck to find them
in some php not up to date mirrors. These mirrors are rarely being more not up
to date till the end of the world... Well, may be am I the only person that
finds usef not t bre word in th middl?

Than! (ks)

This is the calling syntax:

    snippet(phrase,[max length],[phrase tail])
    snippetgreedy(phrase,[max length before next space],[phrase tail])

*/

function snippet($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

// It behaves greedy, gets length characters ore goes for more

function snippetgreedy($text,$length=64,$tail="...") {
    $text = trim($text);
    if(strlen($text) > $length) {
        for($i=0;$text[$length+$i]!=" ";$i++) {
            if(!$text[$length+$i]) {
                return $text;
            }
        }
        $text = substr($text,0,$length+$i) . $tail;
    }
    return $text;
}

// The same as the snippet but removing latest low punctuation chars,
// if they exist (dots and commas). It performs a later suffixal trim of spaces

function snippetwop($text,$length=64,$tail="...") {
    $text = trim($text);
    $txtl = strlen($text);
    if($txtl > $length) {
        for($i=1;$text[$length-$i]!=" ";$i++) {
            if($i == $length) {
                return substr($text,0,$length) . $tail;
            }
        }
        for(;$text[$length-$i]=="," || $text[$length-$i]=="." || $text
[$length-$i]==" ";$i++) {;}
        $text = substr($text,0,$length-$i+1) . $tail;
    }
    return $text;
}

/*
echo(snippet("this is not too long to run on the column on the left, perhaps,
or perhaps yes, no idea") . "<br>");
echo(snippetwop("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea") . "<br>");
echo(snippetgreedy("this is not too long to run on the column on the left,
perhaps, or perhaps yes, no idea"));
*/
?>
persisteus at web dot de 13-Feb-2007 03:45
Here is also a nice (but a bit slow) alternative for colorizing an true color
image:

<?php
// $colorize = hexadecimal code in String format, f.e. "10ffa2"
// $im = the image that have to be computed

$red = hexdec(substr($colorize, 0, 2));
$green = hexdec(substr($colorize, 2, 2));
$blue = hexdec(substr($colorize, 4, 2));

$lum_c = floor(($red*299 + $green*587 + $blue*144) / 1000);

for ($i = 0; $i < $lum_c; $i++)
{
  $r = $red * $i / $lum_c;
  $g = $green * $i / $lum_c;
  $b = $blue * $i / $lum_c;
  $pal[$i] = $r<<16 | $g<<8 | $b;
}
$pal[$lum_c] = $red<<16 | $green<<8 | $blue;
for ($i = $lum_c+1; $i < 255; $i++)
{
  $r = $red + (255-$red) * ($i-$lum_c) / (255-$lum_c);
  $g = $green + (255-$green) * ($i-$lum_c) / (255-$lum_c);
  $b = $blue + (255-$blue) * ($i-$lum_c) / (255-$lum_c);
  $pal[$i] = $r<<16 | $g<<8 | $b;
}

$sy = imagesy($im);
$sx = imagesx($im);
for($y=0;$y<$sy;$y++)
{
  for($x=0;$x<$sx;$x++)
  {
    $rgba = imagecolorat($im, $x, $y);
    $a = ($rgba & 0x7F000000) >> 24;
    $r = ($rgba & 0xFF0000) >> 16;
    $g = ($rgba & 0x00FF00) >> 8;
    $b = ($rgba & 0x0000FF);

    $lum = floor(($r*299+$g*587+$b*144)/1000);

    imagesetpixel($im, $x, $y, $a<<24 | $pal[$lum]);
  }
}
?>
egingell at sisna dot com 19-Oct-2006 10:19
<?php

/**
 * string substrpos(string $str, mixed $start [[, mixed $end], boolean
$ignore_case])
 *
 * If $start is a string, substrpos will return the string from the position of
the first occuring $start to $end
 *
 * If $end is a string, substrpos will return the string from $start to the
position of the first occuring $end
 *
 * If the first character in (string) $start or (string) $end is '-', the last
occuring string will be used.
 *
 * If $ignore_case is true, substrpos will not care about the case.
 * If $ignore_case is false (or anything that is not (boolean) true, the
function will be case sensitive.
 *        Both of the above: only applies if either $start or $end are strings.
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', 5, '5');
 *        // Prints 'is a string with 01234';
 *
 * echo substrpos('This is a string with 0123456789 numbers in it.', '5', 5);
 *        // Prints '56789'
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-string')
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', true)
 *        // Prints 's is a string with 0123456789 numbers in it and two '
 *
 * echo substrpos('This is a string with 0123456789 numbers in it and two
strings.', -60, '-STRING', false)
 *        // Prints 's is a string with 0123456789 numbers in it and two
strings.'
 *
 * Warnings:
 *        Since $start and $end both take either a string or an integer:
 *            If the character or string you are searching $str for is a
number, pass it as a quoted string.
 *        If $end is (integer) 0, an empty string will be returned.
 *        Since this function takes negative strings ('-search_string'):
 *            If the string your using in $start or $end is a '-' or begins
with a '-' escape it with a '\'.
 *            This only applies to the *first* character of $start or $end.
 */

// Define stripos() if not defined (PHP < 5).
if (!is_callable("stripos")) {
    function stripos($str, $needle, $offset = 0) {
        return strpos(strtolower($str), strtolower($needle), $offset);
    }
}

function substrpos($str, $start, $end = false, $ignore_case = false) {
    // Use variable functions
    if ($ignore_case === true) {
        $strpos = 'stripos'; // stripos() is included above in case it's not
defined (PHP < 5).
    } else {
        $strpos = 'strpos';
    }

    // If end is false, set it to the length of $str
    if ($end === false) {
        $end = strlen($str);
    }

    // If $start is a string do what's needed to make it an integer position
for substr().
    if (is_string($start)) {
        // If $start begins with '-' start processing until there's no more
matches and use the last one found.
        if ($start{0} == '-') {
            // Strip off the '-'
            $start = substr($start, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = $strpos($str, $start, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            // If $start begins with '\-', strip off the '\'.
            if ($start{0} . $start{1} == '\-') {
                $start = substr($start, 1);
            }
            $pos = $strpos($str, $start);
        }
        $start = $pos !== false ? $pos : 0;
    }

    // Chop the string from $start to strlen($str).
    $str = substr($str, $start);

    // If $end is a string, do exactly what was done to $start, above.
    if (is_string($end)) {
        if ($end{0} == '-') {
            $end = substr($end, 1);
            $found = false;
            $pos = 0;
            while(($curr_pos = strpos($str, $end, $pos)) !== false) {
                $found = true;
                $pos = $curr_pos + 1;
            }
            if ($found === false) {
                $pos = false;
            } else {
                $pos -= 1;
            }
        } else {
            if ($end{0} . $end{1} == '\-') {
                $end = substr($end, 1);
            }
            $pos = $strpos($str, $end);
        }
        $end = $pos !== false ? $pos : strlen($str);
    }

    // Since $str has already been chopped at $start, we can pass 0 as the new
$start for substr()
    return substr($str, 0, $end);
}

?>
feedback at realitymedias dot com 16-Oct-2006 12:47
This function can replace substr() in some situations you don't want to cut
right in the middle of a word. strtrim will cut between words when it is
possible choosing the closest possible final string len to return. the
maxoverflow parameter lets you choose how many characters can overflow past the
maxlen parameter.

<?php

function strtrim($str, $maxlen=100, $elli=NULL, $maxoverflow=15) {
    global $CONF;
       
    if (strlen($str) > $maxlen) {
           
        if ($CONF["BODY_TRIM_METHOD_STRLEN"]) {
            return substr($str, 0, $maxlen);
        }
           
        $output = NULL;
        $body = explode(" ", $str);
        $body_count = count($body);
       
        $i=0;
   
        do {
            $output .= $body[$i]." ";
            $thisLen = strlen($output);
            $cycle = ($thisLen < $maxlen && $i < $body_count-1 &&
($thisLen+strlen($body[$i+1])) < $maxlen+$maxoverflow?true:false);
            $i++;
        } while ($cycle);
        return $output.$elli;
    }
    else return $str;
}

?>
joseph dot morphy at gmail dot com 16-Aug-2006 04:31
<?php
//function to get a substring between between two other substrings

function substring_between($haystack,$start,$end) {
    if (strpos($haystack,$start) === false || strpos($haystack,$end) === false)
{
        return false;
    } else {
        $start_position = strpos($haystack,$start)+strlen($start);
        $end_position = strpos($haystack,$end);
        return substr($haystack,$start_position,$end_position-$start_position);
    }
}

//use of this function to get the title of an html document

$handle = fopen($filename, 'r');
$contents = fread($handle, filesize($filename));
fclose($handle);

$contents = htmlspecialchars($contents);
$title = substring_between($contents,'&lt;title&gt;','&lt;/title&gt;');

?>
shadzar 13-Feb-2006 01:21
a function to read in a file and split the string into its individual
characters and display them as images for a webcounter.

can be used anywhere you need to split a string where a seperator is not
present and versions where the str_split() function is also not present.

<?php
//start counter
$filename = "counter_file.txt";
$pathtoiamges = "http://www.yoursite.com/counter/";//where is your iamges
$extension = ".gif";//what filetype are your images in
//--------------do not change below this line-------------------
$counter=file_get_contents($filename);
$counter++;
$count=$counter;
$current=0;
$visit=array("");//array to hold individual characters
//split string into individual characters
//same as str_split($str) in PHP5
while (strlen($count)>0)
    {
    $current++;
    $visit[$current]=substr($count,0,1);//get current digit
    $count=substr($count,1,strlen($count));//reduce number string to remove
last stored digit
    }
//display images of digits
foreach ($visit as $vis)
    {
    if ($vis!=""){echo "<img src=\"". $pathtoimages . $vis . .$extension . "\">
";}
    }
$list = fopen($filename, "w+");
fwrite($list, $counter);
fclose($list);
//end counter
?>

requires a file to store the counter and 10 images to represent the digits
(0-9) if used as a counter.
wishie at gmail dot com 04-Feb-2006 02:37
Here's a function I wrote that'll insert a string into another string with an
offset.

<?php
// $insertstring - the string you want to insert
// $intostring - the string you want to insert it into
// $offset - the offset

function str_insert($insertstring, $intostring, $offset) {
    $part1 = substr($intostring, 0, $offset);
    $part2 = substr($intostring, $offset);
   
    $part1 = $part1 . $insertstring;
    $whole = $part1 . $part2;
    return $whole;
}
?>
Bradley from California 10-Jan-2006 09:34
Add on to (a function originally written by) "Matias from Argentina":
str_format_number function.

Just added handling of $String shorter then $Format by adding a side to start
the fill and a string length to the while loop.

<?php
function str_format_number($String, $Format, $Start = 'left'){
    //If we want to fill from right to left incase string is shorter then
format
    if ($Start == 'right') {
        $String = strrev($String);
        $Format = strrev($Format);
    }
    if($Format == '') return $String;
    if($String == '') return $String;   
    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    while ((strlen($Format) - 1) >= $FormatPos && strlen($String) > $StringPos)
{
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))) {
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
            //If it is not a number => stores the caracter
        } else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }
    if ($Start == 'right') $Result = strrev($Result);
    return $Result;
}
?>
eallik at hotmail dot com 05-Jan-2006 03:22
Be careful when comparing the return value of substr to FALSE. FALSE may be
returned even if the output is a valid string.

substr("0", 0); // equals "0", comparision with FALSE evaluates to true,
because "0" == 0 == FALSE
mr at bbp dot biz 14-Dec-2005 10:54
Here's a little addon to the html_substr function posted by fox.

Now it counts only chars outside of tags, and doesn't cut words.

Note: this will only work in xhtml strict/transitional due to the checking of "
/>" tags and the requirement of quotations in every value of a tag. It's also
only been tested with the presence of br, img, and a tags, but it should work
with the presence of any tag.

<?php
function html_substr($posttext, $minimum_length = 200, $length_offset = 20,
$cut_words = FALSE, $dots = TRUE) {
  
    // $minimum_length:
    // The approximate length you want the concatenated text to be  
 

    // $length_offset:
    // The variation in how long the text can be in this example text
    // length will be between 200 and 200-20=180 characters and the
    // character where the last tag ends

    // Reset tag counter & quote checker
    $tag_counter = 0;
    $quotes_on = FALSE;
    // Check if the text is too long
    if (strlen($posttext) > $minimum_length) {
        // Reset the tag_counter and pass through (part of) the entire text
        $c = 0;
        for ($i = 0; $i < strlen($posttext); $i++) {
            // Load the current character and the next one
            // if the string has not arrived at the last character
            $current_char = substr($posttext,$i,1);
            if ($i < strlen($posttext) - 1) {
                $next_char = substr($posttext,$i + 1,1);
            }
            else {
                $next_char = "";
            }
            // First check if quotes are on
            if (!$quotes_on) {
                // Check if it's a tag
                // On a "<" add 3 if it's an opening tag (like <a href...)
                // or add only 1 if it's an ending tag (like </a>)
                if ($current_char == '<') {
                    if ($next_char == '/') {
                        $tag_counter += 1;
                    }
                    else {
                        $tag_counter += 3;
                    }
                }
                // Slash signifies an ending (like </a> or ... />)
                // substract 2
                if ($current_char == '/' && $tag_counter <> 0) $tag_counter -=
2;
                // On a ">" substract 1
                if ($current_char == '>') $tag_counter -= 1;
                // If quotes are encountered, start ignoring the tags
                // (for directory slashes)
                if ($current_char == '"') $quotes_on = TRUE;
            }
            else {
                // IF quotes are encountered again, turn it back off
                if ($current_char == '"') $quotes_on = FALSE;
            }
          
            // Count only the chars outside html tags
            if($tag_counter == 2 || $tag_counter == 0){
                $c++;
            }          
                          
            // Check if the counter has reached the minimum length yet,
            // then wait for the tag_counter to become 0, and chop the string
there
            if ($c > $minimum_length - $length_offset && $tag_counter == 0 &&
($next_char == ' ' || $cut_words == TRUE)) {
                $posttext = substr($posttext,0,$i + 1);              
                if($dots){
                   $posttext .= '...';
                }
                return $posttext;
            }
        }
    }  
    return $posttext;
}

?>
felipe at spdata dot com dot br 29-Nov-2005 12:48
JavaScript charAt PHP equivalent

<?php
    function charAt($str, $pos)
    {
        return (substr($str, $pos, 1)) ? substr($str, $pos, 1) : -1;
    }
?>

If found, return the charecter at the specified position, otherwise return -1
frank at jkelloggs dot dk 25-Jul-2005 09:37
Regarding the utf8_substr function from lmak: The pattern '/./u' doesn't match
newline characters. This means that the substring from 0 to the total length of
the string will miss the number of characters in the end matching the number of
newlines in the string. To fix this one can add the s modifier (PCRE_DOTALL) in
the pattern:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./su", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
julius at infoguiden dot no 04-Jul-2005 06:23
This function shortens the string down to maximum lengt defined in $max_lengt.
If the string is longer the function finds the last occurance of a space and
adds three dots at the end to illustrate that it is more text. If the string is
without spaces it stops at exacly max lengt, also adding three dots. If the
string is shorter than max lengt it returns the string as it is. This is useful
for previewing long strings.

<?php
function str_stop($string, $max_length){
    if (strlen($string) > $max_length){
        $string = substr($string, 0, $max_length);
        $pos = strrpos($string, " ");
        if($pos === false) {
               return substr($string, 0, $max_length)."...";
           }
        return substr($string, 0, $pos)."...";
    }else{
        return $string;
    }
}
?>
php_net at thomas dot trella dot de 29-Jun-2005 03:07
I needed to cut a string after x chars at a  html converted utf-8 text (for
example Japanese text like &#23344;&#35632;&#24368;&#33072;&#27440;&#32591;).
The problem was, the different length of the signs, so I wrote the following
function to handle that.
Perhaps it helps.

<?php

function html_cutstr ($str, $len)
{
    if (!preg_match('/\&#[0-9]*;.*/i', $str))
    {
        $rVal = strlen($str, $len);
        break;
    }

    $chars = 0;
    $start = 0;
    for($i=0; $i < strlen($str); $i++)
    {
        if ($chars >= $len)
        break;

        $str_tmp = substr($str, $start, $i-$start);
        if (preg_match('/\&#[0-9]*;.*/i', $str_tmp))
        {
            $chars++;
            $start = $i;
        }
    }
    $rVal = substr($str, 0, $start);
    if (strlen($str) > $start)
    $rVal .= " ...";
    return $rVal;
}
?>
ivanhoe011 at gmail dot com 08-Jun-2005 03:31
If you need just a single character from the string you don't need to use
substr(), just use curly braces notation:

<?php
    // both lines will output the 3rd character
    echo substr($my_string, 2, 1);
    echo $my_string{2}; 
?>

curly braces syntax is faster and more readable IMHO..
rob NOSPAM at clancentric dot net 07-Jun-2005 10:43
I have developed a function with a similar outcome to jay's

Checks if the last character is or isnt a space. (does it the normal way if it
is)
It explodes the string into an array of seperate works, the effect is... it
chops off anything after and including the last space.

<?php
function limit_string($string, $charlimit)
{
    if(substr($string,$charlimit-1,1) != ' ')
    {
        $string = substr($string,'0',$charlimit);
        $array = explode(' ',$string);
        array_pop($array);
        $new_string = implode(' ',$array);

        return $new_string.'...';
    }
    else
    {   
        return substr($string,'0',$charlimit-1).'...';
    }
}
?>
bleakwind at msn dot com 25-May-2005 05:11
This returns the portion of str specified by the start and length parameters..
It can performs multi-byte safe on number of characters. like mb_strcut() ...

Note:
1.Use it like this bite_str(string str, int start, int length [,byte of on
string]);
2.First character's position is 0. Second character position is 1, and so on...
3.$byte is one character length of your encoding, For example: utf-8 is "3",
gb2312 and big5 is "2"...you can use the function strlen() get it...
Enjoy it :) ...

--- Bleakwind
QQ:940641
http://www.weaverdream.com

PS:I'm sorry my english is too poor... :(

<?php
// String intercept By Bleakwind
// utf-8:$byte=3 | gb2312:$byte=2 | big5:$byte=2
function bite_str($string, $start, $len, $byte=3)
{
    $str     = "";
    $count   = 0;
    $str_len = strlen($string);
    for ($i=0; $i<$str_len; $i++) {
        if (($count+1-$start)>$len) {
            $str  .= "...";
            break;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count < $start)) {
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count < $start)) {
            $count = $count+2;
            $i     = $i+$byte-1;
        } elseif ((ord(substr($string,$i,1)) <= 128) && ($count >= $start)) {
            $str  .= substr($string,$i,1);
            $count++;
        } elseif ((ord(substr($string,$i,1)) > 128) && ($count >= $start)) {
            $str  .= substr($string,$i,$byte);
            $count = $count+2;
            $i     = $i+$byte-1;
        }
    }
    return $str;
}

// Test
$str = "123456   ֽ 123456      123456        ";
for($i=0;$i<30;$i++){
    echo "<br>".bite_str($str,$i,20);   
}
?>
fanfatal at fanfatal dot pl 17-May-2005 06:45
Hmm ... this is a script I wrote, whitch is very similar to substr, but it
isn't takes html and bbcode for counting and it takes portion of string and
show avoided (html & bbcode) tags too ;]
Specially usefull for show part of serach result included html and bbcode tags

<?php

/**
 * string csubstr ( string string, int start [, int length] )
 *
 * @author FanFataL
 * @param string string
 * @param int start
 * @param [int length]
 * @return string
 */
function csubstr($string, $start, $length=false) {
    $pattern = '/(\[\w+[^\]]*?\]|\[\/\w+\]|<\w+[^>]*?>|<\/\w+>)/i';
    $clean = preg_replace($pattern, chr(1), $string);
    if(!$length)
        $str = substr($clean, $start);
    else {
        $str = substr($clean, $start, $length);
        $str = substr($clean, $start, $length + substr_count($str, chr(1)));
    }
    $pattern = str_replace(chr(1),'(.*?)',preg_quote($str));
    if(preg_match('/'.$pattern.'/is', $string, $matched))
        return $matched[0];
    return $string;
}

?>

Using this is similar to simple substr.

Greatings ;]
...
woutermb at gmail dot com 21-Mar-2005 07:19
Well this is a script I wrote, what it does is chop up long words with
malicious meaning into several parts. This way, a chat in a table will not get
stretched anymore.

<?php

function text($string,$limit=20,$chop=10){

$text = explode(" ",$string);
while(list($key, $value) = each($text)){
    $length = strlen($value);
    if($length >=20){
        for($i=0;$i<=$length;$i+=10){
            $new .= substr($value, $i, 10);
            $new .= " ";
        }
         $post .= $new;
    }
    elseif($length <=15){
        $post .= $value;
    }
    $post .= " ";
}
return($post);
}

// for example, this would return:
$output = text("Well this text doesn't get cut up, yet
thisssssssssssssssssssssssss one does.", 10, 5);

echo($output); // "Well this text doesn't get cup up, yet thiss sssss sssss
sssss sssss sss one does."
?>

I hope it was useful.. :)
steve at unicycle dot co dot nz 14-Mar-2005 05:34
To quickly trim an optional trailing slash off the end of a path name:

if (substr( $path, -1 ) == '/') $path = substr( $path, 0, -1 );
Matias from Argentina 24-Feb-2005 08:55
Hello,
Here you are a function to format your
numeric strings. Enjoy it.

<?php
function str_format_number($String, $Format){
    if ($Format == '') return $String;
    if ($String == '') return $String;

    $Result = '';
    $FormatPos = 0;
    $StringPos = 0;
    While ((strlen($Format) - 1) >= $FormatPos){
        //If its a number => stores it
        if (is_numeric(substr($Format, $FormatPos, 1))){
            $Result .= substr($String, $StringPos, 1);
            $StringPos++;
        //If it is not a number => stores the caracter
        } Else {
            $Result .= substr($Format, $FormatPos, 1);
        }
        //Next caracter at the mask.
        $FormatPos++;
    }

    return $Result;
}

// For phone numbers at Buenos Aires, Argentina
// Example 1:
    $String = "541143165500";
    $Format = "+00 00 0000.000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 2:
    $String = "541143165500";
    $Format = "+00 00 0000.0000000";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.5500"

// Example 3:
    $String = "541143165500";
    $Format = "+00 00 0000.000 a";
    Echo str_format_number($String, $Format); // Returns "+54 11 4316.550 a"

?>

How it works explanation:

str_format_number($String, $Format)
Spects two parameters $String and $Format,
both should be strings.
$String: coulbe any kind of data type,
but it's oriented to numeric string, like
phone numbers.
$Format: should be a conjunction between
numbers (any one) and others caracters.

str_format_number takes each caracter
of $Format, if it isn't a number stores
it to be returned later, but if it is a
number takes the caracter of $String
placed in the position corresponding to
the amount of numbers in $Format so far
starting from zero.

If $Format has less numbers than $string
caracters the rest of the caracters at
the end of $String should be ignored.
If $Format has more numbers than $string
caracters the no caracter will be used,
so those will be ignored.
crashmanATgreenbomberDOTcom 22-Feb-2005 02:34
A fellow coder pointed out to me that $string{-n} will no longer return the
character at postion -n is. Use $string{strlen($string) - n) instead.
andrewmclagan at gmail dot com 20-Feb-2005 09:58
Hi there here is a little function i wrote to limit the number of lines in a
string, i could not find anything else like it out there   

<?php
function lineLimiter ($string = "", $max_lines = 1) {
   
         $string = ereg_replace("\n", "##", $string);
   
         $totalLines = (substr_count($string, '##') + 1);
   
         $string = strrev($string);
   
         $stringLength = strlen($string);
                    
         while ($totalLines > $max_lines) {
             $pos = 0;
             $pos = strpos ( $string, "##") + 2;
             //$pos = $pos - $stringLength;
             $string = substr($string, $pos);
             $totalLines--;   
         }
         $string = strrev($string);
          $string = ereg_replace("##", "\n", $string);
         return $string;
    }
?>
vitalic#pisem.net 15-Dec-2004 11:26
Split $string after each $pos, by $space
Example: <?php spaceStr('1836254','-',3); ?>
Would return '183-625-4';

<?php
function spaceStr($string,$space,$pos)
{
       $cpos=$pos;
       while ($cpos<strlen($string))
       {
         $string=substr($string,0,$cpos).$space.substr($string,$cpos);
         $cpos+=strlen($space)+$pos;
       };
       return $string;
}

?>
kovacsendre at no_spam_thanks_kfhik dot hungary 02-Nov-2004 03:38
Here are the replacement functions for substr() and strlen() I use when support
for html entities is required:

<?php

function html_strlen($str) {
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE);
  return count($chars);
}

function html_substr($str, $start, $length = NULL) {
  if ($length === 0) return ""; //stop wasting our time ;)

  //check if we can simply use the built-in functions
  if (strpos($str, '&') === false) { //No entities. Use built-in functions
    if ($length === NULL)
      return substr($str, $start);
    else
      return substr($str, $start, $length);
  }

  // create our array of characters and html entities
  $chars = preg_split('/(&[^;\s]+;)|/', $str, -1, PREG_SPLIT_NO_EMPTY |
PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_OFFSET_CAPTURE);
  $html_length = count($chars);

  // check if we can predict the return value and save some processing time
  if (
       ($html_length === 0) /* input string was empty */ or
       ($start >= $html_length) /* $start is longer than the input string */ or
       (isset($length) and ($length <= -$html_length)) /* all characters would
be omitted */
     )
    return "";

  //calculate start position
  if ($start >= 0) {
    $real_start = $chars[$start][1];
  } else { //start'th character from the end of string
    $start = max($start,-$html_length);
    $real_start = $chars[$html_length+$start][1];
  }

  if (!isset($length)) // no $length argument passed, return all remaining
characters
    return substr($str, $real_start);
  else if ($length > 0) { // copy $length chars
    if ($start+$length >= $html_length) { // return all remaining characters
      return substr($str, $real_start);
    } else { //return $length characters
      return substr($str, $real_start, $chars[max($start,0)+$length][1] -
$real_start);
    }
  } else { //negative $length. Omit $length characters from end
      return substr($str, $real_start, $chars[$html_length+$length][1] -
$real_start);
  }

}

?>

Example:
 
html_substr("&aacute;bla&#54;bla", 1, 4) -> "bla&#54;"

If you happen to find any bugs, please let me know.
lmak at NOSPAM dot iti dot gr 17-Aug-2004 06:59
Regarding windix's function to handle UTF-8 strings: one can use the "u"
modifier on the regular expression so that the pattern string is treated as
UTF-8 (available from PHP 4.1.0 or greater on Unix and from PHP 4.2.3 on
win32). This way the function works for other encodings too (like Greek for
example).

The modified function would read like this:

<?php
function utf8_substr($str,$start)
{
   preg_match_all("/./u", $str, $ar);

   if(func_num_args() >= 3) {
       $end = func_get_arg(2);
       return join("",array_slice($ar[0],$start,$end));
   } else {
       return join("",array_slice($ar[0],$start));
   }
}
?>
biohazard at online dot ge 15-May-2004 08:55
may be by following functions will be easyer to extract the
needed sub parts from a string:

 after ('@', 'biohazard@online.ge');
 returns 'online.ge'
 from the first occurrence of '@'

 before ('@', 'biohazard@online.ge');
 returns 'biohazard'
 from the first occurrence of '@'

 between ('@', '.', 'biohazard@online.ge');
 returns 'online'
 from the first occurrence of '@'

 after_last ('[', 'sin[90]*cos[180]');
 returns '180]'
 from the last occurrence of '['

 before_last ('[', 'sin[90]*cos[180]');
 returns 'sin[90]*cos['
 from the last occurrence of '['

 between_last ('[', ']', 'sin[90]*cos[180]');
 returns '180'
 from the last occurrence of '['
 

<?php

    function after ($this, $inthat)
    {
        if (!is_bool(strpos($inthat, $this)))
        return substr($inthat, strpos($inthat,$this)+strlen($this));
    };

    function after_last ($this, $inthat)
    {
        if (!is_bool(strrevpos($inthat, $this)))
        return substr($inthat, strrevpos($inthat, $this)+strlen($this));
    };

    function before ($this, $inthat)
    {
        return substr($inthat, 0, strpos($inthat, $this));
    };

    function before_last ($this, $inthat)
    {
        return substr($inthat, 0, strrevpos($inthat, $this));
    };

    function between ($this, $that, $inthat)
    {
     return before($that, after($this, $inthat));
    };

    function between_last ($this, $that, $inthat)
    {
     return after_last($this, before_last($that, $inthat));
    };

    // USES
    function strrevpos($instr, $needle)
    {
        $rev_pos = strpos (strrev($instr), strrev($needle));
        if ($rev_pos===false) return false;
        else return strlen($instr) - $rev_pos - strlen($needle);
    };

?>
phplist at boonedocks dot net 28-Aug-2003 08:39
If 'start' is negative and greater than the length of the string, PHP seems to
return the first 'length' characters of the string. For example, substr
('test',-10,1) returns 't'.
06-Jul-2003 12:39
If you want to substring the middle of a string with another and keep the words
intact:

<?php
/**
 * Reduce a string by the middle, keeps whole words together
 *
 * @param string $string
 * @param int $max (default 50)
 * @param string $replacement (default [...])
 * @return string
 * @author david at ethinkn dot com
 * @author loic at xhtml dot ne
 * @author arne dot hartherz at gmx dot net
 */

function strMiddleReduceWordSensitive ($string, $max = 50, $rep = '[...]') {
    $strlen = strlen($string);

    if ($strlen <= $max)
        return $string;

    $lengthtokeep = $max - strlen($rep);
    $start = 0;
    $end = 0;

    if (($lengthtokeep % 2) == 0) {
        $start = $lengthtokeep / 2;
        $end = $start;
    } else {
        $start = intval($lengthtokeep / 2);
        $end = $start + 1;
    }

    $i = $start;
    $tmp_string = $string;
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i) . $rep;
            $return = $tmp_string;
        }
        $i++;
    }

    $i = $end;
    $tmp_string = strrev ($string);
    while ($i < $strlen) {
        if ($tmp_string[$i] == ' ') {
            $tmp_string = substr($tmp_string, 0, $i);
            $return .= strrev ($tmp_string);
        }
        $i++;
    }
    return $return;
    return substr($string, 0, $start) . $rep . substr($string, - $end);
}

echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30) . "\n";
// Returns: ABCDEEF GHIJK[...]asdf sadf sad s (33 chrs)
echo strMiddleReduceWordSensitive ('ABCDEEF GHIJK LLKJHKHKJHKL HGHFK
sdfasdfsdafsdf sadf asdf sadf sad s', 30, '...') . "\n";
// Returns: ABCDEEF GHIJK...asdf sadf sad s (32 chrs)
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Thu Feb 24 20:11:57 2011 UTC
配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011
 
add a note add a note User Contributed Notes in_array
Joris Meijer 15-Feb-2011 01:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 04:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 08:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 09:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 06:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
cousinka at gmail dot com 09-Aug-2010 12:44
Here is a function which returns TRUE if a value exists in a multi array or in
a multi object

<?php
function in_multiarray($elem, $array)
    {
        // if the $array is an array or is an object
         if( is_array( $array ) || is_object( $array ) )
         {
             // if $elem is in $array object
             if( is_object( $array ) )
             {
                 $temp_array = get_object_vars( $array );
                 if( in_array( $elem, $temp_array ) )
                     return TRUE;
             }
            
             // if $elem is in $array return true
             if( is_array( $array ) && in_array( $elem, $array ) )
                 return TRUE;
                
            
             // if $elem isn't in $array, then check foreach element
             foreach( $array as $array_element )
             {
                 // if $array_element is an array or is an object call the
in_multiarray function to this element
                 // if in_multiarray returns TRUE, than return is in array,
else check next element
                 if( ( is_array( $array_element ) || is_object( $array_element
) ) && $this->in_multiarray( $elem, $array_element ) )
                 {
                     return TRUE;
                     exit;
                 }
             }
         }
        
         // if isn't in array return FALSE
         return FALSE;
    }
?>
Willian Gustavo Veiga 16-Jun-2010 02:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 06:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 03:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 14-Feb-2010 12:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 10:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 11:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 07:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 11:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 07:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 11:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 05:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 07:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 10:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 01:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 12:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 09:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 03:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 09:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 30-Oct-2008 05:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 09:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 07:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 03:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 09:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 11:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 07:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 10:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 05:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 21-May-2007 03:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 06:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 12:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 09-Apr-2006 03:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 03:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 02:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
14-Jan-2006 05:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 09:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 02:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 12:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 08-Jan-2003 01:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 02:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 10-Aug-2002 02:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 10:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 03:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Feb 23 20:11:19 2011 UTC
]] )

array_keys() は、配列 input から全てのキー (数値および文字列) を返します。

オプション search_value が指定された場合、指定した値に関するキーのみが返されま
す。指定されない場合は、 input から全てのキーが返されます。

パラメータ

input

    返すキーを含む配列。

search_value

    指定した場合は、これらの値を含むキーのみを返します。

strict

    検索時に厳密な比較 (===) を行うかどうか。

返り値

input のすべてのキーを配列で返します。

変更履歴

バージョン                説明
5.0.0      strict パラメータが追加されました。

例

例1 array_keys() の例

<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>

上の例の出力は以下となります。

Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)

参考

  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す



array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011
 
add a note add a note User Contributed Notes array_keys
rarioj at gmail dot com 05-Oct-2009 01:38
Sometimes we want to find out the last added numerical key right after we use "
array_push($array, $value) " or " $array[] = $value ". This can be achieved by
calling:

<?php
return array_pop(array_keys($array));
?>
ferrerna at gmail dot com 23-Jan-2009 05:14
Here's a function I needed to collapse an array, in my case from a database
query.  It takes an array that contains key-value pairs and returns an array
where they are actually the key and value.

<?php

function array_collapse($arr, $x, $y) {
    $carr = array();
    while ($el = current($arr)) {
        $carr[ $el[$x] ] = $el[$y];
        next($arr);
    }
    return $carr;
}

?>

Example usage (pseudo-database code):

<?php

$query = db_query('SELECT name, value FROM properties');

$result = db_returnAll($query);

/* This will return an array like so:

[
   ['name' -> 'color', 'value' -> 'blue'],
   ['name' -> 'style', 'value' -> 'wide-format'],
   ['name' -> 'weight', 'value' -> 3.6],
   ['name' -> 'name', 'value' -> 'Waerdthing']
]

*/

$propArr = array_collapse($result, 'name', 'value');

/* Now this array looks like:

[
   ['color' -> 'blue'],
   ['style' -> 'wide-format'],
   ['weight' -> 3.6],
   ['name' -> 'Waerdthing'],

*/

?>

I found this handy for using with json_encode and am using it for my project
http://squidby.com
nodarinodo at mail dot ru 03-Dec-2008 07:35
<?php
    //It's a way to get keys from values )
    $es = array("is My FullName"=>"nodar chkuaselidze (nodarinodo)", "You Are"
=> "I don't know", "Is My Friend" => "ruxadze");
    foreach(array_values($es) as $ess){
        echo $ess." =>";
           
    for($i =0; $i < count(array_keys($es, $ess)); $i++){
            echo reset(array_keys($es, $ess))."<BR>";
        } }
?>
neil at 11 out of 10 24-Jul-2008 07:10
<?php

/*
 * This function will return the keys of elements in the
 * haystack where the value is found in array needle
 */

function array_value_intersect_keys( $array_haystack, $array_needle ){
    $intersected = array_intersect( $array_haystack, $array_needle );
    return array_keys( $intersected );
}

// usage

$array_haystack = array( 1 => 2, 2 => 5, 'red' => 8, 9 => 14 );

$array_needle = array( 2, 8 );

$array_keys_of_intersecting_values = array_value_intersect_keys(
$array_haystack, $array_needle );

print_r( $array_keys_of_intersecting_values );
?>

returns
Array
(
    [0] => 1
    [1] => red
)
edsongarrido at gmail dot com 12-Jun-2008 12:46
/*
*
*This function will return a .csv from a given array inside the $_SESSION
['my_array']
*
*$csv_name -> the name we want the csv has to
*$download -> true or false to download the csv file after done
*
*/

<?php

function createCSV($csv_name, $download) {

        $i = 1;
        $csv = "";

        /* erase the old file, if it exists */
        @unlink("../../csv/" . $csv_name . ".csv");

        /* array is in a session variable
         * this may be useful to avoid many db queries if it is the case */
        $my_array = $_SESSION['my_array'];

        /* how many fields has the given array */
        $fields = count(array_keys($my_array[0]));

        /* extracting the titles from the array */
        foreach(array_keys($my_array[0]) as $title)
        {
            /* array_keys percurs the title of each vector */
            $csv .= $title;

            /* while it is not the last field put a semi-colon ; */
            if($i < $fields)
                $csv .= ";";

            $i++;
        }

        /* insert an empty line to better visualize the csv */
        $csv .= chr(10).chr(13);
                $csv .= chr(10).chr(13);

        /* get the values from the extracted keys */
        foreach (array_keys($my_array) as $tipo)
        {

            $i = 1;

            foreach(array_keys($my_array[$tipo]) as $sub)
            {

                $csv .= $my_array[$tipo][$sub];

                if ($i < $fields)
                    $csv .= ";";

                $i++;
            }

            $csv .= chr(10).chr(13);

        }

        /* export the csv */
        $export_csv=fopen("../../csv/". $csv_name .".csv", "w+");
        fwrite($export_csv, $csv);
        fclose($export_csv);

        /* download the csv */
        if ($download == true)
            header('Location:' . "../../csv/" . $csv_name . ".csv");

        exit();

    }

?>
Hayley Watson 05-Oct-2007 01:43
An alternative to RQuadling at GMail dot com's array_remove() function:

<?php
function array_remove(array $array, $value, $strict=false)
{
    return array_diff_key($array, array_flip(array_keys($array, $value,
$strict)));
}
?>
RQuadling at GMail dot com 28-Mar-2007 01:31
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
creator at mindcreations dot com 20-Mar-2007 10:12
This function will extract keys from a multidimensional array

<?php
function multiarray_keys($ar) {
           
    foreach($ar as $k => $v) {
        $keys[] = $k;
        if (is_array($ar[$k]))
            $keys = array_merge($keys, multiarray_keys($ar[$k]));
    }
    return $keys;
}
?>

Example code:

<?php
$array = array("color" => array("1stcolor" => "blue", "2ndcolor" => "red",
"3rdcolor" => "green"),
               "size"  => array("small", "medium", "large"));

echo "<pre>";
print_r($array);
echo "</pre>";

echo "<pre>";
print_r(multiarray_keys($array));
echo "</pre>";
?>

Example output:

Array
(
    [color] => Array
        (
            [1stcolor] => blue
            [2ndcolor] => red
            [3rdcolor] => green
        )

    [size] => Array
        (
            [0] => small
            [1] => medium
            [2] => large
        )

)

Array
(
    [0] => color
    [1] => 1stcolor
    [2] => 2ndcolor
    [3] => 3rdcolor
    [4] => size
    [5] => 0
    [6] => 1
    [7] => 2
)
Ray.Paseur sometimes uses GMail 21-Dec-2006 12:38
Replace a key in an associative array, preserving the original order of keys
and elements:

<?php
if (!function_exists('array_combine')) { // ONLY EXISTS IN PHP5
    function array_combine($keys, $values) {
        if (count($keys) != count($values)) {
    return false; }
        foreach($keys as $key) { $array[$key] = array_shift($values); }
    return $array; }   
} // END IF FUNCTION EXISTS

$keys = array_keys($array);
$values = array_values($array);
foreach ($keys as $k => $v) {
    if ($v == "MANAGEMENT FEE CHARGE") { $keys[$k] = "MANAGEMENT FEES"; }
}
$array = array_combine($keys, $values);
?>
jochem 18-Feb-2006 12:13
might be worth noting in the docs that not all associative (string) keys are a
like, output of the follow bit of code demonstrates - might be a handy
introduction to automatic typecasting in php for some people (and save a few
headaches):

<?php
$r = array("0"=>"0","1"=>"1","" =>"2"," "=>"3");
echo 'how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")',"\
n-----------\n";
var_dump($r); print_r($r); var_export($r);
echo "\n-----------\n",'var_dump("0","1",""," ") = ',"\n-----------\n";
var_dump("0","1",""," ");
?>

OUTPUTS:

how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")
-----------
array(4) {
  [0]=>
  string(1) "0"
  [1]=>
  string(1) "1"
  [""]=>
  string(1) "2"
  [" "]=>
  string(1) "3"
}
Array
(
    [0] => 0
    [1] => 1
    [] => 2
    [ ] => 3
)
array (
  0 => '0',
  1 => '1',
  '' => '2',
  ' ' => '3',
)
-----------
var_dump("0","1",""," ") =
-----------
string(1) "0"
string(1) "1"
string(0) ""
string(1) " "
Sven (bitcetera.com) 19-Dec-2005 02:43
Here's how to get the first key, the last key, the first value or the last
value of a (hash) array without explicitly copying nor altering the original
array:

<?php
  $array = array('first'=>'111', 'second'=>'222', 'third'=>'333');

  // get the first key: returns 'first'
  print array_shift(array_keys($array));

  // get the last key: returns 'third'
  print array_pop(array_keys($array));

  // get the first value: returns '111'
  print array_shift(array_values($array));

  // get the last value: returns '333'
  print array_pop(array_values($array));
?>
vesely at tana dot it 09-Dec-2005 09:56
The position of an element.

One can apply array_keys twice to get the position of an element from its key.
(This is the reverse of the function by cristianDOTzuddas.) E.g., the following
may output "yes, we have bananas at position 0".

<?php
$a = array("banana" => "yellow", "apple" = "red");
$k = get_some_fruit();
if (isset($a[$k]))
{
   list($pos) = array_keys(array_keys($a), $k);
   print "yes, we have {$k}s at position $pos\n";
}
?>

Not amazingly efficient, but I see no better alternative.
ru dot dy at gmx dot net 14-Aug-2005 04:20
I was looking for a function that simply unset a variable amout of values from
a one-dimensional array by key. I ended up with this (returns the array itself
if no further parameter than the array is given, false with no params - does
not change the source array)

usage: array_remove(array $input [, mixed key ...])

<?php

  function array_remove() {
    if ($stack = func_get_args()) {
      $input = array_shift($stack);
      foreach ($stack as $key) {
        unset($input[$key]);
      }
      return $input;
    }
    return false;
  }

?>

Test:

<?php
  $a = array('a'=>'fun', 'b'=>3.14, 'sub'=> array('1', '2', '3'), 'd'=>'what',
'e' => 'xample', 5 => 'x');
  print_r($a);
  print_r(array_remove($a, 'd', 'b', 5, 'sub'));
?>

Output:

Array
(
    [a] => fun
    [b] => 3.14
    [sub] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [d] => what
    [e] => xample
    [5] => x
)
Array
(
    [a] => fun
    [e] => xample
)

Hope this helps someone.
alex [@T] d-sn [D@T] com / Alex Galisteo 07-Aug-2005 09:46
My version of PHP does not support the strict parameter. Moreover, I need a
function that could make other comparsion different than equals and stricktly
equals.

The funcition array_keys_advanced can make the following comparsions: equal,
not equal, strictly greater than, equal or greater than, strictly less than,
equal or less than.

<?php
if (!function_exists('array_keys_advanced')) {
    //{{{ array_keys_advanced
    /**
     * Returns an array with the matching keys as values. A comparsion type can
     * be spcified, even if it should be a strict comparsion or not.
     * Note: It is not recursive.
     *
     * @param    array    $input
     * @param    string   $search_value
     * @param    bool     $strict
     * @param    string   $comparison: {EQ | NEQ | GT | EGT | LT | ELT}
     * @return   Returns an array with the matching keys as values.
     * @author   alex [@T] d-sn [D@T] com // Alex Galisteo
     */
    function array_keys_advanced() {
        $nargs = func_num_args();
        $arr = array();
        $input = null;
        $search_value = null;
        $strict = (bool) false;
        $comparison  = "EQ";
        $comparsion_types = array("EQ", "NEQ", "GT", "EGT", "LT", "ELT");
        switch ($nargs) {
        case 1:
            $input = func_get_arg(0);
            return array_keys($input);
            break;
        case 2:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            return array_keys($input, $search_value);
            break;
        case 3:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion  = "EQ";
            break;
        case 4:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion = strtoupper((string) func_get_arg(3));
            $comparsion = (in_array($comparsion, $comparsion_types))?
                            $comparsion : "EQ";
            break;
        default:
            return $arr;
            break;
        }
        foreach ($input as $key => $val) {
            if ($strict) {
                if ($comparsion == "EQ" && $search_value === $val) {
                    $arr[] = $key;
                }
                elseif ($comparsion == "NEQ" && $search_value !== $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            } else {
                if ($comparsion == "EQ" && $search_value == $val)
                    $arr[] = $key;
                elseif ($comparsion == "NEQ" && $search_value != $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            }
        }
        return $arr;
    }
    //}}}
} //endif function_exists
?>
webmaster [at] baz-x [dot] at 29-Jul-2005 10:43
I was looking for a function that deletes either integer keys or string keys
(needed for my caching).
As I didn't find a function I came up with my own solution.
I didn't find the propiest function to post to so I will post it here, hope you
find it useful.

<?php

function array_extract($array, $extract_type = 1)
{
    foreach ( $array as $key => $value )
    {
        if ( $extract_type == 1 && is_string($key) )
        {
            // delete string keys
            unset($array[$key]);
        }
        elseif ( $extract_type == 2 && is_int($key) )
        {
            // delete integer keys
            unset($array[$key]);
        }
    }

    return $array;
}

?>

You can of course define constants to have a nicer look, I have chosen these:
EXTR_INT = 1; EXTR_STRING = 2
EXTR_INT will return an array where keys are only integer while
EXTR_STRING will return an array where keys are only string

Have fun with it.
sip at email dot ee 22-Aug-2003 12:33
Note, that using array_key_exists() is rather inefficient. The overhead
associated with calling a function makes it slower, than using isset($array
[$key]), instead of array_key_exists($key, $array)
using isset() is usually about 1.3 times faster, according to my tests.
rodrigo at NOSPAM dot dhweb dot com dot br 05-Feb-2003 12:39
[Editor's note: For a complete solution to the printing of complex structures
or hashes, see the PEAR::Var_Dump package: http://pear.php.net/
package-info.php?pacid=103 , use "pear install Var_Dump" to get it]

This function will print all the keys of a multidimensional array in html
tables.
It will help to debug when you don t have control of depths.

<?php
function show_keys($ar){

   echo "<table width='100%' border='1' bordercolor='#6699CC' cellspacing='0'
cellpadding='5'><tr valign='top'>";

      foreach ($ar as $k => $v ) {

         echo "<td align='center' bgcolor='#EEEEEE'>
           <table border='2' cellpadding='3'><tr><td bgcolor='#FFFFFF'><font
face='verdana' size='1'>
              " . $k . "
           </font></td></tr></table>";

           if (is_array($ar[$k])) {
              show_keys ($ar[$k]);
         }

         echo "</td>";

      }

   echo "</tr></table>";

}

// Multidimensional array ->
$arvore = array();
$arvore['1'] = array();
$arvore['1']['1.1'] = array('1.1.1', '1.1.2', '1.1.3');
$arvore['1']['1.2'] = array('1.2.1', '1.2.2', '1.2.3');
$arvore['1']['1.3'] = array('1.3.1', '1.3.2', '1.3.3');
$arvore['2'] = array();
$arvore['2']['2.1'] = array('2.1.1', '2.1.2', '2.1.3');
$arvore['2']['2.2'] = array('2.2.1', '2.2.2', '2.2.3');
$arvore['2']['2.3'] = array('2.3.1', '2.3.2', '2.3.3');
$arvore['3'] = array();
$arvore['3']['3.1'] = array('3.1.1', '3.1.2', '3.1.3');
$arvore['3']['3.2'] = array('3.2.1', '3.2.2', '3.2.3');
$arvore['3']['3.3'] = array('3.3.1', '3.3.2'=>array('3.3.2.1', '3.3.2.2'),
'3.3.3');
// <-

show_keys($arvore);
?>
michielbakker at msn dot com 13-Nov-2002 05:45
If you receive a bunch of variables and like to change most of them (or all of
them for that matter), you can do something like this: (data has been sent to a
page with POST)

<?php
$allKeys = array_keys($HTTP_POST_VARS);

for ($i=0;$i<count($allKeys);$i++)
{
      $$allKeys[$i] = strtoupper($HTTP_POST_VARS[$allKeys[$i]]);
}
?>

This makes caracters (a-z) uppercase. This is just one way to use it, ofcourse.

Hope this helps someone understand the way to use array_keys() or give any
ideas. :)
glennh at webadept dot net 13-Nov-2002 12:03
All the cool notes are gone from the site.

Here's an example of how to get all the variables passed to your program using
the method on this page. This prints them out so you can see what you are
doing.

<?php
while (list($key, $value) = each
(${"HTTP_".$REQUEST_METHOD."_VARS"}))
{
        echo $key." = ".$value." ";
}
?>
jacob at keystreams dot com 21-Aug-2002 06:05
Here is a way to use array_intersect on array keys rather than values:

<?php
$a = array("apple" => "red", "banana" => "yellow");
$z = array("apple" => "green", "peach" => "orange", "banana" => "rotten");

$intersected_keys = array_intersect(array_keys($a), array_keys($z));

print_r($intersected_keys);
?>

This will print:

Array ( [0] => apple [1] => banana )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Feb 23 19:11:41 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011

view this page in

[English             ] Change language
in_array

(PHP 4, PHP 5)

in_array — 配列に値があるかチェックする

説明

bool in_array ( mixed $needle , array $haystack [, bool $strict ] )

needle で haystack を検索します。

パラメータ

needle

    探す値。

        注意:

        needle が文字列の場合、比較の際に大文字小文字は区別されます。

haystack

    配列。

strict

    三番目のパラメータ strict が TRUE に設定された場合、 in_array() は、
    haystack の中の needle の型も確認します。

返り値

配列で needle が見つかった場合に TRUE、それ以外の場合は、FALSE を返します。

変更履歴

バージョン                    説明
4.2.0      needle に配列を使用できるようになりました。

例

例1 in_array() の例

<?php
$os = array("Mac", "NT", "Irix", "Linux");
if (in_array("Irix", $os)) {
    echo "Got Irix";
}
if (in_array("mac", $os)) {
    echo "Got mac";
}
?>

二番目の条件式は失敗します。in_array() は大文字小文字を区別するからです。したが
って次のような出力になります。

Got Irix

例2 strict を指定した in_array() の例

<?php
$a = array('1.10', 12.4, 1.13);

if (in_array('12.4', $a, true)) {
    echo "'12.4' found with strict check\n";
}

if (in_array(1.13, $a, true)) {
    echo "1.13 found with strict check\n";
}
?>

上の例の出力は以下となります。

1.13 found with strict check

例3 needleが配列の場合の in_array()

<?php
$a = array(array('p', 'h'), array('p', 'r'), 'o');

if (in_array(array('p', 'h'), $a)) {
    echo "'ph' was found\n";
}

if (in_array(array('f', 'i'), $a)) {
    echo "'fi' was found\n";
}

if (in_array('o', $a)) {
    echo "'o' was found\n";
}
?>

上の例の出力は以下となります。

  'ph' was found
  'o' was found

参考

  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す
  • isset() - 変数がセットされていること、そして NULL でないことを検査する
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる



key> <extract
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 18 Feb 2011
 
add a note add a note User Contributed Notes in_array
Joris Meijer 15-Feb-2011 01:31
A good option if your array contains objects and you wish to recursively search
it (eg. with in_arrayr), is to use json_encode and json_decode first:

<?php

$array = json_decode(json_encode($array_with_objects), true);

?>

In my opinion this is more elegant than a recursive in_array function which
converts the objects into arrays while searching for a key and/or value.
user at NOSPAM at fullservicead dot com 02-Feb-2011 04:52
After reading all other notes about performance,
I made a little test.

fill an array in a loop with random characters,
shuffle it
search on it using 4 methods.

I tried to have haystack as array and string; hence the strstr.

I tried it on 9, 99, 999, 9999 elements and the results
remain in the same order:

9999 elements

Function :  execution time in miliseconds.

strstr : 1.2994079589844
fast_in_array : 1.0655579566956
isset : 0.99128198623657 //Winner, used from another note here.
in_array : 2.9410798549652

One last detail, I moved my functions around in the script to make sure there
was no memory caching, reiteration op or whatever, it's all the same. in_array
is the slowest and the use of isset($array[$NEEDLE]) the fastest.

I hope it saves somebody else the trouble.
bosdilooda at gmail dot com 21-Jan-2011 08:07
There should be a big red warning sign here because this function behaves in
mysterious ways...

let haystack be an array of integers:

$arr = array(1,2,3,4,5);

let $needle be a string of "2foobar"

then

in_array($needle,$arr)

will return true because string ("2foobar") evaluates to integer (2).
Sabrina 28-Nov-2010 09:29
Here's another way to get around the case-sensitive issue with in_array:

<?php
function in_arrayi($needle, $haystack)
{
    for($h = 0 ; $h < count($haystack) ; $h++)
    {
        $haystack[$h] = strtolower($haystack[$h]);
    }
    return in_array(strtolower($needle),$haystack);
}
?>

This is good for parsing URI's or preventing SQL injection.
ctulek at gmail dot com 30-Aug-2010 06:07
If you have an array like:
$arr = array(0,1,2,3,4,5);

in_array(NULL, $arr) returns true because you have 0 in your array. That is,
in_array does not use === for equal check.
cousinka at gmail dot com 09-Aug-2010 12:44
Here is a function which returns TRUE if a value exists in a multi array or in
a multi object

<?php
function in_multiarray($elem, $array)
    {
        // if the $array is an array or is an object
         if( is_array( $array ) || is_object( $array ) )
         {
             // if $elem is in $array object
             if( is_object( $array ) )
             {
                 $temp_array = get_object_vars( $array );
                 if( in_array( $elem, $temp_array ) )
                     return TRUE;
             }
            
             // if $elem is in $array return true
             if( is_array( $array ) && in_array( $elem, $array ) )
                 return TRUE;
                
            
             // if $elem isn't in $array, then check foreach element
             foreach( $array as $array_element )
             {
                 // if $array_element is an array or is an object call the
in_multiarray function to this element
                 // if in_multiarray returns TRUE, than return is in array,
else check next element
                 if( ( is_array( $array_element ) || is_object( $array_element
) ) && $this->in_multiarray( $elem, $array_element ) )
                 {
                     return TRUE;
                     exit;
                 }
             }
         }
        
         // if isn't in array return FALSE
         return FALSE;
    }
?>
Willian Gustavo Veiga 16-Jun-2010 02:41
I wrote a function that search for a property value of an object in an array of
objects:

<?php
function property_value_in_array($array, $property, $value) {
    $flag = false;

    foreach($array as $object) {
        if(!is_object($object) || !property_exists($object, $property)) {
            return false;       
        }

        if($object->$property == $value) {
            $flag = true;
        }
    }
   
    return $flag;
}

$obj1 = new StdClass();
$obj2 = new StdClass();
$obj3 = new StdClass();

$obj1->name = 'Object 1';
$obj1->age = 12;

$obj2->name = 'Object 2';
$obj2->age = 13;

$obj3->name = 'Object 3';
$obj3->age = 14;

/* It returns true because there is the "14" value in the "age" property of an
object within the array. */
echo property_value_in_array(array($obj1, $obj2, $obj3), 'age', 14);
?>
Svinto 22-May-2010 06:53
in_array() will always return true if a value in the haystack is of type bool
(true).
This always hold except when the needle is of type bool(false).

Code:
<?php
$haystack = array(true);
$needle = "anything except bool(false)";
$result = in_array($needle, $haystack);
var_dump($result); #Will always be true
?>

Solution:
run in_array() with strict set to true.
<?php
in_array($needle, $haystack, true);
?>

Tested on PHP 5.2.6
bogdan AT bogdanconstantinescu DOT com 21-Apr-2010 03:01
If you found yourself in need of a multidimensional array in_array like
function you can use the one below. Works in a fair amount of time

<?php

    function in_multiarray($elem, $array)
    {
        $top = sizeof($array) - 1;
        $bottom = 0;
        while($bottom <= $top)
        {
            if($array[$bottom] == $elem)
                return true;
            else
                if(is_array($array[$bottom]))
                    if(in_multiarray($elem, ($array[$bottom])))
                        return true;
                   
            $bottom++;
        }       
        return false;
    }
?>
jv at vip dot ie 14-Feb-2010 12:46
If you're working with very large 2 dimensional arrays (eg 20,000+ elements)
it's much faster to do this...

<?php
$needle = 'test for this';

$flipped_haystack = array_flip($haystack);

if ( isset($flipped_haystack[$needle]) )
{
  print "Yes it's there!";
}
?>

I had a script that went from 30+ seconds down to 2 seconds (when hunting
through a 50,000 element array 50,000 times).

Remember to only flip it once at the beginning of your code though!
natan dot volkovich at gmail dot com 30-Nov-2009 10:10
If you're trying to find out whether or not at least a single value of an array
matches a value in your haystack then use "array_intersect" instead of
"in_array".

<?php
$needle = array(1,2);
$haystack = array(0,1,2);

echo "in_array: ".(int)in_array($needle, $haystack); // returns 0
echo "array_intersect: ".(int)array_intersect((array)$needle, $haystack); //
returns 1
?>
vladimir at vingrad dot ru 14-Nov-2009 11:14
This function has Problem with UTF-8. To solve this Problem use:

in_array( mb_strtolower($tag, "UTF-8"), $arr)
thomas dot sahlin at gmail dot com 05-Oct-2009 07:53
If you're creating an array yourself and then using in_array to search it,
consider setting the keys of the array and using isset instead since it's much
faster.

<?php

$slow = array('apple', 'banana', 'orange');

if (in_array('banana', $slow))
    print('Found it!');

$fast = array('apple' => 'apple', 'banana' => 'banana', 'orange' => 'orange');

if (isset($fast['banana']))
    print('Found it!');

?>
me at bubjavier dot com 14-Sep-2009 11:15
in case your haystack is undefined or not set:

<?php

$fruitExists = in_array('mango', (array) $_SESSION["fruits"]);

?>

will return false if the haystack is not an array.
robin at robinnixon dot com 25-Jul-2009 07:38
This function is five times faster than in_array(). It uses a binary search and
should be able to be used as a direct replacement:

<?php
function fast_in_array($elem, $array)
{
   $top = sizeof($array) -1;
   $bot = 0;

   while($top >= $bot)
   {
      $p = floor(($top + $bot) / 2);
      if ($array[$p] < $elem) $bot = $p + 1;
      elseif ($array[$p] > $elem) $top = $p - 1;
      else return TRUE;
   }
    
   return FALSE;
}
?>
john at dwarven dot co dot uk 01-Jul-2009 11:34
I just struggled for a while with this, although it may be obvious to others.

If you have an array with mixed type content such as:

<?php

 $ary = array (
   1,
   "John",
   0,
   "Foo",
   "Bar"
 );

?>

be sure to use the strict checking when searching for a string in the array, or
it will match on the 0 int in that array and give a true for all values of
needle that are strings strings.

<?php

var_dump( in_array( 2, $ary ) );

// outputs FALSE

var_dump( in_array( 'Not in there', $ary ) );

// outputs TRUE

var_dump( in_array( 'Not in there', $ary, TRUE ) );

// outputs FALSE

?>
MarkAndrewSlade at gmail dot com 17-Apr-2009 05:46
This function will generate a PHP_NOTICE if you are looking for data of type A
in an array containing data of type B if casting A to B would generate a
PHP_NOTICE.  This may not be obvious.  For example:

<?php

$o = new stdClass;
$a = array(1, 2, $o);
in_array(5, $a);

?>

The output here is:

Notice: Object of class stdClass could not be converted to int in /some/
script.php on line 5
Thingmand 09-Mar-2009 07:58
A little function to use an array of needles:

<?php
function array_in_array($needles, $haystack) {

    foreach ($needles as $needle) {

        if ( in_array($needle, $haystack) ) {
            return true;
        }
    }

    return false;
}
?>
brouwer dot p at gmail dot com 08-Mar-2009 10:55
If made a in_array function that checks if the specified key matches. It works
recursivly so it doesn't matter how deep your input array is.
<?php
  function myInArray($array, $value, $key){
    //loop through the array
    foreach ($array as $val) {
      //if $val is an array cal myInArray again with $val as array input
      if(is_array($val)){
        if(myInArray($val,$value,$key))
          return true;
      }
      //else check if the given key has $value as value
      else{
        if($array[$key]==$value)
          return true;
      }
    }
    return false;
  }
?>
Kelvin J 28-Feb-2009 01:04
For a case-insensitive in_array(), you can use array_map() to avoid a foreach
statement, e.g.:

<?php
    function in_arrayi($needle, $haystack) {
        return in_array(strtolower($needle), array_map('strtolower',
$haystack));
    }
?>
selmand [at] gmail.com 13-Feb-2009 12:38
Removes same text with in_array in a string.

<?

$hizmet="aeg,akai,aeg,arcelik,aeg,arcelik,klima,kombi";

// alots of same stings

$x=explode(",",$hizmet);

$t= array();
$k=0;
for($i=0;$i<sizeof($x);$i++){ // this for remove its
    //echo $x[$i]."\n";
    if(!in_array($x[$i],$t))
    {
        $t[$k]=$x[$i];
        $k++;
    }
   
}

for($i=0;$i<sizeof($t);$i++){ // rebuilding $hizmet strings.
   
    echo $t[$i].",";
   
}

?>
soxred93 at gmail dot com 28-Jan-2009 09:37
Here's a simple little function I wrote that is a case insensitive version of
in_array():

<?php
    function in_arrayi( $needle, $haystack ) {
        $found = false;
        foreach( $haystack as $value ) {
            if( strtolower( $value ) == strtolower( $needle ) ) {
                $found = true;
            }
        }   
        return $found;
    }
?>
jordigirones at gmail dot com 21-Jan-2009 03:54
function similar to in_array but implements LIKE '<string>%'

<?php
   function in_array_like($referencia,$array){
      foreach($array as $ref){
        if (strstr($referencia,$ref)){         
          return true;
        }
      }
      return false;
    }
?>
rhill at xenu-directory dot net 17-Jan-2009 09:05
I found out that in_array will *not* find an associative array within a
haystack of associative arrays in strict mode if the keys were not generated in
the *same order*:

<?php

$needle = array(
    'fruit'=>'banana', 'vegetable'=>'carrot'
    );

$haystack = array(
    array('vegetable'=>'carrot', 'fruit'=>'banana'),
    array('fruit'=>'apple', 'vegetable'=>'celery')
    );

echo in_array($needle, $haystack, true) ? 'true' : 'false';
// Output is 'false'

echo in_array($needle, $haystack) ? 'true' : 'false';
// Output is 'true'

?>

I had wrongly assumed the order of the items in an associative array were
irrelevant, regardless of whether 'strict' is TRUE or FALSE: The order is
irrelevant *only* if not in strict mode.
james dot ellis at gmail dot com 30-Oct-2008 05:17
Be aware of oddities when dealing with 0 (zero) values in an array...

This script:
<?php
$array = array('testing',0,'name');
var_dump($array);
//this will return true
var_dump(in_array('foo', $array));
//this will return false
var_dump(in_array('foo', $array, TRUE));
?>

It seems in non strict mode, the 0 value in the array is evaluating to boolean
FALSE and in_array returns TRUE. Use strict mode to work around this
peculiarity.
This only seems to occur when there is an integer 0 in the array. A string '0'
will return FALSE for the first test above (at least in 5.2.6).
james dot randell at hotmail dot co dot uk 16-Sep-2008 09:54
Small method i built for my Array module, after looking through the manual I
wanted a small compact way of making a wildcard search through an arrays
values, and returning only those that it found.

<?php

    /**
     * Takes a needle and haystack (just like in_array()) and does a wildcard
search on it's values.
     *
     * @param    string        $string        Needle to find
     * @param    array        $array        Haystack to look through
     * @result    array                    Returns the elements that the
$string was found in
     */
    function find ($string, $array = array ())
    {       
        foreach ($array as $key => $value) {
            unset ($array[$key]);
            if (strpos($value, $string) !== false) {
                $array[$key] = $value;
            }
        }       
        return $array;
    }
?>
alishahnovin at hotmail dot com 02-Sep-2008 07:43
Here's a function that does an in_array, but takes wildcards in the needle, and
also can be case sensitive/insensitive...

A few points:
-It doesn't use foreach, but for, which is quicker
-I didn't use regex to search with a wildcard for the reason that the needle
could be unpredictable if it's user-input, and rather than having to escape
metacharacters, I decided it would be easier to do a plain text comparison.
-Needles with wildcards can come in many forms such as:

Str*ng
S*r*ng*
*rng
*i*n*

so a split is being done on that string, and each part is then compared with
the current item. If the first part is not found, the comparison is done, and
we move on. If it IS found, we move on to the next part of the needle, while
chopping off the initial part of the haystack string. This is to ensure that
each comparison of a needle part is looking at the next part of the haystack
string.

For example:

needle: "Bo*bo"
haystack[0] = "Bob is lazy"

On the first pass, when searching "Bo", we then modify the haystack[0] to be:
"b is lazy" so that "bo" is compared with that. Otherwise, we'd be comparing
"bo" with "Bob is lazy", and returning true incorrectly.

I haven't fully tested the function, so let me know if you spot any bugs, or
have any questions.

<?php

function in_wildarray($needle, $haystack, $case_sensitive=true) {
    $is_wild = (strpos($needle,"*")===true)? true : false;
    $needles = ($is_wild)? explode("*", $needle) : array();
    $needle = ($case_sensitive)? $needle : strtolower($needle);
    for($i=0;$i<count($haystack);$i++) {
        $haystack_str = ($case_sensitive)? haystack[$i] : strtolower($haystack
[$i]);
        if ($is_wild) {
            $found = false;
            for($x=0;$x<count($needles);$x++) {
                $needle_part = trim($needles[x]);
                $needle_index = strpos($haystack_str, $needle_part);
                if ($needle_index===false) {
                    $found = false;
                    break; //break out of the loop, because string part is not
found in the haystack string
                } else {
                    $found = true;
                    //chop off the start of the string to the needle_index
                    //so we can be sure that the found items are in the correct
order
                    //and we are avoiding the potential of finding duplicate
characters
                    $haystack_str = substr($haystack_str, 0, $needle_index);
                }
            }
            if ($found) { return true; }
        } elseif (!$is_wild && $haystack_str == $needle) {
            return true;
        }
    }
    return false;
}

?>

As the code is right now, when there are wild cards, it will treat the initial
segment as though it's preceded with a wild card. In other words, the first
segment will be searched, not simply at the beginning of the string, but
anywhere. Because it's a simple fix, I'll leave it to others. :)
crashrox at gmail dot com 21-Jul-2008 03:34
Recursive in array using SPL

<?php
function in_array_recursive($needle, $haystack) {

    $it = new RecursiveIteratorIterator(new RecursiveArrayIterator($haystack));

    foreach($it AS $element) {
        if($element == $needle) {
            return true;
        }
    }

    return false;
}
?>
Martijn Wieringa 19-May-2008 09:20
When using numbers as needle, it gets tricky:

Note this behaviour (3rd statement):

in_array(0, array(42)) = FALSE
in_array(0, array('42')) = FALSE
in_array(0, array('Foo')) = TRUE
in_array('0', array('Foo')) = FALSE
sick949 at hotmail dot com 05-Mar-2008 11:43
A first idea for a function that checks if a text is in a specific column of an
array.
It does not use in_array function because it doesn't check via columns.
Its a test, could be much better. Do not use it without test.

<?php

function in_array_column($text, $column, $array)
{
    if (!empty($array) && is_array($array))
    {
        for ($i=0; $i < count($array); $i++)
        {
            if ($array[$i][$column]==$text || strcmp($array[$i][$column],$text)
==0) return true;
        }
    }
    return false;
}

?>
guitar king 29-Jan-2008 07:52
In PHP 4, the first argument seems not allowed to be an object. In PHP 5, also
objects are allowed as $needle.
f d0t fesser att gmx d0t net 16-Oct-2007 10:20
In case you have to check for unknown or dynamic variables in an array, you can
use the following simple work-around to avoid misleading checks against empty
and zero values (and only these "values"!):

<?php
  in_array($value, $my_array, empty($value) && $value !== '0');
?>

The function empty() is the right choice as it turns to true for all 0, null
and ''.
The '0' value (where empty() returns true as well) has to be excluded manually
(as this is handled by in_array correctly!).

Examples:
<?php
  $val = 0;
  $res = in_array($val, array('2007'));
?>

leads incorrectly to true where

<?php
  $val = 0;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

leads correctly to false (strict check!) while

<?php
  $val = 2007;
  $res = in_array($val, array('2007'), empty($val) && $val !== '0');
?>

still correctly finds the '2007' ($res === true) because it ignores strict
checking for that value.
info at b1g dot de 02-Aug-2007 05:44
Be careful with checking for "zero" in arrays when you are not in strict mode.
in_array(0, array()) == true
in_array(0, array(), true) == false
Quaquaversal 21-May-2007 03:48
A simple function to type less when wanting to check if any one of many values
is in a single array.

<?php
function array_in_array($needle, $haystack) {
    //Make sure $needle is an array for foreach
    if(!is_array($needle)) $needle = array($needle);
    //For each value in $needle, return TRUE if in $haystack
    foreach($needle as $pin)
        if(in_array($pin, $haystack)) return TRUE;
    //Return FALSE if none of the values from $needle are found in $haystack
    return FALSE;
}
?>
Bodo Graumann 16-Mar-2007 06:43
Be careful!

in_array(null, $some_array)
seems to differ between versions

with 5.1.2 it is false
but with 5.2.1 it's true!
musik at krapplack dot de 04-Jun-2006 12:52
I needed a version of in_array() that supports wildcards in the haystack. Here
it is:

<?php
function my_inArray($needle, $haystack) {
    # this function allows wildcards in the array to be searched
    foreach ($haystack as $value) {
        if (true === fnmatch($value, $needle)) {
            return true;
        }
    }
    return false;
}

$haystack = array('*krapplack.de');
$needle = 'www.krapplack.de';

echo my_inArray($needle, $haystack); # outputs "true"
?>

Unfortunately, fnmatch() is not available on Windows or other non-POSIX
compliant systems.

Cheers,
Thomas
rick at fawo dot nl 09-Apr-2006 03:23
Here's another deep_in_array function, but this one has a case-insensitive
option :)
<?
function deep_in_array($value, $array, $case_insensitive = false){
    foreach($array as $item){
        if(is_array($item)) $ret = deep_in_array($value, $item,
$case_insensitive);
        else $ret = ($case_insensitive) ? strtolower($item)==$value : $item==
$value;
        if($ret)return $ret;
    }
    return false;
}
?>
sandrejev at gmail dot com 22-Feb-2006 03:11
Sorry, that deep_in_array() was a bit broken.

<?php
function deep_in_array($value, $array) {
    foreach($array as $item) {
        if(!is_array($item)) {
            if ($item == $value) return true;
            else continue;
        }
       
        if(in_array($value, $item)) return true;
        else if(deep_in_array($value, $item)) return true;
    }
    return false;
}
?>
kitchin 05-Feb-2006 02:52
Here's a gotcha, and another reason to always use strict with this function.

$x= array('this');
$test= in_array(0, $x);
var_dump($test); // true

$x= array(0);
$test= in_array('that', $x);
var_dump($test); // true

$x= array('0');
$test= in_array('that', $x);
var_dump($test); // false

It's hard to think of a reason to use this function *without* strict.

This is important for validating user input from a set of allowed values, such
as from a <select> tag.
14-Jan-2006 05:44
in_arrayr -- Checks if the value is in an array recursively

Description
bool in_array (mixed needle, array haystack)

<?php
function in_arrayr($needle, $haystack) {
        foreach ($haystack as $v) {
                if ($needle == $v) return true;
                elseif (is_array($v)) return in_arrayr($needle, $v);
        }
        return false;
}
// i think it works
?>
adrian foeder 08-Nov-2005 09:21
hope this function may be useful to you, it checks an array recursively (if an
array has sub-array-levels) and also the keys, if wanted:

<?php
function rec_in_array($needle, $haystack, $alsokeys=false)
    {
        if(!is_array($haystack)) return false;
        if(in_array($needle, $haystack) || ($alsokeys && in_array($needle,
array_keys($haystack)) )) return true;
        else {
            foreach($haystack AS $element) {
                $ret = rec_in_array($needle, $element, $alsokeys);
            }
        }
       
        return $ret;
    }
?>
tacone at gmx dot net 03-Aug-2005 02:05
Beware of type conversion!

This snippet will unset every 0 key element form the array, when cycling an
array which contains at least one _num value.
This is because php tries to convert every element of $forbidden_elements to
integer when encountering a numeric index into array.
So $array[0] it's considered equal to (int)'_num'.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements)){               
                unset ($array[$key]);       
            }
}
?>

The following example works, anway you can use strict comparison as well.

<?php
$forbidden_elements=array('_num');
    foreach ($array as $key=>$value){       
        if (in_array($key,$forbidden_elements) && is_string($key)){           
   
                unset ($array[$key]);       
            }
}
?>
Aragorn5551 at gmx dot de 11-Jun-2005 12:26
If you have a multidimensional array filled only with Boolean values like me,
you need to use 'strict', otherwise in_array() will return an unexpected
result.

Example:

<?php
$error_arr = array('error_one' => FALSE, 'error_two' => FALSE, array
('error_three' => FALSE, 'error_four' => FALSE));

if (in_array (TRUE, $error_arr)) {
   echo 'An error occurred';
}
else {
   echo 'No error occurred';
}
?>

This will return 'An error occurred' although theres no TRUE value inside the
array in any dimension. With 'strict' the function will return the correct
result 'No error occurred'.

Hope this helps somebody, cause it took me some time to figure this out.
gordon at kanazawa-gu dot ac dot jp 08-Jan-2003 01:05
case-insensitive version of in_array:

<?php
function is_in_array($str, $array) {
  return preg_grep('/^' . preg_quote($str, '/') . '$/i', $array);
}
?>
pingjuNOSPAM at stud dot NOSPAM dot ntnu dot no 25-Nov-2002 02:56
if the needle is only a part of an element in the haystack, FALSE will be
returned, though the difference maybe only a special char like line feeding (\n
or \r).
tom at orbittechservices dot com 10-Aug-2002 02:17
I searched the general mailing list and found that in PHP versions before 4.2.0
needle was not allowed to be an array.

Here's how I solved it to check if a value is in_array to avoid duplicates;

<?php
$myArray = array(array('p', 'h'), array('p', 'r'));

$newValue = "q";
$newInsert = array('p','q');

$itBeInThere = 0;
foreach ($myArray as $currentValue) {
  if (in_array ($newValue, $currentValue)) {
    $itBeInThere = 1;
  }
if ($itBeInThere != 1) {
  array_unshift ($myArray, $newInsert);
}
?>
one at groobo dot com 07-May-2002 10:14
Sometimes, you might want to search values in array, that does not exist. In
this case php will display nasty warning:
Wrong datatype for second argument in call to in_array() .

In this case, add a simple statement before the in_array function:

<?php
if (sizeof($arr_to_searchin) == 0 || !in_array($value, $arr_to_searchin)) { /
*...*/ }
?>

In this case, the 1st statement will return true, omitting the 2nd one.
jon at gaarsmand dot dk 09-Apr-2002 03:53
If you want to search a multiple array for a value - you can use this function
- which looks up the value in any of the arrays dimensions (like in_array()
does in the first dimension).
Note that the speed is growing proportional with the size of the array - why
in_array is best if you can determine where to look for the value.

Copy & paste this into your code...

<?php
function in_multi_array($needle, $haystack)
{
    $in_multi_array = false;
    if(in_array($needle, $haystack))
    {
        $in_multi_array = true;
    }
    else
    {   
        for($i = 0; $i < sizeof($haystack); $i++)
        {
            if(is_array($haystack[$i]))
            {
                if(in_multi_array($needle, $haystack[$i]))
                {
                    $in_multi_array = true;
                    break;
                }
            }
        }
    }
    return $in_multi_array;
}
?>
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Sat Feb 19 20:12:14 2011 UTC
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 11 Feb 2011

view this page in

[English             ] Change language
array_keys

(PHP 4, PHP 5)

array_keys — 配列のキーすべて、あるいはその一部を返す

説明

array array_keys ( array $input [, mixed $search_value [, bool $strict = false
]] )

array_keys() は、配列 input から全てのキー (数値および文字列) を返します。

オプション search_value が指定された場合、指定した値に関するキーのみが返されま
す。指定されない場合は、 input から全てのキーが返されます。

パラメータ

input

    返すキーを含む配列。

search_value

    指定した場合は、これらの値を含むキーのみを返します。

strict

    検索時に厳密な比較 (===) を行うかどうか。

返り値

input のすべてのキーを配列で返します。

変更履歴

バージョン                説明
5.0.0      strict パラメータが追加されました。

例

例1 array_keys() の例

<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>

上の例の出力は以下となります。

Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)

参考

  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す



array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 11 Feb 2011
 
add a note add a note User Contributed Notes array_keys
rarioj at gmail dot com 05-Oct-2009 01:38
Sometimes we want to find out the last added numerical key right after we use "
array_push($array, $value) " or " $array[] = $value ". This can be achieved by
calling:

<?php
return array_pop(array_keys($array));
?>
ferrerna at gmail dot com 23-Jan-2009 05:14
Here's a function I needed to collapse an array, in my case from a database
query.  It takes an array that contains key-value pairs and returns an array
where they are actually the key and value.

<?php

function array_collapse($arr, $x, $y) {
    $carr = array();
    while ($el = current($arr)) {
        $carr[ $el[$x] ] = $el[$y];
        next($arr);
    }
    return $carr;
}

?>

Example usage (pseudo-database code):

<?php

$query = db_query('SELECT name, value FROM properties');

$result = db_returnAll($query);

/* This will return an array like so:

[
   ['name' -> 'color', 'value' -> 'blue'],
   ['name' -> 'style', 'value' -> 'wide-format'],
   ['name' -> 'weight', 'value' -> 3.6],
   ['name' -> 'name', 'value' -> 'Waerdthing']
]

*/

$propArr = array_collapse($result, 'name', 'value');

/* Now this array looks like:

[
   ['color' -> 'blue'],
   ['style' -> 'wide-format'],
   ['weight' -> 3.6],
   ['name' -> 'Waerdthing'],

*/

?>

I found this handy for using with json_encode and am using it for my project
http://squidby.com
nodarinodo at mail dot ru 03-Dec-2008 07:35
<?php
    //It's a way to get keys from values )
    $es = array("is My FullName"=>"nodar chkuaselidze (nodarinodo)", "You Are"
=> "I don't know", "Is My Friend" => "ruxadze");
    foreach(array_values($es) as $ess){
        echo $ess." =>";
           
    for($i =0; $i < count(array_keys($es, $ess)); $i++){
            echo reset(array_keys($es, $ess))."<BR>";
        } }
?>
neil at 11 out of 10 24-Jul-2008 07:10
<?php

/*
 * This function will return the keys of elements in the
 * haystack where the value is found in array needle
 */

function array_value_intersect_keys( $array_haystack, $array_needle ){
    $intersected = array_intersect( $array_haystack, $array_needle );
    return array_keys( $intersected );
}

// usage

$array_haystack = array( 1 => 2, 2 => 5, 'red' => 8, 9 => 14 );

$array_needle = array( 2, 8 );

$array_keys_of_intersecting_values = array_value_intersect_keys(
$array_haystack, $array_needle );

print_r( $array_keys_of_intersecting_values );
?>

returns
Array
(
    [0] => 1
    [1] => red
)
edsongarrido at gmail dot com 12-Jun-2008 12:46
/*
*
*This function will return a .csv from a given array inside the $_SESSION
['my_array']
*
*$csv_name -> the name we want the csv has to
*$download -> true or false to download the csv file after done
*
*/

<?php

function createCSV($csv_name, $download) {

        $i = 1;
        $csv = "";

        /* erase the old file, if it exists */
        @unlink("../../csv/" . $csv_name . ".csv");

        /* array is in a session variable
         * this may be useful to avoid many db queries if it is the case */
        $my_array = $_SESSION['my_array'];

        /* how many fields has the given array */
        $fields = count(array_keys($my_array[0]));

        /* extracting the titles from the array */
        foreach(array_keys($my_array[0]) as $title)
        {
            /* array_keys percurs the title of each vector */
            $csv .= $title;

            /* while it is not the last field put a semi-colon ; */
            if($i < $fields)
                $csv .= ";";

            $i++;
        }

        /* insert an empty line to better visualize the csv */
        $csv .= chr(10).chr(13);
                $csv .= chr(10).chr(13);

        /* get the values from the extracted keys */
        foreach (array_keys($my_array) as $tipo)
        {

            $i = 1;

            foreach(array_keys($my_array[$tipo]) as $sub)
            {

                $csv .= $my_array[$tipo][$sub];

                if ($i < $fields)
                    $csv .= ";";

                $i++;
            }

            $csv .= chr(10).chr(13);

        }

        /* export the csv */
        $export_csv=fopen("../../csv/". $csv_name .".csv", "w+");
        fwrite($export_csv, $csv);
        fclose($export_csv);

        /* download the csv */
        if ($download == true)
            header('Location:' . "../../csv/" . $csv_name . ".csv");

        exit();

    }

?>
Hayley Watson 05-Oct-2007 01:43
An alternative to RQuadling at GMail dot com's array_remove() function:

<?php
function array_remove(array $array, $value, $strict=false)
{
    return array_diff_key($array, array_flip(array_keys($array, $value,
$strict)));
}
?>
RQuadling at GMail dot com 28-Mar-2007 01:31
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
creator at mindcreations dot com 20-Mar-2007 10:12
This function will extract keys from a multidimensional array

<?php
function multiarray_keys($ar) {
           
    foreach($ar as $k => $v) {
        $keys[] = $k;
        if (is_array($ar[$k]))
            $keys = array_merge($keys, multiarray_keys($ar[$k]));
    }
    return $keys;
}
?>

Example code:

<?php
$array = array("color" => array("1stcolor" => "blue", "2ndcolor" => "red",
"3rdcolor" => "green"),
               "size"  => array("small", "medium", "large"));

echo "<pre>";
print_r($array);
echo "</pre>";

echo "<pre>";
print_r(multiarray_keys($array));
echo "</pre>";
?>

Example output:

Array
(
    [color] => Array
        (
            [1stcolor] => blue
            [2ndcolor] => red
            [3rdcolor] => green
        )

    [size] => Array
        (
            [0] => small
            [1] => medium
            [2] => large
        )

)

Array
(
    [0] => color
    [1] => 1stcolor
    [2] => 2ndcolor
    [3] => 3rdcolor
    [4] => size
    [5] => 0
    [6] => 1
    [7] => 2
)
Ray.Paseur sometimes uses GMail 21-Dec-2006 12:38
Replace a key in an associative array, preserving the original order of keys
and elements:

<?php
if (!function_exists('array_combine')) { // ONLY EXISTS IN PHP5
    function array_combine($keys, $values) {
        if (count($keys) != count($values)) {
    return false; }
        foreach($keys as $key) { $array[$key] = array_shift($values); }
    return $array; }   
} // END IF FUNCTION EXISTS

$keys = array_keys($array);
$values = array_values($array);
foreach ($keys as $k => $v) {
    if ($v == "MANAGEMENT FEE CHARGE") { $keys[$k] = "MANAGEMENT FEES"; }
}
$array = array_combine($keys, $values);
?>
jochem 18-Feb-2006 12:13
might be worth noting in the docs that not all associative (string) keys are a
like, output of the follow bit of code demonstrates - might be a handy
introduction to automatic typecasting in php for some people (and save a few
headaches):

<?php
$r = array("0"=>"0","1"=>"1","" =>"2"," "=>"3");
echo 'how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")',"\
n-----------\n";
var_dump($r); print_r($r); var_export($r);
echo "\n-----------\n",'var_dump("0","1",""," ") = ',"\n-----------\n";
var_dump("0","1",""," ");
?>

OUTPUTS:

how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")
-----------
array(4) {
  [0]=>
  string(1) "0"
  [1]=>
  string(1) "1"
  [""]=>
  string(1) "2"
  [" "]=>
  string(1) "3"
}
Array
(
    [0] => 0
    [1] => 1
    [] => 2
    [ ] => 3
)
array (
  0 => '0',
  1 => '1',
  '' => '2',
  ' ' => '3',
)
-----------
var_dump("0","1",""," ") =
-----------
string(1) "0"
string(1) "1"
string(0) ""
string(1) " "
Sven (bitcetera.com) 19-Dec-2005 02:43
Here's how to get the first key, the last key, the first value or the last
value of a (hash) array without explicitly copying nor altering the original
array:

<?php
  $array = array('first'=>'111', 'second'=>'222', 'third'=>'333');

  // get the first key: returns 'first'
  print array_shift(array_keys($array));

  // get the last key: returns 'third'
  print array_pop(array_keys($array));

  // get the first value: returns '111'
  print array_shift(array_values($array));

  // get the last value: returns '333'
  print array_pop(array_values($array));
?>
vesely at tana dot it 09-Dec-2005 09:56
The position of an element.

One can apply array_keys twice to get the position of an element from its key.
(This is the reverse of the function by cristianDOTzuddas.) E.g., the following
may output "yes, we have bananas at position 0".

<?php
$a = array("banana" => "yellow", "apple" = "red");
$k = get_some_fruit();
if (isset($a[$k]))
{
   list($pos) = array_keys(array_keys($a), $k);
   print "yes, we have {$k}s at position $pos\n";
}
?>

Not amazingly efficient, but I see no better alternative.
ru dot dy at gmx dot net 14-Aug-2005 04:20
I was looking for a function that simply unset a variable amout of values from
a one-dimensional array by key. I ended up with this (returns the array itself
if no further parameter than the array is given, false with no params - does
not change the source array)

usage: array_remove(array $input [, mixed key ...])

<?php

  function array_remove() {
    if ($stack = func_get_args()) {
      $input = array_shift($stack);
      foreach ($stack as $key) {
        unset($input[$key]);
      }
      return $input;
    }
    return false;
  }

?>

Test:

<?php
  $a = array('a'=>'fun', 'b'=>3.14, 'sub'=> array('1', '2', '3'), 'd'=>'what',
'e' => 'xample', 5 => 'x');
  print_r($a);
  print_r(array_remove($a, 'd', 'b', 5, 'sub'));
?>

Output:

Array
(
    [a] => fun
    [b] => 3.14
    [sub] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [d] => what
    [e] => xample
    [5] => x
)
Array
(
    [a] => fun
    [e] => xample
)

Hope this helps someone.
alex [@T] d-sn [D@T] com / Alex Galisteo 07-Aug-2005 09:46
My version of PHP does not support the strict parameter. Moreover, I need a
function that could make other comparsion different than equals and stricktly
equals.

The funcition array_keys_advanced can make the following comparsions: equal,
not equal, strictly greater than, equal or greater than, strictly less than,
equal or less than.

<?php
if (!function_exists('array_keys_advanced')) {
    //{{{ array_keys_advanced
    /**
     * Returns an array with the matching keys as values. A comparsion type can
     * be spcified, even if it should be a strict comparsion or not.
     * Note: It is not recursive.
     *
     * @param    array    $input
     * @param    string   $search_value
     * @param    bool     $strict
     * @param    string   $comparison: {EQ | NEQ | GT | EGT | LT | ELT}
     * @return   Returns an array with the matching keys as values.
     * @author   alex [@T] d-sn [D@T] com // Alex Galisteo
     */
    function array_keys_advanced() {
        $nargs = func_num_args();
        $arr = array();
        $input = null;
        $search_value = null;
        $strict = (bool) false;
        $comparison  = "EQ";
        $comparsion_types = array("EQ", "NEQ", "GT", "EGT", "LT", "ELT");
        switch ($nargs) {
        case 1:
            $input = func_get_arg(0);
            return array_keys($input);
            break;
        case 2:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            return array_keys($input, $search_value);
            break;
        case 3:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion  = "EQ";
            break;
        case 4:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion = strtoupper((string) func_get_arg(3));
            $comparsion = (in_array($comparsion, $comparsion_types))?
                            $comparsion : "EQ";
            break;
        default:
            return $arr;
            break;
        }
        foreach ($input as $key => $val) {
            if ($strict) {
                if ($comparsion == "EQ" && $search_value === $val) {
                    $arr[] = $key;
                }
                elseif ($comparsion == "NEQ" && $search_value !== $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            } else {
                if ($comparsion == "EQ" && $search_value == $val)
                    $arr[] = $key;
                elseif ($comparsion == "NEQ" && $search_value != $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            }
        }
        return $arr;
    }
    //}}}
} //endif function_exists
?>
webmaster [at] baz-x [dot] at 29-Jul-2005 10:43
I was looking for a function that deletes either integer keys or string keys
(needed for my caching).
As I didn't find a function I came up with my own solution.
I didn't find the propiest function to post to so I will post it here, hope you
find it useful.

<?php

function array_extract($array, $extract_type = 1)
{
    foreach ( $array as $key => $value )
    {
        if ( $extract_type == 1 && is_string($key) )
        {
            // delete string keys
            unset($array[$key]);
        }
        elseif ( $extract_type == 2 && is_int($key) )
        {
            // delete integer keys
            unset($array[$key]);
        }
    }

    return $array;
}

?>

You can of course define constants to have a nicer look, I have chosen these:
EXTR_INT = 1; EXTR_STRING = 2
EXTR_INT will return an array where keys are only integer while
EXTR_STRING will return an array where keys are only string

Have fun with it.
sip at email dot ee 22-Aug-2003 12:33
Note, that using array_key_exists() is rather inefficient. The overhead
associated with calling a function makes it slower, than using isset($array
[$key]), instead of array_key_exists($key, $array)
using isset() is usually about 1.3 times faster, according to my tests.
rodrigo at NOSPAM dot dhweb dot com dot br 05-Feb-2003 12:39
[Editor's note: For a complete solution to the printing of complex structures
or hashes, see the PEAR::Var_Dump package: http://pear.php.net/
package-info.php?pacid=103 , use "pear install Var_Dump" to get it]

This function will print all the keys of a multidimensional array in html
tables.
It will help to debug when you don t have control of depths.

<?php
function show_keys($ar){

   echo "<table width='100%' border='1' bordercolor='#6699CC' cellspacing='0'
cellpadding='5'><tr valign='top'>";

      foreach ($ar as $k => $v ) {

         echo "<td align='center' bgcolor='#EEEEEE'>
           <table border='2' cellpadding='3'><tr><td bgcolor='#FFFFFF'><font
face='verdana' size='1'>
              " . $k . "
           </font></td></tr></table>";

           if (is_array($ar[$k])) {
              show_keys ($ar[$k]);
         }

         echo "</td>";

      }

   echo "</tr></table>";

}

// Multidimensional array ->
$arvore = array();
$arvore['1'] = array();
$arvore['1']['1.1'] = array('1.1.1', '1.1.2', '1.1.3');
$arvore['1']['1.2'] = array('1.2.1', '1.2.2', '1.2.3');
$arvore['1']['1.3'] = array('1.3.1', '1.3.2', '1.3.3');
$arvore['2'] = array();
$arvore['2']['2.1'] = array('2.1.1', '2.1.2', '2.1.3');
$arvore['2']['2.2'] = array('2.2.1', '2.2.2', '2.2.3');
$arvore['2']['2.3'] = array('2.3.1', '2.3.2', '2.3.3');
$arvore['3'] = array();
$arvore['3']['3.1'] = array('3.1.1', '3.1.2', '3.1.3');
$arvore['3']['3.2'] = array('3.2.1', '3.2.2', '3.2.3');
$arvore['3']['3.3'] = array('3.3.1', '3.3.2'=>array('3.3.2.1', '3.3.2.2'),
'3.3.3');
// <-

show_keys($arvore);
?>
michielbakker at msn dot com 13-Nov-2002 05:45
If you receive a bunch of variables and like to change most of them (or all of
them for that matter), you can do something like this: (data has been sent to a
page with POST)

<?php
$allKeys = array_keys($HTTP_POST_VARS);

for ($i=0;$i<count($allKeys);$i++)
{
      $$allKeys[$i] = strtoupper($HTTP_POST_VARS[$allKeys[$i]]);
}
?>

This makes caracters (a-z) uppercase. This is just one way to use it, ofcourse.

Hope this helps someone understand the way to use array_keys() or give any
ideas. :)
glennh at webadept dot net 13-Nov-2002 12:03
All the cool notes are gone from the site.

Here's an example of how to get all the variables passed to your program using
the method on this page. This prints them out so you can see what you are
doing.

<?php
while (list($key, $value) = each
(${"HTTP_".$REQUEST_METHOD."_VARS"}))
{
        echo $key." = ".$value." ";
}
?>
jacob at keystreams dot com 21-Aug-2002 06:05
Here is a way to use array_intersect on array keys rather than values:

<?php
$a = array("apple" => "red", "banana" => "yellow");
$z = array("apple" => "green", "peach" => "orange", "banana" => "rotten");

$intersected_keys = array_intersect(array_keys($a), array_keys($z));

print_r($intersected_keys);
?>

This will print:

Array ( [0] => apple [1] => banana )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Wed Feb 16 18:11:37 2011 UTC
Received cookie: COUNTRY=JPN%2C123.50.5.102
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • テキスト処理
  • 文字列
  • String 関数
  • addcslashes
  • addslashes
  • bin2hex
  • chop
  • chr
  • chunk_ split
  • convert_ cyr_ string
  • convert_ uudecode
  • convert_ uuencode
  • count_ chars
  • crc32
  • crypt
  • echo
  • explode
  • fprintf
  • get_ html_ translation_ table
  • hebrev
  • hebrevc
  • html_ entity_ decode
  • htmlentities
  • htmlspecialchars_ decode
  • htmlspecialchars
  • implode
  • join
  • lcfirst
  • levenshtein
  • localeconv
  • ltrim
  • md5_ file
  • md5
  • metaphone
  • money_ format
  • nl_ langinfo
  • nl2br
  • number_ format
  • ord
  • parse_ str
  • print
  • printf
  • quoted_ printable_ decode
  • quoted_ printable_ encode
  • quotemeta
  • rtrim
  • setlocale
  • sha1_ file
  • sha1
  • similar_ text
  • soundex
  • sprintf
  • sscanf
  • str_ getcsv
  • str_ ireplace
  • str_ pad
  • str_ repeat
  • str_ replace
  • str_ rot13
  • str_ shuffle
  • str_ split
  • str_ word_ count
  • strcasecmp
  • strchr
  • strcmp
  • strcoll
  • strcspn
  • strip_ tags
  • stripcslashes
  • stripos
  • stripslashes
  • stristr
  • strlen
  • strnatcasecmp
  • strnatcmp
  • strncasecmp
  • strncmp
  • strpbrk
  • strpos
  • strrchr
  • strrev
  • strripos
  • strrpos
  • strspn
  • strstr
  • strtok
  • strtolower
  • strtoupper
  • strtr
  • substr_ compare
  • substr_ count
  • substr_ replace
  • substr
  • trim
  • ucfirst
  • ucwords
  • vfprintf
  • vprintf
  • vsprintf
  • wordwrap

strtoupper> <strtok
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Feb 2011

view this page in

[English             ] Change language
strtolower

(PHP 4, PHP 5)

strtolower — 文字列を小文字にする

説明

string strtolower ( string $str )

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

Received cookie: LAST_LANG=ja
PHP
downloads | documentation | faq | getting help | mailing lists | licenses |
wiki | reporting bugs | php.net sites | links | conferences | my php.net

search for [                              ] in the [function list             ]
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 11 Feb 2011

view this page in

[English             ] Change language
array_keys

(PHP 4, PHP 5)

array_keys — 配列のキーすべて、あるいはその一部を返す

説明

array array_keys ( array $input [, mixed $search_value [, bool $strict = false
]] )

array_keys() は、配列 input から全てのキー (数値および文字列) を返します。

オプション search_value が指定された場合、指定した値に関するキーのみが返されま
す。指定されない場合は、 input から全てのキーが返されます。

パラメータ

input

    返すキーを含む配列。

search_value

    指定した場合は、これらの値を含むキーのみを返します。

strict

    検索時に厳密な比較 (===) を行うかどうか。

返り値

input のすべてのキーを配列で返します。

変更履歴

バージョン                説明
5.0.0      strict パラメータが追加されました。

例

例1 array_keys() の例

<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>

上の例の出力は以下となります。

Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)

参考

  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す



array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 11 Feb 2011
 
add a note add a note User Contributed Notes array_keys
rarioj at gmail dot com 05-Oct-2009 01:38
Sometimes we want to find out the last added numerical key right after we use "
array_push($array, $value) " or " $array[] = $value ". This can be achieved by
calling:

<?php
return array_pop(array_keys($array));
?>
ferrerna at gmail dot com 23-Jan-2009 05:14
Here's a function I needed to collapse an array, in my case from a database
query.  It takes an array that contains key-value pairs and returns an array
where they are actually the key and value.

<?php

function array_collapse($arr, $x, $y) {
    $carr = array();
    while ($el = current($arr)) {
        $carr[ $el[$x] ] = $el[$y];
        next($arr);
    }
    return $carr;
}

?>

Example usage (pseudo-database code):

<?php

$query = db_query('SELECT name, value FROM properties');

$result = db_returnAll($query);

/* This will return an array like so:

[
   ['name' -> 'color', 'value' -> 'blue'],
   ['name' -> 'style', 'value' -> 'wide-format'],
   ['name' -> 'weight', 'value' -> 3.6],
   ['name' -> 'name', 'value' -> 'Waerdthing']
]

*/

$propArr = array_collapse($result, 'name', 'value');

/* Now this array looks like:

[
   ['color' -> 'blue'],
   ['style' -> 'wide-format'],
   ['weight' -> 3.6],
   ['name' -> 'Waerdthing'],

*/

?>

I found this handy for using with json_encode and am using it for my project
http://squidby.com
nodarinodo at mail dot ru 03-Dec-2008 07:35
<?php
    //It's a way to get keys from values )
    $es = array("is My FullName"=>"nodar chkuaselidze (nodarinodo)", "You Are"
=> "I don't know", "Is My Friend" => "ruxadze");
    foreach(array_values($es) as $ess){
        echo $ess." =>";
           
    for($i =0; $i < count(array_keys($es, $ess)); $i++){
            echo reset(array_keys($es, $ess))."<BR>";
        } }
?>
neil at 11 out of 10 24-Jul-2008 07:10
<?php

/*
 * This function will return the keys of elements in the
 * haystack where the value is found in array needle
 */

function array_value_intersect_keys( $array_haystack, $array_needle ){
    $intersected = array_intersect( $array_haystack, $array_needle );
    return array_keys( $intersected );
}

// usage

$array_haystack = array( 1 => 2, 2 => 5, 'red' => 8, 9 => 14 );

$array_needle = array( 2, 8 );

$array_keys_of_intersecting_values = array_value_intersect_keys(
$array_haystack, $array_needle );

print_r( $array_keys_of_intersecting_values );
?>

returns
Array
(
    [0] => 1
    [1] => red
)
edsongarrido at gmail dot com 12-Jun-2008 12:46
/*
*
*This function will return a .csv from a given array inside the $_SESSION
['my_array']
*
*$csv_name -> the name we want the csv has to
*$download -> true or false to download the csv file after done
*
*/

<?php

function createCSV($csv_name, $download) {

        $i = 1;
        $csv = "";

        /* erase the old file, if it exists */
        @unlink("../../csv/" . $csv_name . ".csv");

        /* array is in a session variable
         * this may be useful to avoid many db queries if it is the case */
        $my_array = $_SESSION['my_array'];

        /* how many fields has the given array */
        $fields = count(array_keys($my_array[0]));

        /* extracting the titles from the array */
        foreach(array_keys($my_array[0]) as $title)
        {
            /* array_keys percurs the title of each vector */
            $csv .= $title;

            /* while it is not the last field put a semi-colon ; */
            if($i < $fields)
                $csv .= ";";

            $i++;
        }

        /* insert an empty line to better visualize the csv */
        $csv .= chr(10).chr(13);
                $csv .= chr(10).chr(13);

        /* get the values from the extracted keys */
        foreach (array_keys($my_array) as $tipo)
        {

            $i = 1;

            foreach(array_keys($my_array[$tipo]) as $sub)
            {

                $csv .= $my_array[$tipo][$sub];

                if ($i < $fields)
                    $csv .= ";";

                $i++;
            }

            $csv .= chr(10).chr(13);

        }

        /* export the csv */
        $export_csv=fopen("../../csv/". $csv_name .".csv", "w+");
        fwrite($export_csv, $csv);
        fclose($export_csv);

        /* download the csv */
        if ($download == true)
            header('Location:' . "../../csv/" . $csv_name . ".csv");

        exit();

    }

?>
Hayley Watson 05-Oct-2007 01:43
An alternative to RQuadling at GMail dot com's array_remove() function:

<?php
function array_remove(array $array, $value, $strict=false)
{
    return array_diff_key($array, array_flip(array_keys($array, $value,
$strict)));
}
?>
RQuadling at GMail dot com 28-Mar-2007 01:31
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
creator at mindcreations dot com 20-Mar-2007 10:12
This function will extract keys from a multidimensional array

<?php
function multiarray_keys($ar) {
           
    foreach($ar as $k => $v) {
        $keys[] = $k;
        if (is_array($ar[$k]))
            $keys = array_merge($keys, multiarray_keys($ar[$k]));
    }
    return $keys;
}
?>

Example code:

<?php
$array = array("color" => array("1stcolor" => "blue", "2ndcolor" => "red",
"3rdcolor" => "green"),
               "size"  => array("small", "medium", "large"));

echo "<pre>";
print_r($array);
echo "</pre>";

echo "<pre>";
print_r(multiarray_keys($array));
echo "</pre>";
?>

Example output:

Array
(
    [color] => Array
        (
            [1stcolor] => blue
            [2ndcolor] => red
            [3rdcolor] => green
        )

    [size] => Array
        (
            [0] => small
            [1] => medium
            [2] => large
        )

)

Array
(
    [0] => color
    [1] => 1stcolor
    [2] => 2ndcolor
    [3] => 3rdcolor
    [4] => size
    [5] => 0
    [6] => 1
    [7] => 2
)
Ray.Paseur sometimes uses GMail 21-Dec-2006 12:38
Replace a key in an associative array, preserving the original order of keys
and elements:

<?php
if (!function_exists('array_combine')) { // ONLY EXISTS IN PHP5
    function array_combine($keys, $values) {
        if (count($keys) != count($values)) {
    return false; }
        foreach($keys as $key) { $array[$key] = array_shift($values); }
    return $array; }   
} // END IF FUNCTION EXISTS

$keys = array_keys($array);
$values = array_values($array);
foreach ($keys as $k => $v) {
    if ($v == "MANAGEMENT FEE CHARGE") { $keys[$k] = "MANAGEMENT FEES"; }
}
$array = array_combine($keys, $values);
?>
jochem 18-Feb-2006 12:13
might be worth noting in the docs that not all associative (string) keys are a
like, output of the follow bit of code demonstrates - might be a handy
introduction to automatic typecasting in php for some people (and save a few
headaches):

<?php
$r = array("0"=>"0","1"=>"1","" =>"2"," "=>"3");
echo 'how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")',"\
n-----------\n";
var_dump($r); print_r($r); var_export($r);
echo "\n-----------\n",'var_dump("0","1",""," ") = ',"\n-----------\n";
var_dump("0","1",""," ");
?>

OUTPUTS:

how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")
-----------
array(4) {
  [0]=>
  string(1) "0"
  [1]=>
  string(1) "1"
  [""]=>
  string(1) "2"
  [" "]=>
  string(1) "3"
}
Array
(
    [0] => 0
    [1] => 1
    [] => 2
    [ ] => 3
)
array (
  0 => '0',
  1 => '1',
  '' => '2',
  ' ' => '3',
)
-----------
var_dump("0","1",""," ") =
-----------
string(1) "0"
string(1) "1"
string(0) ""
string(1) " "
Sven (bitcetera.com) 19-Dec-2005 02:43
Here's how to get the first key, the last key, the first value or the last
value of a (hash) array without explicitly copying nor altering the original
array:

<?php
  $array = array('first'=>'111', 'second'=>'222', 'third'=>'333');

  // get the first key: returns 'first'
  print array_shift(array_keys($array));

  // get the last key: returns 'third'
  print array_pop(array_keys($array));

  // get the first value: returns '111'
  print array_shift(array_values($array));

  // get the last value: returns '333'
  print array_pop(array_values($array));
?>
vesely at tana dot it 09-Dec-2005 09:56
The position of an element.

One can apply array_keys twice to get the position of an element from its key.
(This is the reverse of the function by cristianDOTzuddas.) E.g., the following
may output "yes, we have bananas at position 0".

<?php
$a = array("banana" => "yellow", "apple" = "red");
$k = get_some_fruit();
if (isset($a[$k]))
{
   list($pos) = array_keys(array_keys($a), $k);
   print "yes, we have {$k}s at position $pos\n";
}
?>

Not amazingly efficient, but I see no better alternative.
ru dot dy at gmx dot net 14-Aug-2005 04:20
I was looking for a function that simply unset a variable amout of values from
a one-dimensional array by key. I ended up with this (returns the array itself
if no further parameter than the array is given, false with no params - does
not change the source array)

usage: array_remove(array $input [, mixed key ...])

<?php

  function array_remove() {
    if ($stack = func_get_args()) {
      $input = array_shift($stack);
      foreach ($stack as $key) {
        unset($input[$key]);
      }
      return $input;
    }
    return false;
  }

?>

Test:

<?php
  $a = array('a'=>'fun', 'b'=>3.14, 'sub'=> array('1', '2', '3'), 'd'=>'what',
'e' => 'xample', 5 => 'x');
  print_r($a);
  print_r(array_remove($a, 'd', 'b', 5, 'sub'));
?>

Output:

Array
(
    [a] => fun
    [b] => 3.14
    [sub] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [d] => what
    [e] => xample
    [5] => x
)
Array
(
    [a] => fun
    [e] => xample
)

Hope this helps someone.
alex [@T] d-sn [D@T] com / Alex Galisteo 07-Aug-2005 09:46
My version of PHP does not support the strict parameter. Moreover, I need a
function that could make other comparsion different than equals and stricktly
equals.

The funcition array_keys_advanced can make the following comparsions: equal,
not equal, strictly greater than, equal or greater than, strictly less than,
equal or less than.

<?php
if (!function_exists('array_keys_advanced')) {
    //{{{ array_keys_advanced
    /**
     * Returns an array with the matching keys as values. A comparsion type can
     * be spcified, even if it should be a strict comparsion or not.
     * Note: It is not recursive.
     *
     * @param    array    $input
     * @param    string   $search_value
     * @param    bool     $strict
     * @param    string   $comparison: {EQ | NEQ | GT | EGT | LT | ELT}
     * @return   Returns an array with the matching keys as values.
     * @author   alex [@T] d-sn [D@T] com // Alex Galisteo
     */
    function array_keys_advanced() {
        $nargs = func_num_args();
        $arr = array();
        $input = null;
        $search_value = null;
        $strict = (bool) false;
        $comparison  = "EQ";
        $comparsion_types = array("EQ", "NEQ", "GT", "EGT", "LT", "ELT");
        switch ($nargs) {
        case 1:
            $input = func_get_arg(0);
            return array_keys($input);
            break;
        case 2:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            return array_keys($input, $search_value);
            break;
        case 3:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion  = "EQ";
            break;
        case 4:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion = strtoupper((string) func_get_arg(3));
            $comparsion = (in_array($comparsion, $comparsion_types))?
                            $comparsion : "EQ";
            break;
        default:
            return $arr;
            break;
        }
        foreach ($input as $key => $val) {
            if ($strict) {
                if ($comparsion == "EQ" && $search_value === $val) {
                    $arr[] = $key;
                }
                elseif ($comparsion == "NEQ" && $search_value !== $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            } else {
                if ($comparsion == "EQ" && $search_value == $val)
                    $arr[] = $key;
                elseif ($comparsion == "NEQ" && $search_value != $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            }
        }
        return $arr;
    }
    //}}}
} //endif function_exists
?>
webmaster [at] baz-x [dot] at 29-Jul-2005 10:43
I was looking for a function that deletes either integer keys or string keys
(needed for my caching).
As I didn't find a function I came up with my own solution.
I didn't find the propiest function to post to so I will post it here, hope you
find it useful.

<?php

function array_extract($array, $extract_type = 1)
{
    foreach ( $array as $key => $value )
    {
        if ( $extract_type == 1 && is_string($key) )
        {
            // delete string keys
            unset($array[$key]);
        }
        elseif ( $extract_type == 2 && is_int($key) )
        {
            // delete integer keys
            unset($array[$key]);
        }
    }

    return $array;
}

?>

You can of course define constants to have a nicer look, I have chosen these:
EXTR_INT = 1; EXTR_STRING = 2
EXTR_INT will return an array where keys are only integer while
EXTR_STRING will return an array where keys are only string

Have fun with it.
sip at email dot ee 22-Aug-2003 12:33
Note, that using array_key_exists() is rather inefficient. The overhead
associated with calling a function makes it slower, than using isset($array
[$key]), instead of array_key_exists($key, $array)
using isset() is usually about 1.3 times faster, according to my tests.
rodrigo at NOSPAM dot dhweb dot com dot br 05-Feb-2003 12:39
[Editor's note: For a complete solution to the printing of complex structures
or hashes, see the PEAR::Var_Dump package: http://pear.php.net/
package-info.php?pacid=103 , use "pear install Var_Dump" to get it]

This function will print all the keys of a multidimensional array in html
tables.
It will help to debug when you don t have control of depths.

<?php
function show_keys($ar){

   echo "<table width='100%' border='1' bordercolor='#6699CC' cellspacing='0'
cellpadding='5'><tr valign='top'>";

      foreach ($ar as $k => $v ) {

         echo "<td align='center' bgcolor='#EEEEEE'>
           <table border='2' cellpadding='3'><tr><td bgcolor='#FFFFFF'><font
face='verdana' size='1'>
              " . $k . "
           </font></td></tr></table>";

           if (is_array($ar[$k])) {
              show_keys ($ar[$k]);
         }

         echo "</td>";

      }

   echo "</tr></table>";

}

// Multidimensional array ->
$arvore = array();
$arvore['1'] = array();
$arvore['1']['1.1'] = array('1.1.1', '1.1.2', '1.1.3');
$arvore['1']['1.2'] = array('1.2.1', '1.2.2', '1.2.3');
$arvore['1']['1.3'] = array('1.3.1', '1.3.2', '1.3.3');
$arvore['2'] = array();
$arvore['2']['2.1'] = array('2.1.1', '2.1.2', '2.1.3');
$arvore['2']['2.2'] = array('2.2.1', '2.2.2', '2.2.3');
$arvore['2']['2.3'] = array('2.3.1', '2.3.2', '2.3.3');
$arvore['3'] = array();
$arvore['3']['3.1'] = array('3.1.1', '3.1.2', '3.1.3');
$arvore['3']['3.2'] = array('3.2.1', '3.2.2', '3.2.3');
$arvore['3']['3.3'] = array('3.3.1', '3.3.2'=>array('3.3.2.1', '3.3.2.2'),
'3.3.3');
// <-

show_keys($arvore);
?>
michielbakker at msn dot com 13-Nov-2002 05:45
If you receive a bunch of variables and like to change most of them (or all of
them for that matter), you can do something like this: (data has been sent to a
page with POST)

<?php
$allKeys = array_keys($HTTP_POST_VARS);

for ($i=0;$i<count($allKeys);$i++)
{
      $$allKeys[$i] = strtoupper($HTTP_POST_VARS[$allKeys[$i]]);
}
?>

This makes caracters (a-z) uppercase. This is just one way to use it, ofcourse.

Hope this helps someone understand the way to use array_keys() or give any
ideas. :)
glennh at webadept dot net 13-Nov-2002 12:03
All the cool notes are gone from the site.

Here's an example of how to get all the variables passed to your program using
the method on this page. This prints them out so you can see what you are
doing.

<?php
while (list($key, $value) = each
(${"HTTP_".$REQUEST_METHOD."_VARS"}))
{
        echo $key." = ".$value." ";
}
?>
jacob at keystreams dot com 21-Aug-2002 06:05
Here is a way to use array_intersect on array keys rather than values:

<?php
$a = array("apple" => "red", "banana" => "yellow");
$z = array("apple" => "green", "peach" => "orange", "banana" => "rotten");

$intersected_keys = array_intersect(array_keys($a), array_keys($z));

print_r($intersected_keys);
?>

This will print:

Array ( [0] => apple [1] => banana )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Feb 11 20:11:32 2011 UTC
search 

  • PHP Manual
  • 関数リファレンス
  • 変数・データ型関連
  • 配列
  • 配列関数
  • array_ change_ key_ case
  • array_ chunk
  • array_ combine
  • array_ count_ values
  • array_ diff_ assoc
  • array_ diff_ key
  • array_ diff_ uassoc
  • array_ diff_ ukey
  • array_ diff
  • array_ fill_ keys
  • array_ fill
  • array_ filter
  • array_ flip
  • array_ intersect_ assoc
  • array_ intersect_ key
  • array_ intersect_ uassoc
  • array_ intersect_ ukey
  • array_ intersect
  • array_ key_ exists
  • array_ keys
  • array_ map
  • array_ merge_ recursive
  • array_ merge
  • array_ multisort
  • array_ pad
  • array_ pop
  • array_ product
  • array_ push
  • array_ rand
  • array_ reduce
  • array_ replace_ recursive
  • array_ replace
  • array_ reverse
  • array_ search
  • array_ shift
  • array_ slice
  • array_ splice
  • array_ sum
  • array_ udiff_ assoc
  • array_ udiff_ uassoc
  • array_ udiff
  • array_ uintersect_ assoc
  • array_ uintersect_ uassoc
  • array_ uintersect
  • array_ unique
  • array_ unshift
  • array_ values
  • array_ walk_ recursive
  • array_ walk
  • array
  • arsort
  • asort
  • compact
  • count
  • current
  • each
  • end
  • extract
  • in_ array
  • key
  • krsort
  • ksort
  • list
  • natcasesort
  • natsort
  • next
  • pos
  • prev
  • range
  • reset
  • rsort
  • shuffle
  • sizeof
  • sort
  • uasort
  • uksort
  • usort

array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 11 Feb 2011

view this page in

[English             ] Change language
array_keys

(PHP 4, PHP 5)

array_keys — 配列のキーすべて、あるいはその一部を返す

説明

array array_keys ( array $input [, mixed $search_value [, bool $strict = false
]] )

array_keys() は、配列 input から全てのキー (数値および文字列) を返します。

オプション search_value が指定された場合、指定した値に関するキーのみが返されま
す。指定されない場合は、 input から全てのキーが返されます。

パラメータ

input

    返すキーを含む配列。

search_value

    指定した場合は、これらの値を含むキーのみを返します。

strict

    検索時に厳密な比較 (===) を行うかどうか。

返り値

input のすべてのキーを配列で返します。

変更履歴

バージョン                説明
5.0.0      strict パラメータが追加されました。

例

例1 array_keys() の例

<?php
$array = array(0 => 100, "color" => "red");
print_r(array_keys($array));

$array = array("blue", "red", "green", "blue", "blue");
print_r(array_keys($array, "blue"));

$array = array("color" => array("blue", "red", "green"),
               "size"  => array("small", "medium", "large"));
print_r(array_keys($array));
?>

上の例の出力は以下となります。

Array
(
    [0] => 0
    [1] => color
)
Array
(
    [0] => 0
    [1] => 3
    [2] => 4
)
Array
(
    [0] => color
    [1] => size
)

参考

  • array_values() - 配列の全ての値を返す
  • array_key_exists() - 指定したキーまたは添字が配列にあるかどうかを調べる
  • array_search() - 指定した値を配列で検索し、見つかった場合に対応するキーを返
    す



array_map> <array_key_exists
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 11 Feb 2011
 
add a note add a note User Contributed Notes array_keys
rarioj at gmail dot com 05-Oct-2009 01:38
Sometimes we want to find out the last added numerical key right after we use "
array_push($array, $value) " or " $array[] = $value ". This can be achieved by
calling:

<?php
return array_pop(array_keys($array));
?>
ferrerna at gmail dot com 23-Jan-2009 05:14
Here's a function I needed to collapse an array, in my case from a database
query.  It takes an array that contains key-value pairs and returns an array
where they are actually the key and value.

<?php

function array_collapse($arr, $x, $y) {
    $carr = array();
    while ($el = current($arr)) {
        $carr[ $el[$x] ] = $el[$y];
        next($arr);
    }
    return $carr;
}

?>

Example usage (pseudo-database code):

<?php

$query = db_query('SELECT name, value FROM properties');

$result = db_returnAll($query);

/* This will return an array like so:

[
   ['name' -> 'color', 'value' -> 'blue'],
   ['name' -> 'style', 'value' -> 'wide-format'],
   ['name' -> 'weight', 'value' -> 3.6],
   ['name' -> 'name', 'value' -> 'Waerdthing']
]

*/

$propArr = array_collapse($result, 'name', 'value');

/* Now this array looks like:

[
   ['color' -> 'blue'],
   ['style' -> 'wide-format'],
   ['weight' -> 3.6],
   ['name' -> 'Waerdthing'],

*/

?>

I found this handy for using with json_encode and am using it for my project
http://squidby.com
nodarinodo at mail dot ru 03-Dec-2008 07:35
<?php
    //It's a way to get keys from values )
    $es = array("is My FullName"=>"nodar chkuaselidze (nodarinodo)", "You Are"
=> "I don't know", "Is My Friend" => "ruxadze");
    foreach(array_values($es) as $ess){
        echo $ess." =>";
           
    for($i =0; $i < count(array_keys($es, $ess)); $i++){
            echo reset(array_keys($es, $ess))."<BR>";
        } }
?>
neil at 11 out of 10 24-Jul-2008 07:10
<?php

/*
 * This function will return the keys of elements in the
 * haystack where the value is found in array needle
 */

function array_value_intersect_keys( $array_haystack, $array_needle ){
    $intersected = array_intersect( $array_haystack, $array_needle );
    return array_keys( $intersected );
}

// usage

$array_haystack = array( 1 => 2, 2 => 5, 'red' => 8, 9 => 14 );

$array_needle = array( 2, 8 );

$array_keys_of_intersecting_values = array_value_intersect_keys(
$array_haystack, $array_needle );

print_r( $array_keys_of_intersecting_values );
?>

returns
Array
(
    [0] => 1
    [1] => red
)
edsongarrido at gmail dot com 12-Jun-2008 12:46
/*
*
*This function will return a .csv from a given array inside the $_SESSION
['my_array']
*
*$csv_name -> the name we want the csv has to
*$download -> true or false to download the csv file after done
*
*/

<?php

function createCSV($csv_name, $download) {

        $i = 1;
        $csv = "";

        /* erase the old file, if it exists */
        @unlink("../../csv/" . $csv_name . ".csv");

        /* array is in a session variable
         * this may be useful to avoid many db queries if it is the case */
        $my_array = $_SESSION['my_array'];

        /* how many fields has the given array */
        $fields = count(array_keys($my_array[0]));

        /* extracting the titles from the array */
        foreach(array_keys($my_array[0]) as $title)
        {
            /* array_keys percurs the title of each vector */
            $csv .= $title;

            /* while it is not the last field put a semi-colon ; */
            if($i < $fields)
                $csv .= ";";

            $i++;
        }

        /* insert an empty line to better visualize the csv */
        $csv .= chr(10).chr(13);
                $csv .= chr(10).chr(13);

        /* get the values from the extracted keys */
        foreach (array_keys($my_array) as $tipo)
        {

            $i = 1;

            foreach(array_keys($my_array[$tipo]) as $sub)
            {

                $csv .= $my_array[$tipo][$sub];

                if ($i < $fields)
                    $csv .= ";";

                $i++;
            }

            $csv .= chr(10).chr(13);

        }

        /* export the csv */
        $export_csv=fopen("../../csv/". $csv_name .".csv", "w+");
        fwrite($export_csv, $csv);
        fclose($export_csv);

        /* download the csv */
        if ($download == true)
            header('Location:' . "../../csv/" . $csv_name . ".csv");

        exit();

    }

?>
Hayley Watson 05-Oct-2007 01:43
An alternative to RQuadling at GMail dot com's array_remove() function:

<?php
function array_remove(array $array, $value, $strict=false)
{
    return array_diff_key($array, array_flip(array_keys($array, $value,
$strict)));
}
?>
RQuadling at GMail dot com 28-Mar-2007 01:31
If you want to remove a value from an array, then there is no direct mechanism.

The following function uses the array_keys() function to find the key(s) of the
value that you want to remove and then removes the elements for that key.

I've also given some examples and the output.

<?php
/**
  * array array_remove ( array input, mixed search_value [, bool strict] )
  **/
function array_remove(array &$a_Input, $m_SearchValue, $b_Strict = False) {
    $a_Keys = array_keys($a_Input, $m_SearchValue, $b_Strict);
    foreach($a_Keys as $s_Key) {
        unset($a_Input[$s_Key]);
    }
    return $a_Input;
}
?>

Beside scalar variables (integers, floats, strings, boolean), you can also use
arrays as the values you want to remove.

<?php
// Results in array(8, 8.0, '8', '8.0')
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8));

// Results in array(8, 8.0, '8', '8.0', array('8'))
array_remove(array(8, 8.0, '8', '8.0', array(8), array('8')), array(8), True);
?>
creator at mindcreations dot com 20-Mar-2007 10:12
This function will extract keys from a multidimensional array

<?php
function multiarray_keys($ar) {
           
    foreach($ar as $k => $v) {
        $keys[] = $k;
        if (is_array($ar[$k]))
            $keys = array_merge($keys, multiarray_keys($ar[$k]));
    }
    return $keys;
}
?>

Example code:

<?php
$array = array("color" => array("1stcolor" => "blue", "2ndcolor" => "red",
"3rdcolor" => "green"),
               "size"  => array("small", "medium", "large"));

echo "<pre>";
print_r($array);
echo "</pre>";

echo "<pre>";
print_r(multiarray_keys($array));
echo "</pre>";
?>

Example output:

Array
(
    [color] => Array
        (
            [1stcolor] => blue
            [2ndcolor] => red
            [3rdcolor] => green
        )

    [size] => Array
        (
            [0] => small
            [1] => medium
            [2] => large
        )

)

Array
(
    [0] => color
    [1] => 1stcolor
    [2] => 2ndcolor
    [3] => 3rdcolor
    [4] => size
    [5] => 0
    [6] => 1
    [7] => 2
)
Ray.Paseur sometimes uses GMail 21-Dec-2006 12:38
Replace a key in an associative array, preserving the original order of keys
and elements:

<?php
if (!function_exists('array_combine')) { // ONLY EXISTS IN PHP5
    function array_combine($keys, $values) {
        if (count($keys) != count($values)) {
    return false; }
        foreach($keys as $key) { $array[$key] = array_shift($values); }
    return $array; }   
} // END IF FUNCTION EXISTS

$keys = array_keys($array);
$values = array_values($array);
foreach ($keys as $k => $v) {
    if ($v == "MANAGEMENT FEE CHARGE") { $keys[$k] = "MANAGEMENT FEES"; }
}
$array = array_combine($keys, $values);
?>
jochem 18-Feb-2006 12:13
might be worth noting in the docs that not all associative (string) keys are a
like, output of the follow bit of code demonstrates - might be a handy
introduction to automatic typecasting in php for some people (and save a few
headaches):

<?php
$r = array("0"=>"0","1"=>"1","" =>"2"," "=>"3");
echo 'how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")',"\
n-----------\n";
var_dump($r); print_r($r); var_export($r);
echo "\n-----------\n",'var_dump("0","1",""," ") = ',"\n-----------\n";
var_dump("0","1",""," ");
?>

OUTPUTS:

how php sees this array: array("0"=>"0","1"=>"1","" =>"2"," "=>"3")
-----------
array(4) {
  [0]=>
  string(1) "0"
  [1]=>
  string(1) "1"
  [""]=>
  string(1) "2"
  [" "]=>
  string(1) "3"
}
Array
(
    [0] => 0
    [1] => 1
    [] => 2
    [ ] => 3
)
array (
  0 => '0',
  1 => '1',
  '' => '2',
  ' ' => '3',
)
-----------
var_dump("0","1",""," ") =
-----------
string(1) "0"
string(1) "1"
string(0) ""
string(1) " "
Sven (bitcetera.com) 19-Dec-2005 02:43
Here's how to get the first key, the last key, the first value or the last
value of a (hash) array without explicitly copying nor altering the original
array:

<?php
  $array = array('first'=>'111', 'second'=>'222', 'third'=>'333');

  // get the first key: returns 'first'
  print array_shift(array_keys($array));

  // get the last key: returns 'third'
  print array_pop(array_keys($array));

  // get the first value: returns '111'
  print array_shift(array_values($array));

  // get the last value: returns '333'
  print array_pop(array_values($array));
?>
vesely at tana dot it 09-Dec-2005 09:56
The position of an element.

One can apply array_keys twice to get the position of an element from its key.
(This is the reverse of the function by cristianDOTzuddas.) E.g., the following
may output "yes, we have bananas at position 0".

<?php
$a = array("banana" => "yellow", "apple" = "red");
$k = get_some_fruit();
if (isset($a[$k]))
{
   list($pos) = array_keys(array_keys($a), $k);
   print "yes, we have {$k}s at position $pos\n";
}
?>

Not amazingly efficient, but I see no better alternative.
ru dot dy at gmx dot net 14-Aug-2005 04:20
I was looking for a function that simply unset a variable amout of values from
a one-dimensional array by key. I ended up with this (returns the array itself
if no further parameter than the array is given, false with no params - does
not change the source array)

usage: array_remove(array $input [, mixed key ...])

<?php

  function array_remove() {
    if ($stack = func_get_args()) {
      $input = array_shift($stack);
      foreach ($stack as $key) {
        unset($input[$key]);
      }
      return $input;
    }
    return false;
  }

?>

Test:

<?php
  $a = array('a'=>'fun', 'b'=>3.14, 'sub'=> array('1', '2', '3'), 'd'=>'what',
'e' => 'xample', 5 => 'x');
  print_r($a);
  print_r(array_remove($a, 'd', 'b', 5, 'sub'));
?>

Output:

Array
(
    [a] => fun
    [b] => 3.14
    [sub] => Array
        (
            [0] => 1
            [1] => 2
            [2] => 3
        )

    [d] => what
    [e] => xample
    [5] => x
)
Array
(
    [a] => fun
    [e] => xample
)

Hope this helps someone.
alex [@T] d-sn [D@T] com / Alex Galisteo 07-Aug-2005 09:46
My version of PHP does not support the strict parameter. Moreover, I need a
function that could make other comparsion different than equals and stricktly
equals.

The funcition array_keys_advanced can make the following comparsions: equal,
not equal, strictly greater than, equal or greater than, strictly less than,
equal or less than.

<?php
if (!function_exists('array_keys_advanced')) {
    //{{{ array_keys_advanced
    /**
     * Returns an array with the matching keys as values. A comparsion type can
     * be spcified, even if it should be a strict comparsion or not.
     * Note: It is not recursive.
     *
     * @param    array    $input
     * @param    string   $search_value
     * @param    bool     $strict
     * @param    string   $comparison: {EQ | NEQ | GT | EGT | LT | ELT}
     * @return   Returns an array with the matching keys as values.
     * @author   alex [@T] d-sn [D@T] com // Alex Galisteo
     */
    function array_keys_advanced() {
        $nargs = func_num_args();
        $arr = array();
        $input = null;
        $search_value = null;
        $strict = (bool) false;
        $comparison  = "EQ";
        $comparsion_types = array("EQ", "NEQ", "GT", "EGT", "LT", "ELT");
        switch ($nargs) {
        case 1:
            $input = func_get_arg(0);
            return array_keys($input);
            break;
        case 2:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            return array_keys($input, $search_value);
            break;
        case 3:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion  = "EQ";
            break;
        case 4:
            $input = func_get_arg(0);
            $search_value = func_get_arg(1);
            $strict = (bool) func_get_arg(2);
            $comparsion = strtoupper((string) func_get_arg(3));
            $comparsion = (in_array($comparsion, $comparsion_types))?
                            $comparsion : "EQ";
            break;
        default:
            return $arr;
            break;
        }
        foreach ($input as $key => $val) {
            if ($strict) {
                if ($comparsion == "EQ" && $search_value === $val) {
                    $arr[] = $key;
                }
                elseif ($comparsion == "NEQ" && $search_value !== $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            } else {
                if ($comparsion == "EQ" && $search_value == $val)
                    $arr[] = $key;
                elseif ($comparsion == "NEQ" && $search_value != $val)
                    $arr[] = $key;
                elseif ($comparsion == "GT" && $search_value > $val)
                    $arr[] = $key;
                elseif ($comparsion == "EGT" && $search_value >= $val)
                    $arr[] = $key;
                elseif ($comparsion == "LT" && $search_value < $val)
                    $arr[] = $key;
                elseif ($comparsion == "ELT" && $search_value <= $val)
                    $arr[] = $key;
            }
        }
        return $arr;
    }
    //}}}
} //endif function_exists
?>
webmaster [at] baz-x [dot] at 29-Jul-2005 10:43
I was looking for a function that deletes either integer keys or string keys
(needed for my caching).
As I didn't find a function I came up with my own solution.
I didn't find the propiest function to post to so I will post it here, hope you
find it useful.

<?php

function array_extract($array, $extract_type = 1)
{
    foreach ( $array as $key => $value )
    {
        if ( $extract_type == 1 && is_string($key) )
        {
            // delete string keys
            unset($array[$key]);
        }
        elseif ( $extract_type == 2 && is_int($key) )
        {
            // delete integer keys
            unset($array[$key]);
        }
    }

    return $array;
}

?>

You can of course define constants to have a nicer look, I have chosen these:
EXTR_INT = 1; EXTR_STRING = 2
EXTR_INT will return an array where keys are only integer while
EXTR_STRING will return an array where keys are only string

Have fun with it.
sip at email dot ee 22-Aug-2003 12:33
Note, that using array_key_exists() is rather inefficient. The overhead
associated with calling a function makes it slower, than using isset($array
[$key]), instead of array_key_exists($key, $array)
using isset() is usually about 1.3 times faster, according to my tests.
rodrigo at NOSPAM dot dhweb dot com dot br 05-Feb-2003 12:39
[Editor's note: For a complete solution to the printing of complex structures
or hashes, see the PEAR::Var_Dump package: http://pear.php.net/
package-info.php?pacid=103 , use "pear install Var_Dump" to get it]

This function will print all the keys of a multidimensional array in html
tables.
It will help to debug when you don t have control of depths.

<?php
function show_keys($ar){

   echo "<table width='100%' border='1' bordercolor='#6699CC' cellspacing='0'
cellpadding='5'><tr valign='top'>";

      foreach ($ar as $k => $v ) {

         echo "<td align='center' bgcolor='#EEEEEE'>
           <table border='2' cellpadding='3'><tr><td bgcolor='#FFFFFF'><font
face='verdana' size='1'>
              " . $k . "
           </font></td></tr></table>";

           if (is_array($ar[$k])) {
              show_keys ($ar[$k]);
         }

         echo "</td>";

      }

   echo "</tr></table>";

}

// Multidimensional array ->
$arvore = array();
$arvore['1'] = array();
$arvore['1']['1.1'] = array('1.1.1', '1.1.2', '1.1.3');
$arvore['1']['1.2'] = array('1.2.1', '1.2.2', '1.2.3');
$arvore['1']['1.3'] = array('1.3.1', '1.3.2', '1.3.3');
$arvore['2'] = array();
$arvore['2']['2.1'] = array('2.1.1', '2.1.2', '2.1.3');
$arvore['2']['2.2'] = array('2.2.1', '2.2.2', '2.2.3');
$arvore['2']['2.3'] = array('2.3.1', '2.3.2', '2.3.3');
$arvore['3'] = array();
$arvore['3']['3.1'] = array('3.1.1', '3.1.2', '3.1.3');
$arvore['3']['3.2'] = array('3.2.1', '3.2.2', '3.2.3');
$arvore['3']['3.3'] = array('3.3.1', '3.3.2'=>array('3.3.2.1', '3.3.2.2'),
'3.3.3');
// <-

show_keys($arvore);
?>
michielbakker at msn dot com 13-Nov-2002 05:45
If you receive a bunch of variables and like to change most of them (or all of
them for that matter), you can do something like this: (data has been sent to a
page with POST)

<?php
$allKeys = array_keys($HTTP_POST_VARS);

for ($i=0;$i<count($allKeys);$i++)
{
      $$allKeys[$i] = strtoupper($HTTP_POST_VARS[$allKeys[$i]]);
}
?>

This makes caracters (a-z) uppercase. This is just one way to use it, ofcourse.

Hope this helps someone understand the way to use array_keys() or give any
ideas. :)
glennh at webadept dot net 13-Nov-2002 12:03
All the cool notes are gone from the site.

Here's an example of how to get all the variables passed to your program using
the method on this page. This prints them out so you can see what you are
doing.

<?php
while (list($key, $value) = each
(${"HTTP_".$REQUEST_METHOD."_VARS"}))
{
        echo $key." = ".$value." ";
}
?>
jacob at keystreams dot com 21-Aug-2002 06:05
Here is a way to use array_intersect on array keys rather than values:

<?php
$a = array("apple" => "red", "banana" => "yellow");
$z = array("apple" => "green", "peach" => "orange", "banana" => "rotten");

$intersected_keys = array_intersect(array_keys($a), array_keys($z));

print_r($intersected_keys);
?>

This will print:

Array ( [0] => apple [1] => banana )
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Feb 11 20:11:32 2011 UTC

「アルファベット部分」は現在のロケールにより決定されます。つまり、たとえばデフ
ォルトの「C」ロケールである場合は、 A ウムラウト (Ä) のような文字は変換されませ
ん。

パラメータ

str

    入力文字列。

返り値

小文字に変換した文字列を返します。

例

例1 strtolower() の例

<?php
$str = "Mary Had A Little Lamb and She LOVED It So";
$str = strtolower($str);
echo $str; // mary had a little lamb and she loved it so を返します
?>

注意

    注意: この関数はバイナリデータに対応しています。

参考

  • strtoupper() - 文字列を大文字にする
  • ucfirst() - 文字列の最初の文字を大文字にする
  • ucwords() - 文字列の各単語の最初の文字を大文字にする
  • mb_strtolower() - 文字列を小文字にする



strtoupper> <strtok
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Last updated: Fri, 04 Feb 2011
 
add a note add a note User Contributed Notes strtolower
marcin at maydesign dot pl 22-Jun-2010 10:16
strtolower(); doesn't work for polish chars

<?php strtolower("mĄkA"); ?>
will return: mĄka;

the best solution - use mb_strtolower()

<?php mb_strtolower("mĄkA",'UTF-8'); ?>
will return: mąka
sanderwind at gmail dot com 11-Jun-2010 01:03
Very easy way to only make the first character lowercase:

<?php
  function lcfirst($string) {
      $string{0} = strtolower($string{0});
      return $string;
  }
?>
ewertonp at hotmail dot com 30-Sep-2009 06:50
Here is my solution to lowercase strings Latin strings with accents. In this
case I've used Brazilian Portuguese locale:

<?PHP

setlocale(LC_ALL, 'pt_BR');

echo strtolower('ÉÁÇÚÍÑ');
// output: éáçúíñ

echo ucfirst(strtolower('éÁÇÚÍÑ'));
// output: Éáçúíñ

?>
leha_grobov 26-Jun-2009 03:03
the strtolower version to support most amount of languages including russian,
french and so on:

<?php
function strtolower_utf8($string){
  $convert_to = array(
    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o",
"p", "q", "r", "s", "t", "u",
    "v", "w", "x", "y", "z", "à", "á", "â", "ã", "ä", "å", "æ", "ç", "è", "é",
"ê", "ë", "ì", "í", "î", "ï",
    "ð", "ñ", "ò", "ó", "ô", "õ", "ö", "ø", "ù", "ú", "û", "ü", "ý", "а", "б",
"в", "г", "д", "е", "ё", "ж",
    "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х",
"ц", "ч", "ш", "щ", "ъ", "ы",
    "ь", "э", "ю", "я"
  );
  $convert_from = array(
    "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O",
"P", "Q", "R", "S", "T", "U",
    "V", "W", "X", "Y", "Z", "À", "Á", "Â", "Ã", "Ä", "Å", "Æ", "Ç", "È", "É",
"Ê", "Ë", "Ì", "Í", "Î", "Ï",
    "Ð", "Ñ", "Ò", "Ó", "Ô", "Õ", "Ö", "Ø", "Ù", "Ú", "Û", "Ü", "Ý", "А", "Б",
"В", "Г", "Д", "Е", "Ё", "Ж",
    "З", "И", "Й", "К", "Л", "М", "Н", "О", "П", "Р", "С", "Т", "У", "Ф", "Х",
"Ц", "Ч", "Ш", "Щ", "Ъ", "Ъ",
    "Ь", "Э", "Ю", "Я"
  );

  return str_replace($convert_from, $convert_to, $string);
}
?>
Khigashi 22-Jun-2009 09:53
Here is my code, I made because of the accents contained in the latin languages
[like the Portuguese of Brazil =)]

<?php
function deepLower($texto){
    //Letras minúsculas com acentos
    $texto = strtr($texto, "
    ĄĆĘŁŃÓŚŹŻABCDEFGHIJKLMNOPRSTUWYZQ
    XVЁЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ
    ÂÀÁÄÃÊÈÉËÎÍÌÏÔÕÒÓÖÛÙÚÜÇ
    ", "
    ąćęłńóśźżabcdefghijklmnoprstuwyzq
    xvёйцукенгшщзхъфывапролджэячсмитьбю
    âàáäãêèéëîíìïôõòóöûùúüç
    ");
    return strtolower($texto);
}
?>
hans111 {AT} yahoo {DOT} com 13-May-2009 10:02
Could be useful, if mb string library is not available for whatever the reason:
<?php
    function utf8_strtolower($string) {
        return utf8_encode(strtolower(utf8_decode($string)));
    }
##equally.....
    function utf8_ucfirst($string) {
        return utf8_encode(ucfirst(utf8_decode($string)));
    }
#.....etc...
?>
It has worked for me, just make sure you feed the functions with the proper
encoded text (utf-8)

[These functions] only work when translation is between common characters in
ISO 8859-1 and UTF-8, that means they will work well with western languages but
not cyrillic or asian.
coder at bulgaria dot bg 04-Apr-2009 12:08
for cyrillic and UTF 8 use  mb_convert_case

exampel

<?php
$string = "Австралия";
$string = mb_convert_case($string, MB_CASE_LOWER, "UTF-8");
echo $string;

//output is: австралия
?>
ghutix6 at gmail dot com 15-Mar-2009 09:50
Here is function for working polish lower letters (plus example):

<?php
 
  function lower_pl($str)
   {
     return strtr($str, "ĄĆĘŁŃÓŚŹŻABCDEFGHIJKLMNOPRSTUWYZQXV",
"ąćęłńóśźżabcdefghijklmnoprstuwyzqxv");
   }
 
  $word ="ŻÓŁTKO";
  $word = lower_pl ($word);

  echo ("<p>$word</p>");  
 
?>

This will turn into: <p>żółtko</p>.
dbers26 at gmail dot com 07-Jan-2009 09:34
the function  arraytolower will create duplicate entries since keys are case
sensitive. 

<?php
$array = array('test1' => 'asgAFasDAAd', 'TEST2' => 'ASddhshsDGb', 'TeSt3 '=>
'asdasda@asdadadASDASDgh');

$array = arraytolower($array);
?>
/*
Array
(
    [test1] => asgafasdaad
    [TEST2] => ASddhshsDGb
    [TeSt3] => asdasda@asdadadASDASDgh
    [test2] => asddhshsdgb
    [test3] => asdasda@asdadadasdasdgh
)
*/

I prefer this method

<?php
  function arraytolower($array, $include_leys=false) {
   
    if($include_leys) {
      foreach($array as $key => $value) {
        if(is_array($value))
          $array2[strtolower($key)] = arraytolower($value, $include_leys);
        else
          $array2[strtolower($key)] = strtolower($value);
      }
      $array = $array2;
    }
    else {
      foreach($array as $key => $value) {
        if(is_array($value))
          $array[$key] = arraytolower($value, $include_leys);
        else
          $array[$key] = strtolower($value);  
      }
    }
   
    return $array;
  }
?>

which when used like this

<?php
$array = $array = array('test1' => 'asgAFasDAAd', 'TEST2' => 'ASddhshsDGb',
'TeSt3 '=> 'asdasda@asdadadASDASDgh');

$array1 = arraytolower($array);
$array2 = arraytolower($array,true);

print_r($array1);
print_r($array2);
?>

will give output of

Array
(
    [test1] => asgafasdaad
    [TEST2] => asddhshsdgb
    [TeSt3] => asdasda@asdadadasdasdgh
)
Array
(
    [test1] => asgafasdaad
    [test2] => asddhshsdgb
    [test3] => asdasda@asdadadasdasdgh
)
s0urce at anonyme dot com 23-Oct-2008 10:05
for someone who needs - arraytolower:

<?php
function arraytolower($array,$round = 0){
    foreach($array as $key => $value){
        if(is_array($value)) $array[strtolower($key)] =  $this->arraytolower
($value,$round+1);
        else $array[strtolower($key)] = strtolower($value);
        }
        return $array;
    }
?>

converts the whole array in a levels. keys and values.
rodrigoATsistemasparainternetDOTcomDOTbr 10-Sep-2008 01:25
<?php
function fullLower($str){
   // convert to entities
   $subject = htmlentities($str,ENT_QUOTES);
   $pattern = '/&([a-z])(uml|acute|circ';
   $pattern.= '|tilde|ring|elig|grave|slash|horn|cedil|th);/e';
   $replace = "'&'.strtolower('\\1').'\\2'.';'";
   $result = preg_replace($pattern, $replace, $subject);
   // convert from entities back to characters
   $htmltable = get_html_translation_table(HTML_ENTITIES);
   foreach($htmltable as $key => $value) {
      $result = ereg_replace(addslashes($value),$key,$result);
   }
   return(strtolower($result));
}

echo fullLower("Ã É Ò Õ ÚÙÛ");

//results ã é ò õ úùû
//adapted from fullUpper on strtoupper manual
?>
concepton at gmail dot com 11-Aug-2008 04:50
comment to "alexfort at list dot ru"

i think better to use this one

<?php
function strtolower_ru($text) {
    $alfavitlover = array('ё','й','ц','у','к','е','н','г',
'ш','щ','з','х','ъ','ф','ы','в', 'а','п','р','о','л','д','ж','э',
'я','ч','с','м','и','т','ь','б','ю');
    $alfavitupper = array('Ё','Й','Ц','У','К','Е','Н','Г',
'Ш','Щ','З','Х','Ъ','Ф','Ы','В', 'А','П','Р','О','Л','Д','Ж','Э',
'Я','Ч','С','М','И','Т','Ь','Б','Ю');

    return str_replace($alfavitupper,$alfavitlover,strtolower($text));
}
?>
alexfort at list dot ru 04-Aug-2008 12:43
<?php
//solution to the Cyrillic and uft-8
function strtolower_Cyrillic($word) {
    $alfavitlover = explode(',', 'ё,й,ц,у,к,е,н,г,ш,щ,з,х,ъ,ф,ы,
    в,а,п,р,о,л,д,ж,э,я,ч,с,м,и,т,ь,б,ю');
    $alfavitupper = explode(',', 'Ё,Й,Ц,У,К,Е,Н,Г,Ш,Щ,З,Х,Ъ,Ф,Ы,
    В,А,П,Р,О,Л,Д,Ж,Э,Я,Ч,С,М,И,Т,Ь,Б,Ю');
    for($wr=0;$wr<=count($alfavitlover);$wr++) {
        $word = str_replace($alfavitupper[$wr], $alfavitlover[$wr], $word);
    }
    return $word;
}
echo strtolower_Cyrillic('СаШа+МаШа');
?>
tushar at sel2in dot com 28-Jul-2008 03:57
Quick and works for accented characters like á

Tested on linux and win apache+php5

<?php
function strtolower2($s){
    $ln = strlen($s);
    $ln1 = $ln -1;
    for($i=0; $i < $ln; $i++){
        $k = ord(substr($s, $i, 1));
        if($k>=65 && $k <= 90){
            if($i > 0){
                $l1 = substr($s, 0, $i);
            }else{
                $l1 ='';
            }
            $l1 = $l1 . chr($k+32);
            if($i < $ln1){
                $l1 = $l1 . substr($s, $i  + 1);
            }
            $s = $l1;

        }
    }
    return $s;
}
?>
Piotr 10-Mar-2008 09:24
///charset=iso-8859-2
 function strtolower_iso8592($string)
    {
        $low=array("ˇ" => "±", "Ć" => "ć", "Ę" => "ę", "Ł" => "ł", "Ó" => "ó",
"¦" => "¶", "Ż" => "ż", "¬" => "Ľ", "Ń" => "ń");
        return strtolower(strtr($string,$low));
       
       
       
    }
toringe at infostill dot com 25-Oct-2007 10:27
This will work for all languages using ISO8859_1 - more code than many other
but fast.

<?php
function strtolower_iso8859_1($s){
    $i = strlen($s);
    while ($i > 0) {
        --$i;
        $c =ord($s[$i]);
        if (($c & 0xC0) == 0xC0) {
            // two most significante bits on
            if (($c != 215) and ($c != 223)){ // two chars OK as is
                // to get lowercase set 3. most significante bit if needed:
                $s[$i] = chr($c | 0x20);
            }
        }
    }
    return strtolower($s);
}   
?>
patricia at steuerungb dot de 17-Oct-2007 01:29
When you're not sure, how the current locale is set, you might find the
following function useful. It's strtolower for utf8-formatted text:

<?php
function strtolower_utf8($inputString) {
    $outputString    = utf8_decode($inputString);
    $outputString    = strtolower($outputString);
    $outputString    = utf8_encode($outputString);
    return $outputString;
}
?>

It's not suitable for every occasion, but it surely gets in handy. I use it for
lowering German 'Umlauts' like ä and ö.
mr dot blober at gmail dot com 16-Jun-2007 06:39
simple example for Polish characters
<?php
function strtolower_pl($str)
{
return strtr(strtolower($str), '[ĄĆĘŁŃÓŚŹŻ]', '[ąćęłńóśźż]');
}
?>
rok dot kralj at gmail dot com 04-Jun-2007 06:49
Slovenian characters

<?php
    function strtolower_slovenian($string)
    {
        $low=array("Č" => "č", "Ž" => "ž", "Š" => "š");
        return strtolower(strtr($string,$low));
    }

?>
marco at recchiuti dot it 22-May-2007 07:43
Maybe it is not so elegant, but it Works.
It's just a fast Idea and it is what I need.
Any hacks for other characters (link !, ? etc etc) should help.

function RemoveShouting($string)
{
     $frase = "";   
     $astri = explode(".", $string);
     foreach ($astri as $elem)
    $frase .= " ".ucfirst(trim(strtolower($elem))).". ";
      
    return trim($frase);
}

Cheers!
M
mario dot kostelac at gmail dot com 29-Apr-2007 11:42
This is strtolower function for Croatian characters:
function strToLowerCro($string){
    $string = strtolower($string);
    $patterns[0] = '/Č/';
    $patterns[1] = '/Ć/';
    $patterns[2] = '/Ž/';
    $patterns[3] = '/Š/';
    $patterns[4] = '/Đ/';
    $replacements[0] = 'č';
    $replacements[1] = 'ć';
    $replacements[2] = 'ž';
    $replacements[3] = 'š';
    $replacements[4] = 'đ';
    $string = preg_replace($patterns, $replacements, $string);
    return $string;
}
Enjoy...
HQ063 31-Mar-2007 08:37
Similar to last function, but for spanish
    function strtolower_es($string)
    {
        $low=array("Á" => "á", "É" => "é", "Í" => "í", "Ó" => "ó", "Ú" => "ú",
"Ü" => "ü", "Ñ" => "ñ");
        return strtolower(strtr($string,$low));
    }
Dinçer Akay 20-Dec-2006 10:32
Turkish Character
<?php
    function strtolower_tr($string)
    {
        $low=array("Ü" => "ü", "Ö" => "ö", "Ğ" => "ğ", "Ş" => "ş", "Ç" => "ç",
"İ" => "i", "I" => "ı");
        return strtolower(strtr($string,$low));
    }

?>
Enzo_01 at abv dot bg 07-Nov-2006 07:31
two functions what works with cyrilic text

function cyr_strtolower($a) {
        $offset=32;
        $m=array();
        for($i=192;$i<224;$i++)$m[chr($i)]=chr($i+$offset);
        return strtr($a,$m);
}
function cyr_strtoupper($a) {
        $offset=32;
        $m=array();
        for($i=192;$i<224;$i++)$m[chr($i+$offset)]=chr($i);
        return strtr($a,$m);
}

ex:
 cyr_strtoupper("абвгде"); // АБВГДЕ
 cyr_strtolower("АБВГДЕ"); // абвгде
eduardor2k at redr2k dot com 08-Aug-2006 09:34
I changed it a bit and i found that it's better to put everything in lowercase,
and rebuild the text the same way a teacher corrects a text, for now it only
checks that the first letter after a point "." must be
in upper case.

    function RemoveShouting($string)
    {
        $string = strtolower(trim($string));
      
        for($i=0;$i<strlen($string);$i++){
      
            if($i==0){$string[$i] = strtoupper($string[$i]);}
          
            if($string[$i] == "."){
                while($string[$i+1] == " "){
                    $i++;
                }
                $string[$i+1] = strtoupper($string[$i+1]);
                $i++;
            }
        }
      
    return $string;
    }

this function would change:
Hi mi name is PETER. SOME TIMES I FORGOT TO DISABLE CAPS LOCK.

into:

Hi mi name is peter. Some times i forgot to disable caps lock.
spiceee ddotty spiceee com 07-Mar-2006 12:53
If you ever need to strtolower a string with href tags on it and doesn't want
to mess with the characters inside a tag, this is for you.

<?php

function loweroutsidetags ($str) {
    $chars = preg_split ("//", $str);
    $tolower = true;
    $str = '';

    foreach ($chars as $k) {
        if ($k == '<') { $tolower = false; }
        if ($tolower) { $k = strtolower ($k); }
        $str .= $k;   
        if ($k == '>') { $tolower = true; }
    }
    return $str;
}

?>

this:
echo loweroutsidetags('aALalala <a href="?q=CASEsENSITIVINESSinURLSareSTUPID">
')

will give:
aalalala <a href="?q=CASEsENSITIVINESSinURLSareSTUPID">
red at iklanumum dot com 24-Feb-2006 02:43
I've seen this as a common use from script developers, so I would like to share
the alternative way to compare 2 string (CASE INSENSITIVE) without using
strtolower for faster process.

Use strcasecmp() for comparison purpose rather than comparing uncertain case of
2 string variables, because strcasecmp() is approximately 60% faster, moreover,
the greater its string length the greater the difference,!
Ex. case :
$var1;    -> could be a mixture of upper & lower case
$var2;    -> could be a mixture of upper & lower case

To compare whether $var1 is exactly the same as $var2 (case insensitive
manner):
Use -> if (strcasecmp($var1,$var2)==0)
rather than -> if (strtolower($var1)==strtolower($var2))
Patrick 19-Jan-2006 06:57
If you're considering using the below unhtmlentities function from phpContrib,
I would suggest this one as an alternative:

<?php
function unhtmlentities($string)
{
   // replace numeric entities
   $string = preg_replace('~&#x([0-9a-f]+);~ei', 'chr(hexdec("\\1"))',
$string);
   $string = preg_replace('~&#([0-9]+);~e', 'chr(\\1)', $string);
   // replace literal entities
   $trans_tbl = get_html_translation_table(HTML_ENTITIES);
   $trans_tbl = array_flip($trans_tbl);
   return strtr($string, $trans_tbl);
}
?>

That was copied exactly from the html_entity_decode manual page.  It'll handle
numeric entities correctly, the below function won't.
fackelkind 11-Jan-2006 08:03
Nifty? :D

<?php
        function is_lowercase ($str){
                return ($str == strtolower ($str));
        }
?>
mhuggins57 at yahoo dot com 19-Jul-2005 11:04
There's a ucfirst "function" to make the first character uppercase, but there's
no "lcfirst" function to make the first character lowercase.  Here's my own
code to accomplish this.

<?
function lcfirst($str) {
    return strtolower(substr($str, 0, 1)) . substr($str, 1);
}
?>

I found this particularly useful for generating XML nodes with the Reflection
class.
kmcdermott at perimeterinstitute dot ca 08-Dec-2004 09:04
To do case insensitive comparisons in a database, strtolower() can be a quick
and dirty solution:

$Sql = "SELECT * FROM tablename WHERE LOWER(column_name) = '".strtolower
($my_var)."'";
phpContrib (A T) esurfers d o t c o m 24-Sep-2004 06:07
<?php

$b=html_entity_decode(strtolower(htmlentities($a)));

?>

will convert to lowercase most accented vocals
(it will convert   into &Agrave; into &agrave; into  )

This is not fast and clean code, it is just a quick oneliner to help you if you
need a quick way to do it

 

Users with older versions of PHP can use:
$b=unhtmlentities(strtolower(htmlentities($a)));

// with unhtmlentities() as defined in the html_entity_decode() manual page:

function unhtmlentities ($string) {
    $trans_tbl =get_html_translation_table (HTML_ENTITIES );
    $trans_tbl =array_flip ($trans_tbl );
    return strtr ($string ,$trans_tbl );
}
bkimble at ebaseweb dot com 20-Jan-2003 06:39
Heres a small function I wrote to stop people from submitting data that is ALL
IN CAPS SO THEY CAN GET MORE ATTENTION THAT THE REST OF THE USER SUBMITTED DATA
on my website :) If you can make it better, by all means do so. This function
splits up words delimited by a space, and makes only the first letter of each
word capitalized. You can easily modify it so it's only the very first word of
the string. I've also added some exceptions so you don't make things like roman
numerals look like "Iii" or "Xcmii" or something.

function RemoveShouting($string)
{
 $lower_exceptions = array(
        "to" => "1", "a" => "1", "the" => "1", "of" => "1"
 );
 
 $higher_exceptions = array( 
        "I" => "1", "II" => "1", "III" => "1", "IV" => "1", 
        "V" => "1", "VI" => "1", "VII" => "1", "VIII" => "1",
        "XI" => "1", "X" => "1"
 );
 
 $words = split(" ", $string);
 $newwords = array();
 foreach ($words as $word)
 {
  if (!$higher_exceptions[$word]) $word = strtolower($word);
  if (!$lower_exceptions[$word]) $word[0] = strtoupper($word[0]);
  array_push($newwords, $word);
 }
 return join(" ", $newwords);
}

BK
tty01_at_rambler_dot_ru 20-Sep-2002 02:58
Another solution for Double-Byte-Characters, based on iconv() functions, not
sensible to the current locale, works on win32.

/* Converts charset */
function myConvertCharset($str, $from, $to)
{
    if(@function_exists('iconv'))
    {
        return iconv($from, $to, $str);
    }
    else if(@function_exists('recode_string'))
    {
        return recode_string($from . '..'  . $to, $str);
    }
    else
    {
        print "function iconv not exists";
        return $str;
    }
}
/* Converts a string to lowercase */
function my_strtolower($s)
{
    $t = "windows-1251";
    $d = "UTF-8";
    return myConvertCharset(strtolower(myConvertCharset($s, $d, $t)), $t, $d);
}

print my_strtolower("СЛОВО  Uppercase");
13-Sep-2002 12:17
This function is sensible to the current locale, namely the LC_CTYPE category
(the default LC_CTYPE category is set from the LANG environment variable or by
an explicit LC_CTYPE setting, but it can be overriden by the LC_ALL environment
setting). If no locale setting is done in the enironment, the default locale
will be C, for which the lowercase/uppercase conversion is based on the default
character set of the system: this may convert only ASCII letters, or also
ISO-8859-1 letters depending on the system...
add a note add a note

 
show source | credits | sitemap | contact | advertising | mirror sites
Copyright © 2001-2011 The PHP Group
All rights reserved.
This unofficial mirror is operated at: http://php.benscom.com/
Last updated: Fri Feb 11 13:13:25 2011 UTC
